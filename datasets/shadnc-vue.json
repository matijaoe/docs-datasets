[
  {
    "title": "Data Table - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/data-table",
    "html": "Data Table\nData Table\n\nPowerful table and datagrids built using TanStack Table.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nColumns\n\tStatus\tEmail\n\t\nAmount\n\t\n\n\t\nSuccess\n\t\nken99@yahoo.com\n\t\n$316.00\n\t\nOpen menu\n\n\n\t\nSuccess\n\t\nabe45@gmail.com\n\t\n$242.00\n\t\nOpen menu\n\n\n\t\nProcessing\n\t\nmonserrat44@gmail.com\n\t\n$837.00\n\t\nOpen menu\n\n\n\t\nSuccess\n\t\nsilas22@gmail.com\n\t\n$874.00\n\t\nOpen menu\n\n\n\t\nFailed\n\t\ncarmella@hotmail.com\n\t\n$721.00\n\t\nOpen menu\n0 of 5 row(s) selected.\nPreviousNext\nIntroduction\n​\n\nEvery data table or datagrid I've created has been unique. They all behave differently, have specific sorting and filtering requirements, and work with different data sources.\n\nIt doesn't make sense to combine all of these variations into a single component. If we do that, we'll lose the flexibility that headless UI provides.\n\nSo instead of a data-table component, I thought it would be more helpful to provide a guide on how to build your own.\n\nWe'll start with the basic <Table /> component and build a complex data table from scratch.\n\nTip: If you find yourself using the same table in multiple places in your app, you can always extract it into a reusable component.\n\nTable of Contents\n​\n\nThis guide will show you how to use TanStack Table and the\ncomponent to build your own custom data table. We'll cover the following topics:\n\nBasic Table\nRow Actions\nPagination\nSorting\nFiltering\nVisibility\nRow Selection\nReusable Components\nInstallation\n​\nAdd the <Table /> component to your project:\nbash\nnpx shadcn-vue@latest add table\nAdd tanstack/vue-table dependency:\nbash\nnpm install @tanstack/vue-table\nPrerequisites\n​\n\nWe are going to build a table to show recent payments. Here's what our data looks like:\n\nts\ninterface Payment {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const payments: Payment[] = [\n  {\n    id: '728ed52f',\n    amount: 100,\n    status: 'pending',\n    email: 'm@example.com',\n  },\n  {\n    id: '489e1d42',\n    amount: 125,\n    status: 'processing',\n    email: 'example@gmail.com',\n  },\n  // ...\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\nProject Structure\n​\n\nStart by creating the following file structure:\n\ntxt\n components\n    └── payments\n          ├── columns.ts\n          ├── data-table.vue\n          ├── data-table-dropdown.vue\n└── app.vue\n\nI'm using a Nuxt.js example here but this works for any other Vue framework.\n\ncolumns.ts It will contain our column definitions.\ndata-table.vue It will contain our <DataTable /> component.\ndata-table-dropdown.vue It will contain our <DropdownAction /> component.\napp.vue This is where we'll fetch data and render our table.\nBasic Table\n​\n\nLet's start by building a basic table.\n\nColumn Definitions\n​\n\nFirst, we'll define our columns in the columns.ts file.\n\nts\nimport type { ColumnDef } from '@tanstack/vue-table'\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport interface Payment {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: 'status',\n    header: 'Status',\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email',\n  },\n  {\n    accessorKey: 'amount',\n    header: 'Amount',\n  },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nNote: Columns are where you define the core of what your table will look like. They define the data that will be displayed, how it will be formatted, sorted and filtered.\n\n<DataTable /> component\n​\n\nNext, we'll create a <DataTable /> component to render our table.\n\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type { ColumnDef } from '@tanstack/vue-table'\nimport {\n    FlexRender,\n    getCoreRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n})\n</script>\n\n<template>\n    <div class=\"border rounded-md\">\n        <Table>\n            <TableHeader>\n                <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n                    <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n                        <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n                            :props=\"header.getContext()\" />\n                    </TableHead>\n                </TableRow>\n            </TableHeader>\n            <TableBody>\n                <template v-if=\"table.getRowModel().rows?.length\">\n                    <TableRow v-for=\"row in table.getRowModel().rows\" :key=\"row.id\"\n                        :data-state=\"row.getIsSelected() ? 'selected' : undefined\">\n                        <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                            <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n                        </TableCell>\n                    </TableRow>\n                </template>\n                <template v-else>\n                    <TableRow>\n                        <TableCell :colSpan=\"columns.length\" class=\"h-24 text-center\">\n                            No results.\n                        </TableCell>\n                    </TableRow>\n                </template>\n            </TableBody>\n        </Table>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\nTip: If you find yourself using <DataTable /> in multiple places, this is the component you could make reusable by extracting it to components/ui/data-table.vue.\n\n<DataTable :columns=\"columns\" :data=\"data\" />\n\nRender the table\n​\n\nFinally, we'll render our table in our index component.\n\nts\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\nimport { columns } from \"./components/columns\"\nimport type { Payment } from './components/columns';\nimport DataTable from \"./components/DataTable.vue\"\n\nconst data = ref<Payment[]>([])\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n\nonMounted(async () => {\n  data.value = await getData();\n});\n</script>\n\n<template>\n  <div class=\"container py-10 mx-auto\">\n    <DataTable :columns=\"columns\" :data=\"data\" />\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\nCell Formatting\n​\n\nLet's format the amount cell to display the dollar amount. We'll also align the cell to the right.\n\nUpdate columns definition\n​\n\nUpdate the header and cell definitions for amount as follows:\n\nts\nimport { h } from 'vue'\n\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        accessorKey: \"amount\",\n        header: () => h('div', { class: 'text-right' }, 'Amount'),\n        cell: ({ row }) => {\n            const amount = parseFloat(row.getValue(\"amount\"))\n            const formatted = new Intl.NumberFormat(\"en-US\", {\n                style: \"currency\",\n                currency: \"USD\",\n            }).format(amount)\n\n            return h('div', { class: 'text-right font-medium' }, formatted)\n        },\n    }\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nYou can use the same approach to format other cells and headers.\n\nRow Actions\n​\n\nLet's add row actions to our table. We'll use a <Dropdown /> component for this.\n\nAdd the following into your DataTableDropDown.vue component:\n​\nts\n// DataTableDropDown.vue\n<script setup lang=\"ts\">\nimport { MoreHorizontal } from 'lucide-vue-next'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Button } from '@/components/ui/button'\n\ndefineProps<{\n  payment: {\n    id: string\n  }\n}>()\n\nfunction copy(id: string) {\n  navigator.clipboard.writeText(id)\n}\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"ghost\" class=\"w-8 h-8 p-0\">\n        <span class=\"sr-only\">Open menu</span>\n        <MoreHorizontal class=\"w-4 h-4\" />\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n      <DropdownMenuItem @click=\"copy(payment.id)\">\n        Copy payment ID\n      </DropdownMenuItem>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem>View customer</DropdownMenuItem>\n      <DropdownMenuItem>View payment details</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\nUpdate columns definition\n​\n\nUpdate our columns definition to add a new actions column. The actions cell returns a <Dropdown /> component.\n\nts\nimport { ColumnDef } from \"@tanstack/vue-table\"\nimport DropdownAction from '@/components/DataTableDropDown.vue'\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n    {\n        id: 'actions',\n        enableHiding: false,\n        cell: ({ row }) => {\n            const payment = row.original\n\n            return h('div', { class: 'relative' }, h(DropdownAction, {\n                payment,\n            }))\n        },\n    },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nYou can access the row data using row.original in the cell function. Use this to handle actions for your row eg. use the id to make a DELETE call to your API.\n\nPagination\n​\n\nNext, we'll add pagination to our table.\n\nUpdate <DataTable>\n​\nts\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n})\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nThis will automatically paginate your rows into pages of 10. See the pagination docs for more information on customizing page size and implementing manual pagination.\n\nAdd pagination controls\n​\n\nWe can add pagination controls to our table using the <Button /> component and the table.previousPage(), table.nextPage() API methods.\n\nts\n// components/payments/DataTable.vue\n<script lang=\"ts\" generic=\"TData, TValue\">\nimport { Button } from \"@/components/ui/button\"\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n})\n\n</script>\n\n<template>\n    <div>\n      <div class=\"border rounded-md\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div class=\"flex items-center justify-end py-4 space-x-2\">\n      <Button\n          variant=\"outline\"\n          size=\"sm\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.previousPage()\"\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.nextPage()\"\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\nSee Reusable Components section for a more advanced pagination component.\n\nSorting\n​\n\nLet's make the email column sortable.\n\nAdd the following into your utils file:\n​\nts\nimport { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { camelize, getCurrentInstance, toHandlerKey } from 'vue'\n\nimport type { Updater } from '@tanstack/vue-table'\nimport { type Ref } from 'vue'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function valueUpdater<T extends Updater<any>>(updaterOrValue: T, ref: Ref) {\n  ref.value\n    = typeof updaterOrValue === 'function'\n      ? updaterOrValue(ref.value)\n      : updaterOrValue\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nThe valueUpdater function updates a Vue ref object's value. It handles both direct assignments and transformations using a function. If updaterOrValue is a function, it's called with the current ref value, and the result is assigned to ref.value. If it's not a function, it's directly assigned to ref.value. This utility enhances flexibility in updating ref values. While Vue ref can manage reactive state directly, valueUpdater simplifies value updates, improving code readability and maintainability when the new state can be a direct value or a function generating it based on the current one.\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  SortingState,\n} from '@tanstack/vue-table'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    state: {\n        get sorting() { return sorting.value },\n    },\n})\n\n</script>\n\n<template>\n   <div>\n      <div class=\"border rounded-md\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\nMake header cell sortable\n​\n\nWe can now update the email header cell to add sorting controls.\n\nts\n// components/payments/columns.ts\nimport type {\n  ColumnDef,\n} from '@tanstack/vue-table'\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Button } from '@/components/ui/button'\n\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        accessorKey: 'email',\n        header: ({ column }) => {\n            return h(Button, {\n                variant: 'ghost',\n                onClick: () => column.toggleSorting(column.getIsSorted() === 'asc'),\n            }, () => ['Email', h(ArrowUpDown, { class: 'ml-2 h-4 w-4' })])\n        },\n        cell: ({ row }) => h('div', { class: 'lowercase' }, row.getValue('email')),\n    },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nThis will automatically sort the table (asc and desc) when the user toggles on the header cell.\n\nFiltering\n​\n\nLet's add a search input to filter emails in our table.\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n} from '@tanstack/vue-table'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n    },\n})\n\n</script>\n\n<template>\n    <div>\n        <div class=\"flex items-center py-4\">\n            <Input class=\"max-w-sm\" placeholder=\"Filter emails...\"\n                :model-value=\"table.getColumn('email')?.getFilterValue() as string\"\n                @update:model-value=\" table.getColumn('email')?.setFilterValue($event)\" />\n        </div>\n        <div class=\"border rounded-md\">\n            <Table>{ ... }</Table>\n        </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\nFiltering is now enabled for the email column. You can add filters to other columns as well. See the filtering docs for more information on customizing filters.\n\nVisibility\n​\n\nAdding column visibility is fairly simple using @tanstack/vue-table visibility API.\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n} from '@tanstack/vue-table'\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(), \n    getFilteredRowModel: getFilteredRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n        get columnVisibility() { return columnVisibility.value },\n    },\n})\n\n</script>\n\n<template>\n    <div>\n        <div class=\"flex items-center py-4\">\n            <Input class=\"max-w-sm\" placeholder=\"Filter emails...\"\n                :model-value=\"table.getColumn('email')?.getFilterValue() as string\"\n                @update:model-value=\" table.getColumn('email')?.setFilterValue($event)\" />\n            <DropdownMenu>\n                <DropdownMenuTrigger as-child>\n                    <Button variant=\"outline\" class=\"ml-auto\">\n                        Columns\n                        <ChevronDown class=\"w-4 h-4 ml-2\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    <DropdownMenuCheckboxItem\n                        v-for=\"column in table.getAllColumns().filter((column) => column.getCanHide())\" :key=\"column.id\"\n                        class=\"capitalize\" :checked=\"column.getIsVisible()\" @update:checked=\"(value) => {\n                            column.toggleVisibility(!!value)\n                        }\">\n                        {{ column.id }}\n                    </DropdownMenuCheckboxItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n        <div class=\"border rounded-md\">\n            <Table>\n                <TableHeader>\n                    <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n                        <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n                            <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n                                :props=\"header.getContext()\" />\n                        </TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    <template v-if=\"table.getRowModel().rows?.length\">\n                        <TableRow v-for=\"row in table.getRowModel().rows\" :key=\"row.id\"\n                            :data-state=\"row.getIsSelected() ? 'selected' : undefined\">\n                            <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                                <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n                            </TableCell>\n                        </TableRow>\n                    </template>\n                    <template v-else>\n                        <TableRow>\n                            <TableCell :colSpan=\"columns.length\" class=\"h-24 text-center\">\n                                No results.\n                            </TableCell>\n                        </TableRow>\n                    </template>\n                </TableBody>\n            </Table>\n        </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\nThis adds a dropdown menu that you can use to toggle column visibility.\n\nRow Selection\n​\n\nNext, we're going to add row selection to our table.\n\nUpdate column definitions\n​\nts\nimport type { ColumnDef } from '@tanstack/vue-table'\n\nimport { Checkbox } from '@/components/ui/checkbox'\n\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        id: 'select',\n        header: ({ table }) => h(Checkbox, {\n            'checked': table.getIsAllPageRowsSelected(),\n            'onUpdate:checked': (value: boolean) => table.toggleAllPageRowsSelected(!!value),\n            'ariaLabel': 'Select all',\n        }),\n        cell: ({ row }) => h(Checkbox, {\n            'checked': row.getIsSelected(),\n            'onUpdate:checked': (value: boolean) => row.toggleSelected(!!value),\n            'ariaLabel': 'Select row',\n        }),\n        enableSorting: false,\n        enableHiding: false,\n    },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\nconst rowSelection = ref({})\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(), \n    getFilteredRowModel: getFilteredRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n    onRowSelectionChange: updaterOrValue => valueUpdater(updaterOrValue, rowSelection),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n        get columnVisibility() { return columnVisibility.value },\n        get rowSelection() { return rowSelection.value },\n    },\n})\n\n</script>\n\n<template>\n  <div>\n    <div class=\"border rounded-md\">\n        <Table />\n    </div>\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\nThis adds a checkbox to each row and a checkbox in the header to select all rows.\n\nShow selected rows\n​\n\nYou can show the number of selected rows using the table.getFilteredSelectedRowModel() API.\n\nvue\n<div class=\"flex-1 text-sm text-muted-foreground\">\n    {{ table.getFilteredSelectedRowModel().rows.length }} of\n    {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n</div>\nReusable Components\n​\n\nHere are some components you can use to build your data tables. This is from the Tasks demo.\n\nColumn header\n​\n\nMake any column header sortable and hideable.\n\nts\n<script setup lang=\"ts\">\nimport type { Column } from '@tanstack/vue-table'\nimport { type Task } from '../data/schema'\nimport ArrowDownIcon from '~icons/radix-icons/arrow-down'\nimport ArrowUpIcon from '~icons/radix-icons/arrow-up'\nimport CaretSortIcon from '~icons/radix-icons/caret-sort'\nimport EyeNoneIcon from '~icons/radix-icons/eye-none'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\ninterface DataTableColumnHeaderProps {\n  column: Column<Task, any>\n  title: string\n}\n\ndefineProps<DataTableColumnHeaderProps>()\n</script>\n\n<script lang=\"ts\">\nexport default {\n  inheritAttrs: false,\n}\n</script>\n\n<template>\n  <div v-if=\"column.getCanSort()\" :class=\"cn('flex items-center space-x-2', $attrs.class ?? '')\">\n    <DropdownMenu>\n      <DropdownMenuTrigger as-child>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          class=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n        >\n          <span>{{ title }}</span>\n          <ArrowDownIcon v-if=\"column.getIsSorted() === 'desc'\" class=\"w-4 h-4 ml-2\" />\n          <ArrowUpIcon v-else-if=\" column.getIsSorted() === 'asc'\" class=\"w-4 h-4 ml-2\" />\n          <CaretSortIcon v-else class=\"w-4 h-4 ml-2\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\">\n        <DropdownMenuItem @click=\"column.toggleSorting(false)\">\n          <ArrowUpIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Asc\n        </DropdownMenuItem>\n        <DropdownMenuItem @click=\"column.toggleSorting(true)\">\n          <ArrowDownIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Desc\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem @click=\"column.toggleVisibility(false)\">\n          <EyeNoneIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Hide\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  </div>\n\n  <div v-else :class=\"$attrs.class\">\n    {{ title }}\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\nts\nexport const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n        return h(DataTableColumnHeader, {\n            props: {\n                column: column,\n                title: 'Email'\n            }\n        })\n    ),\n  },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nPagination\n​\n\nAdd pagination controls to your table including page size and selection count.\n\nts\n<script setup lang=\"ts\">\nimport { type Table } from '@tanstack/vue-table'\nimport { type Task } from '../data/schema'\nimport ChevronLeftIcon from '~icons/radix-icons/chevron-left'\nimport ChevronRightIcon from '~icons/radix-icons/chevron-right'\nimport DoubleArrowLeftIcon from '~icons/radix-icons/double-arrow-left'\nimport DoubleArrowRightIcon from '~icons/radix-icons/double-arrow-right'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n\ninterface DataTablePaginationProps {\n  table: Table<Task>\n}\ndefineProps<DataTablePaginationProps>()\n</script>\n\n<template>\n  <div class=\"flex items-center justify-between px-2\">\n    <div class=\"flex-1 text-sm text-muted-foreground\">\n      {{ table.getFilteredSelectedRowModel().rows.length }} of\n      {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n    </div>\n    <div class=\"flex items-center space-x-6 lg:space-x-8\">\n      <div class=\"flex items-center space-x-2\">\n        <p class=\"text-sm font-medium\">\n          Rows per page\n        </p>\n        <Select\n          :model-value=\"`${table.getState().pagination.pageSize}`\"\n          @update:model-value=\"table.setPageSize\"\n        >\n          <SelectTrigger class=\"h-8 w-[70px]\">\n            <SelectValue :placeholder=\"`${table.getState().pagination.pageSize}`\" />\n          </SelectTrigger>\n          <SelectContent side=\"top\">\n            <SelectItem v-for=\"pageSize in [10, 20, 30, 40, 50]\" :key=\"pageSize\" :value=\"`${pageSize}`\">\n              {{ pageSize }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <div class=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n        Page {{ table.getState().pagination.pageIndex + 1 }} of\n        {{ table.getPageCount() }}\n      </div>\n      <div class=\"flex items-center space-x-2\">\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.setPageIndex(0)\"\n        >\n          <span class=\"sr-only\">Go to first page</span>\n          <DoubleArrowLeftIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.previousPage()\"\n        >\n          <span class=\"sr-only\">Go to previous page</span>\n          <ChevronLeftIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.nextPage()\"\n        >\n          <span class=\"sr-only\">Go to next page</span>\n          <ChevronRightIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.setPageIndex(table.getPageCount() - 1)\"\n        >\n          <span class=\"sr-only\">Go to last page</span>\n          <DoubleArrowRightIcon class=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\nvue\n<DataTablePagination :table=\"table\" />\nColumn toggle\n​\n\nA component to toggle column visibility.\n\nts\n\n<script setup lang=\"ts\">\nimport type { Table } from '@tanstack/vue-table'\nimport { computed } from 'vue'\nimport { type Task } from '../data/schema'\nimport MixerHorizontalIcon from '~icons/radix-icons/mixer-horizontal'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\ninterface DataTableViewOptionsProps {\n  table: Table<Task>\n}\n\nconst props = defineProps<DataTableViewOptionsProps>()\n\nconst columns = computed(() => props.table.getAllColumns()\n  .filter(\n    column =>\n      typeof column.accessorFn !== 'undefined' && column.getCanHide(),\n  ))\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        class=\"hidden h-8 ml-auto lg:flex\"\n      >\n        <MixerHorizontalIcon class=\"w-4 h-4 mr-2\" />\n        View\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\" class=\"w-[150px]\">\n      <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n      <DropdownMenuSeparator />\n\n      <DropdownMenuCheckboxItem\n        v-for=\"column in columns\"\n        :key=\"column.id\"\n        class=\"capitalize\"\n        :checked=\"column.getIsVisible()\"\n        @update:checked=\"(value) => column.toggleVisibility(!!value)\"\n      >\n        {{ column.id }}\n      </DropdownMenuCheckboxItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\nvue\n<DataTableViewOptions :table=\"table\" />\n\nOn This Page\n\nIntroduction ​\nTable of Contents ​\nInstallation ​\nPrerequisites ​\nProject Structure ​\nBasic Table ​\nColumn Definitions ​\n<DataTable /> component ​\nRender the table ​\nCell Formatting ​\nUpdate columns definition ​\nRow Actions ​\nAdd the following into your DataTableDropDown.vue component: ​\nUpdate columns definition ​\nPagination ​\nUpdate <DataTable> ​\nAdd pagination controls ​\nSorting ​\nAdd the following into your utils file: ​\nUpdate <DataTable> ​\nMake header cell sortable ​\nFiltering ​\nUpdate <DataTable> ​\nVisibility ​\nUpdate <DataTable> ​\nRow Selection ​\nUpdate column definitions ​\nUpdate <DataTable> ​\nShow selected rows ​\nReusable Components ​\nColumn header ​\nPagination ​\nColumn toggle ​"
  },
  {
    "title": "Radio Group - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/radio-group",
    "html": "Radio Group\nRadio Group\n\nA set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDefault\nComfortable\nCompact\nInstallation\n​\nbash\nnpx shadcn-vue@latest add radio-group\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Label } from '@/components/ui/label'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n</script>\n\n<template>\n  <RadioGroup default-value=\"option-one\">\n    <div class=\"flex items-center space-x-2\">\n      <RadioGroupItem id=\"option-one\" value=\"option-one\" />\n      <Label for=\"option-one\">Option One</Label>\n    </div>\n    <div class=\"flex items-center space-x-2\">\n      <RadioGroupItem id=\"option-two\" value=\"option-two\" />\n      <Label for=\"option-two\">Option Two</Label>\n    </div>\n  </RadioGroup>\n</template>\nExamples\n​\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nNotify me about...\nAll new messages\nDirect messages and mentions\nNothing\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nForm ​"
  },
  {
    "title": "Textarea - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/textarea#form",
    "html": "Textarea\nTextarea\n\nDisplays a form textarea or a component that looks like a textarea.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add textarea\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Textarea } from '@/components/ui/textarea'\n</script>\n\n<template>\n  <Textarea />\n</template>\nExamples\n​\nDefault\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDisabled\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nWith Label\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nYour message\nWith Text\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nYour message\n\nYour message will be copied to the support team.\n\nWith Button\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSend message\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nBio\n\nYou can @mention other users and organizations.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDefault ​\nDisabled ​\nWith Label ​\nWith Text ​\nWith Button ​\nForm ​"
  },
  {
    "title": "Switch - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/switch#form",
    "html": "Switch\nSwitch\n\nA control that allows the user to toggle between checked and not checked.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAirplane Mode\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add switch\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Switch } from '@/components/ui/switch'\n</script>\n\n<template>\n  <Switch />\n</template>\nExamples\n​\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEmail Notifications\nMarketing emails\n\nReceive emails about new products, features, and more.\n\nSecurity emails\n\nReceive emails about your account security.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nForm ​\nEmail Notifications"
  },
  {
    "title": "Input - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/input#form",
    "html": "Input\nInput\n\nDisplays a form input field or a component that looks like an input field.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add input\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Input } from '@/components/ui/input'\n</script>\n\n<template>\n  <Input />\n</template>\nDefault\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nFile\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPicture\nDisabled\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nWith Label\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEmail\nWith Button\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSubscribe\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nUsername\n\nThis is your public display name.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nDefault ​\nFile ​\nDisabled ​\nWith Label ​\nWith Button ​\nForm ​"
  },
  {
    "title": "Select - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/select#form",
    "html": "Select\nSelect\n\nDisplays a list of options for the user to pick from—triggered by a button.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSelect a fruit\nInstallation\n​\nbash\nnpx shadcn-vue@latest add select\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n</script>\n\n<template>\n  <Select>\n    <SelectTrigger>\n      <SelectValue placeholder=\"Select a fruit\" />\n    </SelectTrigger>\n    <SelectContent>\n      <SelectGroup>\n        <SelectLabel>Fruits</SelectLabel>\n        <SelectItem value=\"apple\">\n          Apple\n        </SelectItem>\n      </SelectGroup>\n    </SelectContent>\n  </Select>\n</template>\nExamples\n​\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEmail\nSelect a verified email to display\n\nYou can manage email addresses in your email settings.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nForm ​"
  },
  {
    "title": "Radio Group - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/radio-group#form",
    "html": "Radio Group\nRadio Group\n\nA set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nComfortable\nCompact\nInstallation\n​\nbash\nnpx shadcn-vue@latest add radio-group\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Label } from '@/components/ui/label'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n</script>\n\n<template>\n  <RadioGroup default-value=\"option-one\">\n    <div class=\"flex items-center space-x-2\">\n      <RadioGroupItem id=\"option-one\" value=\"option-one\" />\n      <Label for=\"option-one\">Option One</Label>\n    </div>\n    <div class=\"flex items-center space-x-2\">\n      <RadioGroupItem id=\"option-two\" value=\"option-two\" />\n      <Label for=\"option-two\">Option Two</Label>\n    </div>\n  </RadioGroup>\n</template>\nExamples\n​\nForm\n​\nPreview\nCode\nStyle:\nNotify me about...\nAll new messages\nDirect messages and mentions\nNothing\nSubmit\n\nOn This Page"
  },
  {
    "title": "Date Picker - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/date-picker#form",
    "html": "Date Picker\nDate Picker\n\nA date picker component with range and presets.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPick a date\nInstallation\n​\n\nThe Date Picker is built using a composition of the <Popover /> and the <Calendar /> components.\n\nSee installation instructions for the Popover and the Calendar components.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { format } from 'date-fns'\nimport { Calendar as CalendarIcon } from 'lucide-vue-next'\n\nimport { ref } from 'vue'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n\nconst date = ref<Date>()\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger as-child>\n      <Button\n        :variant=\"'outline'\"\n        :class=\"cn(\n          'w-[280px] justify-start text-left font-normal',\n          !date && 'text-muted-foreground',\n        )\"\n      >\n        <CalendarIcon class=\"mr-2 h-4 w-4\" />\n        <span>{{ date ? format(date, \"PPP\") : \"Pick a date\" }}</span>\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent class=\"w-auto p-0\">\n      <Calendar v-model=\"date\" />\n    </PopoverContent>\n  </Popover>\n</template>\nExamples\n​\nDate Picker\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPick a date\nDate Range Picker\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nJan 20, 2022 - Feb 09, 2022\nWith Presets\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPick a date\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDate of birth\nPick a date\n\nYour date of birth is used to calculate your age.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDate Picker ​\nDate Range Picker ​\nWith Presets ​\nForm ​"
  },
  {
    "title": "Checkbox - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/checkbox#form",
    "html": "Checkbox\nCheckbox\n\nA control that allows the user to toggle between checked and not checked.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAccept terms and conditions\nInstallation\n​\nbash\nnpx shadcn-vue@latest add checkbox\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Checkbox } from '@/components/ui/checkbox'\n</script>\n\n<template>\n  <Checkbox id=\"terms\" />\n</template>\nExamples\n​\nWith text\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAccept terms and conditions\n\nYou agree to our Terms of Service and Privacy Policy.\n\nDisabled\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAccept terms and conditions\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nUse different settings for my mobile devices\n\nYou can manage your mobile notifications in the mobile settings page.\n\nSubmit\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSidebar\n\nSelect the items you want to display in the sidebar.\n\nRecents\nHome\nApplications\nDesktop\nDownloads\nDocuments\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nWith text ​\nDisabled ​\nForm ​"
  },
  {
    "title": "Combobox - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/combobox",
    "html": "Combobox\nCombobox\n\nAutocomplete input and command palette with a list of suggestions.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSelect framework...\n\n\nNote\n\nRadix Vue introduced a breaking change. You will need to wrap ComboboxGroup and ComboboxItem inside of ComboboxList now.\n\nInstallation\n​\n\nThe Combobox is built using a composition of the <Popover /> and the <Command /> components.\n\nSee installation instructions for the Popover and the Command components.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Check, ChevronsUpDown } from 'lucide-vue-next'\n\nimport { ref } from 'vue'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList\n} from '@/components/ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n\nconst frameworks = [\n  { value: 'next.js', label: 'Next.js' },\n  { value: 'sveltekit', label: 'SvelteKit' },\n  { value: 'nuxt.js', label: 'Nuxt.js' },\n  { value: 'remix', label: 'Remix' },\n  { value: 'astro', label: 'Astro' },\n]\n\nconst open = ref(false)\nconst value = ref({})\n</script>\n\n<template>\n  <Popover v-model:open=\"open\">\n    <PopoverTrigger as-child>\n      <Button\n        variant=\"outline\"\n        role=\"combobox\"\n        :aria-expanded=\"open\"\n        class=\"w-[200px] justify-between\"\n      >\n        {{ value ? frameworks.find((framework) => framework.value === value)?.label : 'Select framework...' }}\n\n        <ChevronsUpDown class=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent class=\"w-[200px] p-0\">\n      <Command v-model=\"value\">\n        <CommandInput placeholder=\"Search framework...\" />\n        <CommandEmpty>No framework found.</CommandEmpty>\n        <CommandList>\n          <CommandGroup>\n            <CommandItem\n              v-for=\"framework in frameworks\"\n              :key=\"framework.value\"\n              :value=\"framework\"\n              @select=\"open = false\"\n            >\n              <Check\n                :class=\"cn(\n                  'mr-2 h-4 w-4',\n                  value === framework.value ? 'opacity-100' : 'opacity-0',\n                )\"\n              />\n              {{ framework.label }}\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </Command>\n    </PopoverContent>\n  </Popover>\n</template>\nExamples\n​\nCombobox\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSelect framework...\nPopover\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\nStatus\n\n+ Set status\nDropdown menu\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\nfeatureCreate a new project\n\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nLanguage\nSelect language...\n\nThis is the language that will be used in the dashboard.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nCombobox ​\nPopover ​\nDropdown menu ​\nForm ​"
  },
  {
    "title": "Calendar - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/calendar#installation",
    "html": "Calendar\nCalendar\n\nA date field component that allows users to enter and edit date.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nNovember 2023\nS\nM\nT\nW\nT\nF\nS\n29\n30\n31\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n1\n2\nAbout\n​\n\nThe Calendar component is built on top of VCalendar.\n\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add calendar\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Calendar } from '@/components/ui/calendar'\n</script>\n\n<template>\n  <Calendar />\n</template>\n\nSee the VCalendar documentation for more information.\n\n\nOn This Page\n\nAbout ​\nInstallation ​\nUsage ​"
  },
  {
    "title": "Command - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/command#installation",
    "html": "Command\nCommand\n\nFast, composable, unstyled command menu.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSuggestions\nCalendar\nSearch Emoji\nCalculator\nSettings\nProfile\n⌘P\nBilling\n⌘B\nSettings\n⌘S\nInstallation\n​\nbash\nnpx shadcn-vue@latest add command\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from '@/components/ui/command'\n</script>\n\n<template>\n  <Command>\n    <CommandInput placeholder=\"Type a command or search...\" />\n    <CommandList>\n      <CommandEmpty>No results found.</CommandEmpty>\n      <CommandGroup heading=\"Suggestions\">\n        <CommandItem value=\"calendar\">\n          Calendar\n        </CommandItem>\n        <CommandItem value=\"search-emoji\">\n          Search Emoji\n        </CommandItem>\n        <CommandItem value=\"calculator\">\n          Calculator\n        </CommandItem>\n      </CommandGroup>\n      <CommandSeparator />\n      <CommandGroup heading=\"Settings\">\n        <CommandItem value=\"profile\">\n          Profile\n        </CommandItem>\n        <CommandItem value=\"billing\">\n          Billing\n        </CommandItem>\n        <CommandItem value=\"settings\">\n          Settings\n        </CommandItem>\n      </CommandGroup>\n    </CommandList>\n  </Command>\n</template>\nExamples\n​\nDialog\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\nPress \n⌘\nJ\n\nTo show the command menu in a dialog, use the <CommandDialog /> component.\n\nvue\n<script setup lang=\"ts\">\nimport { useMagicKeys } from '@vueuse/core'\n\nimport { ref, watch } from 'vue'\n\nconst open = ref(false)\n\nconst keys = useMagicKeys()\nconst CmdJ = keys['Cmd+J']\n\nfunction handleOpenChange() {\n  open.value = !open.value\n}\n\nwatch(CmdJ, (v) => {\n  if (v)\n    handleOpenChange()\n})\n</script>\n\n<template>\n  <div>\n    <p class=\"text-sm text-muted-foreground\">\n      Press\n      <kbd\n        class=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\"\n      >\n        <span class=\"text-xs\">⌘</span>J\n      </kbd>\n    </p>\n    <CommandDialog :open=\"open\" :on-open-change=\"handleOpenChange\">\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem value=\"calendar\">\n            Calendar\n          </CommandItem>\n          <CommandItem value=\"search-emoji\">\n            Search Emoji\n          </CommandItem>\n          <CommandItem value=\"calculator\">\n            Calculator\n          </CommandItem>\n        </CommandGroup>\n        <CommandSeparator />\n        <CommandGroup heading=\"Settings\">\n          <CommandItem value=\"profile\">\n            Profile\n          </CommandItem>\n          <CommandItem value=\"billing\">\n            Billing\n          </CommandItem>\n          <CommandItem value=\"settings\">\n            Settings\n          </CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  </div>\n</template>\nCombobox\n​\n\nYou can use the <Command /> component as a combobox. See the Combobox page for more information.\n\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDialog ​\nCombobox ​"
  },
  {
    "title": "Popover - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/popover#installation",
    "html": "Popover\nPopover\n\nDisplays rich content in a portal, triggered by a button.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nOpen popover\nInstallation\n​\nbash\nnpx shadcn-vue@latest add popover\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger>\n      Open popover\n    </PopoverTrigger>\n    <PopoverContent />\n  </Popover>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Theming - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/theming",
    "html": "Theming\nTheming\n\nUse CSS Variables to customize the look and feel of your application.\n\nYou can choose between using CSS variables or Tailwind CSS utility classes for theming.\n\nUtility classes\n​\nhtml\n<div class=\"bg-zinc-950 dark:bg-white\" />\n\nTo use utility classes for theming set tailwind.cssVariables to false in your components.json file.\n\njson\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": false\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\nCSS Variables\n​\nhtml\n<div class=\"bg-background text-foreground\" />\n\nTo use CSS variables for theming set tailwind.cssVariables to true in your components.json file.\n\njson\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\nConvention\n​\n\nWe use a simple background and foreground convention for colors. The background variable is used for the background color of the component and the foreground variable is used for the text color.\n\nThe background suffix is omitted when the variable is used for the background color of the component.\n\nGiven the following CSS variables:\n\ncss\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\n\nThe background color of the following component will be hsl(var(--primary)) and the foreground color will be hsl(var(--primary-foreground)).\n\nhtml\n<div class=\"bg-primary text-primary-foreground\">Hello</div>\n\nCSS variables must be defined without color space function. See the Tailwind CSS documentation for more information.\n\nList of variables\n​\n\nHere's the list of variables available for customization:\n\ncss\n/* Default background color of <body />...etc */\n--background: 0 0% 100%;\n--foreground: 222.2 47.4% 11.2%;\ncss\n/* Muted backgrounds such as <TabsList />, <Skeleton /> and <Switch /> */\n--muted: 210 40% 96.1%;\n--muted-foreground: 215.4 16.3% 46.9%;\ncss\n/* Background color for <Card /> */\n--card: 0 0% 100%;\n--card-foreground: 222.2 47.4% 11.2%;\ncss\n/* Background color for popovers such as <DropdownMenu />, <HoverCard />, <Popover /> */\n--popover: 0 0% 100%;\n--popover-foreground: 222.2 47.4% 11.2%;\ncss\n/* Default border color */\n--border: 214.3 31.8% 91.4%;\ncss\n/* Border color for inputs such as <Input />, <Select />, <Textarea /> */\n--input: 214.3 31.8% 91.4%;\ncss\n/* Primary colors for <Button /> */\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\ncss\n/* Secondary colors for <Button /> */\n--secondary: 210 40% 96.1%;\n--secondary-foreground: 222.2 47.4% 11.2%;\ncss\n/* Used for accents such as hover effects on <DropdownMenuItem>, <SelectItem>...etc */\n--accent: 210 40% 96.1%;\n--accent-foreground: 222.2 47.4% 11.2%;\ncss\n/* Used for destructive actions such as <Button variant=\"destructive\"> */\n--destructive: 0 100% 50%;\n--destructive-foreground: 210 40% 98%;\ncss\n/* Used for focus ring */\n--ring: 215 20.2% 65.1%;\ncss\n/* Border radius for card, input and buttons */\n--radius: 0.5rem;\nAdding new colors\n​\n\nTo add new colors, you need to add them to your CSS file and to your tailwind.config.js file.\n\ncss\n:root {\n  --warning: 38 92% 50%;\n  --warning-foreground: 48 96% 89%;\n}\n\n.dark {\n  --warning: 48 96% 89%;\n  --warning-foreground: 38 92% 50%;\n}\njs\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        'warning': 'hsl(var(--warning))',\n        'warning-foreground': 'hsl(var(--warning-foreground))',\n      },\n    },\n  },\n}\n\nYou can now use the warning utility class in your components.\n\nhtml\n<div class=\"bg-warning text-warning-foreground\" />\nOther color formats\n​\n\nI recommend using HSL colors for theming but you can also use other color formats if you prefer.\n\nSee the Tailwind CSS documentation for more information on using rgb, rgba or hsl colors.\n\nHex -> Color Channel\n​\n\nYou can use this tool to convert your HEX color to HSL without the color space function. Simply add your color in hex format, copy one of the generated values, then add them to the CSS variable.\n\n\nOn This Page\n\nUtility classes ​\nCSS Variables ​\nConvention ​\nList of variables ​\nAdding new colors ​\nOther color formats ​\nHex -> Color Channel ​"
  },
  {
    "title": "Installation - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/installation",
    "html": "Installation\nInstallation\n\nHow to install dependencies and structure your app.\n\nFrameworks\n​\n\nVite\n\nNuxt\n\nAstro\n\nLaravel\n\nTypeScript\n​\n\nThis project and the components are written in TypeScript. We recommend using TypeScript for your project as well.\n\nHowever we provide a JavaScript version of the components as well. The JavaScript version is available via the cli.\n\nTo opt-out of TypeScript, you can use the typescript flag in your components.json file.\n\njson\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"typescript\": false,\n  \"aliases\": {\n    \"utils\": \"~/lib/utils\",\n    \"components\": \"~/components\"\n  }\n}\n\nTo configure import aliases, you can use the following jsconfig.json:\n\njson\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\nVSCode extension\n​\n\nInstall the shadcn-vue extension by @selemondev in Visual Studio Code to easily add Shadcn Vue components to your project.\n\nThis extension offers a range of features:\n\nAbility to initialize the Shadcn Vue CLI\nInstall components\nOpen documentation\nNavigate to a specific component's documentation page directly from your IDE.\nHandy snippets for quick and straightforward component imports and markup.\n\nOn This Page\n\nFrameworks ​\nTypeScript ​\nVSCode extension ​"
  },
  {
    "title": "CLI - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/cli",
    "html": "CLI\nCLI\n\nUse the CLI to add components to your project.\n\ninit\n​\n\nUse the init command to initialize configuration and dependencies for a new project.\n\nThe init command installs dependencies, adds the cn, useEmitsAsProps utils, configures tailwind.config.cjs, and creates CSS variables for the project.\n\nbash\nnpx shadcn-vue@latest init\n\nYou will be asked a few questions to configure components.json:\n\ntxt\nWould you like to use TypeScript (recommended)? no / yes\nWhich framework are you using? Vite / Nuxt / Laravel\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › › src/index.css\nDo you want to use CSS variables for colors? › no / yes\nWhere is your tailwind.config.js located? › tailwind.config.js\nConfigure the import alias for components: › @/components\nConfigure the import alias for utils: › @/lib/utils\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nOptions\n​\ntxt\nUsage: shadcn-vue init [options]\n\ninitialize your project and install dependencies\n\nOptions:\n  -y, --yes        skip confirmation prompt. (default: false)\n  -c, --cwd <cwd>  the working directory. (default: the current directory)\n  -h, --help       display help for command\nadd\n​\n\nUse the add command to add components and dependencies to your project.\n\nbash\nnpx shadcn-vue@latest add [component]\n\nYou will be presented with a list of components to choose from:\n\ntxt\nWhich components would you like to add? › Space to select. Return to submit.\n\n◯  accordion\n◯  alert\n◯  alert-dialog\n◯  aspect-ratio\n◯  avatar\n◯  badge\n◯  button\n◯  card\n◯  checkbox\n◯  collapsible\nOptions\n​\ntxt\nUsage: shadcn-vue add [options] [components...]\n\nadd components to your project\n\nArguments:\n  components         name of components\n\nOptions:\n  --nodep            disable adding & installing dependencies (advanced) (default: false)\n  -y, --yes          Skip confirmation prompt. (default: false)\n  -o, --overwrite    overwrite existing files. (default: false)\n  -c, --cwd <cwd>    the working directory. (default: the current directory)\n  -p, --path <path>  the path to add the component to.\n  -h, --help         display help for command\nupdate\n​\n\nUse the update command to update components in your project. This will overwrite any modifications you've made to the components, so be sure to commit your changes before running this command.\n\nWe plan on improving this command in the future to improve the update experience.\n\ntxt\nUsage: shadcn-vue update [options] [components...]\n\nupdate components in your project\n\nArguments:\n  components       name of components\n\nOptions:\n  -c, --cwd <cwd>  the working directory. (default: the current directory)\n  -h, --help       display help for command\n\nOn This Page\n\ninit ​\nOptions ​\nadd ​\nOptions ​\nupdate ​"
  },
  {
    "title": "Tooltip - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/tooltip",
    "html": "Tooltip\nTooltip\n\nA popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nHover\nInstallation\n​\nbash\nnpx shadcn-vue@latest add tooltip\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger\n} from '@/components/ui/tooltip'\n</script>\n\n<template>\n  <TooltipProvider>\n    <Tooltip>\n      <TooltipTrigger>Hover</TooltipTrigger>\n      <TooltipContent>\n        <p>Add to library</p>\n      </TooltipContent>\n    </Tooltip>\n  </TooltipProvider>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Toggle - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/toggle",
    "html": "Toggle\nToggle\n\nA two-state button that can be either on or off.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add toggle\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Toggle } from '@/components/ui/toggle'\n</script>\n\n<template>\n  <Toggle>Toggle</Toggle>\n</template>\nExamples\n​\nDefault\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nOutline\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nWith Text\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nItalic\nSmall\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nLarge\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDisabled\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDefault ​\nOutline ​\nWith Text ​\nSmall ​\nLarge ​\nDisabled ​"
  },
  {
    "title": "Textarea - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/textarea",
    "html": "Textarea\nTextarea\n\nDisplays a form textarea or a component that looks like a textarea.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add textarea\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Textarea } from '@/components/ui/textarea'\n</script>\n\n<template>\n  <Textarea />\n</template>\nExamples\n​\nDefault\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDisabled\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nWith Label\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nYour message\nWith Text\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nYour message\n\nYour message will be copied to the support team.\n\nWith Button\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSend message\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nBio\n\nYou can @mention other users and organizations.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDefault ​\nDisabled ​\nWith Label ​\nWith Text ​\nWith Button ​\nForm ​"
  },
  {
    "title": "Toast - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/toast",
    "html": "Toast\nToast\n\nA succinct message that is displayed temporarily.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAdd to calander\nInstallation\n​\nRun the following command\n​\nbash\nnpx shadcn-vue@latest add toast\nAdd the Toaster component\n​\n\nAdd the following Toaster component to your App.vue file:\n\nvue\n<script setup lang=\"ts\">\nimport Toaster from '@/components/ui/toast/Toaster.vue'\n</script>\n\n<template>\n  <Toaster />\n</template>\nUsage\n​\n\nThe useToast hook returns a toast function that you can use to display a toast.\n\ntsx\nimport { useToast } from '@/components/ui/toast/use-toast'\nvue\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\nimport { useToast } from '@/components/ui/toast/use-toast'\n\nconst { toast } = useToast()\n</script>\n\n<template>\n  <Button\n    @click=\"() => {\n      toast({\n        title: 'Scheduled: Catch up',\n        description: 'Friday, February 10, 2023 at 5:57 PM',\n      });\n    }\"\n  >\n    Add to calander\n  </Button>\n</template>\n\nTo display multiple toasts at the same time, you can update the TOAST_LIMIT in use-toast.ts.\n\nExamples\n​\nSimple\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nShow Toast\nWith Title\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nShow Toast\nWith Action\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nShow Toast\nDestructive\n​\n\nUse toast({ variant: \"destructive\" }) to display a destructive toast.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nShow Toast\n\nOn This Page\n\nInstallation ​\nRun the following command ​\nAdd the Toaster component ​\nUsage ​\nExamples ​\nSimple ​\nWith Title ​\nWith Action ​\nDestructive ​"
  },
  {
    "title": "Tabs - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/tabs",
    "html": "Tabs\nTabs\n\nA set of layered sections of content—known as tab panels—that are displayed one at a time.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAccount\nPassword\nAccount\n\nMake changes to your account here. Click save when you're done.\n\nName\nUsername\nSave changes\nInstallation\n​\nbash\nnpx shadcn-vue@latest add tabs\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\n</script>\n\n<template>\n  <Tabs default-value=\"account\" class=\"w-[400px]\">\n    <TabsList>\n      <TabsTrigger value=\"account\">\n        Account\n      </TabsTrigger>\n      <TabsTrigger value=\"password\">\n        Password\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent value=\"account\">\n      Make changes to your account here.\n    </TabsContent>\n    <TabsContent value=\"password\">\n      Change your password here.\n    </TabsContent>\n  </Tabs>\n</template>\n\nOn This Page\n\nAccount\nInstallation ​\nUsage ​"
  },
  {
    "title": "Table - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/table",
    "html": "Table\nTable\n\nA responsive table component.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nA list of your recent invoices.\nInvoice\tStatus\tMethod\tAmount\nINV001\tPaid\tCredit Card\t$250.00\nINV002\tPending\tPayPal\t$150.00\nINV003\tUnpaid\tBank Transfer\t$350.00\nINV004\tPaid\tCredit Card\t$450.00\nINV005\tPaid\tPayPal\t$550.00\nINV006\tPending\tBank Transfer\t$200.00\nINV007\tUnpaid\tCredit Card\t$300.00\nInstallation\n​\nbash\nnpx shadcn-vue@latest add table\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Table,\n  TableBody,\n  TableCaption,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table'\n</script>\n\n<template>\n  <Table>\n    <TableCaption>A list of your recent invoices.</TableCaption>\n    <TableHeader>\n      <TableRow>\n        <TableHead class=\"w-[100px]\">\n          Invoice\n        </TableHead>\n        <TableHead>Status</TableHead>\n        <TableHead>Method</TableHead>\n        <TableHead class=\"text-right\">\n          Amount\n        </TableHead>\n      </TableRow>\n    </TableHeader>\n    <TableBody>\n      <TableRow>\n        <TableCell class=\"font-medium\">\n          INV001\n        </TableCell>\n        <TableCell>Paid</TableCell>\n        <TableCell>Credit Card</TableCell>\n        <TableCell class=\"text-right\">\n          $250.00\n        </TableCell>\n      </TableRow>\n    </TableBody>\n  </Table>\n</template>\nData Table\n​\n\nYou can use the <Table /> component to build more complex data tables. Combine it with @tanstack/vue-table to create tables with sorting, filtering and pagination.\n\nSee the Data Table documentation for more information.\n\nYou can also see an example of a data table in the Tasks demo.\n\n\nOn This Page\n\nInstallation ​\nUsage ​\nData Table ​"
  },
  {
    "title": "Switch - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/switch",
    "html": "Switch\nSwitch\n\nA control that allows the user to toggle between checked and not checked.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAirplane Mode\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add switch\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Switch } from '@/components/ui/switch'\n</script>\n\n<template>\n  <Switch />\n</template>\nExamples\n​\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEmail Notifications\nMarketing emails\n\nReceive emails about new products, features, and more.\n\nSecurity emails\n\nReceive emails about your account security.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nForm ​\nEmail Notifications"
  },
  {
    "title": "Slider - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/slider",
    "html": "Slider\nSlider\n\nAn input where the user selects a value from within a given range.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nbash\nnpx shadcn-vue@latest add slider\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Slider } from '@/components/ui/slider'\n</script>\n\n<template>\n  <Slider\n    :default-value=\"[33]\" :max=\"100\" :step=\"1\"\n  />\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Skeleton - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/skeleton",
    "html": "Skeleton\nSkeleton\n\nUse to show a placeholder while content is loading.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add skeleton\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Skeleton } from '@/components/ui/skeleton'\n</script>\n\n<template>\n  <Skeleton class=\"w-[100px] h-[20px] rounded-full\" />\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Sheet - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/sheet",
    "html": "Sheet\nSheet\n\nExtends the Dialog component to display content that complements the main content of the screen.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nOpen\nInstallation\n​\nbash\nnpx shadcn-vue@latest add sheet\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from '@/components/ui/sheet'\n</script>\n\n<template>\n  <Sheet>\n    <SheetTrigger>Open</SheetTrigger>\n    <SheetContent>\n      <SheetHeader>\n        <SheetTitle>Are you sure absolutely sure?</SheetTitle>\n        <SheetDescription>\n          This action cannot be undone. This will permanently delete your account\n          and remove your data from our servers.\n        </SheetDescription>\n      </SheetHeader>\n    </SheetContent>\n  </Sheet>\n</template>\nExamples\n​\nSide\n​\n\nUse the side property to <SheetContent /> to indicate the edge of the screen where the component will appear. The values can be top, right, bottom or left.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\ntop\nright\nbottom\nleft\nSize\n​\n\nYou can adjust the size of the sheet using CSS classes:\n\nvue\n<template>\n  <Sheet>\n    <SheetTrigger>Open</SheetTrigger>\n    <SheetContent class=\"w-[400px] sm:w-[540px]\">\n      <SheetHeader>\n        <SheetTitle>Are you sure absolutely sure?</SheetTitle>\n        <SheetDescription>\n          This action cannot be undone. This will permanently delete your account\n          and remove your data from our servers.\n        </SheetDescription>\n      </SheetHeader>\n    </SheetContent>\n  </Sheet>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nSide ​\nSize ​"
  },
  {
    "title": "Scroll-area - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/scroll-area",
    "html": "Scroll-area\nScroll-area\n\nAugments native scroll functionality for custom, cross-browser styling.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nTags\nv1.2.0-beta.50\nv1.2.0-beta.49\nv1.2.0-beta.48\nv1.2.0-beta.47\nv1.2.0-beta.46\nv1.2.0-beta.45\nv1.2.0-beta.44\nv1.2.0-beta.43\nv1.2.0-beta.42\nv1.2.0-beta.41\nv1.2.0-beta.40\nv1.2.0-beta.39\nv1.2.0-beta.38\nv1.2.0-beta.37\nv1.2.0-beta.36\nv1.2.0-beta.35\nv1.2.0-beta.34\nv1.2.0-beta.33\nv1.2.0-beta.32\nv1.2.0-beta.31\nv1.2.0-beta.30\nv1.2.0-beta.29\nv1.2.0-beta.28\nv1.2.0-beta.27\nv1.2.0-beta.26\nv1.2.0-beta.25\nv1.2.0-beta.24\nv1.2.0-beta.23\nv1.2.0-beta.22\nv1.2.0-beta.21\nv1.2.0-beta.20\nv1.2.0-beta.19\nv1.2.0-beta.18\nv1.2.0-beta.17\nv1.2.0-beta.16\nv1.2.0-beta.15\nv1.2.0-beta.14\nv1.2.0-beta.13\nv1.2.0-beta.12\nv1.2.0-beta.11\nv1.2.0-beta.10\nv1.2.0-beta.9\nv1.2.0-beta.8\nv1.2.0-beta.7\nv1.2.0-beta.6\nv1.2.0-beta.5\nv1.2.0-beta.4\nv1.2.0-beta.3\nv1.2.0-beta.2\nv1.2.0-beta.1\nInstallation\n​\nbash\nnpx shadcn-vue@latest add scroll-area\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { ScrollArea } from '@/components/ui/scroll-area'\n</script>\n\n<template>\n  <ScrollArea class=\"h-[200px] w-[350px] rounded-md border p-4\">\n    Jokester began sneaking into the castle in the middle of the night and leaving\n    jokes all over the place: under the king's pillow, in his soup, even in the\n    royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n    then, one day, the people of the kingdom discovered that the jokes left by\n    Jokester were so funny that they couldn't help but laugh. And once they\n    started laughing, they couldn't stop.\n  </ScrollArea>\n</template>\nExamples\n​\nHorizontal Scrolling\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPhoto by Ornella Binni\nPhoto by Tom Byrom\nPhoto by Vladimir Malyavko\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nHorizontal Scrolling ​"
  },
  {
    "title": "Select - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/select",
    "html": "Select\nSelect\n\nDisplays a list of options for the user to pick from—triggered by a button.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSelect a fruit\nInstallation\n​\nbash\nnpx shadcn-vue@latest add select\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n</script>\n\n<template>\n  <Select>\n    <SelectTrigger>\n      <SelectValue placeholder=\"Select a fruit\" />\n    </SelectTrigger>\n    <SelectContent>\n      <SelectGroup>\n        <SelectLabel>Fruits</SelectLabel>\n        <SelectItem value=\"apple\">\n          Apple\n        </SelectItem>\n      </SelectGroup>\n    </SelectContent>\n  </Select>\n</template>\nExamples\n​\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEmail\nSelect a verified email to display\n\nYou can manage email addresses in your email settings.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nForm ​"
  },
  {
    "title": "Separator - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/separator",
    "html": "Separator\nSeparator\n\nVisually or semantically separates content.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nRadix Primitives\n\nAn open-source UI component library.\n\nBlog\nDocs\nSource\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add separator\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Separator } from '@/components/ui/separator'\n</script>\n\n<template>\n  <Separator />\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Progress - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/progress",
    "html": "Progress\nProgress\n\nDisplays an indicator showing the completion progress of a task, typically displayed as a progress bar.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add progress\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Progress } from '@/components/ui/progress'\n</script>\n\n<template>\n  <Progress :model-value=\"33\" />\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Popover - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/popover",
    "html": "Popover\nPopover\n\nDisplays rich content in a portal, triggered by a button.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nOpen popover\nInstallation\n​\nbash\nnpx shadcn-vue@latest add popover\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger>\n      Open popover\n    </PopoverTrigger>\n    <PopoverContent />\n  </Popover>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Pagination - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/pagination",
    "html": "Pagination\nPagination\n\nDisplays data in paged format and provides navigation between pages.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n1\n2\n3\n4\n5\n10\nInstallation\n​\nbash\nnpx shadcn-vue@latest add pagination\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Pagination,\n  PaginationEllipsis,\n  PaginationFirst,\n  PaginationLast,\n  PaginationList,\n  PaginationListItem,\n  PaginationNext,\n  PaginationPrev,\n} from '@/components/ui/pagination'\n\nimport {\n  Button,\n} from '@/components/ui/button'\n</script>\n\n<template>\n  <Pagination v-slot=\"{ page }\" :total=\"100\" :sibling-count=\"1\" show-edges :default-page=\"2\">\n    <PaginationList v-slot=\"{ items }\" class=\"flex items-center gap-1\">\n      <PaginationFirst />\n      <PaginationPrev />\n\n      <template v-for=\"(item, index) in items\">\n        <PaginationListItem v-if=\"item.type === 'page'\" :key=\"index\" :value=\"item.value\" as-child>\n          <Button class=\"w-10 h-10 p-0\" :variant=\"item.value === page ? 'default' : 'outline'\">\n            {{ item.value }}\n          </Button>\n        </PaginationListItem>\n        <PaginationEllipsis v-else :key=\"item.type\" :index=\"index\" />\n      </template>\n\n      <PaginationNext />\n      <PaginationLast />\n    </PaginationList>\n  </Pagination>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Navigation Menu - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/navigation-menu",
    "html": "Navigation Menu\nNavigation Menu\n\nA collection of links for navigating websites.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nGetting started\nComponents\nDocumentation\nInstallation\n​\nbash\nnpx shadcn-vue@latest add navigation-menu\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenu,\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from '@/components/ui/navigation-menu'\n</script>\n\n<template>\n  <NavigationMenu>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item One</NavigationMenuTrigger>\n        <NavigationMenuContent>\n          <NavigationMenuLink>Link</NavigationMenuLink>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenu>\n</template>\nExamples\n​\nLink Component\n​\n\nWhen using the Nuxt.js component, you can use navigationMenuTriggerStyle() to apply the correct styles to the trigger.\n\nts\nimport { navigationMenuTriggerStyle } from '@/components/ui/navigation-menu'\nvue\n<template>\n  <NavigationMenuItem>\n    <NuxtLink to=\"/docs\">\n      <NavigationMenuLink :class=\"navigationMenuTriggerStyle()\">\n        Documentation\n      </NavigationMenuLink>\n    </NuxtLink>\n  </NavigationMenuItem>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nLink Component ​"
  },
  {
    "title": "Menubar - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/menubar",
    "html": "Menubar\nMenubar\n\nA visually persistent menu common in desktop applications that provides quick access to a consistent set of commands.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nFile\nEdit\nView\nProfiles\nInstallation\n​\nbash\nnpx shadcn-vue@latest add menubar\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Menubar,\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarSeparator,\n  MenubarShortcut,\n  MenubarTrigger,\n} from '@/components/ui/menubar'\n</script>\n\n<template>\n  <Menubar>\n    <MenubarMenu>\n      <MenubarTrigger>File</MenubarTrigger>\n      <MenubarContent>\n        <MenubarItem>\n          New Tab <MenubarShortcut>⌘T</MenubarShortcut>\n        </MenubarItem>\n        <MenubarItem>New Window</MenubarItem>\n        <MenubarSeparator />\n        <MenubarItem>Share</MenubarItem>\n        <MenubarSeparator />\n        <MenubarItem>Print</MenubarItem>\n      </MenubarContent>\n    </MenubarMenu>\n  </Menubar>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Label - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/label",
    "html": "Label\nLabel\n\nRenders an accessible label associated with controls.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAccept terms and conditions\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add label\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Label } from '@/components/ui/label'\n</script>\n\n<template>\n  <Label for=\"email\">Your email address</Label>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Input - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/input",
    "html": "Input\nInput\n\nDisplays a form input field or a component that looks like an input field.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add input\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Input } from '@/components/ui/input'\n</script>\n\n<template>\n  <Input />\n</template>\nDefault\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nFile\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPicture\nDisabled\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nWith Label\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEmail\nWith Button\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSubscribe\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nUsername\n\nThis is your public display name.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nDefault ​\nFile ​\nDisabled ​\nWith Label ​\nWith Button ​\nForm ​"
  },
  {
    "title": "Hover Card - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/hover-card",
    "html": "Hover Card\nHover Card\n\nFor sighted users to preview content available behind a link.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\n@vuejs\nInstallation\n​\nbash\nnpx shadcn-vue@latest add hover-card\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from '@/components/ui/hover-card'\n</script>\n\n<template>\n  <HoverCard>\n    <HoverCardTrigger>Hover</HoverCardTrigger>\n    <HoverCardContent>\n      The Vue Framework – created and maintained by @vuejs.\n    </HoverCardContent>\n  </HoverCard>\n</template>\n\nOn This Page"
  },
  {
    "title": "VeeValidate - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/form",
    "html": "VeeValidate\nVeeValidate\n\nBuilding forms with VeeValidate and Zod.\n\nForms are tricky. They are one of the most common things you'll build in a web application, but also one of the most complex.\n\nWell-designed HTML forms are:\n\nWell-structured and semantically correct.\nEasy to use and navigate (keyboard).\nAccessible with ARIA attributes and proper labels.\nHas support for client and server side validation.\nWell-styled and consistent with the rest of the application.\n\nIn this guide, we will take a look at building forms with vee-validate and zod. We're going to use a <FormField> component to compose accessible forms using Radix Vue components.\n\nFeatures\n​\n\nThe <Form /> component is a wrapper around the vee-validate library. It provides a few things:\n\nComposable components for building forms.\nA <FormField /> component for building controlled form fields.\nForm validation using zod.\nApplies the correct aria attributes to form fields based on states, handle unqiue IDs\nBuilt to work with all Radix Vue components.\nBring your own schema library. We use zod but you can use any other supported schema validation you want, like yup or valibot.\nYou have full control over the markup and styling.\n\nvee-validate makes use of two flavors to add validation to your forms.\n\nComposition API\nHigher-order components (HOC)\nAnatomy\n​\nvue\n<Form>\n  <FormField v-slot=\"{ ... }\">\n    <FormItem>\n      <FormLabel />\n      <FormControl>\n        <!-- any Form Input component or native input elements -->\n      </FormControl>\n      <FormDescription />\n      <FormMessage />\n    </FormItem>\n  </FormField>\n</Form>\nExample\n​\nComponent\nNative\nInput Component\n​\nvue\n<FormField v-slot=\"{ componentField }\">\n  <FormItem>\n    <FormLabel>Username</FormLabel>\n    <FormControl>\n      <Input placeholder=\"shadcn\" v-bind=\"componentField\" />\n    </FormControl>\n    <FormDescription />\n    <FormMessage />\n  </FormItem>\n</FormField>\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add form\nUsage\n​\nCreate a form schema\n​\n\nDefine the shape of your form using a Zod schema. You can read more about using Zod in the Zod documentation.\n\nUse @vee-validate/zod to integrate Zod schema validation with vee-validate\n\ntoTypedSchema also makes the form values and submitted values typed automatically and caters for both input and output types of that schema.\n\nvue\n<script setup lang=\"ts\">\nimport { toTypedSchema } from '@vee-validate/zod'\nimport * as z from 'zod'\n\nconst formSchema = toTypedSchema(z.object({\n  username: z.string().min(2).max(50),\n}))\n</script>\nDefine a form\n​\n\nUse the useForm composable from vee-validate or use <Form /> component to create a from.\n\nComposition\nComponent\nvue\n<script setup lang=\"ts\">\nimport { useForm } from 'vee-validate'\nimport { toTypedSchema } from '@vee-validate/zod'\nimport * as z from 'zod'\n\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage\n} from '@/components/ui/form'\n\nconst formSchema = toTypedSchema(z.object({\n  username: z.string().min(2).max(50),\n}))\n\nconst form = useForm({\n  validationSchema: formSchema,\n})\n\nconst onSubmit = form.handleSubmit((values) => {\n  console.log('Form submitted!', values)\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    ...\n  </form>\n</template>\nBuild your form\n​\n\nBased on last step we can either use <Form /> component or useForm composable useForm is recommended cause values are typed automatically\n\nvue\n<script setup lang=\"ts\">\nimport { useForm } from 'vee-validate'\nimport { toTypedSchema } from '@vee-validate/zod'\nimport * as z from 'zod'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form'\nimport { Input } from '@/components/ui/input'\n\nconst formSchema = toTypedSchema(z.object({\n  username: z.string().min(2).max(50),\n}))\n\nconst form = useForm({\n  validationSchema: formSchema,\n})\n\nconst onSubmit = form.handleSubmit((values) => {\n  console.log('Form submitted!', values)\n})\n</script>\n\n<template>\n  <form @submit=\"onSubmit\">\n    <FormField v-slot=\"{ componentField }\" name=\"username\">\n      <FormItem>\n        <FormLabel>Username</FormLabel>\n        <FormControl>\n          <Input type=\"text\" placeholder=\"shadcn\" v-bind=\"componentField\" />\n        </FormControl>\n        <FormDescription>\n          This is your public display name.\n        </FormDescription>\n        <FormMessage />\n      </FormItem>\n    </FormField>\n    <Button type=\"submit\">\n      Submit\n    </Button>\n  </form>\n</template>\nDone\n​\n\nThat's it. You now have a fully accessible form that is type-safe with client-side validation.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nUsername\n\nThis is your public display name.\n\nSubmit\nExamples\n​\n\nSee the following links for more examples on how to use the vee-validate features with other components:\n\nCheckbox\nDate Picker\nInput\nRadio Group\nSelect\nSwitch\nTextarea\nCombobox\nExtras\n​\n\nThis example shows how to add motion to your forms with Formkit AutoAnimate\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nUsername\n\nThis is your public display name.\n\nSubmit\n\nOn This Page\n\nFeatures ​\nAnatomy ​\nExample ​\nInstallation ​\nUsage ​\nCreate a form schema ​\nDefine a form ​\nBuild your form ​\nDone ​\nExamples ​\nExtras ​"
  },
  {
    "title": "Dropdown Menu - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/dropdown-menu",
    "html": "Dropdown Menu\nDropdown Menu\n\nDisplays a menu to the user — such as a set of actions or functions — triggered by a button.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nOpen\nInstallation\n​\nbash\nnpx shadcn-vue@latest add dropdown-menu\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger>Open</DropdownMenuTrigger>\n    <DropdownMenuContent>\n      <DropdownMenuLabel>My Account</DropdownMenuLabel>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem>Profile</DropdownMenuItem>\n      <DropdownMenuItem>Billing</DropdownMenuItem>\n      <DropdownMenuItem>Team</DropdownMenuItem>\n      <DropdownMenuItem>Subscription</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Dialog - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/dialog",
    "html": "Dialog\nDialog\n\nA window overlaid on either the primary window or another dialog window, rendering the content underneath inert.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEdit Profile\nInstallation\n​\nbash\nnpx shadcn-vue@latest add dialog\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog'\n</script>\n\n<template>\n  <Dialog>\n    <DialogTrigger>\n      Edit Profile\n    </DialogTrigger>\n    <DialogContent>\n      <DialogHeader>\n        <DialogTitle>Edit profile</DialogTitle>\n        <DialogDescription>\n          Make changes to your profile here. Click save when you're done.\n        </DialogDescription>\n      </DialogHeader>\n\n      <DialogFooter>\n        Save changes\n      </DialogFooter>\n    </DialogContent>\n  </Dialog>\n</template>\nExamples\n​\nCustom close button\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nShare\nNotes\n​\n\nTo activate the Dialog component from within a Context Menu or Dropdown Menu, you must encase the Context Menu or Dropdown Menu component in the Dialog component. For more information, refer to the linked issue here.\n\njs\n<Dialog>\n  <ContextMenu>\n    <ContextMenuTrigger>Right click</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Open</ContextMenuItem>\n      <ContextMenuItem>Download</ContextMenuItem>\n      <DialogTrigger asChild>\n        <ContextMenuItem>\n          <span>Delete</span>\n        </ContextMenuItem>\n      </DialogTrigger>\n    </ContextMenuContent>\n  </ContextMenu>\n  <DialogContent>\n    <DialogHeader>\n      <DialogTitle>Are you absolutely sure?</DialogTitle>\n      <DialogDescription>\n        This action cannot be undone. Are you sure you want to permanently\n        delete this file from our servers?\n      </DialogDescription>\n    </DialogHeader>\n    <DialogFooter>\n      <Button type=\"submit\">Confirm</Button>\n    </DialogFooter>\n  </DialogContent>\n</Dialog>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nCustom close button ​\nNotes ​"
  },
  {
    "title": "Data Table - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/data-table",
    "html": "Data Table\nData Table\n\nPowerful table and datagrids built using TanStack Table.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nColumns\n\tStatus\tEmail\n\t\nAmount\n\t\n\n\t\nSuccess\n\t\nken99@yahoo.com\n\t\n$316.00\n\t\nOpen menu\n\n\n\t\nSuccess\n\t\nabe45@gmail.com\n\t\n$242.00\n\t\nOpen menu\n\n\n\t\nProcessing\n\t\nmonserrat44@gmail.com\n\t\n$837.00\n\t\nOpen menu\n\n\n\t\nSuccess\n\t\nsilas22@gmail.com\n\t\n$874.00\n\t\nOpen menu\n\n\n\t\nFailed\n\t\ncarmella@hotmail.com\n\t\n$721.00\n\t\nOpen menu\n0 of 5 row(s) selected.\nPreviousNext\nIntroduction\n​\n\nEvery data table or datagrid I've created has been unique. They all behave differently, have specific sorting and filtering requirements, and work with different data sources.\n\nIt doesn't make sense to combine all of these variations into a single component. If we do that, we'll lose the flexibility that headless UI provides.\n\nSo instead of a data-table component, I thought it would be more helpful to provide a guide on how to build your own.\n\nWe'll start with the basic <Table /> component and build a complex data table from scratch.\n\nTip: If you find yourself using the same table in multiple places in your app, you can always extract it into a reusable component.\n\nTable of Contents\n​\n\nThis guide will show you how to use TanStack Table and the\ncomponent to build your own custom data table. We'll cover the following topics:\n\nBasic Table\nRow Actions\nPagination\nSorting\nFiltering\nVisibility\nRow Selection\nReusable Components\nInstallation\n​\nAdd the <Table /> component to your project:\nbash\nnpx shadcn-vue@latest add table\nAdd tanstack/vue-table dependency:\nbash\nnpm install @tanstack/vue-table\nPrerequisites\n​\n\nWe are going to build a table to show recent payments. Here's what our data looks like:\n\nts\ninterface Payment {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const payments: Payment[] = [\n  {\n    id: '728ed52f',\n    amount: 100,\n    status: 'pending',\n    email: 'm@example.com',\n  },\n  {\n    id: '489e1d42',\n    amount: 125,\n    status: 'processing',\n    email: 'example@gmail.com',\n  },\n  // ...\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\nProject Structure\n​\n\nStart by creating the following file structure:\n\ntxt\n components\n    └── payments\n          ├── columns.ts\n          ├── data-table.vue\n          ├── data-table-dropdown.vue\n└── app.vue\n\nI'm using a Nuxt.js example here but this works for any other Vue framework.\n\ncolumns.ts It will contain our column definitions.\ndata-table.vue It will contain our <DataTable /> component.\ndata-table-dropdown.vue It will contain our <DropdownAction /> component.\napp.vue This is where we'll fetch data and render our table.\nBasic Table\n​\n\nLet's start by building a basic table.\n\nColumn Definitions\n​\n\nFirst, we'll define our columns in the columns.ts file.\n\nts\nimport type { ColumnDef } from '@tanstack/vue-table'\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport interface Payment {\n  id: string\n  amount: number\n  status: 'pending' | 'processing' | 'success' | 'failed'\n  email: string\n}\n\nexport const columns: ColumnDef<Payment>[] = [\n  {\n    accessorKey: 'status',\n    header: 'Status',\n  },\n  {\n    accessorKey: 'email',\n    header: 'Email',\n  },\n  {\n    accessorKey: 'amount',\n    header: 'Amount',\n  },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\nNote: Columns are where you define the core of what your table will look like. They define the data that will be displayed, how it will be formatted, sorted and filtered.\n\n<DataTable /> component\n​\n\nNext, we'll create a <DataTable /> component to render our table.\n\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type { ColumnDef } from '@tanstack/vue-table'\nimport {\n    FlexRender,\n    getCoreRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n})\n</script>\n\n<template>\n    <div class=\"border rounded-md\">\n        <Table>\n            <TableHeader>\n                <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n                    <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n                        <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n                            :props=\"header.getContext()\" />\n                    </TableHead>\n                </TableRow>\n            </TableHeader>\n            <TableBody>\n                <template v-if=\"table.getRowModel().rows?.length\">\n                    <TableRow v-for=\"row in table.getRowModel().rows\" :key=\"row.id\"\n                        :data-state=\"row.getIsSelected() ? 'selected' : undefined\">\n                        <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                            <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n                        </TableCell>\n                    </TableRow>\n                </template>\n                <template v-else>\n                    <TableRow>\n                        <TableCell :colSpan=\"columns.length\" class=\"h-24 text-center\">\n                            No results.\n                        </TableCell>\n                    </TableRow>\n                </template>\n            </TableBody>\n        </Table>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n\n\nTip: If you find yourself using <DataTable /> in multiple places, this is the component you could make reusable by extracting it to components/ui/data-table.vue.\n\n<DataTable :columns=\"columns\" :data=\"data\" />\n\nRender the table\n​\n\nFinally, we'll render our table in our index component.\n\nts\n<script setup lang=\"ts\">\nimport { ref, onMounted } from 'vue'\nimport { columns } from \"./components/columns\"\nimport type { Payment } from './components/columns';\nimport DataTable from \"./components/DataTable.vue\"\n\nconst data = ref<Payment[]>([])\n\nasync function getData(): Promise<Payment[]> {\n  // Fetch data from your API here.\n  return [\n    {\n      id: \"728ed52f\",\n      amount: 100,\n      status: \"pending\",\n      email: \"m@example.com\",\n    },\n    // ...\n  ]\n}\n\nonMounted(async () => {\n  data.value = await getData();\n});\n</script>\n\n<template>\n  <div class=\"container py-10 mx-auto\">\n    <DataTable :columns=\"columns\" :data=\"data\" />\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\nCell Formatting\n​\n\nLet's format the amount cell to display the dollar amount. We'll also align the cell to the right.\n\nUpdate columns definition\n​\n\nUpdate the header and cell definitions for amount as follows:\n\nts\nimport { h } from 'vue'\n\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        accessorKey: \"amount\",\n        header: () => h('div', { class: 'text-right' }, 'Amount'),\n        cell: ({ row }) => {\n            const amount = parseFloat(row.getValue(\"amount\"))\n            const formatted = new Intl.NumberFormat(\"en-US\", {\n                style: \"currency\",\n                currency: \"USD\",\n            }).format(amount)\n\n            return h('div', { class: 'text-right font-medium' }, formatted)\n        },\n    }\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nYou can use the same approach to format other cells and headers.\n\nRow Actions\n​\n\nLet's add row actions to our table. We'll use a <Dropdown /> component for this.\n\nAdd the following into your DataTableDropDown.vue component:\n​\nts\n// DataTableDropDown.vue\n<script setup lang=\"ts\">\nimport { MoreHorizontal } from 'lucide-vue-next'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Button } from '@/components/ui/button'\n\ndefineProps<{\n  payment: {\n    id: string\n  }\n}>()\n\nfunction copy(id: string) {\n  navigator.clipboard.writeText(id)\n}\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button variant=\"ghost\" class=\"w-8 h-8 p-0\">\n        <span class=\"sr-only\">Open menu</span>\n        <MoreHorizontal class=\"w-4 h-4\" />\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\">\n      <DropdownMenuLabel>Actions</DropdownMenuLabel>\n      <DropdownMenuItem @click=\"copy(payment.id)\">\n        Copy payment ID\n      </DropdownMenuItem>\n      <DropdownMenuSeparator />\n      <DropdownMenuItem>View customer</DropdownMenuItem>\n      <DropdownMenuItem>View payment details</DropdownMenuItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\nUpdate columns definition\n​\n\nUpdate our columns definition to add a new actions column. The actions cell returns a <Dropdown /> component.\n\nts\nimport { ColumnDef } from \"@tanstack/vue-table\"\nimport DropdownAction from '@/components/DataTableDropDown.vue'\n\nexport const columns: ColumnDef<Payment>[] = [\n  // ...\n    {\n        id: 'actions',\n        enableHiding: false,\n        cell: ({ row }) => {\n            const payment = row.original\n\n            return h('div', { class: 'relative' }, h(DropdownAction, {\n                payment,\n            }))\n        },\n    },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nYou can access the row data using row.original in the cell function. Use this to handle actions for your row eg. use the id to make a DELETE call to your API.\n\nPagination\n​\n\nNext, we'll add pagination to our table.\n\nUpdate <DataTable>\n​\nts\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n})\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\nThis will automatically paginate your rows into pages of 10. See the pagination docs for more information on customizing page size and implementing manual pagination.\n\nAdd pagination controls\n​\n\nWe can add pagination controls to our table using the <Button /> component and the table.previousPage(), table.nextPage() API methods.\n\nts\n// components/payments/DataTable.vue\n<script lang=\"ts\" generic=\"TData, TValue\">\nimport { Button } from \"@/components/ui/button\"\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n})\n\n</script>\n\n<template>\n    <div>\n      <div class=\"border rounded-md\">\n        <Table>\n          { // .... }\n        </Table>\n      </div>\n      <div class=\"flex items-center justify-end py-4 space-x-2\">\n      <Button\n          variant=\"outline\"\n          size=\"sm\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.previousPage()\"\n        >\n          Previous\n        </Button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.nextPage()\"\n        >\n          Next\n        </Button>\n      </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n\n\nSee Reusable Components section for a more advanced pagination component.\n\nSorting\n​\n\nLet's make the email column sortable.\n\nAdd the following into your utils file:\n​\nts\nimport { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { camelize, getCurrentInstance, toHandlerKey } from 'vue'\n\nimport type { Updater } from '@tanstack/vue-table'\nimport { type Ref } from 'vue'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function valueUpdater<T extends Updater<any>>(updaterOrValue: T, ref: Ref) {\n  ref.value\n    = typeof updaterOrValue === 'function'\n      ? updaterOrValue(ref.value)\n      : updaterOrValue\n}\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nThe valueUpdater function updates a Vue ref object's value. It handles both direct assignments and transformations using a function. If updaterOrValue is a function, it's called with the current ref value, and the result is assigned to ref.value. If it's not a function, it's directly assigned to ref.value. This utility enhances flexibility in updating ref values. While Vue ref can manage reactive state directly, valueUpdater simplifies value updates, improving code readability and maintainability when the new state can be a direct value or a function generating it based on the current one.\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  SortingState,\n} from '@tanstack/vue-table'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getSortedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    state: {\n        get sorting() { return sorting.value },\n    },\n})\n\n</script>\n\n<template>\n   <div>\n      <div class=\"border rounded-md\">\n        <Table>{ ... }</Table>\n      </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n\nMake header cell sortable\n​\n\nWe can now update the email header cell to add sorting controls.\n\nts\n// components/payments/columns.ts\nimport type {\n  ColumnDef,\n} from '@tanstack/vue-table'\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Button } from '@/components/ui/button'\n\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        accessorKey: 'email',\n        header: ({ column }) => {\n            return h(Button, {\n                variant: 'ghost',\n                onClick: () => column.toggleSorting(column.getIsSorted() === 'asc'),\n            }, () => ['Email', h(ArrowUpDown, { class: 'ml-2 h-4 w-4' })])\n        },\n        cell: ({ row }) => h('div', { class: 'lowercase' }, row.getValue('email')),\n    },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\nThis will automatically sort the table (asc and desc) when the user toggles on the header cell.\n\nFiltering\n​\n\nLet's add a search input to filter emails in our table.\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n} from '@tanstack/vue-table'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n    },\n})\n\n</script>\n\n<template>\n    <div>\n        <div class=\"flex items-center py-4\">\n            <Input class=\"max-w-sm\" placeholder=\"Filter emails...\"\n                :model-value=\"table.getColumn('email')?.getFilterValue() as string\"\n                @update:model-value=\" table.getColumn('email')?.setFilterValue($event)\" />\n        </div>\n        <div class=\"border rounded-md\">\n            <Table>{ ... }</Table>\n        </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\nFiltering is now enabled for the email column. You can add filters to other columns as well. See the filtering docs for more information on customizing filters.\n\nVisibility\n​\n\nAdding column visibility is fairly simple using @tanstack/vue-table visibility API.\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nimport type {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n} from '@tanstack/vue-table'\n\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\nimport { valueUpdater } from '@/lib/utils'\n\nimport { ArrowUpDown, ChevronDown } from 'lucide-vue-next'\nimport { Input } from '@/components/ui/input'\nimport { Button } from '@/components/ui/button'\nimport { h, ref } from 'vue'\n\nimport {\n    FlexRender,\n    getCoreRowModel,\n    getPaginationRowModel,\n    getFilteredRowModel,\n    getSortedRowModel,\n    useVueTable,\n} from \"@tanstack/vue-table\"\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from \"@/components/ui/table\"\n\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(), \n    getFilteredRowModel: getFilteredRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n        get columnVisibility() { return columnVisibility.value },\n    },\n})\n\n</script>\n\n<template>\n    <div>\n        <div class=\"flex items-center py-4\">\n            <Input class=\"max-w-sm\" placeholder=\"Filter emails...\"\n                :model-value=\"table.getColumn('email')?.getFilterValue() as string\"\n                @update:model-value=\" table.getColumn('email')?.setFilterValue($event)\" />\n            <DropdownMenu>\n                <DropdownMenuTrigger as-child>\n                    <Button variant=\"outline\" class=\"ml-auto\">\n                        Columns\n                        <ChevronDown class=\"w-4 h-4 ml-2\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                    <DropdownMenuCheckboxItem\n                        v-for=\"column in table.getAllColumns().filter((column) => column.getCanHide())\" :key=\"column.id\"\n                        class=\"capitalize\" :checked=\"column.getIsVisible()\" @update:checked=\"(value) => {\n                            column.toggleVisibility(!!value)\n                        }\">\n                        {{ column.id }}\n                    </DropdownMenuCheckboxItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </div>\n        <div class=\"border rounded-md\">\n            <Table>\n                <TableHeader>\n                    <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\n                        <TableHead v-for=\"header in headerGroup.headers\" :key=\"header.id\">\n                            <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\"\n                                :props=\"header.getContext()\" />\n                        </TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    <template v-if=\"table.getRowModel().rows?.length\">\n                        <TableRow v-for=\"row in table.getRowModel().rows\" :key=\"row.id\"\n                            :data-state=\"row.getIsSelected() ? 'selected' : undefined\">\n                            <TableCell v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\">\n                                <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\n                            </TableCell>\n                        </TableRow>\n                    </template>\n                    <template v-else>\n                        <TableRow>\n                            <TableCell :colSpan=\"columns.length\" class=\"h-24 text-center\">\n                                No results.\n                            </TableCell>\n                        </TableRow>\n                    </template>\n                </TableBody>\n            </Table>\n        </div>\n    </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n\n\nThis adds a dropdown menu that you can use to toggle column visibility.\n\nRow Selection\n​\n\nNext, we're going to add row selection to our table.\n\nUpdate column definitions\n​\nts\nimport type { ColumnDef } from '@tanstack/vue-table'\n\nimport { Checkbox } from '@/components/ui/checkbox'\n\nexport const columns: ColumnDef<Payment>[] = [\n    {\n        id: 'select',\n        header: ({ table }) => h(Checkbox, {\n            'checked': table.getIsAllPageRowsSelected(),\n            'onUpdate:checked': (value: boolean) => table.toggleAllPageRowsSelected(!!value),\n            'ariaLabel': 'Select all',\n        }),\n        cell: ({ row }) => h(Checkbox, {\n            'checked': row.getIsSelected(),\n            'onUpdate:checked': (value: boolean) => row.toggleSelected(!!value),\n            'ariaLabel': 'Select row',\n        }),\n        enableSorting: false,\n        enableHiding: false,\n    },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\nUpdate <DataTable>\n​\nts\n<script setup lang=\"ts\" generic=\"TData, TValue\">\nconst props = defineProps<{\n    columns: ColumnDef<TData, TValue>[]\n    data: TData[]\n}>()\n\nconst sorting = ref<SortingState>([])\nconst columnFilters = ref<ColumnFiltersState>([])\nconst columnVisibility = ref<VisibilityState>({})\nconst rowSelection = ref({})\n\nconst table = useVueTable({\n    data: props.data,\n    columns: props.columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(), \n    getFilteredRowModel: getFilteredRowModel(),\n    onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\n    onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\n    onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\n    onRowSelectionChange: updaterOrValue => valueUpdater(updaterOrValue, rowSelection),\n    state: {\n        get sorting() { return sorting.value },\n        get columnFilters() { return columnFilters.value },\n        get columnVisibility() { return columnVisibility.value },\n        get rowSelection() { return rowSelection.value },\n    },\n})\n\n</script>\n\n<template>\n  <div>\n    <div class=\"border rounded-md\">\n        <Table />\n    </div>\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n\n\nThis adds a checkbox to each row and a checkbox in the header to select all rows.\n\nShow selected rows\n​\n\nYou can show the number of selected rows using the table.getFilteredSelectedRowModel() API.\n\nvue\n<div class=\"flex-1 text-sm text-muted-foreground\">\n    {{ table.getFilteredSelectedRowModel().rows.length }} of\n    {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n</div>\nReusable Components\n​\n\nHere are some components you can use to build your data tables. This is from the Tasks demo.\n\nColumn header\n​\n\nMake any column header sortable and hideable.\n\nts\n<script setup lang=\"ts\">\nimport type { Column } from '@tanstack/vue-table'\nimport { type Task } from '../data/schema'\nimport ArrowDownIcon from '~icons/radix-icons/arrow-down'\nimport ArrowUpIcon from '~icons/radix-icons/arrow-up'\nimport CaretSortIcon from '~icons/radix-icons/caret-sort'\nimport EyeNoneIcon from '~icons/radix-icons/eye-none'\n\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\ninterface DataTableColumnHeaderProps {\n  column: Column<Task, any>\n  title: string\n}\n\ndefineProps<DataTableColumnHeaderProps>()\n</script>\n\n<script lang=\"ts\">\nexport default {\n  inheritAttrs: false,\n}\n</script>\n\n<template>\n  <div v-if=\"column.getCanSort()\" :class=\"cn('flex items-center space-x-2', $attrs.class ?? '')\">\n    <DropdownMenu>\n      <DropdownMenuTrigger as-child>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          class=\"-ml-3 h-8 data-[state=open]:bg-accent\"\n        >\n          <span>{{ title }}</span>\n          <ArrowDownIcon v-if=\"column.getIsSorted() === 'desc'\" class=\"w-4 h-4 ml-2\" />\n          <ArrowUpIcon v-else-if=\" column.getIsSorted() === 'asc'\" class=\"w-4 h-4 ml-2\" />\n          <CaretSortIcon v-else class=\"w-4 h-4 ml-2\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"start\">\n        <DropdownMenuItem @click=\"column.toggleSorting(false)\">\n          <ArrowUpIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Asc\n        </DropdownMenuItem>\n        <DropdownMenuItem @click=\"column.toggleSorting(true)\">\n          <ArrowDownIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Desc\n        </DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem @click=\"column.toggleVisibility(false)\">\n          <EyeNoneIcon class=\"mr-2 h-3.5 w-3.5 text-muted-foreground/70\" />\n          Hide\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  </div>\n\n  <div v-else :class=\"$attrs.class\">\n    {{ title }}\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\nts\nexport const columns = [\n  {\n    accessorKey: \"email\",\n    header: ({ column }) => (\n        return h(DataTableColumnHeader, {\n            props: {\n                column: column,\n                title: 'Email'\n            }\n        })\n    ),\n  },\n]\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\nPagination\n​\n\nAdd pagination controls to your table including page size and selection count.\n\nts\n<script setup lang=\"ts\">\nimport { type Table } from '@tanstack/vue-table'\nimport { type Task } from '../data/schema'\nimport ChevronLeftIcon from '~icons/radix-icons/chevron-left'\nimport ChevronRightIcon from '~icons/radix-icons/chevron-right'\nimport DoubleArrowLeftIcon from '~icons/radix-icons/double-arrow-left'\nimport DoubleArrowRightIcon from '~icons/radix-icons/double-arrow-right'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select'\n\ninterface DataTablePaginationProps {\n  table: Table<Task>\n}\ndefineProps<DataTablePaginationProps>()\n</script>\n\n<template>\n  <div class=\"flex items-center justify-between px-2\">\n    <div class=\"flex-1 text-sm text-muted-foreground\">\n      {{ table.getFilteredSelectedRowModel().rows.length }} of\n      {{ table.getFilteredRowModel().rows.length }} row(s) selected.\n    </div>\n    <div class=\"flex items-center space-x-6 lg:space-x-8\">\n      <div class=\"flex items-center space-x-2\">\n        <p class=\"text-sm font-medium\">\n          Rows per page\n        </p>\n        <Select\n          :model-value=\"`${table.getState().pagination.pageSize}`\"\n          @update:model-value=\"table.setPageSize\"\n        >\n          <SelectTrigger class=\"h-8 w-[70px]\">\n            <SelectValue :placeholder=\"`${table.getState().pagination.pageSize}`\" />\n          </SelectTrigger>\n          <SelectContent side=\"top\">\n            <SelectItem v-for=\"pageSize in [10, 20, 30, 40, 50]\" :key=\"pageSize\" :value=\"`${pageSize}`\">\n              {{ pageSize }}\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      <div class=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n        Page {{ table.getState().pagination.pageIndex + 1 }} of\n        {{ table.getPageCount() }}\n      </div>\n      <div class=\"flex items-center space-x-2\">\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.setPageIndex(0)\"\n        >\n          <span class=\"sr-only\">Go to first page</span>\n          <DoubleArrowLeftIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanPreviousPage()\"\n          @click=\"table.previousPage()\"\n        >\n          <span class=\"sr-only\">Go to previous page</span>\n          <ChevronLeftIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"w-8 h-8 p-0\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.nextPage()\"\n        >\n          <span class=\"sr-only\">Go to next page</span>\n          <ChevronRightIcon class=\"w-4 h-4\" />\n        </Button>\n        <Button\n          variant=\"outline\"\n          class=\"hidden w-8 h-8 p-0 lg:flex\"\n          :disabled=\"!table.getCanNextPage()\"\n          @click=\"table.setPageIndex(table.getPageCount() - 1)\"\n        >\n          <span class=\"sr-only\">Go to last page</span>\n          <DoubleArrowRightIcon class=\"w-4 h-4\" />\n        </Button>\n      </div>\n    </div>\n  </div>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n\nvue\n<DataTablePagination :table=\"table\" />\nColumn toggle\n​\n\nA component to toggle column visibility.\n\nts\n\n<script setup lang=\"ts\">\nimport type { Table } from '@tanstack/vue-table'\nimport { computed } from 'vue'\nimport { type Task } from '../data/schema'\nimport MixerHorizontalIcon from '~icons/radix-icons/mixer-horizontal'\n\nimport { Button } from '@/components/ui/button'\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu'\n\ninterface DataTableViewOptionsProps {\n  table: Table<Task>\n}\n\nconst props = defineProps<DataTableViewOptionsProps>()\n\nconst columns = computed(() => props.table.getAllColumns()\n  .filter(\n    column =>\n      typeof column.accessorFn !== 'undefined' && column.getCanHide(),\n  ))\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger as-child>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        class=\"hidden h-8 ml-auto lg:flex\"\n      >\n        <MixerHorizontalIcon class=\"w-4 h-4 mr-2\" />\n        View\n      </Button>\n    </DropdownMenuTrigger>\n    <DropdownMenuContent align=\"end\" class=\"w-[150px]\">\n      <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n      <DropdownMenuSeparator />\n\n      <DropdownMenuCheckboxItem\n        v-for=\"column in columns\"\n        :key=\"column.id\"\n        class=\"capitalize\"\n        :checked=\"column.getIsVisible()\"\n        @update:checked=\"(value) => column.toggleVisibility(!!value)\"\n      >\n        {{ column.id }}\n      </DropdownMenuCheckboxItem>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n\nvue\n<DataTableViewOptions :table=\"table\" />\n\nOn This Page\n\nIntroduction ​\nTable of Contents ​\nInstallation ​\nPrerequisites ​\nProject Structure ​\nBasic Table ​\nColumn Definitions ​\n<DataTable /> component ​\nRender the table ​\nCell Formatting ​\nUpdate columns definition ​\nRow Actions ​\nAdd the following into your DataTableDropDown.vue component: ​\nUpdate columns definition ​\nPagination ​\nUpdate <DataTable> ​\nAdd pagination controls ​\nSorting ​\nAdd the following into your utils file: ​\nUpdate <DataTable> ​\nMake header cell sortable ​\nFiltering ​\nUpdate <DataTable> ​\nVisibility ​\nUpdate <DataTable> ​\nRow Selection ​\nUpdate column definitions ​\nUpdate <DataTable> ​\nShow selected rows ​\nReusable Components ​\nColumn header ​\nPagination ​\nColumn toggle ​"
  },
  {
    "title": "Date Picker - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/date-picker",
    "html": "Date Picker\nDate Picker\n\nA date picker component with range and presets.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPick a date\nInstallation\n​\n\nThe Date Picker is built using a composition of the <Popover /> and the <Calendar /> components.\n\nSee installation instructions for the Popover and the Calendar components.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { format } from 'date-fns'\nimport { Calendar as CalendarIcon } from 'lucide-vue-next'\n\nimport { ref } from 'vue'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Calendar } from '@/components/ui/calendar'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n\nconst date = ref<Date>()\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger as-child>\n      <Button\n        :variant=\"'outline'\"\n        :class=\"cn(\n          'w-[280px] justify-start text-left font-normal',\n          !date && 'text-muted-foreground',\n        )\"\n      >\n        <CalendarIcon class=\"mr-2 h-4 w-4\" />\n        <span>{{ date ? format(date, \"PPP\") : \"Pick a date\" }}</span>\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent class=\"w-auto p-0\">\n      <Calendar v-model=\"date\" />\n    </PopoverContent>\n  </Popover>\n</template>\nExamples\n​\nDate Picker\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPick a date\nDate Range Picker\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nJan 20, 2022 - Feb 09, 2022\nWith Presets\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPick a date\nForm\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDate of birth\nPick a date\n\nYour date of birth is used to calculate your age.\n\nSubmit\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDate Picker ​\nDate Range Picker ​\nWith Presets ​\nForm ​"
  },
  {
    "title": "Context Menu - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/context-menu",
    "html": "Context Menu\nContext Menu\n\nDisplays a menu to the user — such as a set of actions or functions — triggered by a button.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nRight click here\nInstallation\n​\nbash\nnpx shadcn-vue@latest add context-menu\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenu,\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from '@/components/ui/context-menu'\n</script>\n\n<template>\n  <ContextMenu>\n    <ContextMenuTrigger>Right click</ContextMenuTrigger>\n    <ContextMenuContent>\n      <ContextMenuItem>Profile</ContextMenuItem>\n      <ContextMenuItem>Billing</ContextMenuItem>\n      <ContextMenuItem>Team</ContextMenuItem>\n      <ContextMenuItem>Subscription</ContextMenuItem>\n    </ContextMenuContent>\n  </ContextMenu>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Command - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/command",
    "html": "Command\nCommand\n\nFast, composable, unstyled command menu.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nSuggestions\nCalendar\nSearch Emoji\nCalculator\nSettings\nProfile\n⌘P\nBilling\n⌘B\nSettings\n⌘S\nInstallation\n​\nbash\nnpx shadcn-vue@latest add command\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n  CommandShortcut,\n} from '@/components/ui/command'\n</script>\n\n<template>\n  <Command>\n    <CommandInput placeholder=\"Type a command or search...\" />\n    <CommandList>\n      <CommandEmpty>No results found.</CommandEmpty>\n      <CommandGroup heading=\"Suggestions\">\n        <CommandItem value=\"calendar\">\n          Calendar\n        </CommandItem>\n        <CommandItem value=\"search-emoji\">\n          Search Emoji\n        </CommandItem>\n        <CommandItem value=\"calculator\">\n          Calculator\n        </CommandItem>\n      </CommandGroup>\n      <CommandSeparator />\n      <CommandGroup heading=\"Settings\">\n        <CommandItem value=\"profile\">\n          Profile\n        </CommandItem>\n        <CommandItem value=\"billing\">\n          Billing\n        </CommandItem>\n        <CommandItem value=\"settings\">\n          Settings\n        </CommandItem>\n      </CommandGroup>\n    </CommandList>\n  </Command>\n</template>\nExamples\n​\nDialog\n​\nPreview\nCode\nStyle:\n\nPress \n⌘\nJ\n\nTo show the command menu in a dialog, use the <CommandDialog /> component.\n\nvue\n<script setup lang=\"ts\">\nimport { useMagicKeys } from '@vueuse/core'\n\nimport { ref, watch } from 'vue'\n\nconst open = ref(false)\n\nconst keys = useMagicKeys()\nconst CmdJ = keys['Cmd+J']\n\nfunction handleOpenChange() {\n  open.value = !open.value\n}\n\nwatch(CmdJ, (v) => {\n  if (v)\n    handleOpenChange()\n})\n</script>\n\n<template>\n  <div>\n    <p class=\"text-sm text-muted-foreground\">\n      Press\n      <kbd\n        class=\"pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100\"\n      >\n        <span class=\"text-xs\">⌘</span>J\n      </kbd>\n    </p>\n    <CommandDialog :open=\"open\" :on-open-change=\"handleOpenChange\">\n      <CommandInput placeholder=\"Type a command or search...\" />\n      <CommandList>\n        <CommandEmpty>No results found.</CommandEmpty>\n        <CommandGroup heading=\"Suggestions\">\n          <CommandItem value=\"calendar\">\n            Calendar\n          </CommandItem>\n          <CommandItem value=\"search-emoji\">\n            Search Emoji\n          </CommandItem>\n          <CommandItem value=\"calculator\">\n            Calculator\n          </CommandItem>\n        </CommandGroup>\n        <CommandSeparator />\n        <CommandGroup heading=\"Settings\">\n          <CommandItem value=\"profile\">\n            Profile\n          </CommandItem>\n          <CommandItem value=\"billing\">\n            Billing\n          </CommandItem>\n          <CommandItem value=\"settings\">\n            Settings\n          </CommandItem>\n        </CommandGroup>\n      </CommandList>\n    </CommandDialog>\n  </div>\n</template>\nCombobox\n​\n\nYou can use the <Command /> component as a combobox. See the Combobox page for more information.\n\n\nOn This Page"
  },
  {
    "title": "Combobox - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/combobox",
    "html": "Combobox\nCombobox\n\nAutocomplete input and command palette with a list of suggestions.\n\nPreview\nCode\nStyle:\nSelect framework...\n\n\nNote\n\nRadix Vue introduced a breaking change. You will need to wrap ComboboxGroup and ComboboxItem inside of ComboboxList now.\n\nInstallation\n​\n\nThe Combobox is built using a composition of the <Popover /> and the <Command /> components.\n\nSee installation instructions for the Popover and the Command components.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Check, ChevronsUpDown } from 'lucide-vue-next'\n\nimport { ref } from 'vue'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList\n} from '@/components/ui/command'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\n\nconst frameworks = [\n  { value: 'next.js', label: 'Next.js' },\n  { value: 'sveltekit', label: 'SvelteKit' },\n  { value: 'nuxt.js', label: 'Nuxt.js' },\n  { value: 'remix', label: 'Remix' },\n  { value: 'astro', label: 'Astro' },\n]\n\nconst open = ref(false)\nconst value = ref({})\n</script>\n\n<template>\n  <Popover v-model:open=\"open\">\n    <PopoverTrigger as-child>\n      <Button\n        variant=\"outline\"\n        role=\"combobox\"\n        :aria-expanded=\"open\"\n        class=\"w-[200px] justify-between\"\n      >\n        {{ value ? frameworks.find((framework) => framework.value === value)?.label : 'Select framework...' }}\n\n        <ChevronsUpDown class=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n      </Button>\n    </PopoverTrigger>\n    <PopoverContent class=\"w-[200px] p-0\">\n      <Command v-model=\"value\">\n        <CommandInput placeholder=\"Search framework...\" />\n        <CommandEmpty>No framework found.</CommandEmpty>\n        <CommandList>\n          <CommandGroup>\n            <CommandItem\n              v-for=\"framework in frameworks\"\n              :key=\"framework.value\"\n              :value=\"framework\"\n              @select=\"open = false\"\n            >\n              <Check\n                :class=\"cn(\n                  'mr-2 h-4 w-4',\n                  value === framework.value ? 'opacity-100' : 'opacity-0',\n                )\"\n              />\n              {{ framework.label }}\n            </CommandItem>\n          </CommandGroup>\n        </CommandList>\n      </Command>\n    </PopoverContent>\n  </Popover>\n</template>\nExamples\n​\nCombobox\n​\nPreview\nCode\nStyle:\nSelect framework...\nPopover\n​\nPreview\nCode\nStyle:\n\nStatus\n\n+ Set status\nDropdown menu\n​\nPreview\nCode\nStyle:\n\nfeatureCreate a new project\n\nForm\n​\nPreview\nCode\nStyle:\nLanguage\nSelect language...\n\nThis is the language that will be used in the dashboard.\n\nSubmit\n\nOn This Page"
  },
  {
    "title": "Collapsible - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/collapsible",
    "html": "Collapsible\nCollapsible\n\nAn interactive component which expands/collapses a panel.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\n@peduarte starred 3 repositories\nToggle\n@radix-ui/primitives\nInstallation\n​\nRun the following command\n​\nbash\nnpx shadcn-vue@latest add collapsible\nUpdate tailwind.config.js\n​\n\nAdd the following animations to your tailwind.config.js file:\n\njs\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        'collapsible-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-collapsible-content-height)' },\n        },\n        'collapsible-up': {\n          from: { height: 'var(--radix-collapsible-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'collapsible-down': 'collapsible-down 0.2s ease-in-out',\n        'collapsible-up': 'collapsible-up 0.2s ease-in-out',\n      },\n    },\n  },\n}\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from '@/components/ui/collapsible'\n\nconst isOpen = ref(false)\n</script>\n\n<template>\n  <Collapsible v-model:open=\"isOpen\">\n    <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n    <CollapsibleContent>\n      Yes. Free to use for personal and commercial projects. No attribution\n      required.\n    </CollapsibleContent>\n  </Collapsible>\n</template>\n\nOn This Page"
  },
  {
    "title": "Card - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/card",
    "html": "Card\nCard\n\nDisplays a card with header, content, and footer.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nCreate project\nName\nFramework\nSelect\nInstallation\n​\nbash\nnpx shadcn-vue@latest add card\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card'\n</script>\n\n<template>\n  <Card>\n    <CardHeader>\n      <CardTitle>Card Title</CardTitle>\n      <CardDescription>Card Description</CardDescription>\n    </CardHeader>\n    <CardContent>\n      Card Content\n    </CardContent>\n    <CardFooter>\n      Card Footer\n    </CardFooter>\n  </Card>\n</template>\nExamples\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nNotifications\n\nYou have 3 unread messages.\n\nPush Notifications\n\nSend notifications to device.\n\nYour call has been confirmed.\n\n1 hour ago\n\nYou have a new message!\n\n1 hour ago\n\nYour subscription is expiring soon!\n\n2 hours ago\n\nMark all as read\n\nOn This Page\n\nCreate project\nInstallation ​\nUsage ​\nExamples ​\nNotifications"
  },
  {
    "title": "Figma - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/figma",
    "html": "Figma\nFigma\n\nEvery component recreated in Figma. With customizable props, typography and icons.\n\nThe Figma UI Kit is open sourced by Pietro Schirano.\n\nGrab a copy\n​\n\nhttps://www.figma.com/community/file/1203061493325953101\n\n\nOn This Page\n\nGrab a copy ​"
  },
  {
    "title": "Checkbox - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/checkbox",
    "html": "Checkbox\nCheckbox\n\nA control that allows the user to toggle between checked and not checked.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nAccept terms and conditions\nInstallation\n​\nbash\nnpx shadcn-vue@latest add checkbox\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Checkbox } from '@/components/ui/checkbox'\n</script>\n\n<template>\n  <Checkbox id=\"terms\" />\n</template>\nExamples\n​\nWith text\n​\nPreview\nCode\nStyle:\nAccept terms and conditions\n\nYou agree to our Terms of Service and Privacy Policy.\n\nDisabled\n​\nPreview\nCode\nStyle:\nAccept terms and conditions\nForm\n​\nPreview\nCode\nStyle:\nUse different settings for my mobile devices\n\nYou can manage your mobile notifications in the mobile settings page.\n\nSubmit\nPreview\nCode\nStyle:\nSidebar\n\nSelect the items you want to display in the sidebar.\n\nRecents\nHome\nApplications\nDesktop\nDownloads\nDocuments\nSubmit\n\nOn This Page"
  },
  {
    "title": "Calendar - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/calendar",
    "html": "Calendar\nCalendar\n\nA date field component that allows users to enter and edit date.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nNovember 2023\nS\nM\nT\nW\nT\nF\nS\n29\n30\n31\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n1\n2\nAbout\n​\n\nThe Calendar component is built on top of VCalendar.\n\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add calendar\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Calendar } from '@/components/ui/calendar'\n</script>\n\n<template>\n  <Calendar />\n</template>\n\nSee the VCalendar documentation for more information.\n\n\nOn This Page\n\nAbout ​\nInstallation ​\nUsage ​"
  },
  {
    "title": "Button - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/button",
    "html": "Button\nButton\n\nDisplays a button or a component that looks like a button.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nButton\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add button\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\n</script>\n\n<template>\n  <Button>Button</Button>\n</template>\nExamples\n​\nPrimary\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nButton\nSecondary\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSecondary\nDestructive\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDestructive\nOutline\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nOutline\nGhost\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nGhost\nLink\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nLink\nIcon\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nWith Icon\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nLogin with Email\nLoading\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPlease wait\nAs Child\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nLogin\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nPrimary ​\nSecondary ​\nDestructive ​\nOutline ​\nGhost ​\nLink ​\nIcon ​\nWith Icon ​\nLoading ​\nAs Child ​"
  },
  {
    "title": "Badge - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/badge",
    "html": "Badge\nBadge\n\nDisplays a badge or a component that looks like a badge.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nBadge\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add badge\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Badge } from '@/components/ui/badge'\n</script>\n\n<template>\n  <Badge>Badge</Badge>\n</template>\nExamples\n​\nDefault\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nBadge\nSecondary\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nSecondary\nOutline\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nOutline\nDestructive\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nDestructive\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDefault ​\nSecondary ​\nOutline ​\nDestructive ​"
  },
  {
    "title": "Avatar - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/avatar",
    "html": "Avatar\nAvatar\n\nAn image element with a fallback for representing the user.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nCN\nInstallation\n​\nbash\nnpx shadcn-vue@latest add avatar\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\n</script>\n\n<template>\n  <Avatar>\n    <AvatarImage src=\"https://github.com/radix-vue.png\" alt=\"@radix-vue\" />\n    <AvatarFallback>CN</AvatarFallback>\n  </Avatar>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Aspect Ratio - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/aspect-ratio",
    "html": "Aspect Ratio\nAspect Ratio\n\nDisplays content within a desired ratio.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nInstallation\n​\nCLI\nManual\nbash\nnpx shadcn-vue@latest add aspect-ratio\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { AspectRatio } from '@/components/ui/aspect-ratio'\n</script>\n\n<template>\n  <div class=\"w-[450px]\">\n    <AspectRatio :ratio=\"16 / 9\">\n      <img src=\"...\" alt=\"Image\" class=\"rounded-md object-cover\">\n    </AspectRatio>\n  </div>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Alert Dialog - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/alert-dialog",
    "html": "Alert Dialog\nAlert Dialog\n\nA modal dialog that interrupts the user with important content and expects a response.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nShow Dialog\nInstallation\n​\nbash\nnpx shadcn-vue@latest add alert-dialog\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog'\n</script>\n\n<template>\n  <AlertDialog>\n    <AlertDialogTrigger>Open</AlertDialogTrigger>\n    <AlertDialogContent>\n      <AlertDialogHeader>\n        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\n        <AlertDialogDescription>\n          This action cannot be undone. This will permanently delete your account\n          and remove your data from our servers.\n        </AlertDialogDescription>\n      </AlertDialogHeader>\n      <AlertDialogFooter>\n        <AlertDialogCancel>Cancel</AlertDialogCancel>\n        <AlertDialogAction>Continue</AlertDialogAction>\n      </AlertDialogFooter>\n    </AlertDialogContent>\n  </AlertDialog>\n</template>\n\nOn This Page\n\nInstallation ​\nUsage ​"
  },
  {
    "title": "Alert - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/alert",
    "html": "Alert\nAlert\n\nDisplays a callout for user attention.\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nHeads up!\nYou can add components to your app using the cli.\nInstallation\n​\nbash\nnpx shadcn-vue@latest add alert\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\n</script>\n\n<template>\n  <Alert>\n    <AlertTitle>Heads up!</AlertTitle>\n    <AlertDescription>\n      You can add components to your app using the cli.\n    </AlertDescription>\n  </Alert>\n</template>\nExamples\n​\nDefault\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nHeads up!\nYou can add components to your app using the cli.\nDestructive\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nError\nYour session has expired. Please log in again.\n\nOn This Page\n\nInstallation ​\nUsage ​\nExamples ​\nDefault ​\nDestructive ​"
  },
  {
    "title": "Laravel - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/installation/laravel",
    "html": "Laravel\nLaravel\n\nInstall and configure Laravel with Inertia\n\nCreate project\n​\n\nStart by creating a new Laravel project with Inertia and Vue using the Laravel installer laravel new my-app:\n\nbash\nlaravel new my-app --typescript --breeze --stack=vue --git --no-interaction\nRun the CLI\n​\n\nRun the shadcn-vue init command to setup your project:\n\nbash\nnpx shadcn-vue@latest init\nConfigure components.json\n​\n\nYou will be asked a few questions to configure components.json:\n\ntxt\nWould you like to use TypeScript (recommended)? no / yes\nWhich framework are you using? Vite / Nuxt / Laravel\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › resources/css/app.css\nDo you want to use CSS variables for colors? › no / yes\nWhere is your tailwind.config.js located? › tailwind.config.js\nConfigure the import alias for components: › @/Components\nConfigure the import alias for utils: › @/lib/utils\nUpdate tailwind.config.js\n​\n\nThe shadcn-vue CLI will automatically overwrite your tailwind.config.js. Update it to look like this:\n\njs\nimport forms from '@tailwindcss/forms'\nimport defaultTheme from 'tailwindcss/defaultTheme'\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  darkMode: 'class',\n  content: [\n    './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',\n    './storage/framework/views/*.php',\n    './resources/views/**/*.blade.php',\n    './resources/js/**/*.{ts,tsx,vue}',\n  ],\n\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      colors: {\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      fontFamily: {\n        sans: ['Figtree', ...defaultTheme.fontFamily.sans],\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n\n  plugins: [forms, require('tailwindcss-animate')],\n}\nThat's it\n​\n\nYou can now start adding components to your project.\n\nbash\nnpx shadcn-vue@latest add button\n\nThe command above will add the Button component to your project. You can then import it like this:\n\nvue\n<script setup lang=\"ts\">\nimport { Button } from '@/Components/ui/button'\n</script>\n\n<template>\n  <div>\n    <Button>Click me</Button>\n  </div>\n</template>\n\nOn This Page\n\nCreate project ​\nRun the CLI ​\nConfigure components.json ​\nUpdate tailwind.config.js ​\nThat's it ​"
  },
  {
    "title": "Astro - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/installation/astro",
    "html": "Astro\nAstro\n\nInstall and configure Astro.\n\nCreate project\n​\n\nStart by creating a new Astro project:\n\nbash\nnpm create astro@latest\nConfigure your Astro project\n​\n\nYou will be asked a few questions to configure your project:\n\ntxt\n- Where should we create your new project?\n./your-app-name\n- How would you like to start your new project?\nChoose a starter template (or Empty)\n- Install dependencies?\nYes\n- Do you plan to write TypeScript?\nYes\n- How strict should TypeScript be?\nStrict\n- Initialize a new git repository? (optional)\nYes/No\nAdd Vue to your project\n​\n\nInstall Vue using the Astro CLI:\n\nbash\nnpx astro add vue\n\nAnswer Yes to all the question prompted by the CLI when installing Vue.\n\nThis will install vue and @astrojs/vue as dependencies and automatically set them up in the astro.config.mjs file.\n\nInstall TypeScript\n​\n\nIf you encounter the error Cannot find module 'typescript', please proceed to install TypeScript as a dev dependency, as discussed here\n\nbash\nnpm install -D typescript\nAdd Tailwind CSS to your project\n​\n\nInstall Tailwind CSS using the Astro CLI:\n\nbash\nnpx astro add tailwind\n\nAnswer Yes to all the question prompted by the CLI when installing Tailwind CSS.\n\nThis will install tailwindcss and @astrojs/tailwind as dependencies and set them up in your astro.config.mjs file. It will also create a tailwind.config.mjs file with the needed configurations.\n\nEdit tsconfig.json file\n​\n\nAdd the code below to the tsconfig.json file to resolve paths:\n\njson\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    }\n  }\n}\nRun the CLI\n​\n\nRun the shadcn-vue init command to setup your project:\n\nbash\nnpx shadcn-vue@latest init\nConfigure components.json\n​\n\nYou will be asked a few questions to configure components.json:\n\ntxt\nWould you like to use TypeScript (recommended)? no / yes\nWhich framework are you using? Astro\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › src/styles/globals.css\nDo you want to use CSS variables for colors? › no / yes\nWhere is your tailwind.config located? › tailwind.config.mjs\nConfigure the import alias for components: › @/components\nConfigure the import alias for utils: › @/lib/utils\nWrite configuration to components.json. Proceed? > Y/n\nImport the globals.css file\n​\n\nImport the globals.css file in the src/index.astro file:\n\nts\nimport '@/styles/globals.css'\nUpdate astro tailwind config\n​\n\nTo prevent serving the Tailwind base styles twice, we need to tell Astro not to apply the base styles, since we already include them in our own globals.css file. To do this, set the applyBaseStyles config option for the tailwind plugin in astro.config.mjs to false.\n\nts\nexport default defineConfig({\n  integrations: [\n    tailwind({\n      applyBaseStyles: false,\n    }),\n  ],\n})\nThat's it\n​\n\nYou can now start adding components to your project.\n\nbash\nnpx shadcn-vue@latest add button\n\nThe command above will add the Button component to your project. You can then import it like this:\n\nastro\n---\nimport { Button } from \"@/components/ui/button\"\n---\n\n<html lang=\"en\">\n\t<head>\n\t\t<title>Astro</title>\n\t</head>\n\t<body>\n\t\t<Button>Hello World</Button>\n\t</body>\n</html>\n\nOn This Page\n\nCreate project ​\nConfigure your Astro project ​\nAdd Vue to your project ​\nInstall TypeScript ​\nAdd Tailwind CSS to your project ​\nEdit tsconfig.json file ​\nRun the CLI ​\nConfigure components.json ​\nImport the globals.css file ​\nUpdate astro tailwind config ​\nThat's it ​"
  },
  {
    "title": "Nuxt - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/installation/nuxt",
    "html": "Nuxt\nNuxt\n\nInstall and configure Nuxt.\n\nCreate project\n​\n\nStart by creating a new Nuxt project using create-next-app:\n\nbash\nnpx nuxi@latest init my-app\nInstall TypeScript\n​\n\nIf you encounter the error ERROR: Cannot read properties of undefined (reading 'sys') (x4), please proceed to install TypeScript as a dependency, as advised in this issue\n\nbash\nnpm install -D typescript\nInstall TailwindCSS module\n​\nbash\nnpm install -D @nuxtjs/tailwindcss\nConfigure nuxt.config.ts\n​\n\nTip: It's better to use Nuxt components:dirs hook to extend auto-import components directories.\n\nIf you use components key in nuxt.config.ts default config will disposed\n\nts\nexport default defineNuxtConfig({\n  modules: ['@nuxtjs/tailwindcss'],\n  hooks: {\n    'components:dirs': (dirs) => {\n      dirs.unshift({\n        path: '~/components/ui',\n        // this is required else Nuxt will autoImport `.ts` file\n        extensions: ['.vue'],\n        // prefix for your components, eg: UiButton\n        prefix: 'Ui',\n        // prevent adding another prefix component by it's path.\n        pathPrefix: false\n      })\n    }\n  }\n})\nRun the CLI\n​\n\nRun the shadcn-vue init command to setup your project:\n\nbash\nnpx shadcn-vue@latest init\nConfigure components.json\n​\n\nYou will be asked a few questions to configure components.json:\n\ntxt\nWould you like to use TypeScript (recommended)? no / yes\nWhich framework are you using? Vite / Nuxt / Laravel\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › › src/index.css\nDo you want to use CSS variables for colors? › no / yes\nWhere is your tailwind.config.js located? › tailwind.config.js\nConfigure the import alias for components: › @/components\nConfigure the import alias for utils: › @/lib/utils\nApp structure\n​\n\nHere's the default structure of Nuxt app. You can use this as a reference:\n\ntxt\n. \n├── pages\n│   ├── index.vue\n│   └── dashboard.vue\n├── components\n│   ├── ui\n│   │   ├── alert-dialog\n│   │   │   ├── AlertDialog.vue\n│   │   │   └── ...\n│   │   ├── button\n│   │   │   ├── Button.vue\n│   │   │   └── ...\n│   │   ├── dropdown-menu\n│   │   │   ├── Dropdown.vue\n│   │   │   └── ...\n│   │   └── ...\n│   ├── MainNav.vue\n│   ├── PageHeader.vue\n│   └── ...\n├── lib\n│   └── utils.ts\n├── assets\n│   ├── css\n│   │   └── tailwind.css\n├── app.vue\n├── nuxt.config.ts\n├── package.json\n├── tailwind.config.js\n└── tsconfig.json\nI place the UI components in the components/ui folder.\nThe rest of the components such as <PageHeader /> and <MainNav /> are placed in the components folder.\nThe lib folder contains all the utility functions. I have a utils.ts where I define the cn helper.\nThe assets/css folder contains the global CSS.\nThat's it\n​\n\nYou can now start adding components to your project.\n\nbash\nnpx shadcn-vue@latest add button\n\nThe command above will add the Button component to your project. Nuxt autoImport will handle importing the components, you can just use it as such:\n\nvue\n<template>\n  <div>\n    <UiButton>Click me</UiButton>\n  </div>\n</template>\n\nOn This Page\n\nCreate project ​\nInstall TypeScript ​\nInstall TailwindCSS module ​\nConfigure nuxt.config.ts ​\nRun the CLI ​\nConfigure components.json ​\nApp structure ​\nThat's it ​"
  },
  {
    "title": "Vite - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/installation/vite",
    "html": "Vite\nVite\n\nInstall and configure Vite.\n\nCreate project\n​\n\nStart by creating a new Vue project using vite:\n\nbash\n# npm 6.x\nnpm create vite@latest my-vue-app --template vue-ts\n\n# npm 7+, extra double-dash is needed:\nnpm create vite@latest my-vue-app -- --template vue-ts\nAdd Tailwind and its configuration\n​\n\nInstall tailwindcss and its peer dependencies, then generate your tailwind.config.js and postcss.config.js files:\n\nbash\nnpm install -D tailwindcss postcss autoprefixer\n\nnpx tailwindcss init -p\nEdit tsconfig.json\n​\n\nAdd the code below to the compilerOptions of your tsconfig.json so your app can resolve paths without error\n\ntypescript\n\"baseUrl\": \".\",\n\"paths\": {\n  \"@/*\": [\"./src/*\"]\n}\nUpdate vite.config.ts\n​\n\nAdd the code below to the vite.config.ts so your app can resolve paths without error\n\ntypescript\nimport path from \"path\"\nimport vue from \"@vitejs/plugin-vue\"\nimport { defineConfig } from \"vite\"\n\nexport default defineConfig({\n  plugins: [vue()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n})\nRun the CLI\n​\n\nRun the shadcn-vue init command to setup your project:\n\nbash\nnpx shadcn-vue@latest init\nConfigure components.json\n​\n\nYou will be asked a few questions to configure components.json:\n\ntxt\nWould you like to use TypeScript (recommended)? no / yes\nWhich framework are you using? Vite / Nuxt / Laravel\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › › src/index.css\nDo you want to use CSS variables for colors? › no / yes\nWhere is your tailwind.config.js located? › tailwind.config.js\nConfigure the import alias for components: › @/components\nConfigure the import alias for utils: › @/lib/utils\nThat's it\n​\n\nYou can now start adding components to your project.\n\nbash\nnpx shadcn-vue@latest add button\n\nThe command above will add the Button component to your project. You can then import it like this:\n\nvue\n<script setup lang=\"ts\">\nimport { Button } from '@/components/ui/button'\n</script>\n\n<template>\n  <div>\n    <Button>Click me</Button>\n  </div>\n</template>\n\nOn This Page\n\nCreate project ​\nAdd Tailwind and its configuration ​\nEdit tsconfig.json ​\nUpdate vite.config.ts ​\nRun the CLI ​\nConfigure components.json ​\nThat's it ​"
  },
  {
    "title": "About - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/about",
    "html": "About\nAbout\n\nPowered by amazing open source projects.\n\nAbout\n​\n\nshadcn-vue is a port of shadcn/ui for Vue/Nuxt. It's maintained by radix-vue.\n\nCredits\n​\nshadcn - The brilliant mind behind the designs, methodology, and implementation of the original shadcn/ui.\nRadix Vue - The headless components that power this project.\nRadix UI - The headless components and examples that the original shadcn/ui was built on.\nShu Ding - The typography style is adapted from his work on Nextra.\nCal - Where shad copied the styles for the first component: the Button.\nLicense\n​\n\nMIT © shadcn & radix-vue\n\n\nOn This Page"
  },
  {
    "title": "Changelog - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/changelog",
    "html": "Changelog\nChangelog\n\n\nOn This Page"
  },
  {
    "title": "Typography - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/typography",
    "html": "Typography\nTypography\n\nStyles for headings, paragraphs, lists...etc\n\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nThe Joke Tax Chronicles\n\nOnce upon a time, in a far-off land, there was a very lazy king who spent all day lounging on his throne. One day, his advisors came to him with a problem: the kingdom was running out of money.\n\nThe King's Plan\n\nThe king thought long and hard, and finally came up with a brilliant plan : he would tax the jokes in the kingdom.\n\n\"After all,\" he said, \"everyone enjoys a good joke, so it's only fair that they should pay for the privilege.\"\nThe Joke Tax\n\nThe king's subjects were not amused. They grumbled and complained, but the king was firm:\n\n1st level of puns: 5 gold coins\n2nd level of jokes: 10 gold coins\n3rd level of one-liners : 20 gold coins\n\nAs a result, people stopped telling jokes, and the kingdom fell into a gloom. But there was one person who refused to let the king's foolishness get him down: a court jester named Jokester.\n\nJokester's Revolt\n\nJokester began sneaking into the castle in the middle of the night and leaving jokes all over the place: under the king's pillow, in his soup, even in the royal toilet. The king was furious, but he couldn't seem to stop Jokester.\n\nAnd then, one day, the people of the kingdom discovered that the jokes left by Jokester were so funny that they couldn't help but laugh. And once they started laughing, they couldn't stop.\n\nThe People's Rebellion\n\nThe people of the kingdom, feeling uplifted by the laughter, started to tell jokes and puns again, and soon the entire kingdom was in on the joke.\n\nKing's Treasury\tPeople's happiness\nEmpty\tOverflowing\nModest\tSatisfied\nFull\tEcstatic\n\nThe king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax. Jokester was declared a hero, and the kingdom lived happily ever after.\n\nThe moral of the story is: never underestimate the power of a good laugh and always be careful of bad ideas.\n\nh1\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nTaxing Laughter: The Joke Tax Chronicles\nh2\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nThe People of the Kingdom\nh3\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nThe Joke Tax\nh4\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nPeople stopped telling jokes\np\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\nThe king, seeing how much happier his subjects were, realized the error of his ways and repealed the joke tax.\n\nblockquote\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\"After all,\" he said, \"everyone enjoys a good joke, so it's only fair that they should pay for the privilege.\"\ntable\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nKing's Treasury\tPeople's happiness\nEmpty\tOverflowing\nModest\tSatisfied\nFull\tEcstatic\nlist\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n1st level of puns: 5 gold coins\n2nd level of jokes: 10 gold coins\n3rd level of one-liners : 20 gold coins\nInline code\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nradix-vue\nLead\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\nA modal dialog that interrupts the user with important content and expects a response.\n\nLarge\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nAre you sure absolutely sure?\nSmall\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nEmail address\nMuted\n​\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\n\nEnter your email address.\n\n\nOn This Page\n\nThe King's Plan\nThe Joke Tax\nJokester's Revolt\nThe People's Rebellion\nh1 ​\nh2 ​\nThe People of the Kingdom\nh3 ​\nThe Joke Tax\nh4 ​\np ​\nblockquote ​\ntable ​\nlist ​\nInline code ​\nLead ​\nLarge ​\nSmall ​\nMuted ​"
  },
  {
    "title": "CLI - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/cli",
    "html": "CLI\nCLI\n\nUse the CLI to add components to your project.\n\ninit\n​\n\nUse the init command to initialize configuration and dependencies for a new project.\n\nThe init command installs dependencies, adds the cn, useEmitsAsProps utils, configures tailwind.config.cjs, and creates CSS variables for the project.\n\nbash\nnpx shadcn-vue@latest init\n\nYou will be asked a few questions to configure components.json:\n\ntxt\nWould you like to use TypeScript (recommended)? no / yes\nWhich framework are you using? Vite / Nuxt / Laravel\nWhich style would you like to use? › Default\nWhich color would you like to use as base color? › Slate\nWhere is your global CSS file? › › src/index.css\nDo you want to use CSS variables for colors? › no / yes\nWhere is your tailwind.config.js located? › tailwind.config.js\nConfigure the import alias for components: › @/components\nConfigure the import alias for utils: › @/lib/utils\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nOptions\n​\ntxt\nUsage: shadcn-vue init [options]\n\ninitialize your project and install dependencies\n\nOptions:\n  -y, --yes        skip confirmation prompt. (default: false)\n  -c, --cwd <cwd>  the working directory. (default: the current directory)\n  -h, --help       display help for command\nadd\n​\n\nUse the add command to add components and dependencies to your project.\n\nbash\nnpx shadcn-vue@latest add [component]\n\nYou will be presented with a list of components to choose from:\n\ntxt\nWhich components would you like to add? › Space to select. Return to submit.\n\n◯  accordion\n◯  alert\n◯  alert-dialog\n◯  aspect-ratio\n◯  avatar\n◯  badge\n◯  button\n◯  card\n◯  checkbox\n◯  collapsible\nOptions\n​\ntxt\nUsage: shadcn-vue add [options] [components...]\n\nadd components to your project\n\nArguments:\n  components         name of components\n\nOptions:\n  --nodep            disable adding & installing dependencies (advanced) (default: false)\n  -y, --yes          Skip confirmation prompt. (default: false)\n  -o, --overwrite    overwrite existing files. (default: false)\n  -c, --cwd <cwd>    the working directory. (default: the current directory)\n  -p, --path <path>  the path to add the component to.\n  -h, --help         display help for command\nupdate\n​\n\nUse the update command to update components in your project. This will overwrite any modifications you've made to the components, so be sure to commit your changes before running this command.\n\nWe plan on improving this command in the future to improve the update experience.\n\ntxt\nUsage: shadcn-vue update [options] [components...]\n\nupdate components in your project\n\nArguments:\n  components       name of components\n\nOptions:\n  -c, --cwd <cwd>  the working directory. (default: the current directory)\n  -h, --help       display help for command\n\nOn This Page\n\ninit ​\nOptions ​\nadd ​\nOptions ​\nupdate ​"
  },
  {
    "title": "components.json - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components-json",
    "html": "components.json\ncomponents.json\n\nConfiguration for your project.\n\nThe components.json file holds configuration for your project.\n\nWe use it to understand how your project is set up and how to generate components customized for your project.\n\nNote: The components.json file is optional and only required if you're using the CLI to add components to your project. If you're using the copy and paste method, you don't need this file.\n\nYou can create a components.json file in your project by running the following command:\n\nbash\nnpx shadcn-vue@latest init\n\nSee the CLI section for more information.\n\n$schema\n​\n\nYou can see the JSON Schema for components.json here.\n\njson\n{\n  \"$schema\": \"https://shadcn-vue.com/schema.json\"\n}\nstyle\n​\n\nThe style for your components. This cannot be changed after initialization.\n\njson\n{\n  \"style\": \"default\" | \"new-york\"\n}\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nCreate project\n\nDeploy your new project in one-click.\n\nName\nFramework\nSelect\nCancel\nDeploy\nTailwind\n​\n\nConfiguration to help the CLI understand how Tailwind CSS is set up in your project.\n\nSee the installation section for how to set up Tailwind CSS.\n\ntailwind.config\n​\n\nPath to where your tailwind.config.js file is located.\n\njson\n{\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\" | \"tailwind.config.ts\"\n  }\n}\ntailwind.css\n​\n\nPath to the CSS file that imports Tailwind CSS into your project.\n\njson\n{\n  \"tailwind\": {\n    \"css\": \"src/assets/index.css\"\n  }\n}\ntailwind.baseColor\n​\n\nThis is used to generate the default color palette for your components. This cannot be changed after initialization.\n\njson\n{\n  \"tailwind\": {\n    \"baseColor\": \"gray\" | \"neutral\" | \"slate\" | \"stone\" | \"zinc\"\n  }\n}\ntailwind.cssVariables\n​\n\nYou can choose between using CSS variables or Tailwind CSS utility classes for theming.\n\nTo use utility classes for theming set tailwind.cssVariables to false. For CSS variables, set tailwind.cssVariables to true.\n\njson\n{\n  \"tailwind\": {\n    \"cssVariables\": `true` | `false`\n  }\n}\n\nFor more information, see the theming docs.\n\nThis cannot be changed after initialization. To switch between CSS variables and utility classes, you'll have to delete and re-install your components.\n\naliases\n​\n\nThe CLI uses these values and the paths config from your tsconfig.json or jsconfig.json file to place generated components in the correct location.\n\nPath aliases have to be set up in your tsconfig.json or jsconfig.json file.\n\nA fallback to tsconfig.app.json if no paths were found in tsconfig.json\n\nImportant: If you're using the src directory, make sure it is included under paths in your tsconfig.json or jsconfig.json file.\n\naliases.utils\n​\n\nImport alias for your utility functions.\n\njson\n{\n  \"aliases\": {\n    \"utils\": \"@/lib/utils\"\n  }\n}\naliases.components\n​\n\nImport alias for your components.\n\njson\n{\n  \"aliases\": {\n    \"components\": \"@/components\"\n  }\n}\n\nOn This Page\n\n$schema ​\nstyle ​\nCreate project\nTailwind ​\ntailwind.config ​\ntailwind.css ​\ntailwind.baseColor ​\ntailwind.cssVariables ​\naliases ​\naliases.utils ​\naliases.components ​"
  },
  {
    "title": "Theming - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/theming",
    "html": "Theming\nTheming\n\nUse CSS Variables to customize the look and feel of your application.\n\nYou can choose between using CSS variables or Tailwind CSS utility classes for theming.\n\nUtility classes\n​\nhtml\n<div class=\"bg-zinc-950 dark:bg-white\" />\n\nTo use utility classes for theming set tailwind.cssVariables to false in your components.json file.\n\njson\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": false\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\nCSS Variables\n​\nhtml\n<div class=\"bg-background text-foreground\" />\n\nTo use CSS variables for theming set tailwind.cssVariables to true in your components.json file.\n\njson\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"app/globals.css\",\n    \"baseColor\": \"slate\",\n    \"cssVariables\": true\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\"\n  }\n}\nConvention\n​\n\nWe use a simple background and foreground convention for colors. The background variable is used for the background color of the component and the foreground variable is used for the text color.\n\nThe background suffix is omitted when the variable is used for the background color of the component.\n\nGiven the following CSS variables:\n\ncss\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\n\nThe background color of the following component will be hsl(var(--primary)) and the foreground color will be hsl(var(--primary-foreground)).\n\nhtml\n<div class=\"bg-primary text-primary-foreground\">Hello</div>\n\nCSS variables must be defined without color space function. See the Tailwind CSS documentation for more information.\n\nList of variables\n​\n\nHere's the list of variables available for customization:\n\ncss\n/* Default background color of <body />...etc */\n--background: 0 0% 100%;\n--foreground: 222.2 47.4% 11.2%;\ncss\n/* Muted backgrounds such as <TabsList />, <Skeleton /> and <Switch /> */\n--muted: 210 40% 96.1%;\n--muted-foreground: 215.4 16.3% 46.9%;\ncss\n/* Background color for <Card /> */\n--card: 0 0% 100%;\n--card-foreground: 222.2 47.4% 11.2%;\ncss\n/* Background color for popovers such as <DropdownMenu />, <HoverCard />, <Popover /> */\n--popover: 0 0% 100%;\n--popover-foreground: 222.2 47.4% 11.2%;\ncss\n/* Default border color */\n--border: 214.3 31.8% 91.4%;\ncss\n/* Border color for inputs such as <Input />, <Select />, <Textarea /> */\n--input: 214.3 31.8% 91.4%;\ncss\n/* Primary colors for <Button /> */\n--primary: 222.2 47.4% 11.2%;\n--primary-foreground: 210 40% 98%;\ncss\n/* Secondary colors for <Button /> */\n--secondary: 210 40% 96.1%;\n--secondary-foreground: 222.2 47.4% 11.2%;\ncss\n/* Used for accents such as hover effects on <DropdownMenuItem>, <SelectItem>...etc */\n--accent: 210 40% 96.1%;\n--accent-foreground: 222.2 47.4% 11.2%;\ncss\n/* Used for destructive actions such as <Button variant=\"destructive\"> */\n--destructive: 0 100% 50%;\n--destructive-foreground: 210 40% 98%;\ncss\n/* Used for focus ring */\n--ring: 215 20.2% 65.1%;\ncss\n/* Border radius for card, input and buttons */\n--radius: 0.5rem;\nAdding new colors\n​\n\nTo add new colors, you need to add them to your CSS file and to your tailwind.config.js file.\n\ncss\n:root {\n  --warning: 38 92% 50%;\n  --warning-foreground: 48 96% 89%;\n}\n\n.dark {\n  --warning: 48 96% 89%;\n  --warning-foreground: 38 92% 50%;\n}\njs\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        'warning': 'hsl(var(--warning))',\n        'warning-foreground': 'hsl(var(--warning-foreground))',\n      },\n    },\n  },\n}\n\nYou can now use the warning utility class in your components.\n\nhtml\n<div class=\"bg-warning text-warning-foreground\" />\nOther color formats\n​\n\nI recommend using HSL colors for theming but you can also use other color formats if you prefer.\n\nSee the Tailwind CSS documentation for more information on using rgb, rgba or hsl colors.\n\nHex -> Color Channel\n​\n\nYou can use this tool to convert your HEX color to HSL without the color space function. Simply add your color in hex format, copy one of the generated values, then add them to the CSS variable.\n\n\nOn This Page\n\nUtility classes ​\nCSS Variables ​\nConvention ​\nList of variables ​\nAdding new colors ​\nOther color formats ​\nHex -> Color Channel ​"
  },
  {
    "title": "Accordion - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/components/accordion",
    "html": "Accordion\nAccordion\n\nA vertically stacked set of interactive headings that each reveal a section of content.\n\nComponent Source\nPrimitive API Reference\nPreview\nCode\nStyle:\nDefault\nDefault\nNew York\nIs it accessible?\nYes. It adheres to the WAI-ARIA design pattern.\nIs it unstyled?\nCan it be animated?\nInstallation\n​\nRun the following command\n​\nbash\nnpx shadcn-vue@latest add accordion\nUpdate tailwind.config.js\n​\n\nAdd the following animations to your tailwind.config.js file:\n\njs\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      keyframes: {\n        'accordion-down': {\n          from: { height: 0 },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n}\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion'\n</script>\n\n<template>\n  <Accordion type=\"single\" collapsible>\n    <AccordionItem value=\"item-1\">\n      <AccordionTrigger>Is it accessible?</AccordionTrigger>\n      <AccordionContent>\n        Yes. It adheres to the WAI-ARIA design pattern.\n      </AccordionContent>\n    </AccordionItem>\n  </Accordion>\n</template>\n\nOn This Page\n\nInstallation ​\nRun the following command ​\nUpdate tailwind.config.js ​\nUsage ​"
  },
  {
    "title": "Installation - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/installation",
    "html": "Installation\nInstallation\n\nHow to install dependencies and structure your app.\n\nFrameworks\n​\n\nVite\n\nNuxt\n\nAstro\n\nLaravel\n\nTypeScript\n​\n\nThis project and the components are written in TypeScript. We recommend using TypeScript for your project as well.\n\nHowever we provide a JavaScript version of the components as well. The JavaScript version is available via the cli.\n\nTo opt-out of TypeScript, you can use the typescript flag in your components.json file.\n\njson\n{\n  \"style\": \"default\",\n  \"tailwind\": {\n    \"config\": \"tailwind.config.js\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"zinc\",\n    \"cssVariables\": true\n  },\n  \"typescript\": false,\n  \"aliases\": {\n    \"utils\": \"~/lib/utils\",\n    \"components\": \"~/components\"\n  }\n}\n\nTo configure import aliases, you can use the following jsconfig.json:\n\njson\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  }\n}\nVSCode extension\n​\n\nInstall the shadcn-vue extension by @selemondev in Visual Studio Code to easily add Shadcn Vue components to your project.\n\nThis extension offers a range of features:\n\nAbility to initialize the Shadcn Vue CLI\nInstall components\nOpen documentation\nNavigate to a specific component's documentation page directly from your IDE.\nHandy snippets for quick and straightforward component imports and markup.\n\nOn This Page"
  },
  {
    "title": "Introduction - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/introduction",
    "html": "Introduction\nIntroduction\n\nRe-usable components built with Radix Vue, and Tailwind CSS.\n\nAn unofficial, community-led Vue port of shadcn/ui. We are not affiliated with shadcn, but we did get his blessing before creating a Vue version of his work. This project was born out of the need for a similar project for the Vue ecosystem.\n\nThis is NOT a component library. It's a collection of re-usable components that you can copy and paste or use the CLI to add to your apps.\n\nWhat do you mean not a component library?\n\nIt means you do not install it as a dependency. It is not available or distributed via npm, with no plans to publish it.\n\nPick the components you need. Use the CLI to automatically add the components, or copy and paste the code into your project and customize to your needs. The code is yours.\n\nUse this as a reference to build your own component libraries.\n\nFAQ\n​\nWhy not packaged as a dependency?\nWhich frameworks are supported?\nCan I use this in my project?\n\nOn This Page\n\nFAQ ​"
  },
  {
    "title": "Introduction - shadcn/vue",
    "url": "https://www.shadcn-vue.com/docs/introduction",
    "html": "Introduction\nIntroduction\n\nRe-usable components built with Radix Vue, and Tailwind CSS.\n\nAn unofficial, community-led Vue port of shadcn/ui. We are not affiliated with shadcn, but we did get his blessing before creating a Vue version of his work. This project was born out of the need for a similar project for the Vue ecosystem.\n\nThis is NOT a component library. It's a collection of re-usable components that you can copy and paste or use the CLI to add to your apps.\n\nWhat do you mean not a component library?\n\nIt means you do not install it as a dependency. It is not available or distributed via npm, with no plans to publish it.\n\nPick the components you need. Use the CLI to automatically add the components, or copy and paste the code into your project and customize to your needs. The code is yours.\n\nUse this as a reference to build your own component libraries.\n\nFAQ\n​\nWhy not packaged as a dependency?\nWhich frameworks are supported?\nCan I use this in my project?\n\nOn This Page\n\nFAQ ​"
  }
]
