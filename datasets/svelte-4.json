[
  {
    "title": "svelte/register • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-register",
    "html": "LEGACY\n\nsvelte/register\nsvelte/register\n\nThis API is removed in Svelte 4. require hooks are deprecated and current Node versions understand ESM. Use a bundler like Vite or our full-stack framework SvelteKit instead to create JavaScript modules from Svelte components.\n\nTo render Svelte components in Node.js without bundling, use require('svelte/register'). After that, you can use require to include any .svelte file.\n\nrequire('svelte/register');\n\n\nconst App = require('./App.svelte').default;\n\n\n// ...\n\n\nconst { html, css, head } = App.render({ answer: 42 });\n\nThe .default is necessary because we're converting from native JavaScript modules to the CommonJS modules recognised by Node. Note that if your component imports JavaScript modules, they will fail to load in Node and you will need to use a bundler instead.\n\nTo set compile options, or to use a custom file extension, call the register hook as a function:\n\nrequire('svelte/register')({\n\textensions: ['.customextension'], // defaults to ['.html', '.svelte']\n\tpreserveComments: true\n});\nPREVIOUS\nSvelte 4 migration guide\nNEXT"
  },
  {
    "title": "Svelte 4 migration guide • Docs • Svelte",
    "url": "https://svelte.dev/docs/v4-migration-guide",
    "html": "MISC\n\nSvelte 4 migration guide\nSvelte 4 migration guide\nMinimum version requirements\nBrowser conditions for bundlers\nRemoval of CJS related output\nStricter types for Svelte functions\nCustom Elements with Svelte\nSvelteComponentTyped is deprecated\nTransitions are local by default\nDefault slot bindings\nPreprocessors\nNew eslint package\nOther breaking changes\n\nThis migration guide provides an overview of how to migrate from Svelte version 3 to 4. See the linked PRs for more details about each change. Use the migration script to migrate some of these automatically: npx svelte-migrate@latest svelte-4\n\nIf you're a library author, consider whether to only support Svelte 4 or if it's possible to support Svelte 3 too. Since most of the breaking changes don't affect many people, this may be easily possible. Also remember to update the version range in your peerDependencies.\n\nMinimum version requirements\npermalink\nUpgrade to Node 16 or higher. Earlier versions are no longer supported. (#8566)\nIf you are using SvelteKit, upgrade to 1.20.4 or newer (sveltejs/kit#10172)\nIf you are using Vite without SvelteKit, upgrade to vite-plugin-svelte 2.4.1 or newer (#8516)\nIf you are using webpack, upgrade to webpack 5 or higher and svelte-loader 3.1.8 or higher. Earlier versions are no longer supported. (#8515, 198dbcf)\nIf you are using Rollup, upgrade to rollup-plugin-svelte 7.1.5 or higher (198dbcf)\nIf you are using TypeScript, upgrade to TypeScript 5 or higher. Lower versions might still work, but no guarantees are made about that. (#8488)\nBrowser conditions for bundlers\npermalink\n\nBundlers must now specify the browser condition when building a frontend bundle for the browser. SvelteKit and Vite will handle this automatically for you. If you're using any others, you may observe lifecycle callbacks such as onMount not get called and you'll need to update the module resolution configuration.\n\nFor Rollup this is done within the @rollup/plugin-node-resolve plugin by setting browser: true in its options. See the rollup-plugin-svelte documentation for more details\nFor wepback this is done by adding \"browser\" to the conditionNames array. You may also have to update your alias config, if you have set it. See the svelte-loader documentation for more details\n\n(#8516)\n\nRemoval of CJS related output\npermalink\n\nSvelte no longer supports the CommonJS (CJS) format for compiler output and has also removed the svelte/register hook and the CJS runtime version. If you need to stay on the CJS output format, consider using a bundler to convert Svelte's ESM output to CJS in a post-build step. (#8613)\n\nStricter types for Svelte functions\npermalink\n\nThere are now stricter types for createEventDispatcher, \nAction\n, \nActionReturn\n, and onMount:\n\ncreateEventDispatcher now supports specifying that a payload is optional, required, or non-existent, and the call sites are checked accordingly (#7224)\nimport { createEventDispatcher } from 'svelte';\n\n\nconst dispatch = createEventDispatcher<{\n\toptional: number | null;\n\trequired: string;\n\tnoArgument: null;\n}>();\n\n\n// Svelte version 3:\ndispatch('optional');\ndispatch('required'); // I can still omit the detail argument\ndispatch('noArgument', 'surprise'); // I can still add a detail argument\n\n\n// Svelte version 4 using TypeScript strict mode:\ndispatch('optional');\ndispatch('required'); // error, missing argument\ndispatch('noArgument', 'surprise'); // error, cannot pass an argument\nAction and ActionReturn have a default parameter type of undefined now, which means you need to type the generic if you want to specify that this action receives a parameter. The migration script will migrate this automatically (#7442)\nconst action: Action = (node, params) => { .. } // this is now an error if you use params in any way\nconst action: Action<HTMLElement, string> = (node, params) => { .. } // params is of type string\n\nonMount now shows a type error if you return a function asynchronously from it, because this is likely a bug in your code where you expect the callback to be called on destroy, which it will only do for synchronously returned functions (#8136)\n// Example where this change reveals an actual bug\nonMount(\n // someCleanup() not called because function handed to onMount is async\n async () => {\n   const something = await foo();\n // someCleanup() is called because function handed to onMount is sync\n () => {\n  foo().then(something =>  ..\n   // ..\n   return () => someCleanup();\n}\n);\n\nCustom Elements with Svelte\npermalink\n\nThe creation of custom elements with Svelte has been overhauled and significantly improved. The tag option is deprecated in favor of the new customElement option:\n\n<svelte:options tag=\"my-component\" />\n<svelte:options customElement=\"my-component\" />\n\n\nThis change was made to allow more configurability for advanced use cases. The migration script will adjust your code automatically. The update timing of properties has changed slightly as well. (#8457)\n\nSvelteComponentTyped is deprecated\npermalink\n\nSvelteComponentTyped\n is deprecated, as \nSvelteComponent\n now has all its typing capabilities. Replace all instances of \nSvelteComponentTyped\n with \nSvelteComponent\n.\n\n import { SvelteComponentTyped } from 'svelte';\n import { SvelteComponent } from 'svelte';\n\n export class Foo extends SvelteComponentTyped<{ aProp: string }> {}\n export class Foo extends SvelteComponent<{ aProp: string }> {}\n\n\nIf you have used \nSvelteComponent\n as the component instance type previously, you may see a somewhat opaque type error now, which is solved by changing : typeof\nSvelteComponent\n to : typeof\nSvelteComponent\n<any>.\n\n<script>\n  import ComponentA from './ComponentA.svelte';\n  import ComponentB from './ComponentB.svelte';\n  import { SvelteComponent } from 'svelte';\n\n  let component: typeof SvelteComponent;\n  let component: typeof SvelteComponent<any>;\n\n  function choseRandomly() {\n\tcomponent = Math.random() > 0.5 ? ComponentA : ComponentB;\n  }\n</script>\n\n<button on:click={choseRandomly}>random</button>\n<svelte:element this={component} />\n\n\nThe migration script will do both automatically for you. (#8512)\n\nTransitions are local by default\npermalink\n\nTransitions are now local by default to prevent confusion around page navigations. \"local\" means that a transition will not play if it's within a nested control flow block (each/if/await/key) and not the direct parent block but a block above it is created/destroyed. In the following example, the slide intro animation will only play when success goes from false to true, but it will not play when show goes from false to true:\n\n{#if show}\n\t...\n\t{#if success}\n\t\t<p in:slide>Success</p>\n\t{/each}\n{/if}\n\nTo make transitions global, add the |global modifier - then they will play when any control flow block above is created/destroyed. The migration script will do this automatically for you. (#6686)\n\nDefault slot bindings\npermalink\n\nDefault slot bindings are no longer exposed to named slots and vice versa:\n\n<script>\n\timport Nested from './Nested.svelte';\n</script>\n\n<Nested let:count>\n\t<p>\n\t\tcount in default slot - is available: {count}\n\t</p>\n\t<p slot=\"bar\">\n\t\tcount in bar slot - is not available: {count}\n\t</p>\n</Nested>\n\nThis makes slot bindings more consistent as the behavior is undefined when for example the default slot is from a list and the named slot is not. (#6049)\n\nPreprocessors\npermalink\n\nThe order in which preprocessors are applied has changed. Now, preprocessors are executed in order, and within one group, the order is markup, script, style.\n\nimport { preprocess } from 'svelte/compiler';\n\n\nconst { code } = await preprocess(\n\tsource,\n\t[\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-1');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-1');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-1');\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tmarkup: () => {\n\t\t\t\tconsole.log('markup-2');\n\t\t\t},\n\t\t\tscript: () => {\n\t\t\t\tconsole.log('script-2');\n\t\t\t},\n\t\t\tstyle: () => {\n\t\t\t\tconsole.log('style-2');\n\t\t\t}\n\t\t}\n\t],\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\n\n// Svelte 3 logs:\n// markup-1\n// markup-2\n// script-1\n// script-2\n// style-1\n// style-2\n\n\n// Svelte 4 logs:\n// markup-1\n// script-1\n// style-1\n// markup-2\n// script-2\n// style-2\n\nThis could affect you for example if you are using MDsveX - in which case you should make sure it comes before any script or style preprocessor.\n\npreprocess: [\n\tvitePreprocess(),\n\tmdsvex(mdsvexConfig)\n\tmdsvex(mdsvexConfig),\n\tvitePreprocess()\n]\n\n\nEach preprocessor must also have a name. (#8618)\n\nNew eslint package\npermalink\n\neslint-plugin-svelte3 is deprecated. It may still work with Svelte 4 but we make no guarantees about that. We recommend switching to our new package eslint-plugin-svelte. See this Github post for an instruction how to migrate. Alternatively, you can create a new project using npm create svelte@latest, select the eslint (and possibly TypeScript) option and then copy over the related files into your existing project.\n\nOther breaking changes\npermalink\nthe inert attribute is now applied to outroing elements to make them invisible to assistive technology and prevent interaction. (#8628)\nthe runtime now uses classList.toggle(name, boolean) which may not work in very old browsers. Consider using a polyfill if you need to support these browsers. (#8629)\nthe runtime now uses the CustomEvent constructor which may not work in very old browsers. Consider using a polyfill if you need to support these browsers. (#8775)\npeople implementing their own stores from scratch using the StartStopNotifier interface (which is passed to the create function of writable etc) from svelte/store now need to pass an update function in addition to the set function. This has no effect on people using stores or creating stores using the existing Svelte stores. (#6750)\nderived will now throw an error on falsy values instead of stores passed to it. (#7947)\ntype definitions for svelte/internal were removed to further discourage usage of those internal methods which are not public API. Most of these will likely change for Svelte 5\nRemoval of DOM nodes is now batched which slightly changes its order, which might affect the order of events fired if you're using a MutationObserver on these elements (#8763)\nif you enhanced the global typings through the svelte.JSX namespace before, you need to migrate this to use the svelteHTML namespace. Similarly if you used the svelte.JSX namespace to use type definitions from it, you need to migrate those to use the types from svelte/elements instead. You can find more information about what to do here\nPREVIOUS\nTypeScript\nNEXT\nsvelte/register"
  },
  {
    "title": "TypeScript • Docs • Svelte",
    "url": "https://svelte.dev/docs/typescript",
    "html": "MISC\n\nTypeScript\nTypeScript\nSetup\n<script lang=\"ts\">\nEnhancing built-in DOM types\nExperimental advanced typings\nLimitations\nTypes\n\nYou can use TypeScript within Svelte components. IDE extensions like the Svelte VSCode extension will help you catch errors right in your editor, and svelte-check does the same on the command line, which you can integrate into your CI.\n\nSetup\npermalink\n\nTo use TypeScript within Svelte components, you need to add a preprocessor that will turn TypeScript into JavaScript.\n\nUsing SvelteKit or Vite\npermalink\n\nThe easiest way to get started is scaffolding a new SvelteKit project by typing npm create svelte@latest, following the prompts and choosing the TypeScript option.\n\nsvelte.config.js\nimport { vitePreprocess } from '@sveltejs/kit/vite';\n\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\n\nexport default config;\n\nIf you don't need or want all the features SvelteKit has to offer, you can scaffold a Svelte-flavoured Vite project instead by typing npm create vite@latest and selecting the svelte-ts option.\n\nsvelte.config.js\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte';\n\n\nconst config = {\n\tpreprocess: vitePreprocess()\n};\n\n\nexport default config;\n\nIn both cases, a svelte.config.js with vitePreprocess will be added. Vite/SvelteKit will read from this config file.\n\nOther build tools\npermalink\n\nIf you're using tools like Rollup or Webpack instead, install their respective Svelte plugins. For Rollup that's rollup-plugin-svelte and for Webpack that's svelte-loader. For both, you need to install typescript and svelte-preprocess and add the preprocessor to the plugin config (see the respective READMEs for more info). If you're starting a new project, you can also use the rollup or webpack template to scaffold the setup from a script.\n\nIf you're starting a new project, we recommend using SvelteKit or Vite instead\n\n<script lang=\"ts\">\npermalink\n\nTo use TypeScript inside your Svelte components, add lang=\"ts\" to your script tags:\n\n<script lang=\"ts\">\n\tlet name: string = 'world';\n\n\tfunction greet(name: string) {\n\t\talert(`Hello, ${name}!`);\n\t}\n</script>\nProps\npermalink\n\nProps can be typed directly on the export let statement:\n\n<script lang=\"ts\">\n\texport let name: string;\n</script>\nSlots\npermalink\n\nSlot and slot prop types are inferred from the types of the slot props passed to them:\n\n<script lang=\"ts\">\n\texport let name: string;\n</script>\n\n<slot {name} />\n\n<!-- Later -->\n<Comp let:name>\n\t<!--    ^ Inferred as string -->\n\t{name}\n</Comp>\nEvents\npermalink\n\nEvents can be typed with createEventDispatcher:\n\n<script lang=\"ts\">\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher<{\n\t\tevent: null; // does not accept a payload\n\t\tclick: string; // has a required string payload\n\t\ttype: string | null; // has an optional string payload\n\t}>();\n\n\tfunction handleClick() {\n\t\tdispatch('event');\n\t\tdispatch('click', 'hello');\n\t}\n\n\tfunction handleType() {\n\t\tdispatch('event');\n\t\tdispatch('type', Math.random() > 0.5 ? 'world' : null);\n\t}\n</script>\n\n<button on:click={handleClick} on:keydown={handleType}>Click</button>\nEnhancing built-in DOM types\npermalink\n\nSvelte provides a best effort of all the HTML DOM types that exist. Sometimes you may want to use experimental attributes or custom events coming from an action. In these cases, TypeScript will throw a type error, saying that it does not know these types. If it's a non-experimental standard attribute/event, this may very well be a missing typing from our HTML typings. In that case, you are welcome to open an issue and/or a PR fixing it.\n\nIn case this is a custom or experimental attribute/event, you can enhance the typings like this:\n\nadditional-svelte-typings.d.ts\ndeclare namespace svelteHTML {\n\t// enhance elements\n\tinterface IntrinsicElements {\n\t\t'my-custom-element': { someattribute: string; 'on:event': (e: CustomEvent<any>) => void };\n\t}\n\t// enhance attributes\n\tinterface HTMLAttributes<T> {\n\t\t// If you want to use on:beforeinstallprompt\n\t\t'on:beforeinstallprompt'?: (event: any) => any;\n\t\t// If you want to use myCustomAttribute={..} (note: all lowercase)\n\t\tmycustomattribute?: any; // You can replace any with something more specific if you like\n\t}\n}\n\nThen make sure that d.ts file is referenced in your tsconfig.json. If it reads something like \"include\": [\"src/**/*\"] and your d.ts file is inside src, it should work. You may need to reload for the changes to take effect.\n\nSince Svelte version 4.2 / svelte-check version 3.5 / VS Code extension version 107.10.0 you can also declare the typings by augmenting the svelte/elements module like this:\n\nadditional-svelte-typings.d.ts\nimport { HTMLButtonAttributes } from 'svelte/elements';\n\n\ndeclare module 'svelte/elements' {\n\texport interface SvelteHTMLElements {\n\t\t'custom-button': HTMLButtonAttributes;\n\t}\n\n\n\t// allows for more granular control over what element to add the typings to\n\texport interface HTMLButtonAttributes {\n\t\tveryexperimentalattribute?: string;\n\t}\n}\n\n\nexport {}; // ensure this is not an ambient module, else types will be overridden instead of augmented\nExperimental advanced typings\npermalink\n\nA few features are missing from taking full advantage of TypeScript in more advanced use cases like typing that a component implements a certain interface, explicitly typing slots, or using generics. These things are possible using experimental advanced type capabilities. See this RFC for more information on how to make use of them.\n\nThe API is experimental and may change at any point\n\nLimitations\npermalink\nNo TS in markup\npermalink\n\nYou cannot use TypeScript in your template's markup. For example, the following does not work:\n\n<script lang=\"ts\">\n\tlet count = 10;\n</script>\n\n<h1>Count as string: {count as string}!</h1> <!-- ❌ Does not work -->\n{#if count > 4}\n\t{@const countString: string = count} <!-- ❌ Does not work -->\n\t{countString}\n{/if}\nReactive Declarations\npermalink\n\nYou cannot type your reactive declarations with TypeScript in the way you type a variable. For example, the following does not work:\n\n<script lang=\"ts\">\n\tlet count = 0;\n\n\t$: doubled: number = count * 2; // ❌ Does not work\n</script>\n\nYou cannot add a : TYPE because it's invalid syntax in this position. Instead, you can move the definition to a let statement just above:\n\n<script lang=\"ts\">\n\tlet count = 0;\n\n\tlet doubled: number;\n\t$: doubled = count * 2;\n</script>\nTypes\npermalink\nComponentConstructorOptions\npermalink\ninterface ComponentConstructorOptions<\n\tProps extends Record<string, any> = Record<string, any>\n> {…}\ntarget: Element | Document | ShadowRoot;\nanchor?: Element;\nprops?: Props;\ncontext?: Map<any, any>;\nhydrate?: boolean;\nintro?: boolean;\n$$inline?: boolean;\nComponentEvents\npermalink\n\nConvenience type to get the events the given component expects. Example:\n\n<script lang=\"ts\">\n   import type { ComponentEvents } from 'svelte';\n   import Component from './Component.svelte';\n\n   function handleCloseEvent(event: ComponentEvents<Component>['close']) {\n\t  console.log(event.detail);\n   }\n</script>\n\n<Component on:close={handleCloseEvent} />\ntype ComponentEvents<Component extends SvelteComponent_1> =\n\tComponent extends SvelteComponent<any, infer Events>\n\t\t? Events\n\t\t: never;\nComponentProps\npermalink\n\nConvenience type to get the props the given component expects. Example:\n\n<script lang=\"ts\">\n\timport type { ComponentProps } from 'svelte';\n\timport Component from './Component.svelte';\n\n\tconst props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props\n</script>\ntype ComponentProps<Component extends SvelteComponent_1> =\n\tComponent extends SvelteComponent<infer Props>\n\t\t? Props\n\t\t: never;\nComponentType\npermalink\n\nConvenience type to get the type of a Svelte component. Useful for example in combination with dynamic components using <svelte:component>.\n\nExample:\n\n<script lang=\"ts\">\n\timport type { ComponentType, SvelteComponent } from 'svelte';\n\timport Component1 from './Component1.svelte';\n\timport Component2 from './Component2.svelte';\n\n\tconst component: ComponentType = someLogic() ? Component1 : Component2;\n\tconst componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;\n</script>\n\n<svelte:component this={component} />\n<svelte:component this={componentOfCertainSubType} needsThisProp=\"hello\" />\ntype ComponentType<\n\tComponent extends SvelteComponent = SvelteComponent\n> = (new (\n\toptions: ComponentConstructorOptions<\n\t\tComponent extends SvelteComponent<infer Props>\n\t\t\t? Props\n\t\t\t: Record<string, any>\n\t>\n) => Component) & {\n\t/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */\n\telement?: typeof HTMLElement;\n};\nSvelteComponent\npermalink\n\nBase class for Svelte components with some minor dev-enhancements. Used when dev=true.\n\nCan be used to create strongly typed Svelte components.\n\nExample:\npermalink\n\nYou have component library on npm called component-library, from which you export a component called MyComponent. For Svelte+TypeScript users, you want to provide typings. Therefore you create a index.d.ts:\n\nimport { SvelteComponent } from \"svelte\";\nexport class MyComponent extends SvelteComponent<{foo: string}> {}\n\nTyping this makes it possible for IDEs like VS Code with the Svelte extension to provide intellisense and to use the component like this in a Svelte file with TypeScript:\n\n<script lang=\"ts\">\n\timport { MyComponent } from \"component-library\";\n</script>\n<MyComponent foo={'bar'} />\nclass SvelteComponent<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent_1<Props, Events> {…}\n[prop: string]: any;\nconstructor(options: ComponentConstructorOptions<Props>);\n$capture_state(): void;\n$inject_state(): void;\nSvelteComponentTyped\npermalink\n\nUse SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512\n\nclass SvelteComponentTyped<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent<Props, Events, Slots> {}\nPREVIOUS\nAccessibility warnings\nNEXT\nSvelte 4 migration guide"
  },
  {
    "title": "Accessibility warnings • Docs • Svelte",
    "url": "https://svelte.dev/docs/accessibility-warnings",
    "html": "MISC\n\nAccessibility warnings\nAccessibility warnings\na11y-accesskey\na11y-aria-activedescendant-has-tabindex\na11y-aria-attributes\na11y-autofocus\na11y-click-events-have-key-events\na11y-distracting-elements\na11y-hidden\na11y-img-redundant-alt\na11y-incorrect-aria-attribute-type\na11y-invalid-attribute\na11y-interactive-supports-focus\na11y-label-has-associated-control\na11y-media-has-caption\na11y-misplaced-role\na11y-misplaced-scope\na11y-missing-attribute\na11y-missing-content\na11y-mouse-events-have-key-events\na11y-no-redundant-roles\na11y-no-interactive-element-to-noninteractive-role\na11y-no-noninteractive-tabindex\na11y-no-static-element-interactions\na11y-positive-tabindex\na11y-role-has-required-aria-props\na11y-role-supports-aria-props\na11y-structure\na11y-unknown-aria-attribute\na11y-unknown-role\n\nAccessibility (shortened to a11y) isn't always easy to get right, but Svelte will help by warning you at compile time if you write inaccessible markup. However, keep in mind that many accessibility issues can only be identified at runtime using other automated tools and by manually testing your application.\n\nSome warnings may be incorrect in your concrete use case. You can disable such false positives by placing a <!-- svelte-ignore a11y-<code> --> comment above the line that causes the warning. Example:\n\n<!-- svelte-ignore a11y-autofocus -->\n<input autofocus />\n\nHere is a list of accessibility checks Svelte will do for you.\n\na11y-accesskey\npermalink\n\nEnforce no accesskey on element. Access keys are HTML attributes that allow web developers to assign keyboard shortcuts to elements. Inconsistencies between keyboard shortcuts and keyboard commands used by screen reader and keyboard-only users create accessibility complications. To avoid complications, access keys should not be used.\n\n<!-- A11y: Avoid using accesskey -->\n<div accessKey=\"z\" />\na11y-aria-activedescendant-has-tabindex\npermalink\n\nAn element with aria-activedescendant must be tabbable, so it must either have an inherent tabindex or declare tabindex as an attribute.\n\n<!-- A11y: Elements with attribute aria-activedescendant should have tabindex value -->\n<div aria-activedescendant=\"some-id\" />\na11y-aria-attributes\npermalink\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example meta, html, script, style. This rule enforces that these DOM elements do not contain the aria-* props.\n\n<!-- A11y: <meta> should not have aria-* attributes -->\n<meta aria-hidden=\"false\" />\na11y-autofocus\npermalink\n\nEnforce that autofocus is not used on elements. Autofocusing elements can cause usability issues for sighted and non-sighted users alike.\n\n<!-- A11y: Avoid using autofocus -->\n<input autofocus />\na11y-click-events-have-key-events\npermalink\n\nEnforce that visible, non-interactive elements with an on:click event are accompanied by a keyboard event handler.\n\nUsers should first consider whether an interactive element might be more appropriate such as a <button type=\"button\"> element for actions or <a> element for navigations. These elements are more semantically meaningful and will have built-in key handling. E.g. Space and Enter will trigger a <button> and Enter will trigger an <a> element.\n\nIf a non-interactive element is required then on:click should be accompanied by an on:keyup or on:keydown handler that enables the user to perform equivalent actions via the keyboard. In order for the user to be able to trigger a key press, the element will also need to be focusable by adding a tabindex. While an on:keypress handler will also silence this warning, it should be noted that the keypress event is deprecated.\n\n<!-- A11y: visible, non-interactive elements with an on:click event must be accompanied by a keyboard event handler. -->\n<div on:click={() => {}} />\n\nCoding for the keyboard is important for users with physical disabilities who cannot use a mouse, AT compatibility, and screenreader users.\n\na11y-distracting-elements\npermalink\n\nEnforces that no distracting elements are used. Elements that can be visually distracting can cause accessibility issues with visually impaired users. Such elements are most likely deprecated, and should be avoided.\n\nThe following elements are visually distracting: <marquee> and <blink>.\n\n<!-- A11y: Avoid <marquee> elements -->\n<marquee />\na11y-hidden\npermalink\n\nCertain DOM elements are useful for screen reader navigation and should not be hidden.\n\n<!-- A11y: <h2> element should not be hidden -->\n<h2 aria-hidden=\"true\">invisible header</h2>\na11y-img-redundant-alt\npermalink\n\nEnforce img alt attribute does not contain the word image, picture, or photo. Screen readers already announce img elements as an image. There is no need to use words such as image, photo, and/or picture.\n\n<img src=\"foo\" alt=\"Foo eating a sandwich.\" />\n\n<!-- aria-hidden, won't be announced by screen reader -->\n<img src=\"bar\" aria-hidden=\"true\" alt=\"Picture of me taking a photo of an image\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Photo of foo being weird.\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"bar\" alt=\"Image of me at a bar!\" />\n\n<!-- A11y: Screen readers already announce <img> elements as an image. -->\n<img src=\"foo\" alt=\"Picture of baz fixing a bug.\" />\na11y-incorrect-aria-attribute-type\npermalink\n\nEnforce that only the correct type of value is used for aria attributes. For example, aria-hidden should only receive a boolean.\n\n<!-- A11y: The value of 'aria-hidden' must be exactly one of true or false -->\n<div aria-hidden=\"yes\" />\na11y-invalid-attribute\npermalink\n\nEnforce that attributes important for accessibility have a valid value. For example, href should not be empty, '#', or javascript:.\n\n<!-- A11y: '' is not a valid href attribute -->\n<a href=\"\">invalid</a>\na11y-interactive-supports-focus\npermalink\n\nEnforce that elements with an interactive role and interactive handlers (mouse or key press) must be focusable or tabbable.\n\n<!-- A11y: Elements with the 'button' interactive role must have a tabindex value. -->\n<div role=\"button\" on:keypress={() => {}} />\na11y-label-has-associated-control\npermalink\n\nEnforce that a label tag has a text label and an associated control.\n\nThere are two supported ways to associate a label with a control:\n\nWrapping a control in a label tag.\nAdding for to a label and assigning it the ID of an input on the page.\n<label for=\"id\">B</label>\n\n<label>C <input type=\"text\" /></label>\n\n<!-- A11y: A form label must be associated with a control. -->\n<label>A</label>\na11y-media-has-caption\npermalink\n\nProviding captions for media is essential for deaf users to follow along. Captions should be a transcription or translation of the dialogue, sound effects, relevant musical cues, and other relevant audio information. Not only is this important for accessibility, but can also be useful for all users in the case that the media is unavailable (similar to alt text on an image when an image is unable to load).\n\nThe captions should contain all important and relevant information to understand the corresponding media. This may mean that the captions are not a 1:1 mapping of the dialogue in the media content. However, captions are not necessary for video components with the muted attribute.\n\n<video><track kind=\"captions\" /></video>\n\n<audio muted />\n\n<!-- A11y: Media elements must have a <track kind=\\\"captions\\\"> -->\n<video />\n\n<!-- A11y: Media elements must have a <track kind=\\\"captions\\\"> -->\n<video><track /></video>\na11y-misplaced-role\npermalink\n\nCertain reserved DOM elements do not support ARIA roles, states and properties. This is often because they are not visible, for example meta, html, script, style. This rule enforces that these DOM elements do not contain the role props.\n\n<!-- A11y: <meta> should not have role attribute -->\n<meta role=\"tooltip\" />\na11y-misplaced-scope\npermalink\n\nThe scope attribute should only be used on <th> elements.\n\n<!-- A11y: The scope attribute should only be used with <th> elements -->\n<div scope=\"row\" />\na11y-missing-attribute\npermalink\n\nEnforce that attributes required for accessibility are present on an element. This includes the following checks:\n\n<a> should have an href (unless it's a fragment-defining tag)\n<area> should have alt, aria-label, or aria-labelledby\n<html> should have lang\n<iframe> should have title\n<img> should have alt\n<object> should have title, aria-label, or aria-labelledby\n<input type=\"image\"> should have alt, aria-label, or aria-labelledby\n<!-- A11y: <input type=\\\"image\\\"> element should have an alt, aria-label or aria-labelledby attribute -->\n<input type=\"image\" />\n\n<!-- A11y: <html> element should have a lang attribute -->\n<html />\n\n<!-- A11y: <a> element should have an href attribute -->\n<a>text</a>\na11y-missing-content\npermalink\n\nEnforce that heading elements (h1, h2, etc.) and anchors have content and that the content is accessible to screen readers\n\n<!-- A11y: <a> element should have child content -->\n<a href=\"/foo\" />\n\n<!-- A11y: <h1> element should have child content -->\n<h1 />\na11y-mouse-events-have-key-events\npermalink\n\nEnforce that on:mouseover and on:mouseout are accompanied by on:focus and on:blur, respectively. This helps to ensure that any functionality triggered by these mouse events is also accessible to keyboard users.\n\n<!-- A11y: on:mouseover must be accompanied by on:focus -->\n<div on:mouseover={handleMouseover} />\n\n<!-- A11y: on:mouseout must be accompanied by on:blur -->\n<div on:mouseout={handleMouseout} />\na11y-no-redundant-roles\npermalink\n\nSome HTML elements have default ARIA roles. Giving these elements an ARIA role that is already set by the browser has no effect and is redundant.\n\n<!-- A11y: Redundant role 'button' -->\n<button role=\"button\" />\n\n<!-- A11y: Redundant role 'img' -->\n<img role=\"img\" src=\"foo.jpg\" />\na11y-no-interactive-element-to-noninteractive-role\npermalink\n\nWAI-ARIA roles should not be used to convert an interactive element to a non-interactive element. Non-interactive ARIA roles include article, banner, complementary, img, listitem, main, region and tooltip.\n\n<!-- A11y: <textarea> cannot have role 'listitem' -->\n<textarea role=\"listitem\" />\na11y-no-noninteractive-element-interactions\npermalink\n\nA non-interactive element does not support event handlers (mouse and key handlers). Non-interactive elements include <main>, <area>, <h1> (,<h2>, etc), <p>, <img>, <li>, <ul> and <ol>. Non-interactive WAI-ARIA roles include article, banner, complementary, img, listitem, main, region and tooltip.\n\n<!-- `A11y: Non-interactive element <li> should not be assigned mouse or keyboard event listeners.` -->\n<li on:click={() => {}} />\n\n<!-- `A11y: Non-interactive element <div> should not be assigned mouse or keyboard event listeners.` -->\n<div role=\"listitem\" on:click={() => {}} />\na11y-no-noninteractive-element-to-interactive-role\npermalink\n\nWAI-ARIA roles should not be used to convert a non-interactive element to an interactive element. Interactive ARIA roles include button, link, checkbox, menuitem, menuitemcheckbox, menuitemradio, option, radio, searchbox, switch and textbox.\n\n<!-- A11y: Non-interactive element <h3> cannot have interactive role 'searchbox' -->\n<h3 role=\"searchbox\">Button</h3>\na11y-no-noninteractive-tabindex\npermalink\n\nTab key navigation should be limited to elements on the page that can be interacted with.\n\n<!-- A11y: noninteractive element cannot have nonnegative tabIndex value -->\n<div tabindex=\"0\" />\na11y-no-static-element-interactions\npermalink\n\nElements like <div> with interactive handlers like click must have an ARIA role.\n\n<!-- A11y: <div> with click handler must have an ARIA role -->\n<div on:click={() => ''} />\na11y-positive-tabindex\npermalink\n\nAvoid positive tabindex property values. This will move elements out of the expected tab order, creating a confusing experience for keyboard users.\n\n<!-- A11y: avoid tabindex values above zero -->\n<div tabindex=\"1\" />\na11y-role-has-required-aria-props\npermalink\n\nElements with ARIA roles must have all required attributes for that role.\n\n<!-- A11y: A11y: Elements with the ARIA role \"checkbox\" must have the following attributes defined: \"aria-checked\" -->\n<span role=\"checkbox\" aria-labelledby=\"foo\" tabindex=\"0\" />\na11y-role-supports-aria-props\npermalink\n\nElements with explicit or implicit roles defined contain only aria-* properties supported by that role.\n\n<!-- A11y: The attribute 'aria-multiline' is not supported by the role 'link'. -->\n<div role=\"link\" aria-multiline />\n\n<!-- A11y: The attribute 'aria-required' is not supported by the role 'listitem'. This role is implicit on the element <li>. -->\n<li aria-required />\na11y-structure\npermalink\n\nEnforce that certain DOM elements have the correct structure.\n\n<!-- A11y: <figcaption> must be an immediate child of <figure> -->\n<div>\n\t<figcaption>Image caption</figcaption>\n</div>\na11y-unknown-aria-attribute\npermalink\n\nEnforce that only known ARIA attributes are used. This is based on the WAI-ARIA States and Properties spec.\n\n<!-- A11y: Unknown aria attribute 'aria-labeledby' (did you mean 'labelledby'?) -->\n<input type=\"image\" aria-labeledby=\"foo\" />\na11y-unknown-role\npermalink\n\nElements with ARIA roles must use a valid, non-abstract ARIA role. A reference to role definitions can be found at WAI-ARIA site.\n\n<!-- A11y: Unknown role 'toooltip' (did you mean 'tooltip'?) -->\n<div role=\"toooltip\" />\nPREVIOUS\nFrequently asked questions\nNEXT\nTypeScript"
  },
  {
    "title": "Frequently asked questions • Docs • Svelte",
    "url": "https://svelte.dev/docs/faq",
    "html": "MISC\n\nFrequently asked questions\nFrequently asked questions\nI'm new to Svelte. Where should I start?\nWhere can I get support?\nAre there any third-party resources?\nHow can I get VS Code to syntax-highlight my .svelte files?\nIs there a tool to automatically format my .svelte files?\nHow do I document my components?\nDoes Svelte scale?\nIs there a UI component library?\nHow do I test Svelte apps?\nIs there a router?\nCan I tell Svelte not to remove my unused styles?\nIs Svelte v2 still available?\nHow do I do hot module reloading?\nI'm new to Svelte. Where should I start?\npermalink\n\nWe think the best way to get started is playing through the interactive tutorial. Each step there is mainly focused on one specific aspect and is easy to follow. You'll be editing and running real Svelte components right in your browser.\n\nFive to ten minutes should be enough to get you up and running. An hour and a half should get you through the entire tutorial.\n\nWhere can I get support?\npermalink\n\nIf your question is about certain syntax, the API page is a good place to start.\n\nStack Overflow is a popular forum to ask code-level questions or if you’re stuck with a specific error. Read through the existing questions tagged with Svelte or ask your own!\n\nThere are online forums and chats which are a great place for discussion about best practices, application architecture or just to get to know fellow Svelte users. Our Discord or the Reddit channel are examples of that. If you have an answerable code-level question, Stack Overflow is usually a better fit.\n\nAre there any third-party resources?\npermalink\n\nSvelte Society maintains a list of books and videos.\n\nHow can I get VS Code to syntax-highlight my .svelte files?\npermalink\n\nThere is an official VS Code extension for Svelte.\n\nIs there a tool to automatically format my .svelte files?\npermalink\n\nYou can use prettier with the prettier-plugin-svelte plugin.\n\nHow do I document my components?\npermalink\n\nIn editors which use the Svelte Language Server you can document Components, functions and exports using specially formatted comments.\n\n<script>\n\t/** What should we call the user? */\n\texport let name = 'world';\n</script>\n\n<!--\n@component\nHere's some documentation for this component.\nIt will show up on hover.\n\n- You can use markdown here.\n- You can also use code blocks here.\n- Usage:\n  ```tsx\n  <main name=\"Arethra\">\n  ```\n-->\n<main>\n\t<h1>\n\t\tHello, {name}\n\t</h1>\n</main>\n\nNote: The @component is necessary in the HTML comment which describes your component.\n\nDoes Svelte scale?\npermalink\n\nThere will be a blog post about this eventually, but in the meantime, check out this issue.\n\nIs there a UI component library?\npermalink\n\nThere are several UI component libraries as well as standalone components. Find them under the design systems section of the components page on the Svelte Society website.\n\nHow do I test Svelte apps?\npermalink\n\nHow your application is structured and where logic is defined will determine the best way to ensure it is properly tested. It is important to note that not all logic belongs within a component - this includes concerns such as data transformation, cross-component state management, and logging, among others. Remember that the Svelte library has its own test suite, so you do not need to write tests to validate implementation details provided by Svelte.\n\nA Svelte application will typically have three different types of tests: Unit, Component, and End-to-End (E2E).\n\nUnit Tests: Focus on testing business logic in isolation. Often this is validating individual functions and edge cases. By minimizing the surface area of these tests they can be kept lean and fast, and by extracting as much logic as possible from your Svelte components more of your application can be covered using them. When creating a new SvelteKit project, you will be asked whether you would like to setup Vitest for unit testing. There are a number of other test runners that could be used as well.\n\nComponent Tests: Validating that a Svelte component mounts and interacts as expected throughout its lifecycle requires a tool that provides a Document Object Model (DOM). Components can be compiled (since Svelte is a compiler and not a normal library) and mounted to allow asserting against element structure, listeners, state, and all the other capabilities provided by a Svelte component. Tools for component testing range from an in-memory implementation like jsdom paired with a test runner like Vitest to solutions that leverage an actual browser to provide a visual testing capability such as Playwright or Cypress.\n\nEnd-to-End Tests: To ensure your users are able to interact with your application it is necessary to test it as a whole in a manner as close to production as possible. This is done by writing end-to-end (E2E) tests which load and interact with a deployed version of your application in order to simulate how the user will interact with your application. When creating a new SvelteKit project, you will be asked whether you would like to setup Playwright for end-to-end testing. There are many other E2E test libraries available for use as well.\n\nSome resources for getting started with testing:\n\nSvelte Testing Library\nSvelte Component Testing in Cypress\nExample using vitest\nExample using uvu test runner with JSDOM\nTest Svelte components using Vitest & Playwright\nComponent testing with WebdriverIO\nIs there a router?\npermalink\n\nThe official routing library is SvelteKit. SvelteKit provides a filesystem router, server-side rendering (SSR), and hot module reloading (HMR) in one easy-to-use package. It shares similarities with Next.js for React.\n\nHowever, you can use any router library. A lot of people use page.js. There's also navaid, which is very similar. And universal-router, which is isomorphic with child routes, but without built-in history support.\n\nIf you prefer a declarative HTML approach, there's the isomorphic svelte-routing library and a fork of it called svelte-navigator containing some additional functionality.\n\nIf you need hash-based routing on the client side, check out svelte-spa-router or abstract-state-router.\n\nRoutify is another filesystem-based router, similar to SvelteKit's router. Version 3 supports Svelte's native SSR.\n\nYou can see a community-maintained list of routers on sveltesociety.dev.\n\nCan I tell Svelte not to remove my unused styles?\npermalink\n\nNo. Svelte removes the styles from the component and warns you about them in order to prevent issues that would otherwise arise.\n\nSvelte's component style scoping works by generating a class unique to the given component, adding it to the relevant elements in the component that are under Svelte's control, and then adding it to each of the selectors in that component's styles. When the compiler can't see what elements a style selector applies to, there would be two bad options for keeping it:\n\nIf it keeps the selector and adds the scoping class to it, the selector will likely not match the expected elements in the component, and they definitely won't if they were created by a child component or {@html ...}.\nIf it keeps the selector without adding the scoping class to it, the given style will become a global style, affecting your entire page.\n\nIf you need to style something that Svelte can't identify at compile time, you will need to explicitly opt into global styles by using :global(...). But also keep in mind that you can wrap :global(...) around only part of a selector. .foo :global(.bar) { ... } will style any .bar elements that appear within the component's .foo elements. As long as there's some parent element in the current component to start from, partially global selectors like this will almost always be able to get you what you want.\n\nIs Svelte v2 still available?\npermalink\n\nNew features aren't being added to it, and bugs will probably only be fixed if they are extremely nasty or present some sort of security vulnerability.\n\nThe documentation is still available here.\n\nHow do I do hot module reloading?\npermalink\n\nWe recommend using SvelteKit, which supports HMR out of the box and is built on top of Vite and svelte-hmr. There are also community plugins for rollup and webpack.\n\nPREVIOUS\nCustom elements API\nNEXT\nAccessibility warnings"
  },
  {
    "title": "Custom elements API • Docs • Svelte",
    "url": "https://svelte.dev/docs/custom-elements-api",
    "html": "COMPILER AND API\n\nCustom elements API\nCustom elements API\nComponent lifecycle\nComponent options\nCaveats and limitations\n\nSvelte components can also be compiled to custom elements (aka web components) using the customElement: true compiler option. You should specify a tag name for the component using the <svelte:options> element.\n\n<svelte:options customElement=\"my-element\" />\n\n<!-- in Svelte 3, do this instead:\n<svelte:options tag=\"my-element\" />\n-->\n\n<script>\n\texport let name = 'world';\n</script>\n\n<h1>Hello {name}!</h1>\n<slot />\n\nYou can leave out the tag name for any of your inner components which you don't want to expose and use them like regular Svelte components. Consumers of the component can still name it afterwards if needed, using the static element property which contains the custom element constructor and which is available when the customElement compiler option is true.\n\nimport MyElement from './MyElement.svelte';\n\n\ncustomElements.define('my-element', MyElement.element);\n// In Svelte 3, do this instead:\n// customElements.define('my-element', MyElement);\n\nOnce a custom element has been defined, it can be used as a regular DOM element:\n\ndocument.body.innerHTML = `\n\t<my-element>\n\t\t<p>This is some slotted content</p>\n\t</my-element>\n`;\n\nBy default, custom elements are compiled with accessors: true, which means that any props are exposed as properties of the DOM element (as well as being readable/writable as attributes, where possible).\n\nTo prevent this, add accessors={false} to <svelte:options>.\n\nconst el = document.querySelector('my-element');\n\n\n// get the current value of the 'name' prop\nconsole.log(el.name);\n\n\n// set a new value, updating the shadow DOM\nel.name = 'everybody';\nComponent lifecycle\npermalink\n\nCustom elements are created from Svelte components using a wrapper approach. This means the inner Svelte component has no knowledge that it is a custom element. The custom element wrapper takes care of handling its lifecycle appropriately.\n\nWhen a custom element is created, the Svelte component it wraps is not created right away. It is only created in the next tick after the connectedCallback is invoked. Properties assigned to the custom element before it is inserted into the DOM are temporarily saved and then set on component creation, so their values are not lost. The same does not work for invoking exported functions on the custom element though, they are only available after the element has mounted. If you need to invoke functions before component creation, you can work around it by using the extend option.\n\nWhen a custom element written with Svelte is created or updated, the shadow DOM will reflect the value in the next tick, not immediately. This way updates can be batched, and DOM moves which temporarily (but synchronously) detach the element from the DOM don't lead to unmounting the inner component.\n\nThe inner Svelte component is destroyed in the next tick after the disconnectedCallback is invoked.\n\nComponent options\npermalink\n\nWhen constructing a custom element, you can tailor several aspects by defining customElement as an object within <svelte:options> since Svelte 4. This object may contain the following properties:\n\ntag: the mandatory tag property for the custom element's name\nshadow: an optional property that can be set to \"none\" to forgo shadow root creation. Note that styles are then no longer encapsulated, and you can't use slots\nprops: an optional property to modify certain details and behaviors of your component's properties. It offers the following settings:\nattribute: string: To update a custom element's prop, you have two alternatives: either set the property on the custom element's reference as illustrated above or use an HTML attribute. For the latter, the default attribute name is the lowercase property name. Modify this by assigning attribute: \"<desired name>\".\nreflect: boolean: By default, updated prop values do not reflect back to the DOM. To enable this behavior, set reflect: true.\ntype: 'String' | 'Boolean' | 'Number' | 'Array' | 'Object': While converting an attribute value to a prop value and reflecting it back, the prop value is assumed to be a String by default. This may not always be accurate. For instance, for a number type, define it using type: \"Number\" You don't need to list all properties, those not listed will use the default settings.\nextend: an optional property which expects a function as its argument. It is passed the custom element class generated by Svelte and expects you to return a custom element class. This comes in handy if you have very specific requirements to the life cycle of the custom element or want to enhance the class to for example use ElementInternals for better HTML form integration.\n<svelte:options\n\tcustomElement={{\n\t\ttag: 'custom-element',\n\t\tshadow: 'none',\n\t\tprops: {\n\t\t\tname: { reflect: true, type: 'Number', attribute: 'element-index' }\n\t\t},\n\t\textend: (customElementConstructor) => {\n\t\t\t// Extend the class so we can let it participate in HTML forms\n\t\t\treturn class extends customElementConstructor {\n\t\t\t\tstatic formAssociated = true;\n\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper();\n\t\t\t\t\tthis.attachedInternals = this.attachInternals();\n\t\t\t\t}\n\n\t\t\t\t// Add the function here, not below in the component so that\n\t\t\t\t// it's always available, not just when the inner Svelte component\n\t\t\t\t// is mounted\n\t\t\t\trandomIndex() {\n\t\t\t\t\tthis.elementIndex = Math.random();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}}\n/>\n\n<script>\n\texport let elementIndex;\n\texport let attachedInternals;\n\t// ...\n\tfunction check() {\n\t\tattachedInternals.checkValidity();\n\t}\n</script>\n\n...\nCaveats and limitations\npermalink\n\nCustom elements can be a useful way to package components for consumption in a non-Svelte app, as they will work with vanilla HTML and JavaScript as well as most frameworks. There are, however, some important differences to be aware of:\n\nStyles are encapsulated, rather than merely scoped (unless you set shadow: \"none\"). This means that any non-component styles (such as you might have in a global.css file) will not apply to the custom element, including styles with the :global(...) modifier\nInstead of being extracted out as a separate .css file, styles are inlined into the component as a JavaScript string\nCustom elements are not generally suitable for server-side rendering, as the shadow DOM is invisible until JavaScript loads\nIn Svelte, slotted content renders lazily. In the DOM, it renders eagerly. In other words, it will always be created even if the component's <slot> element is inside an {#if ...} block. Similarly, including a <slot> in an {#each ...} block will not cause the slotted content to be rendered multiple times\nThe let: directive has no effect, because custom elements do not have a way to pass data to the parent component that fills the slot\nPolyfills are required to support older browsers\nYou can use Svelte's context feature between regular Svelte components within a custom element, but you can't use them across custom elements. In other words, you can't use setContext on a parent custom element and read that with getContext in a child custom element.\nPREVIOUS\nServer-side component API\nNEXT\nFrequently asked questions"
  },
  {
    "title": "Server-side component API • Docs • Svelte",
    "url": "https://svelte.dev/docs/server-side-component-api",
    "html": "COMPILER AND API\n\nServer-side component API\nServer-side component API\nconst result = Component.render(...)\n\nUnlike client-side components, server-side components don't have a lifespan after you render them — their whole job is to create some HTML and CSS. For that reason, the API is somewhat different.\n\nA server-side component exposes a render method that can be called with optional props. It returns an object with head, html, and css properties, where head contains the contents of any <svelte:head> elements encountered.\n\nYou can import a Svelte component directly into Node using svelte/register.\n\nrequire('svelte/register');\n\n\nconst App = require('./App.svelte').default;\n\n\nconst { head, html, css } = App.render({\n\tanswer: 42\n});\n\nThe .render() method accepts the following parameters:\n\nparameter\tdefault\tdescription\nprops\t{}\tAn object of properties to supply to the component\noptions\t{}\tAn object of options\n\nThe options object takes in the following options:\n\noption\tdefault\tdescription\ncontext\tnew Map()\tA Map of root-level context key-value pairs to supply to the component\nconst { head, html, css } = App.render(\n\t// props\n\t{ answer: 42 },\n\t// options\n\t{\n\t\tcontext: new Map([['context-key', 'context-value']])\n\t}\n);\nPREVIOUS\nClient-side component API\nNEXT\nCustom elements API"
  },
  {
    "title": "svelte/compiler • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-compiler",
    "html": "COMPILER AND API\n\nsvelte/compiler\nsvelte/compiler\ncompile\nparse\npreprocess\nwalk\nVERSION\nTypes\n\nTypically, you won't interact with the Svelte compiler directly, but will instead integrate it into your build system using a bundler plugin. The bundler plugin that the Svelte team most recommends and invests in is vite-plugin-svelte. The SvelteKit framework provides a setup leveraging vite-plugin-svelte to build applications as well as a tool for packaging Svelte component libraries. Svelte Society maintains a list of other bundler plugins for additional tools like Rollup and Webpack.\n\nNonetheless, it's useful to understand how to use the compiler, since bundler plugins generally expose compiler options to you.\n\ncompile\npermalink\nfunction compile(\n\tsource: string,\n\toptions?: CompileOptions\n): CompileResult;\n\nThis is where the magic happens. svelte.compile takes your component source code, and turns it into a JavaScript module that exports a class.\n\nimport { compile } from 'svelte/compiler';\n\n\nconst result = compile(source, {\n\t// options\n});\n\nRefer to CompileOptions for all the available options.\n\nThe returned result object contains the code for your component, along with useful bits of metadata.\n\nconst { js, css, ast, warnings, vars, stats } = compile(source);\n\nRefer to CompileResult for a full description of the compile result.\n\nparse\npermalink\nfunction parse(\n\ttemplate: string,\n\toptions?: ParserOptions\n): Ast;\n\nThe parse function parses a component, returning only its abstract syntax tree. Unlike compiling with the generate: false option, this will not perform any validation or other analysis of the component beyond parsing it. Note that the returned AST is not considered public API, so breaking changes could occur at any point in time.\n\nimport { parse } from 'svelte/compiler';\n\n\nconst ast = parse(source, { filename: 'App.svelte' });\npreprocess\npermalink\nfunction preprocess(\n\tsource: string,\n\tpreprocessor: PreprocessorGroup | PreprocessorGroup[],\n\toptions?:\n\t\t| {\n\t\t\t\tfilename?: string | undefined;\n\t\t  }\n\t\t| undefined\n): Promise<Processed>;\n\nA number of official and community-maintained preprocessing plugins are available to allow you to use Svelte with tools like TypeScript, PostCSS, SCSS, and Less.\n\nYou can write your own preprocessor using the svelte.preprocess API.\n\nThe preprocess function provides convenient hooks for arbitrarily transforming component source code. For example, it can be used to convert a <style lang=\"sass\"> block into vanilla CSS.\n\nThe first argument is the component source code. The second is an array of preprocessors (or a single preprocessor, if you only have one), where a preprocessor is an object with a name which is required, and markup, script and style functions, each of which is optional.\n\nThe markup function receives the entire component source text, along with the component's filename if it was specified in the third argument.\n\nThe script and style functions receive the contents of <script> and <style> elements respectively (content) as well as the entire component source text (markup). In addition to filename, they get an object of the element's attributes.\n\nEach markup, script or style function must return an object (or a Promise that resolves to an object) with a code property, representing the transformed source code. Optionally they can return an array of dependencies which represents files to watch for changes, and a map object which is a sourcemap mapping back the transformation to the original code. script and style preprocessors can optionally return a record of attributes which represent the updated attributes on the script/style tag.\n\nPreprocessor functions should return a map object whenever possible or else debugging becomes harder as stack traces can't link to the original code correctly.\n\nimport { preprocess } from 'svelte/compiler';\nimport MagicString from 'magic-string';\n\n\nconst { code } = await preprocess(\n\tsource,\n\t{\n\t\tmarkup: ({ content, filename }) => {\n\t\t\tconst pos = content.indexOf('foo');\n\t\t\tif (pos < 0) {\n\t\t\t\treturn { code: content };\n\t\t\t}\n\t\t\tconst s = new MagicString(content, { filename });\n\t\t\ts.overwrite(pos, pos + 3, 'bar', { storeName: true });\n\t\t\treturn {\n\t\t\t\tcode: s.toString(),\n\t\t\t\tmap: s.generateMap()\n\t\t\t};\n\t\t}\n\t},\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\nIf a dependencies array is returned, it will be included in the result object. This is used by packages like vite-plugin-svelte and rollup-plugin-svelte to watch additional files for changes, in the case where your <style> tag has an @import (for example).\n\npreprocess-sass.js\nimport { preprocess } from 'svelte/compiler';\nimport MagicString from 'magic-string';\nimport sass from 'sass';\nimport { dirname } from 'path';\n\n\nconst { code } = await preprocess(\n\tsource,\n\t{\n\t\tname: 'my-fancy-preprocessor',\n\t\tmarkup: ({ content, filename }) => {\n\t\t\t// Return code as is when no foo string present\n\t\t\tconst pos = content.indexOf('foo');\n\t\t\tif (pos < 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\t// Replace foo with bar using MagicString which provides\n\t\t\t// a source map along with the changed code\n\t\t\tconst s = new MagicString(content, { filename });\n\t\t\ts.overwrite(pos, pos + 3, 'bar', { storeName: true });\n\n\n\t\t\treturn {\n\t\t\t\tcode: s.toString(),\n\t\t\t\tmap: s.generateMap({ hires: true, file: filename })\n\t\t\t};\n\t\t},\n\t\tstyle: async ({ content, attributes, filename }) => {\n\t\t\t// only process <style lang=\"sass\">\n\t\t\tif (attributes.lang !== 'sass') return;\n\n\n\t\t\tconst { css, stats } = await new Promise((resolve, reject) =>\n\t\t\t\tsass.render(\n\t\t\t\t\t{\n\t\t\t\t\t\tfile: filename,\n\t\t\t\t\t\tdata: content,\n\t\t\t\t\t\tincludePaths: [dirname(filename)]\n\t\t\t\t\t},\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) reject(err);\n\t\t\t\t\t\telse resolve(result);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\n\n\t\t\t// remove lang attribute from style tag\n\t\t\tdelete attributes.lang;\n\n\n\t\t\treturn {\n\t\t\t\tcode: css.toString(),\n\t\t\t\tdependencies: stats.includedFiles,\n\t\t\t\tattributes\n\t\t\t};\n\t\t}\n\t},\n\t{\n\t\tfilename: 'App.svelte'\n\t}\n);\n\nMultiple preprocessors can be used together. The output of the first becomes the input to the second. Within one preprocessor, markup runs first, then script and style.\n\nIn Svelte 3, all markup functions ran first, then all script and then all style preprocessors. This order was changed in Svelte 4.\n\nmultiple-preprocessor.js\nimport { preprocess } from 'svelte/compiler';\n\n\nconst { code } = await preprocess(source, [\n\t{\n\t\tname: 'first preprocessor',\n\t\tmarkup: () => {\n\t\t\tconsole.log('this runs first');\n\t\t},\n\t\tscript: () => {\n\t\t\tconsole.log('this runs second');\n\t\t},\n\t\tstyle: () => {\n\t\t\tconsole.log('this runs third');\n\t\t}\n\t},\n\t{\n\t\tname: 'second preprocessor',\n\t\tmarkup: () => {\n\t\t\tconsole.log('this runs fourth');\n\t\t},\n\t\tscript: () => {\n\t\t\tconsole.log('this runs fifth');\n\t\t},\n\t\tstyle: () => {\n\t\t\tconsole.log('this runs sixth');\n\t\t}\n\t}\n], {\n\tfilename: 'App.svelte'\n});\nwalk\npermalink\n\nThe walk function provides a way to walk the abstract syntax trees generated by the parser, using the compiler's own built-in instance of estree-walker.\n\nThe walker takes an abstract syntax tree to walk and an object with two optional methods: enter and leave. For each node, enter is called (if present). Then, unless this.skip() is called during enter, each of the children are traversed, and then leave is called on the node.\n\ncompiler-walk.js\nimport { walk } from 'svelte/compiler';\n\n\nwalk(ast, {\n\tenter(node, parent, prop, index) {\n\t\tdo_something(node);\n\t\tif (should_skip_children(node)) {\n\t\t\tthis.skip();\n\t\t}\n\t},\n\tleave(node, parent, prop, index) {\n\t\tdo_something_else(node);\n\t}\n});\nVERSION\npermalink\nconst VERSION: string;\n\nThe current version, as set in package.json.\n\nimport { VERSION } from 'svelte/compiler';\nconsole.log(`running svelte version ${VERSION}`);\nTypes\npermalink\nCompileOptions\npermalink\ninterface CompileOptions {…}\nname?: string;\nDEFAULT 'Component'\n\nSets the name of the resulting JavaScript class (though the compiler will rename it if it would otherwise conflict with other variables in scope). It will normally be inferred from filename\n\nfilename?: string;\nDEFAULT null\n\nUsed for debugging hints and sourcemaps. Your bundler plugin will set it automatically.\n\ngenerate?: 'dom' | 'ssr' | false;\nDEFAULT 'dom'\n\nIf \"dom\", Svelte emits a JavaScript class for mounting to the DOM. If \"ssr\", Svelte emits an object with a render method suitable for server-side rendering. If false, no JavaScript or CSS is returned; just metadata.\n\nerrorMode?: 'throw' | 'warn';\nDEFAULT 'throw'\n\nIf \"throw\", Svelte throws when a compilation error occurred. If \"warn\", Svelte will treat errors as warnings and add them to the warning report.\n\nvarsReport?: 'full' | 'strict' | false;\nDEFAULT 'strict'\n\nIf \"strict\", Svelte returns a variables report with only variables that are not globals nor internals. If \"full\", Svelte returns a variables report with all detected variables. If false, no variables report is returned.\n\nsourcemap?: object | string;\nDEFAULT null\n\nAn initial sourcemap that will be merged into the final output sourcemap. This is usually the preprocessor sourcemap.\n\nenableSourcemap?: EnableSourcemap;\nDEFAULT true\n\nIf true, Svelte generate sourcemaps for components. Use an object with js or css for more granular control of sourcemap generation.\n\noutputFilename?: string;\nDEFAULT null\n\nUsed for your JavaScript sourcemap.\n\ncssOutputFilename?: string;\nDEFAULT null\n\nUsed for your CSS sourcemap.\n\nsveltePath?: string;\nDEFAULT 'svelte'\n\nThe location of the svelte package. Any imports from svelte or svelte/[module] will be modified accordingly.\n\ndev?: boolean;\nDEFAULT false\n\nIf true, causes extra code to be added to components that will perform runtime checks and provide debugging information during development.\n\naccessors?: boolean;\nDEFAULT false\n\nIf true, getters and setters will be created for the component's props. If false, they will only be created for readonly exported values (i.e. those declared with const, class and function). If compiling with customElement: true this option defaults to true.\n\nimmutable?: boolean;\nDEFAULT false\n\nIf true, tells the compiler that you promise not to mutate any objects. This allows it to be less conservative about checking whether values have changed.\n\nhydratable?: boolean;\nDEFAULT false\n\nIf true when generating DOM code, enables the hydrate: true runtime option, which allows a component to upgrade existing DOM rather than creating new DOM from scratch. When generating SSR code, this adds markers to <head> elements so that hydration knows which to replace.\n\nlegacy?: boolean;\nDEFAULT false\n\nIf true, generates code that will work in IE9 and IE10, which don't support things like element.dataset.\n\ncustomElement?: boolean;\nDEFAULT false\n\nIf true, tells the compiler to generate a custom element constructor instead of a regular Svelte component.\n\ntag?: string;\nDEFAULT null\n\nA string that tells Svelte what tag name to register the custom element with. It must be a lowercase alphanumeric string with at least one hyphen, e.g. \"my-element\".\n\ncss?: 'injected' | 'external' | 'none' | boolean;\n'injected' (formerly true), styles will be included in the JavaScript class and injected at runtime for the components actually rendered.\n'external' (formerly false), the CSS will be returned in the css field of the compilation result. Most Svelte bundler plugins will set this to 'external' and use the CSS that is statically generated for better performance, as it will result in smaller JavaScript bundles and the output can be served as cacheable .css files.\n'none', styles are completely avoided and no CSS output is generated.\nloopGuardTimeout?: number;\nDEFAULT 0\n\nA number that tells Svelte to break the loop if it blocks the thread for more than loopGuardTimeout ms. This is useful to prevent infinite loops. Only available when dev: true.\n\nnamespace?: string;\nDEFAULT 'html'\n\nThe namespace of the element; e.g., \"mathml\", \"svg\", \"foreign\".\n\ncssHash?: CssHashGetter;\nDEFAULT undefined\n\nA function that takes a { hash, css, name, filename } argument and returns the string that is used as a classname for scoped CSS. It defaults to returning svelte-${hash(css)}.\n\npreserveComments?: boolean;\nDEFAULT false\n\nIf true, your HTML comments will be preserved during server-side rendering. By default, they are stripped out.\n\npreserveWhitespace?: boolean;\nDEFAULT false\n\nIf true, whitespace inside and between elements is kept as you typed it, rather than removed or collapsed to a single space where possible.\n\ndiscloseVersion?: boolean;\nDEFAULT true\n\nIf true, exposes the Svelte major version on the global window object in the browser.\n\nCompileResult\npermalink\n\nThe returned shape of compile from svelte/compiler\n\ninterface CompileResult {…}\njs: {…}\n\nThe resulting JavaScript code from compling the component\n\ncode: string;\n\nCode as a string\n\nmap: any;\n\nA source map\n\ncss: CssResult;\n\nThe resulting CSS code from compling the component\n\nast: Ast;\n\nThe abstract syntax tree representing the structure of the component\n\nwarnings: Warning[];\n\nAn array of warning objects that were generated during compilation. Each warning has several properties:\n\ncode is a string identifying the category of warning\nmessage describes the issue in human-readable terms\nstart and end, if the warning relates to a specific location, are objects with line, column and character properties\nframe, if applicable, is a string highlighting the offending code with line numbers\nvars: Var[];\n\nAn array of the component's declarations used by tooling in the ecosystem (like our ESLint plugin) to infer more information\n\nstats: {\n\ttimings: {\n\t\ttotal: number;\n\t};\n};\n\nAn object used by the Svelte developer team for diagnosing the compiler. Avoid relying on it to stay the same!\n\nCssHashGetter\npermalink\ntype CssHashGetter = (args: {\n\tname: string;\n\tfilename: string | undefined;\n\tcss: string;\n\thash: (input: string) => string;\n}) => string;\nEnableSourcemap\npermalink\ntype EnableSourcemap =\n\t| boolean\n\t| { js: boolean; css: boolean };\nMarkupPreprocessor\npermalink\n\nA markup preprocessor that takes a string of code and returns a processed version.\n\ntype MarkupPreprocessor = (options: {\n\t/**\n\t * The whole Svelte file content\n\t */\n\tcontent: string;\n\t/**\n\t * The filename of the Svelte file\n\t */\n\tfilename?: string;\n}) => Processed | void | Promise<Processed | void>;\nPreprocessor\npermalink\n\nA script/style preprocessor that takes a string of code and returns a processed version.\n\ntype Preprocessor = (options: {\n\t/**\n\t * The script/style tag content\n\t */\n\tcontent: string;\n\t/**\n\t * The attributes on the script/style tag\n\t */\n\tattributes: Record<string, string | boolean>;\n\t/**\n\t * The whole Svelte file content\n\t */\n\tmarkup: string;\n\t/**\n\t * The filename of the Svelte file\n\t */\n\tfilename?: string;\n}) => Processed | void | Promise<Processed | void>;\nPreprocessorGroup\npermalink\n\nA preprocessor group is a set of preprocessors that are applied to a Svelte file.\n\ninterface PreprocessorGroup {…}\nname?: string;\n\nName of the preprocessor. Will be a required option in the next major version\n\nmarkup?: MarkupPreprocessor;\nstyle?: Preprocessor;\nscript?: Preprocessor;\nProcessed\npermalink\n\nThe result of a preprocessor run. If the preprocessor does not return a result, it is assumed that the code is unchanged.\n\ninterface Processed {…}\ncode: string;\n\nThe new code\n\nmap?: string | object;\n\nA source map mapping back to the original code\n\ndependencies?: string[];\n\nA list of additional files to watch for changes\n\nattributes?: Record<string, string | boolean>;\n\nOnly for script/style preprocessors: The updated attributes to set on the tag. If undefined, attributes stay unchanged.\n\ntoString?: () => string;\nSveltePreprocessor\npermalink\n\nUtility type to extract the type of a preprocessor from a preprocessor group\n\ninterface SveltePreprocessor<\n\tPreprocessorType extends keyof PreprocessorGroup,\n\tOptions = any\n> {…}\n(options?: Options): Required<Pick<PreprocessorGroup, PreprocessorType>>;\nPREVIOUS\nsvelte/action\nNEXT\nClient-side component API"
  },
  {
    "title": "Client-side component API • Docs • Svelte",
    "url": "https://svelte.dev/docs/client-side-component-api",
    "html": "COMPILER AND API\n\nClient-side component API\nClient-side component API\nCreating a component\n$set\n$on\n$destroy\nComponent props\nCreating a component\npermalink\nconst component = new Component(options);\n\nA client-side component — that is, a component compiled with generate: 'dom' (or the generate option left unspecified) is a JavaScript class.\n\nimport App from './App.svelte';\n\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\t// assuming App.svelte contains something like\n\t\t// `export let answer`:\n\t\tanswer: 42\n\t}\n});\n\nThe following initialisation options can be provided:\n\noption\tdefault\tdescription\ntarget\tnone\tAn HTMLElement or ShadowRoot to render to. This option is required\nanchor\tnull\tA child of target to render the component immediately before\nprops\t{}\tAn object of properties to supply to the component\ncontext\tnew Map()\tA Map of root-level context key-value pairs to supply to the component\nhydrate\tfalse\tSee below\nintro\tfalse\tIf true, will play transitions on initial render, rather than waiting for subsequent state changes\n\nExisting children of target are left where they are.\n\nThe hydrate option instructs Svelte to upgrade existing DOM (usually from server-side rendering) rather than creating new elements. It will only work if the component was compiled with the hydratable: true option. Hydration of <head> elements only works properly if the server-side rendering code was also compiled with hydratable: true, which adds a marker to each element in the <head> so that the component knows which elements it's responsible for removing during hydration.\n\nWhereas children of target are normally left alone, hydrate: true will cause any children to be removed. For that reason, the anchor option cannot be used alongside hydrate: true.\n\nThe existing DOM doesn't need to match the component — Svelte will 'repair' the DOM as it goes.\n\nindex.js\nimport App from './App.svelte';\n\n\nconst app = new App({\n\ttarget: document.querySelector('#server-rendered-html'),\n\thydrate: true\n});\n$set\npermalink\ncomponent.$set(props);\n\nProgrammatically sets props on an instance. component.$set({ x: 1 }) is equivalent to x = 1 inside the component's <script> block.\n\nCalling this method schedules an update for the next microtask — the DOM is not updated synchronously.\n\ncomponent.$set({ answer: 42 });\n$on\npermalink\ncomponent.$on(ev, callback);\n\nCauses the callback function to be called whenever the component dispatches an event.\n\nA function is returned that will remove the event listener when called.\n\nindex.js\nconst off = component.$on('selected', (event) => {\n\tconsole.log(event.detail.selection);\n});\n\n\noff();\n$destroy\npermalink\ncomponent.$destroy();\n\nRemoves a component from the DOM and triggers any onDestroy handlers.\n\nComponent props\npermalink\ncomponent.prop;\ncomponent.prop = value;\n\nIf a component is compiled with accessors: true, each instance will have getters and setters corresponding to each of the component's props. Setting a value will cause a synchronous update, rather than the default async update caused by component.$set(...).\n\nBy default, accessors is false, unless you're compiling as a custom element.\n\nindex.js\nconsole.log(component.count);\ncomponent.count += 1;\nPREVIOUS\nsvelte/compiler\nNEXT\nServer-side component API"
  },
  {
    "title": "svelte/action • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-action",
    "html": "RUNTIME\n\nsvelte/action\nsvelte/action\nAttributes\nTypes\n\nActions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:\n\n<script>\n\t/** @type {import('svelte/action').Action}  */\n\tfunction foo(node) {\n\t\t// the node has been mounted in the DOM\n\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n<div use:foo />\n\nAn action can have a parameter. If the returned value has an update method, it will be called immediately after Svelte has applied updates to the markup whenever that parameter changes.\n\nDon't worry that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.\n\n<script>\n\t/** @type {string} */\n\texport let bar;\n\n\t/** @type {import('svelte/action').Action<HTMLElement, string>}  */\n\tfunction foo(node, bar) {\n\t\t// the node has been mounted in the DOM\n\n\t\treturn {\n\t\t\tupdate(bar) {\n\t\t\t\t// the value of `bar` has changed\n\t\t\t},\n\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n<div use:foo={bar} />\nAttributes\npermalink\n\nSometimes actions emit custom events and apply custom attributes to the element they are applied to. To support this, actions typed with \nAction\n or \nActionReturn\n type can have a last parameter, Attributes:\n\n<script>\n\t/**\n\t * @type {import('svelte/action').Action<HTMLDivElement, { prop: any }, { 'on:emit': (e: CustomEvent<string>) => void }>}\n\t */\n\tfunction foo(node, { prop }) {\n\t\t// the node has been mounted in the DOM\n\n\t\t//...LOGIC\n\t\tnode.dispatchEvent(new CustomEvent('emit', { detail: 'hello' }));\n\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n<div on:emit={handleEmit} use:foo={{ prop: 'someValue' }} />\nTypes\npermalink\nAction\npermalink\n\nActions are functions that are called when an element is created. You can use this interface to type such actions. The following example defines an action that only works on <div> elements and optionally accepts a parameter which it has a default value for:\n\nexport const myAction: Action<HTMLDivElement, { someProperty: boolean } | undefined> = (node, param = { someProperty: true }) => {\n  // ...\n}\n\nAction\n<HTMLDivElement> and \nAction\n<HTMLDivElement, undefined> both signal that the action accepts no parameters.\n\nYou can return an object with methods update and destroy from the function and type which additional attributes and events it has. See interface \nActionReturn\n for more details.\n\nDocs: https://svelte.dev/docs/svelte-action\n\ninterface Action<\n\tElement = HTMLElement,\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<\n\t\tnever,\n\t\tany\n\t>\n> {…}\n<Node extends Element>(\n\t...args: undefined extends Parameter\n\t\t? [node: Node, parameter?: Parameter]\n\t\t: [node: Node, parameter: Parameter]\n): void | ActionReturn<Parameter, Attributes>;\nActionReturn\npermalink\n\nActions can return an object containing the two properties defined in this interface. Both are optional.\n\nupdate: An action can have a parameter. This method will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup. ActionReturn and ActionReturn<undefined> both mean that the action accepts no parameters.\ndestroy: Method that is called after the element is unmounted\n\nAdditionally, you can specify which additional attributes and events the action enables on the applied element. This applies to TypeScript typings only and has no effect at runtime.\n\nExample usage:\n\ninterface Attributes {\n\tnewprop?: string;\n\t'on:event': (e: CustomEvent<boolean>) => void;\n}\n\n\nexport function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {\n\t// ...\n\treturn {\n\t\tupdate: (updatedParameter) => {...},\n\t\tdestroy: () => {...}\n\t};\n}\n\nDocs: https://svelte.dev/docs/svelte-action\n\ninterface ActionReturn<\n\tParameter = undefined,\n\tAttributes extends Record<string, any> = Record<\n\t\tnever,\n\t\tany\n\t>\n> {…}\nupdate?: (parameter: Parameter) => void;\ndestroy?: () => void;\nPREVIOUS\nsvelte/easing\nNEXT\nsvelte/compiler"
  },
  {
    "title": "svelte/easing • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-easing",
    "html": "RUNTIME\n\nsvelte/easing\nsvelte/easing\n\nEasing functions specify the rate of change over time and are useful when working with Svelte's built-in transitions and animations as well as the tweened and spring utilities. svelte/easing contains 31 named exports, a linear ease and 3 variants of 10 different easing functions: in, out and inOut.\n\nYou can explore the various eases using the ease visualiser in the examples section.\n\nease\tin\tout\tinOut\nback\tbackIn\tbackOut\tbackInOut\nbounce\tbounceIn\tbounceOut\tbounceInOut\ncirc\tcircIn\tcircOut\tcircInOut\ncubic\tcubicIn\tcubicOut\tcubicInOut\nelastic\telasticIn\telasticOut\telasticInOut\nexpo\texpoIn\texpoOut\texpoInOut\nquad\tquadIn\tquadOut\tquadInOut\nquart\tquartIn\tquartOut\tquartInOut\nquint\tquintIn\tquintOut\tquintInOut\nsine\tsineIn\tsineOut\tsineInOut\nPREVIOUS\nsvelte/animate\nNEXT\nsvelte/action"
  },
  {
    "title": "svelte/animate • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-animate",
    "html": "RUNTIME\n\nsvelte/animate\nsvelte/animate\nflip\nTypes\n\nThe svelte/animate module exports one function for use with Svelte animations.\n\nflip\npermalink\nfunction flip(\n\tnode: Element,\n\t{\n\t\tfrom,\n\t\tto\n\t}: {\n\t\tfrom: DOMRect;\n\t\tto: DOMRect;\n\t},\n\tparams?: FlipParams\n): AnimationConfig;\nanimate:flip={params}\n\nThe flip function calculates the start and end position of an element and animates between them, translating the x and y values. flip stands for First, Last, Invert, Play.\n\nflip accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number | function, default d => Math.sqrt(d) * 120) — see below\neasing (function, default cubicOut) — an easing function\n\nduration can be provided as either:\n\na number, in milliseconds.\na function, distance: number => duration: number, receiving the distance the element will travel in pixels and returning the duration in milliseconds. This allows you to assign a duration that is relative to the distance travelled by each element.\n\nYou can see a full example on the animations tutorial.\n\n<script>\n\timport { flip } from 'svelte/animate';\n\timport { quintOut } from 'svelte/easing';\n\n\tlet list = [1, 2, 3];\n</script>\n\n{#each list as n (n)}\n\t<div animate:flip={{ delay: 250, duration: 250, easing: quintOut }}>\n\t\t{n}\n\t</div>\n{/each}\nTypes\npermalink\nAnimationConfig\npermalink\ninterface AnimationConfig {…}\ndelay?: number;\nduration?: number;\neasing?: (t: number) => number;\ncss?: (t: number, u: number) => string;\ntick?: (t: number, u: number) => void;\nFlipParams\npermalink\ninterface FlipParams {…}\ndelay?: number;\nduration?: number | ((len: number) => number);\neasing?: (t: number) => number;\nPREVIOUS\nsvelte/transition\nNEXT\nsvelte/easing"
  },
  {
    "title": "svelte/transition • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-transition",
    "html": "RUNTIME\n\nsvelte/transition\nsvelte/transition\nfade\nblur\nfly\nslide\nscale\ndraw\ncrossfade\nTypes\n\nThe svelte/transition module exports seven functions: fade, blur, fly, slide, scale, draw and crossfade. They are for use with Svelte transitions.\n\nfade\npermalink\nfunction fade(\n\tnode: Element,\n\t{ delay, duration, easing }?: FadeParams | undefined\n): TransitionConfig;\ntransition:fade={params}\nin:fade={params}\nout:fade={params}\n\nAnimates the opacity of an element from 0 to the current opacity for in transitions and from the current opacity to 0 for out transitions.\n\nfade accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number, default 400) — milliseconds the transition lasts\neasing (function, default linear) — an easing function\n\nYou can see the fade transition in action in the transition tutorial.\n\n<script>\n\timport { fade } from 'svelte/transition';\n</script>\n\n{#if condition}\n\t<div transition:fade={{ delay: 250, duration: 300 }}>fades in and out</div>\n{/if}\nblur\npermalink\nfunction blur(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tamount,\n\t\topacity\n\t}?: BlurParams | undefined\n): TransitionConfig;\ntransition:blur={params}\nin:blur={params}\nout:blur={params}\n\nAnimates a blur filter alongside an element's opacity.\n\nblur accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number, default 400) — milliseconds the transition lasts\neasing (function, default cubicInOut) — an easing function\nopacity (number, default 0) - the opacity value to animate out to and in from\namount (number | string, default 5) - the size of the blur. Supports css units (for example: \"4rem\"). The default unit is px\n<script>\n\timport { blur } from 'svelte/transition';\n</script>\n\n{#if condition}\n\t<div transition:blur={{ amount: 10 }}>fades in and out</div>\n{/if}\nfly\npermalink\nfunction fly(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tx,\n\t\ty,\n\t\topacity\n\t}?: FlyParams | undefined\n): TransitionConfig;\ntransition:fly={params}\nin:fly={params}\nout:fly={params}\n\nAnimates the x and y positions and the opacity of an element. in transitions animate from the provided values, passed as parameters to the element's default values. out transitions animate from the element's default values to the provided values.\n\nfly accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number, default 400) — milliseconds the transition lasts\neasing (function, default cubicOut) — an easing function\nx (number | string, default 0) - the x offset to animate out to and in from\ny (number | string, default 0) - the y offset to animate out to and in from\nopacity (number, default 0) - the opacity value to animate out to and in from\n\nx and y use px by default but support css units, for example x: '100vw' or y: '50%'. You can see the fly transition in action in the transition tutorial.\n\n<script>\n\timport { fly } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n</script>\n\n{#if condition}\n\t<div\n\t\ttransition:fly={{ delay: 250, duration: 300, x: 100, y: 500, opacity: 0.5, easing: quintOut }}\n\t>\n\t\tflies in and out\n\t</div>\n{/if}\nslide\npermalink\nfunction slide(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\taxis\n\t}?: SlideParams | undefined\n): TransitionConfig;\ntransition:slide={params}\nin:slide={params}\nout:slide={params}\n\nSlides an element in and out.\n\nslide accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number, default 400) — milliseconds the transition lasts\neasing (function, default cubicOut) — an easing function\naxis (x | y, default y) — the axis of motion along which the transition occurs\n<script>\n\timport { slide } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n</script>\n\n{#if condition}\n\t<div transition:slide={{ delay: 250, duration: 300, easing: quintOut, axis: 'x' }}>\n\t\tslides in and out horizontally\n\t</div>\n{/if}\nscale\npermalink\nfunction scale(\n\tnode: Element,\n\t{\n\t\tdelay,\n\t\tduration,\n\t\teasing,\n\t\tstart,\n\t\topacity\n\t}?: ScaleParams | undefined\n): TransitionConfig;\ntransition:scale={params}\nin:scale={params}\nout:scale={params}\n\nAnimates the opacity and scale of an element. in transitions animate from an element's current (default) values to the provided values, passed as parameters. out transitions animate from the provided values to an element's default values.\n\nscale accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number, default 400) — milliseconds the transition lasts\neasing (function, default cubicOut) — an easing function\nstart (number, default 0) - the scale value to animate out to and in from\nopacity (number, default 0) - the opacity value to animate out to and in from\n<script>\n\timport { scale } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n</script>\n\n{#if condition}\n\t<div transition:scale={{ duration: 500, delay: 500, opacity: 0.5, start: 0.5, easing: quintOut }}>\n\t\tscales in and out\n\t</div>\n{/if}\ndraw\npermalink\nfunction draw(\n\tnode: SVGElement & {\n\t\tgetTotalLength(): number;\n\t},\n\t{\n\t\tdelay,\n\t\tspeed,\n\t\tduration,\n\t\teasing\n\t}?: DrawParams | undefined\n): TransitionConfig;\ntransition:draw={params}\nin:draw={params}\nout:draw={params}\n\nAnimates the stroke of an SVG element, like a snake in a tube. in transitions begin with the path invisible and draw the path to the screen over time. out transitions start in a visible state and gradually erase the path. draw only works with elements that have a getTotalLength method, like <path> and <polyline>.\n\ndraw accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nspeed (number, default undefined) - the speed of the animation, see below.\nduration (number | function, default 800) — milliseconds the transition lasts\neasing (function, default cubicInOut) — an easing function\n\nThe speed parameter is a means of setting the duration of the transition relative to the path's length. It is a modifier that is applied to the length of the path: duration = length / speed. A path that is 1000 pixels with a speed of 1 will have a duration of 1000ms, setting the speed to 0.5 will double that duration and setting it to 2 will halve it.\n\n<script>\n\timport { draw } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n</script>\n\n<svg viewBox=\"0 0 5 5\" xmlns=\"http://www.w3.org/2000/svg\">\n\t{#if condition}\n\t\t<path\n\t\t\ttransition:draw={{ duration: 5000, delay: 500, easing: quintOut }}\n\t\t\td=\"M2 1 h1 v1 h1 v1 h-1 v1 h-1 v-1 h-1 v-1 h1 z\"\n\t\t\tfill=\"none\"\n\t\t\tstroke=\"cornflowerblue\"\n\t\t\tstroke-width=\"0.1px\"\n\t\t\tstroke-linejoin=\"round\"\n\t\t/>\n\t{/if}\n</svg>\ncrossfade\npermalink\nfunction crossfade({\n\tfallback,\n\t...defaults\n}: CrossfadeParams & {\n\tfallback?:\n\t\t| ((\n\t\t\t\tnode: Element,\n\t\t\t\tparams: CrossfadeParams,\n\t\t\t\tintro: boolean\n\t\t  ) => TransitionConfig)\n\t\t| undefined;\n}): [\n\t(\n\t\tnode: any,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig,\n\t(\n\t\tnode: any,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig\n];\n\nThe crossfade function creates a pair of transitions called send and receive. When an element is 'sent', it looks for a corresponding element being 'received', and generates a transition that transforms the element to its counterpart's position and fades it out. When an element is 'received', the reverse happens. If there is no counterpart, the fallback transition is used.\n\ncrossfade accepts the following parameters:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number | function, default 800) — milliseconds the transition lasts\neasing (function, default cubicOut) — an easing function\nfallback (function) — A fallback transition to use for send when there is no matching element being received, and for receive when there is no element being sent.\n<script>\n\timport { crossfade } from 'svelte/transition';\n\timport { quintOut } from 'svelte/easing';\n\n\tconst [send, receive] = crossfade({\n\t\tduration: 1500,\n\t\teasing: quintOut\n\t});\n</script>\n\n{#if condition}\n\t<h1 in:send={{ key }} out:receive={{ key }}>BIG ELEM</h1>\n{:else}\n\t<small in:send={{ key }} out:receive={{ key }}>small elem</small>\n{/if}\nTypes\npermalink\nBlurParams\npermalink\ninterface BlurParams {…}\ndelay?: number;\nduration?: number;\neasing?: EasingFunction;\namount?: number | string;\nopacity?: number;\nCrossfadeParams\npermalink\ninterface CrossfadeParams {…}\ndelay?: number;\nduration?: number | ((len: number) => number);\neasing?: EasingFunction;\nDrawParams\npermalink\ninterface DrawParams {…}\ndelay?: number;\nspeed?: number;\nduration?: number | ((len: number) => number);\neasing?: EasingFunction;\nEasingFunction\npermalink\ntype EasingFunction = (t: number) => number;\nFadeParams\npermalink\ninterface FadeParams {…}\ndelay?: number;\nduration?: number;\neasing?: EasingFunction;\nFlyParams\npermalink\ninterface FlyParams {…}\ndelay?: number;\nduration?: number;\neasing?: EasingFunction;\nx?: number | string;\ny?: number | string;\nopacity?: number;\nScaleParams\npermalink\ninterface ScaleParams {…}\ndelay?: number;\nduration?: number;\neasing?: EasingFunction;\nstart?: number;\nopacity?: number;\nSlideParams\npermalink\ninterface SlideParams {…}\ndelay?: number;\nduration?: number;\neasing?: EasingFunction;\naxis?: 'x' | 'y';\nTransitionConfig\npermalink\ninterface TransitionConfig {…}\ndelay?: number;\nduration?: number;\neasing?: EasingFunction;\ncss?: (t: number, u: number) => string;\ntick?: (t: number, u: number) => void;\nPREVIOUS\nsvelte/motion\nNEXT\nsvelte/animate"
  },
  {
    "title": "svelte/motion • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-motion",
    "html": "RUNTIME\n\nsvelte/motion\nsvelte/motion\ntweened\nspring\nTypes\n\nThe svelte/motion module exports two functions, tweened and spring, for creating writable stores whose values change over time after set and update, rather than immediately.\n\ntweened\npermalink\nfunction tweened<T>(\n\tvalue?: T | undefined,\n\tdefaults?: TweenedOptions<T> | undefined\n): Tweened<T>;\n\nTweened stores update their values over a fixed duration. The following options are available:\n\ndelay (number, default 0) — milliseconds before starting\nduration (number | function, default 400) — milliseconds the tween lasts\neasing (function, default t => t) — an easing function\ninterpolate (function) — see below\n\nstore.set and store.update can accept a second options argument that will override the options passed in upon instantiation.\n\nBoth functions return a Promise that resolves when the tween completes. If the tween is interrupted, the promise will never resolve.\n\nOut of the box, Svelte will interpolate between two numbers, two arrays or two objects (as long as the arrays and objects are the same 'shape', and their 'leaf' properties are also numbers).\n\n<script>\n\timport { tweened } from 'svelte/motion';\n\timport { cubicOut } from 'svelte/easing';\n\n\tconst size = tweened(1, {\n\t\tduration: 300,\n\t\teasing: cubicOut\n\t});\n\n\tfunction handleClick() {\n\t\t// this is equivalent to size.update(n => n + 1)\n\t\t$size += 1;\n\t}\n</script>\n\n<button on:click={handleClick} style=\"transform: scale({$size}); transform-origin: 0 0\">\n\tembiggen\n</button>\n\nIf the initial value is undefined or null, the first value change will take effect immediately. This is useful when you have tweened values that are based on props, and don't want any motion when the component first renders.\n\nimport { tweened } from 'svelte/motion';\nimport { cubicOut } from 'svelte/easing';\n\n\nconst size = tweened(undefined, {\n\tduration: 300,\n\teasing: cubicOut\n});\n\n\n$: $size = big ? 100 : 10;\n\nThe interpolate option allows you to tween between any arbitrary values. It must be an (a, b) => t => value function, where a is the starting value, b is the target value, t is a number between 0 and 1, and value is the result. For example, we can use the d3-interpolate package to smoothly interpolate between two colours.\n\n<script>\n\timport { interpolateLab } from 'd3-interpolate';\n\timport { tweened } from 'svelte/motion';\n\n\tconst colors = ['rgb(255, 62, 0)', 'rgb(64, 179, 255)', 'rgb(103, 103, 120)'];\n\n\tconst color = tweened(colors[0], {\n\t\tduration: 800,\n\t\tinterpolate: interpolateLab\n\t});\n</script>\n\n{#each colors as c}\n\t<button style=\"background-color: {c}; color: white; border: none;\" on:click={(e) => color.set(c)}>\n\t\t{c}\n\t</button>\n{/each}\n\n<h1 style=\"color: {$color}\">{$color}</h1>\nspring\npermalink\nfunction spring<T = any>(\n\tvalue?: T | undefined,\n\topts?: SpringOpts | undefined\n): Spring<T>;\n\nA spring store gradually changes to its target value based on its stiffness and damping parameters. Whereas tweened stores change their values over a fixed duration, spring stores change over a duration that is determined by their existing velocity, allowing for more natural-seeming motion in many situations. The following options are available:\n\nstiffness (number, default 0.15) — a value between 0 and 1 where higher means a 'tighter' spring\ndamping (number, default 0.8) — a value between 0 and 1 where lower means a 'springier' spring\nprecision (number, default 0.01) — determines the threshold at which the spring is considered to have 'settled', where lower means more precise\n\nAll of the options above can be changed while the spring is in motion, and will take immediate effect.\n\nimport { spring } from 'svelte/motion';\n\n\nconst size = spring(100);\nsize.stiffness = 0.3;\nsize.damping = 0.4;\nsize.precision = 0.005;\n\nAs with tweened stores, set and update return a Promise that resolves if the spring settles.\n\nBoth set and update can take a second argument — an object with hard or soft properties. { hard: true } sets the target value immediately; { soft: n } preserves existing momentum for n seconds before settling. { soft: true } is equivalent to { soft: 0.5 }.\n\nimport { spring } from 'svelte/motion';\n\n\nconst coords = spring({ x: 50, y: 50 });\n// updates the value immediately\ncoords.set({ x: 100, y: 200 }, { hard: true });\n// preserves existing momentum for 1s\ncoords.update(\n\t(target_coords, coords) => {\n\t\treturn { x: target_coords.x, y: coords.y };\n\t},\n\t{ soft: 1 }\n);\n\nSee a full example on the spring tutorial.\n\n<script>\n\timport { spring } from 'svelte/motion';\n\n\tconst coords = spring(\n\t\t{ x: 50, y: 50 },\n\t\t{\n\t\t\tstiffness: 0.1,\n\t\t\tdamping: 0.25\n\t\t}\n\t);\n</script>\n\nIf the initial value is undefined or null, the first value change will take effect immediately, just as with tweened values (see above).\n\nimport { spring } from 'svelte/motion';\n\n\nconst size = spring();\n$: $size = big ? 100 : 10;\nTypes\npermalink\nSpring\npermalink\ninterface Spring<T> extends Readable<T> {…}\nset: (new_value: T, opts?: SpringUpdateOpts) => Promise<void>;\nupdate: (fn: Updater<T>, opts?: SpringUpdateOpts) => Promise<void>;\nprecision: number;\ndamping: number;\nstiffness: number;\nTweened\npermalink\ninterface Tweened<T> extends Readable<T> {…}\nset(value: T, opts?: TweenedOptions<T>): Promise<void>;\nupdate(updater: Updater<T>, opts?: TweenedOptions<T>): Promise<void>;\nPREVIOUS\nsvelte/store\nNEXT\nsvelte/transition"
  },
  {
    "title": "svelte/store • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-store",
    "html": "RUNTIME\n\nsvelte/store\nsvelte/store\nwritable\nreadable\nderived\nreadonly\nget\nTypes\n\nThe svelte/store module exports functions for creating readable, writable and derived stores.\n\nKeep in mind that you don't have to use these functions to enjoy the reactive $store syntax in your components. Any object that correctly implements .subscribe, unsubscribe, and (optionally) .set is a valid store, and will work both with the special syntax, and with Svelte's built-in derived stores.\n\nThis makes it possible to wrap almost any other reactive state handling library for use in Svelte. Read more about the store contract to see what a correct implementation looks like.\n\nwritable\npermalink\nfunction writable<T>(\n\tvalue?: T | undefined,\n\tstart?: StartStopNotifier<T> | undefined\n): Writable<T>;\n\nFunction that creates a store which has values that can be set from 'outside' components. It gets created as an object with additional set and update methods.\n\nset is a method that takes one argument which is the value to be set. The store value gets set to the value of the argument if the store value is not already equal to it.\n\nupdate is a method that takes one argument which is a callback. The callback takes the existing store value as its argument and returns the new value to be set to the store.\n\nstore.js\nimport { writable } from 'svelte/store';\n\n\nconst count = writable(0);\n\n\ncount.subscribe((value) => {\n\tconsole.log(value);\n}); // logs '0'\n\n\ncount.set(1); // logs '1'\n\n\ncount.update((n) => n + 1); // logs '2'\n\nIf a function is passed as the second argument, it will be called when the number of subscribers goes from zero to one (but not from one to two, etc). That function will be passed a set function which changes the value of the store, and an update function which works like the update method on the store, taking a callback to calculate the store's new value from its old value. It must return a stop function that is called when the subscriber count goes from one to zero.\n\nstore.js\nimport { writable } from 'svelte/store';\n\n\nconst count = writable(0, () => {\n\tconsole.log('got a subscriber');\n\treturn () => console.log('no more subscribers');\n});\n\n\ncount.set(1); // does nothing\n\n\nconst unsubscribe = count.subscribe((value) => {\n\tconsole.log(value);\n}); // logs 'got a subscriber', then '1'\n\n\nunsubscribe(); // logs 'no more subscribers'\n\nNote that the value of a writable is lost when it is destroyed, for example when the page is refreshed. However, you can write your own logic to sync the value to for example the localStorage.\n\nreadable\npermalink\nfunction readable<T>(\n\tvalue?: T | undefined,\n\tstart?: StartStopNotifier<T> | undefined\n): Readable<T>;\n\nCreates a store whose value cannot be set from 'outside', the first argument is the store's initial value, and the second argument to readable is the same as the second argument to writable.\n\nimport { readable } from 'svelte/store';\n\n\nconst time = readable(new Date(), (set) => {\n\tset(new Date());\n\n\n\tconst interval = setInterval(() => {\n\t\tset(new Date());\n\t}, 1000);\n\n\n\treturn () => clearInterval(interval);\n});\n\n\nconst ticktock = readable('tick', (set, update) => {\n\tconst interval = setInterval(() => {\n\t\tupdate((sound) => (sound === 'tick' ? 'tock' : 'tick'));\n\t}, 1000);\n\n\n\treturn () => clearInterval(interval);\n});\nderived\npermalink\nfunction derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (\n\t\tvalues: StoresValues<S>,\n\t\tset: (value: T) => void,\n\t\tupdate: (fn: Updater<T>) => void\n\t) => Unsubscriber | void,\n\tinitial_value?: T | undefined\n): Readable<T>;\nfunction derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T,\n\tinitial_value?: T | undefined\n): Readable<T>;\n\nDerives a store from one or more other stores. The callback runs initially when the first subscriber subscribes and then whenever the store dependencies change.\n\nIn the simplest version, derived takes a single store, and the callback returns a derived value.\n\nimport { derived } from 'svelte/store';\n\n\nconst doubled = derived(a, ($a) => $a * 2);\n\nThe callback can set a value asynchronously by accepting a second argument, set, and an optional third argument, update, calling either or both of them when appropriate.\n\nIn this case, you can also pass a third argument to derived — the initial value of the derived store before set or update is first called. If no initial value is specified, the store's initial value will be undefined.\n\nimport { derived } from 'svelte/store';\n\n\nconst delayed = derived(\n\ta,\n\t($a, set) => {\n\t\tsetTimeout(() => set($a), 1000);\n\t},\n\t2000\n);\n\n\nconst delayedIncrement = derived(a, ($a, set, update) => {\n\tset($a);\n\tsetTimeout(() => update((x) => x + 1), 1000);\n\t// every time $a produces a value, this produces two\n\t// values, $a immediately and then $a + 1 a second later\n});\n\nIf you return a function from the callback, it will be called when a) the callback runs again, or b) the last subscriber unsubscribes.\n\nimport { derived } from 'svelte/store';\n\n\nconst tick = derived(\n\tfrequency,\n\t($frequency, set) => {\n\t\tconst interval = setInterval(() => {\n\t\t\tset(Date.now());\n\t\t}, 1000 / $frequency);\n\n\n\t\treturn () => {\n\t\t\tclearInterval(interval);\n\t\t};\n\t},\n\t2000\n);\n\nIn both cases, an array of arguments can be passed as the first argument instead of a single store.\n\nimport { derived } from 'svelte/store';\n\n\nconst summed = derived([a, b], ([$a, $b]) => $a + $b);\n\n\nconst delayed = derived([a, b], ([$a, $b], set) => {\n\tsetTimeout(() => set($a + $b), 1000);\n});\nreadonly\npermalink\nfunction readonly<T>(store: Readable<T>): Readable<T>;\n\nThis simple helper function makes a store readonly. You can still subscribe to the changes from the original one using this new readable store.\n\nimport { readonly, writable } from 'svelte/store';\n\n\nconst writableStore = writable(1);\nconst readableStore = readonly(writableStore);\n\n\nreadableStore.subscribe(console.log);\n\n\nwritableStore.set(2); // console: 2\nreadableStore.set(2); // ERROR\nget\npermalink\nfunction get<T>(store: Readable<T>): T;\n\nGenerally, you should read the value of a store by subscribing to it and using the value as it changes over time. Occasionally, you may need to retrieve the value of a store to which you're not subscribed. get allows you to do so.\n\nThis works by creating a subscription, reading the value, then unsubscribing. It's therefore not recommended in hot code paths.\n\nimport { get } from 'svelte/store';\n\n\nconst value = get(store);\nTypes\npermalink\nReadable\npermalink\n\nReadable interface for subscribing.\n\ninterface Readable<T> {…}\nsubscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;\nrun subscription callback\ninvalidate cleanup callback\n\nSubscribe on value changes.\n\nStartStopNotifier\npermalink\n\nStart and stop notification callbacks. This function is called when the first subscriber subscribes.\n\ntype StartStopNotifier<T> = (\n\tset: (value: T) => void,\n\tupdate: (fn: Updater<T>) => void\n) => void | (() => void);\nSubscriber\npermalink\n\nCallback to inform of a value updates.\n\ntype Subscriber<T> = (value: T) => void;\nUnsubscriber\npermalink\n\nUnsubscribes from value updates.\n\ntype Unsubscriber = () => void;\nUpdater\npermalink\n\nCallback to update a value.\n\ntype Updater<T> = (value: T) => T;\nWritable\npermalink\n\nWritable interface for both updating and subscribing.\n\ninterface Writable<T> extends Readable<T> {…}\nset(this: void, value: T): void;\nvalue to set\n\nSet value and inform subscribers.\n\nupdate(this: void, updater: Updater<T>): void;\nupdater callback\n\nUpdate value using callback and inform subscribers.\n\nPREVIOUS\nsvelte\nNEXT\nsvelte/motion"
  },
  {
    "title": "svelte • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte",
    "html": "RUNTIME\n\nsvelte\nsvelte\nonMount\nbeforeUpdate\nafterUpdate\nonDestroy\ntick\nsetContext\ngetContext\nhasContext\ngetAllContexts\ncreateEventDispatcher\nTypes\n\nThe svelte package exposes lifecycle functions and the context API.\n\nonMount\npermalink\nfunction onMount<T>(\n\tfn: () =>\n\t\t| NotFunction<T>\n\t\t| Promise<NotFunction<T>>\n\t\t| (() => any)\n): void;\n\nThe onMount function schedules a callback to run as soon as the component has been mounted to the DOM. It must be called during the component's initialisation (but doesn't need to live inside the component; it can be called from an external module).\n\nonMount does not run inside a server-side component.\n\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconsole.log('the component has mounted');\n\t});\n</script>\n\nIf a function is returned from onMount, it will be called when the component is unmounted.\n\n<script>\n\timport { onMount } from 'svelte';\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tconsole.log('beep');\n\t\t}, 1000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n</script>\n\nThis behaviour will only work when the function passed to onMount synchronously returns a value. async functions always return a Promise, and as such cannot synchronously return a function.\n\nbeforeUpdate\npermalink\nfunction beforeUpdate(fn: () => any): void;\n\nSchedules a callback to run immediately before the component is updated after any state change.\n\nThe first time the callback runs will be before the initial onMount\n\n<script>\n\timport { beforeUpdate } from 'svelte';\n\n\tbeforeUpdate(() => {\n\t\tconsole.log('the component is about to update');\n\t});\n</script>\nafterUpdate\npermalink\nfunction afterUpdate(fn: () => any): void;\n\nSchedules a callback to run immediately after the component has been updated.\n\nThe first time the callback runs will be after the initial onMount\n\n<script>\n\timport { afterUpdate } from 'svelte';\n\n\tafterUpdate(() => {\n\t\tconsole.log('the component just updated');\n\t});\n</script>\nonDestroy\npermalink\nfunction onDestroy(fn: () => any): void;\n\nSchedules a callback to run immediately before the component is unmounted.\n\nOut of onMount, beforeUpdate, afterUpdate and onDestroy, this is the only one that runs inside a server-side component.\n\n<script>\n\timport { onDestroy } from 'svelte';\n\n\tonDestroy(() => {\n\t\tconsole.log('the component is being destroyed');\n\t});\n</script>\ntick\npermalink\nfunction tick(): Promise<void>;\n\nReturns a promise that resolves once any pending state changes have been applied, or in the next microtask if there are none.\n\n<script>\n\timport { beforeUpdate, tick } from 'svelte';\n\n\tbeforeUpdate(async () => {\n\t\tconsole.log('the component is about to update');\n\t\tawait tick();\n\t\tconsole.log('the component just updated');\n\t});\n</script>\nsetContext\npermalink\nfunction setContext<T>(key: any, context: T): T;\n\nAssociates an arbitrary context object with the current component and the specified key and returns that object. The context is then available to children of the component (including slotted content) with getContext.\n\nLike lifecycle functions, this must be called during component initialisation.\n\n<script>\n\timport { setContext } from 'svelte';\n\n\tsetContext('answer', 42);\n</script>\n\nContext is not inherently reactive. If you need reactive values in context then you can pass a store into context, which will be reactive.\n\ngetContext\npermalink\nfunction getContext<T>(key: any): T;\n\nRetrieves the context that belongs to the closest parent component with the specified key. Must be called during component initialisation.\n\n<script>\n\timport { getContext } from 'svelte';\n\n\tconst answer = getContext('answer');\n</script>\nhasContext\npermalink\nfunction hasContext(key: any): boolean;\n\nChecks whether a given key has been set in the context of a parent component. Must be called during component initialisation.\n\n<script>\n\timport { hasContext } from 'svelte';\n\n\tif (hasContext('answer')) {\n\t\t// do something\n\t}\n</script>\ngetAllContexts\npermalink\nfunction getAllContexts<\n\tT extends Map<any, any> = Map<any, any>\n>(): T;\n\nRetrieves the whole context map that belongs to the closest parent component. Must be called during component initialisation. Useful, for example, if you programmatically create a component and want to pass the existing context to it.\n\n<script>\n\timport { getAllContexts } from 'svelte';\n\n\tconst contexts = getAllContexts();\n</script>\ncreateEventDispatcher\npermalink\nfunction createEventDispatcher<\n\tEventMap extends Record<string, any> = any\n>(): EventDispatcher<EventMap>;\n\nCreates an event dispatcher that can be used to dispatch component events. Event dispatchers are functions that can take two arguments: name and detail.\n\nComponent events created with createEventDispatcher create a CustomEvent. These events do not bubble. The detail argument corresponds to the CustomEvent.detail property and can contain any type of data.\n\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<button on:click={() => dispatch('notify', 'detail value')}>Fire Event</button>\n\nEvents dispatched from child components can be listened to in their parent. Any data provided when the event was dispatched is available on the detail property of the event object.\n\n<script>\n\tfunction callbackFunction(event) {\n\t\tconsole.log(`Notify fired! Detail: ${event.detail}`);\n\t}\n</script>\n\n<Child on:notify={callbackFunction} />\n\nEvents can be cancelable by passing a third parameter to the dispatch function. The function returns false if the event is cancelled with event.preventDefault(), otherwise it returns true.\n\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n\n\tfunction notify() {\n\t\tconst shouldContinue = dispatch('notify', 'detail value', { cancelable: true });\n\t\tif (shouldContinue) {\n\t\t\t// no one called preventDefault\n\t\t} else {\n\t\t\t// a listener called preventDefault\n\t\t}\n\t}\n</script>\n\nYou can type the event dispatcher to define which events it can receive. This will make your code more type safe both within the component (wrong calls are flagged) and when using the component (types of the events are now narrowed). See here how to do it.\n\nTypes\npermalink\nComponentConstructorOptions\npermalink\ninterface ComponentConstructorOptions<\n\tProps extends Record<string, any> = Record<string, any>\n> {…}\ntarget: Element | Document | ShadowRoot;\nanchor?: Element;\nprops?: Props;\ncontext?: Map<any, any>;\nhydrate?: boolean;\nintro?: boolean;\n$$inline?: boolean;\nComponentEvents\npermalink\n\nConvenience type to get the events the given component expects. Example:\n\n<script lang=\"ts\">\n   import type { ComponentEvents } from 'svelte';\n   import Component from './Component.svelte';\n\n   function handleCloseEvent(event: ComponentEvents<Component>['close']) {\n\t  console.log(event.detail);\n   }\n</script>\n\n<Component on:close={handleCloseEvent} />\ntype ComponentEvents<Component extends SvelteComponent_1> =\n\tComponent extends SvelteComponent<any, infer Events>\n\t\t? Events\n\t\t: never;\nComponentProps\npermalink\n\nConvenience type to get the props the given component expects. Example:\n\n<script lang=\"ts\">\n\timport type { ComponentProps } from 'svelte';\n\timport Component from './Component.svelte';\n\n\tconst props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props\n</script>\ntype ComponentProps<Component extends SvelteComponent_1> =\n\tComponent extends SvelteComponent<infer Props>\n\t\t? Props\n\t\t: never;\nComponentType\npermalink\n\nConvenience type to get the type of a Svelte component. Useful for example in combination with dynamic components using <svelte:component>.\n\nExample:\n\n<script lang=\"ts\">\n\timport type { ComponentType, SvelteComponent } from 'svelte';\n\timport Component1 from './Component1.svelte';\n\timport Component2 from './Component2.svelte';\n\n\tconst component: ComponentType = someLogic() ? Component1 : Component2;\n\tconst componentOfCertainSubType: ComponentType<SvelteComponent<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;\n</script>\n\n<svelte:component this={component} />\n<svelte:component this={componentOfCertainSubType} needsThisProp=\"hello\" />\ntype ComponentType<\n\tComponent extends SvelteComponent = SvelteComponent\n> = (new (\n\toptions: ComponentConstructorOptions<\n\t\tComponent extends SvelteComponent<infer Props>\n\t\t\t? Props\n\t\t\t: Record<string, any>\n\t>\n) => Component) & {\n\t/** The custom element version of the component. Only present if compiled with the `customElement` compiler option */\n\telement?: typeof HTMLElement;\n};\nSvelteComponent\npermalink\n\nBase class for Svelte components with some minor dev-enhancements. Used when dev=true.\n\nCan be used to create strongly typed Svelte components.\n\nExample:\npermalink\n\nYou have component library on npm called component-library, from which you export a component called MyComponent. For Svelte+TypeScript users, you want to provide typings. Therefore you create a index.d.ts:\n\nimport { SvelteComponent } from \"svelte\";\nexport class MyComponent extends SvelteComponent<{foo: string}> {}\n\nTyping this makes it possible for IDEs like VS Code with the Svelte extension to provide intellisense and to use the component like this in a Svelte file with TypeScript:\n\n<script lang=\"ts\">\n\timport { MyComponent } from \"component-library\";\n</script>\n<MyComponent foo={'bar'} />\nclass SvelteComponent<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent_1<Props, Events> {…}\n[prop: string]: any;\nconstructor(options: ComponentConstructorOptions<Props>);\n$capture_state(): void;\n$inject_state(): void;\nSvelteComponentTyped\npermalink\n\nUse SvelteComponent instead. See PR for more information: https://github.com/sveltejs/svelte/pull/8512\n\nclass SvelteComponentTyped<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent<Props, Events, Slots> {}\nPREVIOUS\nSpecial elements\nNEXT\nsvelte/store"
  },
  {
    "title": "Special elements • Docs • Svelte",
    "url": "https://svelte.dev/docs/special-elements",
    "html": "TEMPLATE SYNTAX\n\nSpecial elements\nSpecial elements\n<slot>\n<svelte:self>\n<svelte:component>\n<svelte:element>\n<svelte:window>\n<svelte:document>\n<svelte:body>\n<svelte:head>\n<svelte:options>\n<svelte:fragment>\n<slot>\npermalink\n<slot><!-- optional fallback --></slot>\n<slot name=\"x\"><!-- optional fallback --></slot>\n<slot prop={value} />\n\nComponents can have child content, in the same way that elements can.\n\nThe content is exposed in the child component using the <slot> element, which can contain fallback content that is rendered if no children are provided.\n\n<!-- Widget.svelte -->\n<div>\n\t<slot>\n\t\tthis fallback content will be rendered when no content is provided, like in the first example\n\t</slot>\n</div>\n\n<!-- App.svelte -->\n<Widget />\n<!-- this component will render the default content -->\n\n<Widget>\n\t<p>this is some child content that will overwrite the default slot content</p>\n</Widget>\n\nNote: If you want to render regular <slot> element, You can use <svelte:element this=\"slot\" />.\n\n<slot name=\"name\">\npermalink\n\nNamed slots allow consumers to target specific areas. They can also have fallback content.\n\n<!-- Widget.svelte -->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n\n<!-- App.svelte -->\n<Widget>\n\t<h1 slot=\"header\">Hello</h1>\n\t<p slot=\"footer\">Copyright (c) 2019 Svelte Industries</p>\n</Widget>\n\nComponents can be placed in a named slot using the syntax <Component slot=\"name\" />. In order to place content in a slot without using a wrapper element, you can use the special element <svelte:fragment>.\n\n<!-- Widget.svelte -->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n\n<!-- App.svelte -->\n<Widget>\n\t<HeaderComponent slot=\"header\" />\n\t<svelte:fragment slot=\"footer\">\n\t\t<p>All rights reserved.</p>\n\t\t<p>Copyright (c) 2019 Svelte Industries</p>\n\t</svelte:fragment>\n</Widget>\n$$slots\npermalink\n\n$$slots is an object whose keys are the names of the slots passed into the component by the parent. If the parent does not pass in a slot with a particular name, that name will not be present in $$slots. This allows components to render a slot (and other elements, like wrappers for styling) only if the parent provides it.\n\nNote that explicitly passing in an empty named slot will add that slot's name to $$slots. For example, if a parent passes <div slot=\"title\" /> to a child component, $$slots.title will be truthy within the child.\n\n<!-- Card.svelte -->\n<div>\n\t<slot name=\"title\" />\n\t{#if $$slots.description}\n\t\t<!-- This <hr> and slot will render only if a slot named \"description\" is provided. -->\n\t\t<hr />\n\t\t<slot name=\"description\" />\n\t{/if}\n</div>\n\n<!-- App.svelte -->\n<Card>\n\t<h1 slot=\"title\">Blog Post Title</h1>\n\t<!-- No slot named \"description\" was provided so the optional slot will not be rendered. -->\n</Card>\n<slot key={value}>\npermalink\n\nSlots can be rendered zero or more times and can pass values back to the parent using props. The parent exposes the values to the slot template using the let: directive.\n\nThe usual shorthand rules apply — let:item is equivalent to let:item={item}, and <slot {item}> is equivalent to <slot item={item}>.\n\n<!-- FancyList.svelte -->\n<ul>\n\t{#each items as item}\n\t\t<li class=\"fancy\">\n\t\t\t<slot prop={item} />\n\t\t</li>\n\t{/each}\n</ul>\n\n<!-- App.svelte -->\n<FancyList {items} let:prop={thing}>\n\t<div>{thing.text}</div>\n</FancyList>\n\nNamed slots can also expose values. The let: directive goes on the element with the slot attribute.\n\n<!-- FancyList.svelte -->\n<ul>\n\t{#each items as item}\n\t\t<li class=\"fancy\">\n\t\t\t<slot name=\"item\" {item} />\n\t\t</li>\n\t{/each}\n</ul>\n\n<slot name=\"footer\" />\n\n<!-- App.svelte -->\n<FancyList {items}>\n\t<div slot=\"item\" let:item>{item.text}</div>\n\t<p slot=\"footer\">Copyright (c) 2019 Svelte Industries</p>\n</FancyList>\n<svelte:self>\npermalink\n\nThe <svelte:self> element allows a component to include itself, recursively.\n\nIt cannot appear at the top level of your markup; it must be inside an if or each block or passed to a component's slot to prevent an infinite loop.\n\n<script>\n\t/** @type {number} */\n\texport let count;\n</script>\n\n{#if count > 0}\n\t<p>counting down... {count}</p>\n\t<svelte:self count={count - 1} />\n{:else}\n\t<p>lift-off!</p>\n{/if}\n<svelte:component>\npermalink\n<svelte:component this={expression} />\n\nThe <svelte:component> element renders a component dynamically, using the component constructor specified as the this property. When the property changes, the component is destroyed and recreated.\n\nIf this is falsy, no component is rendered.\n\n<svelte:component this={currentSelection.component} foo={bar} />\n<svelte:element>\npermalink\n<svelte:element this={expression} />\n\nThe <svelte:element> element lets you render an element of a dynamically specified type. This is useful for example when displaying rich text content from a CMS. Any properties and event listeners present will be applied to the element.\n\nThe only supported binding is bind:this, since the element type-specific bindings that Svelte does at build time (e.g. bind:value for input elements) do not work with a dynamic tag type.\n\nIf this has a nullish value, the element and its children will not be rendered.\n\nIf this is the name of a void element (e.g., br) and <svelte:element> has child elements, a runtime error will be thrown in development mode.\n\n<script>\n\tlet tag = 'div';\n\n\texport let handler;\n</script>\n\n<svelte:element this={tag} on:click={handler}>Foo</svelte:element>\n<svelte:window>\npermalink\n<svelte:window on:event={handler} />\n<svelte:window bind:prop={value} />\n\nThe <svelte:window> element allows you to add event listeners to the window object without worrying about removing them when the component is destroyed, or checking for the existence of window when server-side rendering.\n\nUnlike <svelte:self>, this element may only appear at the top level of your component and must never be inside a block or element.\n\n<script>\n\t/** @param {KeyboardEvent} event */\n\tfunction handleKeydown(event) {\n\t\talert(`pressed the ${event.key} key`);\n\t}\n</script>\n\n<svelte:window on:keydown={handleKeydown} />\n\nYou can also bind to the following properties:\n\ninnerWidth\ninnerHeight\nouterWidth\nouterHeight\nscrollX\nscrollY\nonline — an alias for window.navigator.onLine\ndevicePixelRatio\n\nAll except scrollX and scrollY are readonly.\n\n<svelte:window bind:scrollY={y} />\n\nNote that the page will not be scrolled to the initial value to avoid accessibility issues. Only subsequent changes to the bound variable of scrollX and scrollY will cause scrolling. However, if the scrolling behaviour is desired, call scrollTo() in onMount().\n\n<svelte:document>\npermalink\n<svelte:document on:event={handler} />\n<svelte:document bind:prop={value} />\n\nSimilarly to <svelte:window>, this element allows you to add listeners to events on document, such as visibilitychange, which don't fire on window. It also lets you use actions on document.\n\nAs with <svelte:window>, this element may only appear the top level of your component and must never be inside a block or element.\n\n<svelte:document on:visibilitychange={handleVisibilityChange} use:someAction />\n\nYou can also bind to the following properties:\n\nfullscreenElement\nvisibilityState\n\nAll are readonly.\n\n<svelte:body>\npermalink\n<svelte:body on:event={handler} />\n\nSimilarly to <svelte:window>, this element allows you to add listeners to events on document.body, such as mouseenter and mouseleave, which don't fire on window. It also lets you use actions on the <body> element.\n\nAs with <svelte:window> and <svelte:document>, this element may only appear the top level of your component and must never be inside a block or element.\n\n<svelte:body on:mouseenter={handleMouseenter} on:mouseleave={handleMouseleave} use:someAction />\n<svelte:head>\npermalink\n<svelte:head>...</svelte:head>\n\nThis element makes it possible to insert elements into document.head. During server-side rendering, head content is exposed separately to the main html content.\n\nAs with <svelte:window>, <svelte:document> and <svelte:body>, this element may only appear at the top level of your component and must never be inside a block or element.\n\n<svelte:head>\n\t<title>Hello world!</title>\n\t<meta name=\"description\" content=\"This is where the description goes for SEO\" />\n</svelte:head>\n<svelte:options>\npermalink\n<svelte:options option={value} />\n\nThe <svelte:options> element provides a place to specify per-component compiler options, which are detailed in the compiler section. The possible options are:\n\nimmutable={true} — you never use mutable data, so the compiler can do simple referential equality checks to determine if values have changed\nimmutable={false} — the default. Svelte will be more conservative about whether or not mutable objects have changed\naccessors={true} — adds getters and setters for the component's props\naccessors={false} — the default\nnamespace=\"...\" — the namespace where this component will be used, most commonly \"svg\"; use the \"foreign\" namespace to opt out of case-insensitive attribute names and HTML-specific warnings\ncustomElement=\"...\" — the name to use when compiling this component as a custom element\n<svelte:options customElement=\"my-custom-element\" />\n<svelte:fragment>\npermalink\n\nThe <svelte:fragment> element allows you to place content in a named slot without wrapping it in a container DOM element. This keeps the flow layout of your document intact.\n\n<!-- Widget.svelte -->\n<div>\n\t<slot name=\"header\">No header was provided</slot>\n\t<p>Some content between header and footer</p>\n\t<slot name=\"footer\" />\n</div>\n\n<!-- App.svelte -->\n<Widget>\n\t<h1 slot=\"header\">Hello</h1>\n\t<svelte:fragment slot=\"footer\">\n\t\t<p>All rights reserved.</p>\n\t\t<p>Copyright (c) 2019 Svelte Industries</p>\n\t</svelte:fragment>\n</Widget>\nPREVIOUS\nComponent directives\nNEXT\nsvelte"
  },
  {
    "title": "Element directives • Docs • Svelte",
    "url": "https://svelte.dev/docs/element-directives",
    "html": "TEMPLATE SYNTAX\n\nElement directives\nElement directives\non:eventname\nbind:property\nBinding <select> value\nMedia element bindings\nImage element bindings\nBlock-level element bindings\nbind:group\nbind:this\nclass:name\nstyle:property\nuse:action\ntransition:fn\nTransition parameters\nCustom transition functions\nTransition events\nin:fn/out:fn\nanimate:fn\nAnimation Parameters\nCustom animation functions\n\nAs well as attributes, elements can have directives, which control the element's behaviour in some way.\n\non:eventname\npermalink\non:eventname={handler}\non:eventname|modifiers={handler}\n\nUse the on: directive to listen to DOM events.\n\nApp.svelte\n<script>\n\tlet count = 0;\n\n\t/** @param {MouseEvent} event */\n\tfunction handleClick(event) {\n\t\tcount += 1;\n\t}\n</script>\n\n<button on:click={handleClick}>\n\tcount: {count}\n</button>\n\nHandlers can be declared inline with no performance penalty. As with attributes, directive values may be quoted for the sake of syntax highlighters.\n\n<button on:click={() => (count += 1)}>\n\tcount: {count}\n</button>\n\nAdd modifiers to DOM events with the | character.\n\n<form on:submit|preventDefault={handleSubmit}>\n\t<!-- the `submit` event's default is prevented,\n\t\t so the page won't reload -->\n</form>\n\nThe following modifiers are available:\n\npreventDefault — calls event.preventDefault() before running the handler\nstopPropagation — calls event.stopPropagation(), preventing the event reaching the next element\nstopImmediatePropagation - calls event.stopImmediatePropagation(), preventing other listeners of the same event from being fired.\npassive — improves scrolling performance on touch/wheel events (Svelte will add it automatically where it's safe to do so)\nnonpassive — explicitly set passive: false\ncapture — fires the handler during the capture phase instead of the bubbling phase\nonce — remove the handler after the first time it runs\nself — only trigger handler if event.target is the element itself\ntrusted — only trigger handler if event.isTrusted is true. I.e. if the event is triggered by a user action.\n\nModifiers can be chained together, e.g. on:click|once|capture={...}.\n\nIf the on: directive is used without a value, the component will forward the event, meaning that a consumer of the component can listen for it.\n\n<button on:click> The component itself will emit the click event </button>\n\nIt's possible to have multiple event listeners for the same event:\n\n<script>\n\tlet counter = 0;\n\tfunction increment() {\n\t\tcounter = counter + 1;\n\t}\n\n\t/** @param {MouseEvent} event */\n\tfunction track(event) {\n\t\ttrackEvent(event);\n\t}\n</script>\n\n<button on:click={increment} on:click={track}>Click me!</button>\nbind:property\npermalink\nbind:property={variable}\n\nData ordinarily flows down, from parent to child. The bind: directive allows data to flow the other way, from child to parent. Most bindings are specific to particular elements.\n\nThe simplest bindings reflect the value of a property, such as input.value.\n\n<input bind:value={name} />\n<textarea bind:value={text} />\n\n<input type=\"checkbox\" bind:checked={yes} />\n\nIf the name matches the value, you can use a shorthand.\n\n<input bind:value />\n<!-- equivalent to\n<input bind:value={value} />\n-->\n\nNumeric input values are coerced; even though input.value is a string as far as the DOM is concerned, Svelte will treat it as a number. If the input is empty or invalid (in the case of type=\"number\"), the value is undefined.\n\n<input type=\"number\" bind:value={num} />\n<input type=\"range\" bind:value={num} />\n\nOn <input> elements with type=\"file\", you can use bind:files to get the FileList of selected files. It is readonly.\n\n<label for=\"avatar\">Upload a picture:</label>\n<input accept=\"image/png, image/jpeg\" bind:files id=\"avatar\" name=\"avatar\" type=\"file\" />\n\nIf you're using bind: directives together with on: directives, the order that they're defined in affects the value of the bound variable when the event handler is called.\n\n<script>\n\tlet value = 'Hello World';\n</script>\n\n<input\n\ton:input={() => console.log('Old value:', value)}\n\tbind:value\n\ton:input={() => console.log('New value:', value)}\n/>\n\nHere we were binding to the value of a text input, which uses the input event. Bindings on other elements may use different events such as change.\n\nBinding <select> value\npermalink\n\nA <select> value binding corresponds to the value property on the selected <option>, which can be any value (not just strings, as is normally the case in the DOM).\n\n<select bind:value={selected}>\n\t<option value={a}>a</option>\n\t<option value={b}>b</option>\n\t<option value={c}>c</option>\n</select>\n\nA <select multiple> element behaves similarly to a checkbox group. The bound variable is an array with an entry corresponding to the value property of each selected <option>.\n\n<select multiple bind:value={fillings}>\n\t<option value=\"Rice\">Rice</option>\n\t<option value=\"Beans\">Beans</option>\n\t<option value=\"Cheese\">Cheese</option>\n\t<option value=\"Guac (extra)\">Guac (extra)</option>\n</select>\n\nWhen the value of an <option> matches its text content, the attribute can be omitted.\n\n<select multiple bind:value={fillings}>\n\t<option>Rice</option>\n\t<option>Beans</option>\n\t<option>Cheese</option>\n\t<option>Guac (extra)</option>\n</select>\n\nElements with the contenteditable attribute support the following bindings:\n\ninnerHTML\ninnerText\ntextContent\n\nThere are slight differences between each of these, read more about them here.\n\n<div contenteditable=\"true\" bind:innerHTML={html} />\n\n<details> elements support binding to the open property.\n\n<details bind:open={isOpen}>\n\t<summary>Details</summary>\n\t<p>Something small enough to escape casual notice.</p>\n</details>\nMedia element bindings\npermalink\n\nMedia elements (<audio> and <video>) have their own set of bindings — seven readonly ones...\n\nduration (readonly) — the total duration of the video, in seconds\nbuffered (readonly) — an array of {start, end} objects\nplayed (readonly) — ditto\nseekable (readonly) — ditto\nseeking (readonly) — boolean\nended (readonly) — boolean\nreadyState (readonly) — number between (and including) 0 and 4\n\n...and five two-way bindings:\n\ncurrentTime — the current playback time in the video, in seconds\nplaybackRate — how fast or slow to play the video, where 1 is 'normal'\npaused — this one should be self-explanatory\nvolume — a value between 0 and 1\nmuted — a boolean value indicating whether the player is muted\n\nVideos additionally have readonly videoWidth and videoHeight bindings.\n\n<video\n\tsrc={clip}\n\tbind:duration\n\tbind:buffered\n\tbind:played\n\tbind:seekable\n\tbind:seeking\n\tbind:ended\n\tbind:readyState\n\tbind:currentTime\n\tbind:playbackRate\n\tbind:paused\n\tbind:volume\n\tbind:muted\n\tbind:videoWidth\n\tbind:videoHeight\n/>\nImage element bindings\npermalink\n\nImage elements (<img>) have two readonly bindings:\n\nnaturalWidth (readonly) — the original width of the image, available after the image has loaded\nnaturalHeight (readonly) — the original height of the image, available after the image has loaded\n<img\n\tbind:naturalWidth\n\tbind:naturalHeight\n></img>\nBlock-level element bindings\npermalink\n\nBlock-level elements have 4 read-only bindings, measured using a technique similar to this one:\n\nclientWidth\nclientHeight\noffsetWidth\noffsetHeight\n<div bind:offsetWidth={width} bind:offsetHeight={height}>\n\t<Chart {width} {height} />\n</div>\nbind:group\npermalink\nbind:group={variable}\n\nInputs that work together can use bind:group.\n\n<script>\n\tlet tortilla = 'Plain';\n\n\t/** @type {Array<string>} */\n\tlet fillings = [];\n</script>\n\n<!-- grouped radio inputs are mutually exclusive -->\n<input type=\"radio\" bind:group={tortilla} value=\"Plain\" />\n<input type=\"radio\" bind:group={tortilla} value=\"Whole wheat\" />\n<input type=\"radio\" bind:group={tortilla} value=\"Spinach\" />\n\n<!-- grouped checkbox inputs populate an array -->\n<input type=\"checkbox\" bind:group={fillings} value=\"Rice\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Beans\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Cheese\" />\n<input type=\"checkbox\" bind:group={fillings} value=\"Guac (extra)\" />\n\nbind:group only works if the inputs are in the same Svelte component.\n\nbind:this\npermalink\nbind:this={dom_node}\n\nTo get a reference to a DOM node, use bind:this.\n\n<script>\n\timport { onMount } from 'svelte';\n\n\t/** @type {HTMLCanvasElement} */\n\tlet canvasElement;\n\n\tonMount(() => {\n\t\tconst ctx = canvasElement.getContext('2d');\n\t\tdrawStuff(ctx);\n\t});\n</script>\n\n<canvas bind:this={canvasElement} />\nclass:name\npermalink\nclass:name={value}\nclass:name\n\nA class: directive provides a shorter way of toggling a class on an element.\n\n<!-- These are equivalent -->\n<div class={isActive ? 'active' : ''}>...</div>\n<div class:active={isActive}>...</div>\n\n<!-- Shorthand, for when name and value match -->\n<div class:active>...</div>\n\n<!-- Multiple class toggles can be included -->\n<div class:active class:inactive={!active} class:isAdmin>...</div>\nstyle:property\npermalink\nstyle:property={value}\nstyle:property=\"value\"\nstyle:property\n\nThe style: directive provides a shorthand for setting multiple styles on an element.\n\n<!-- These are equivalent -->\n<div style:color=\"red\">...</div>\n<div style=\"color: red;\">...</div>\n\n<!-- Variables can be used -->\n<div style:color={myColor}>...</div>\n\n<!-- Shorthand, for when property and variable name match -->\n<div style:color>...</div>\n\n<!-- Multiple styles can be included -->\n<div style:color style:width=\"12rem\" style:background-color={darkMode ? 'black' : 'white'}>...</div>\n\n<!-- Styles can be marked as important -->\n<div style:color|important=\"red\">...</div>\n\nWhen style: directives are combined with style attributes, the directives will take precedence:\n\n<div style=\"color: blue;\" style:color=\"red\">This will be red</div>\nuse:action\npermalink\nuse:action\nuse:action={parameters}\naction = (node: HTMLElement, parameters: any) => {\n\tupdate?: (parameters: any) => void,\n\tdestroy?: () => void\n}\n\nActions are functions that are called when an element is created. They can return an object with a destroy method that is called after the element is unmounted:\n\n<script>\n\t/** @type {import('svelte/action').Action}  */\n\tfunction foo(node) {\n\t\t// the node has been mounted in the DOM\n\n\t\treturn {\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n<div use:foo />\n\nAn action can have a parameter. If the returned value has an update method, it will be called whenever that parameter changes, immediately after Svelte has applied updates to the markup.\n\nDon't worry about the fact that we're redeclaring the foo function for every component instance — Svelte will hoist any functions that don't depend on local state out of the component definition.\n\n<script>\n\texport let bar;\n\n\t/** @type {import('svelte/action').Action}  */\n\tfunction foo(node, bar) {\n\t\t// the node has been mounted in the DOM\n\n\t\treturn {\n\t\t\tupdate(bar) {\n\t\t\t\t// the value of `bar` has changed\n\t\t\t},\n\n\t\t\tdestroy() {\n\t\t\t\t// the node has been removed from the DOM\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n<div use:foo={bar} />\n\nRead more in the svelte/action page.\n\ntransition:fn\npermalink\ntransition:fn\ntransition:fn={params}\ntransition:fn|global\ntransition:fn|global={params}\ntransition:fn|local\ntransition:fn|local={params}\ntransition = (node: HTMLElement, params: any, options: { direction: 'in' | 'out' | 'both' }) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\n\nA transition is triggered by an element entering or leaving the DOM as a result of a state change.\n\nWhen a block is transitioning out, all elements inside the block, including those that do not have their own transitions, are kept in the DOM until every transition in the block has been completed.\n\nThe transition: directive indicates a bidirectional transition, which means it can be smoothly reversed while the transition is in progress.\n\n{#if visible}\n\t<div transition:fade>fades in and out</div>\n{/if}\n\nTransitions are local by default (in Svelte 3, they were global by default). Local transitions only play when the block they belong to is created or destroyed, not when parent blocks are created or destroyed.\n\n{#if x}\n\t{#if y}\n\t\t<!-- Svelte 3: <p transition:fade|local> -->\n\t\t<p transition:fade>fades in and out only when y changes</p>\n\n\t\t<!-- Svelte 3: <p transition:fade> -->\n\t\t<p transition:fade|global>fades in and out when x or y change</p>\n\t{/if}\n{/if}\n\nBy default intro transitions will not play on first render. You can modify this behaviour by setting intro: true when you create a component and marking the transition as global.\n\nTransition parameters\npermalink\n\nLike actions, transitions can have parameters.\n\n(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)\n\n{#if visible}\n\t<div transition:fade={{ duration: 2000 }}>fades in and out over two seconds</div>\n{/if}\nCustom transition functions\npermalink\n\nTransitions can use custom functions. If the returned object has a css function, Svelte will create a CSS animation that plays on the element.\n\nThe t argument passed to css is a value between 0 and 1 after the easing function has been applied. In transitions run from 0 to 1, out transitions run from 1 to 0 — in other words, 1 is the element's natural state, as though no transition had been applied. The u argument is equal to 1 - t.\n\nThe function is called repeatedly before the transition begins, with different t and u arguments.\n\n<script>\n\timport { elasticOut } from 'svelte/easing';\n\n\t/** @type {boolean} */\n\texport let visible;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ delay?: number, duration?: number, easing?: (t: number) => number }} params\n\t */\n\tfunction whoosh(node, params) {\n\t\tconst existingTransform = getComputedStyle(node).transform.replace('none', '');\n\n\t\treturn {\n\t\t\tdelay: params.delay || 0,\n\t\t\tduration: params.duration || 400,\n\t\t\teasing: params.easing || elasticOut,\n\t\t\tcss: (t, u) => `transform: ${existingTransform} scale(${t})`\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<div in:whoosh>whooshes in</div>\n{/if}\n\nA custom transition function can also return a tick function, which is called during the transition with the same t and u arguments.\n\nIf it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.\n\nApp.svelte\n<script>\n\texport let visible = false;\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ speed?: number }} params\n\t */\n\tfunction typewriter(node, { speed = 1 }) {\n\t\tconst valid = node.childNodes.length === 1 && node.childNodes[0].nodeType === Node.TEXT_NODE;\n\n\t\tif (!valid) {\n\t\t\tthrow new Error(`This transition only works on elements with a single text node child`);\n\t\t}\n\n\t\tconst text = node.textContent;\n\t\tconst duration = text.length / (speed * 0.01);\n\n\t\treturn {\n\t\t\tduration,\n\t\t\ttick: (t) => {\n\t\t\t\tconst i = ~~(text.length * t);\n\t\t\t\tnode.textContent = text.slice(0, i);\n\t\t\t}\n\t\t};\n\t}\n</script>\n\n{#if visible}\n\t<p in:typewriter={{ speed: 1 }}>The quick brown fox jumps over the lazy dog</p>\n{/if}\n\nIf a transition returns a function instead of a transition object, the function will be called in the next microtask. This allows multiple transitions to coordinate, making crossfade effects possible.\n\nTransition functions also receive a third argument, options, which contains information about the transition.\n\nAvailable values in the options object are:\n\ndirection - one of in, out, or both depending on the type of transition\nTransition events\npermalink\n\nAn element with transitions will dispatch the following events in addition to any standard DOM events:\n\nintrostart\nintroend\noutrostart\noutroend\n{#if visible}\n\t<p\n\t\ttransition:fly={{ y: 200, duration: 2000 }}\n\t\ton:introstart={() => (status = 'intro started')}\n\t\ton:outrostart={() => (status = 'outro started')}\n\t\ton:introend={() => (status = 'intro ended')}\n\t\ton:outroend={() => (status = 'outro ended')}\n\t>\n\t\tFlies in and out\n\t</p>\n{/if}\nin:fn/out:fn\npermalink\nin:fn\nin:fn={params}\nin:fn|global\nin:fn|global={params}\nin:fn|local\nin:fn|local={params}\nout:fn\nout:fn={params}\nout:fn|global\nout:fn|global={params}\nout:fn|local\nout:fn|local={params}\n\nSimilar to transition:, but only applies to elements entering (in:) or leaving (out:) the DOM.\n\nUnlike with transition:, transitions applied with in: and out: are not bidirectional — an in transition will continue to 'play' alongside the out transition, rather than reversing, if the block is outroed while the transition is in progress. If an out transition is aborted, transitions will restart from scratch.\n\n{#if visible}\n\t<div in:fly out:fade>flies in, fades out</div>\n{/if}\nanimate:fn\npermalink\nanimate:name\nanimate:name={params}\nanimation = (node: HTMLElement, { from: DOMRect, to: DOMRect } , params: any) => {\n\tdelay?: number,\n\tduration?: number,\n\teasing?: (t: number) => number,\n\tcss?: (t: number, u: number) => string,\n\ttick?: (t: number, u: number) => void\n}\nDOMRect {\n\tbottom: number,\n\theight: number,\n\t​​left: number,\n\tright: number,\n\t​top: number,\n\twidth: number,\n\tx: number,\n\ty: number\n}\n\nAn animation is triggered when the contents of a keyed each block are re-ordered. Animations do not run when an element is added or removed, only when the index of an existing data item within the each block changes. Animate directives must be on an element that is an immediate child of a keyed each block.\n\nAnimations can be used with Svelte's built-in animation functions or custom animation functions.\n\n<!-- When `list` is reordered the animation will run-->\n{#each list as item, index (item)}\n\t<li animate:flip>{item}</li>\n{/each}\nAnimation Parameters\npermalink\n\nAs with actions and transitions, animations can have parameters.\n\n(The double {{curlies}} aren't a special syntax; this is an object literal inside an expression tag.)\n\n{#each list as item, index (item)}\n\t<li animate:flip={{ delay: 500 }}>{item}</li>\n{/each}\nCustom animation functions\npermalink\n\nAnimations can use custom functions that provide the node, an animation object and any parameters as arguments. The animation parameter is an object containing from and to properties each containing a DOMRect describing the geometry of the element in its start and end positions. The from property is the DOMRect of the element in its starting position, and the to property is the DOMRect of the element in its final position after the list has been reordered and the DOM updated.\n\nIf the returned object has a css method, Svelte will create a CSS animation that plays on the element.\n\nThe t argument passed to css is a value that goes from 0 and 1 after the easing function has been applied. The u argument is equal to 1 - t.\n\nThe function is called repeatedly before the animation begins, with different t and u arguments.\n\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\tcss: (t, u) => `transform: translate(${u * dx}px, ${u * dy}px) rotate(${t * 360}deg);`\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\n\nA custom animation function can also return a tick function, which is called during the animation with the same t and u arguments.\n\nIf it's possible to use css instead of tick, do so — CSS animations can run off the main thread, preventing jank on slower devices.\n\n<script>\n\timport { cubicOut } from 'svelte/easing';\n\n\t/**\n\t * @param {HTMLElement} node\n\t * @param {{ from: DOMRect; to: DOMRect }} states\n\t * @param {any} params\n\t */\n\tfunction whizz(node, { from, to }, params) {\n\t\tconst dx = from.left - to.left;\n\t\tconst dy = from.top - to.top;\n\n\t\tconst d = Math.sqrt(dx * dx + dy * dy);\n\n\t\treturn {\n\t\t\tdelay: 0,\n\t\t\tduration: Math.sqrt(d) * 120,\n\t\t\teasing: cubicOut,\n\t\t\ttick: (t, u) => Object.assign(node.style, { color: t > 0.5 ? 'Pink' : 'Blue' })\n\t\t};\n\t}\n</script>\n\n{#each list as item, index (item)}\n\t<div animate:whizz>{item}</div>\n{/each}\nPREVIOUS\nSpecial tags\nNEXT\nComponent directives"
  },
  {
    "title": "Component directives • Docs • Svelte",
    "url": "https://svelte.dev/docs/component-directives",
    "html": "TEMPLATE SYNTAX\n\nComponent directives\nComponent directives\non:eventname\n--style-props\nbind:property\nbind:this\non:eventname\npermalink\non:eventname={handler}\n\nComponents can emit events using createEventDispatcher or by forwarding DOM events.\n\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<!-- programmatic dispatching -->\n<button on:click={() => dispatch('hello')}> one </button>\n\n<!-- declarative event forwarding -->\n<button on:click> two </button>\n\nListening for component events looks the same as listening for DOM events:\n\n<SomeComponent on:whatever={handler} />\n\nAs with DOM events, if the on: directive is used without a value, the event will be forwarded, meaning that a consumer can listen for it.\n\n<SomeComponent on:whatever />\n--style-props\npermalink\n--style-props=\"anycssvalue\"\n\nYou can also pass styles as props to components for the purposes of theming, using CSS custom properties.\n\nSvelte's implementation is essentially syntactic sugar for adding a wrapper element. This example:\n\n<Slider bind:value min={0} --rail-color=\"black\" --track-color=\"rgb(0, 0, 255)\" />\n\nDesugars to this:\n\n<div style=\"display: contents; --rail-color: black; --track-color: rgb(0, 0, 255)\">\n\t<Slider bind:value min={0} max={100} />\n</div>\n\nNote: Since this is an extra <div>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.\n\nFor SVG namespace, the example above desugars into using <g> instead:\n\n<g style=\"--rail-color: black; --track-color: rgb(0, 0, 255)\">\n\t<Slider bind:value min={0} max={100} />\n</g>\n\nNote: Since this is an extra <g>, beware that your CSS structure might accidentally target this. Be mindful of this added wrapper element when using this feature.\n\nSvelte's CSS Variables support allows for easily themeable components:\n\n<style>\n\t.potato-slider-rail {\n\t\tbackground-color: var(--rail-color, var(--theme-color, 'purple'));\n\t}\n</style>\n\nSo you can set a high-level theme color:\n\n/* global.css */\nhtml {\n\t--theme-color: black;\n}\n\nOr override it at the consumer level:\n\n<Slider --rail-color=\"goldenrod\" />\nbind:property\npermalink\nbind:property={variable}\n\nYou can bind to component props using the same syntax as for elements.\n\n<Keypad bind:value={pin} />\n\nWhile Svelte props are reactive without binding, that reactivity only flows downward into the component by default. Using bind:property allows changes to the property from within the component to flow back up out of the component.\n\nbind:this\npermalink\nbind:this={component_instance}\n\nComponents also support bind:this, allowing you to interact with component instances programmatically.\n\n<ShoppingCart bind:this={cart} />\n\n<button on:click={() => cart.empty()}> Empty shopping cart </button>\n\nNote that we can't do {cart.empty} since cart is undefined when the button is first rendered and throws an error.\n\nPREVIOUS\nElement directives\nNEXT\nSpecial elements"
  },
  {
    "title": "Special tags • Docs • Svelte",
    "url": "https://svelte.dev/docs/special-tags",
    "html": "TEMPLATE SYNTAX\n\nSpecial tags\nSpecial tags\n{@html ...}\n{@debug ...}\n{@const ...}\n{@html ...}\npermalink\n{@html expression}\n\nIn a text expression, characters like < and > are escaped; however, with HTML expressions, they're not.\n\nThe expression should be valid standalone HTML — {@html \"<div>\"}content{@html \"</div>\"} will not work, because </div> is not valid HTML. It also will not compile Svelte code.\n\nSvelte does not sanitize expressions before injecting HTML. If the data comes from an untrusted source, you must sanitize it, or you are exposing your users to an XSS vulnerability.\n\n<div class=\"blog-post\">\n\t<h1>{post.title}</h1>\n\t{@html post.content}\n</div>\n{@debug ...}\npermalink\n{@debug}\n{@debug var1, var2, ..., varN}\n\nThe {@debug ...} tag offers an alternative to console.log(...). It logs the values of specific variables whenever they change, and pauses code execution if you have devtools open.\n\n<script>\n\tlet user = {\n\t\tfirstname: 'Ada',\n\t\tlastname: 'Lovelace'\n\t};\n</script>\n\n{@debug user}\n\n<h1>Hello {user.firstname}!</h1>\n\n{@debug ...} accepts a comma-separated list of variable names (not arbitrary expressions).\n\n<!-- Compiles -->\n{@debug user}\n{@debug user1, user2, user3}\n\n<!-- WON'T compile -->\n{@debug user.firstname}\n{@debug myArray[0]}\n{@debug !isReady}\n{@debug typeof user === 'object'}\n\nThe {@debug} tag without any arguments will insert a debugger statement that gets triggered when any state changes, as opposed to the specified variables.\n\n{@const ...}\npermalink\n{@const assignment}\n\nThe {@const ...} tag defines a local constant.\n\n<script>\n\texport let boxes;\n</script>\n\n{#each boxes as box}\n\t{@const area = box.width * box.height}\n\t{box.width} * {box.height} = {area}\n{/each}\n\n{@const} is only allowed as direct child of {#if}, {:else if}, {:else}, {#each}, {:then}, {:catch}, <Component /> or <svelte:fragment />.\n\nPREVIOUS\nLogic blocks\nNEXT\nElement directives"
  },
  {
    "title": "Logic blocks • Docs • Svelte",
    "url": "https://svelte.dev/docs/logic-blocks",
    "html": "TEMPLATE SYNTAX\n\nLogic blocks\nLogic blocks\n{#if ...}\n{#each ...}\n{#await ...}\n{#key ...}\n{#if ...}\npermalink\n{#if expression}...{/if}\n{#if expression}...{:else if expression}...{/if}\n{#if expression}...{:else}...{/if}\n\nContent that is conditionally rendered can be wrapped in an if block.\n\n{#if answer === 42}\n\t<p>what was the question?</p>\n{/if}\n\nAdditional conditions can be added with {:else if expression}, optionally ending in an {:else} clause.\n\n{#if porridge.temperature > 100}\n\t<p>too hot!</p>\n{:else if 80 > porridge.temperature}\n\t<p>too cold!</p>\n{:else}\n\t<p>just right!</p>\n{/if}\n\n(Blocks don't have to wrap elements, they can also wrap text within elements!)\n\n{#each ...}\npermalink\n{#each expression as name}...{/each}\n{#each expression as name, index}...{/each}\n{#each expression as name (key)}...{/each}\n{#each expression as name, index (key)}...{/each}\n{#each expression as name}...{:else}...{/each}\n\nIterating over lists of values can be done with an each block.\n\n<h1>Shopping list</h1>\n<ul>\n\t{#each items as item}\n\t\t<li>{item.name} x {item.qty}</li>\n\t{/each}\n</ul>\n\nYou can use each blocks to iterate over any array or array-like value — that is, any object with a length property.\n\nAn each block can also specify an index, equivalent to the second argument in an array.map(...) callback:\n\n{#each items as item, i}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n\nIf a key expression is provided — which must uniquely identify each list item — Svelte will use it to diff the list when data changes, rather than adding or removing items at the end. The key can be any object, but strings and numbers are recommended since they allow identity to persist when the objects themselves change.\n\n{#each items as item (item.id)}\n\t<li>{item.name} x {item.qty}</li>\n{/each}\n\n<!-- or with additional index value -->\n{#each items as item, i (item.id)}\n\t<li>{i + 1}: {item.name} x {item.qty}</li>\n{/each}\n\nYou can freely use destructuring and rest patterns in each blocks.\n\n{#each items as { id, name, qty }, i (id)}\n\t<li>{i + 1}: {name} x {qty}</li>\n{/each}\n\n{#each objects as { id, ...rest }}\n\t<li><span>{id}</span><MyComponent {...rest} /></li>\n{/each}\n\n{#each items as [id, ...rest]}\n\t<li><span>{id}</span><MyComponent values={rest} /></li>\n{/each}\n\nAn each block can also have an {:else} clause, which is rendered if the list is empty.\n\n{#each todos as todo}\n\t<p>{todo.text}</p>\n{:else}\n\t<p>No tasks today!</p>\n{/each}\n\nSince Svelte 4 it is possible to iterate over iterables like Map or Set. Iterables need to be finite and static (they shouldn't change while being iterated over). Under the hood, they are transformed to an array using Array.from before being passed off to rendering. If you're writing performance-sensitive code, try to avoid iterables and use regular arrays as they are more performant.\n\n{#await ...}\npermalink\n{#await expression}...{:then name}...{:catch name}...{/await}\n{#await expression}...{:then name}...{/await}\n{#await expression then name}...{/await}\n{#await expression catch name}...{/await}\n\nAwait blocks allow you to branch on the three possible states of a Promise — pending, fulfilled or rejected. In SSR mode, only the pending branch will be rendered on the server. If the provided expression is not a Promise only the fulfilled branch will be rendered, including in SSR mode.\n\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled or not a Promise -->\n\t<p>The value is {value}</p>\n{:catch error}\n\t<!-- promise was rejected -->\n\t<p>Something went wrong: {error.message}</p>\n{/await}\n\nThe catch block can be omitted if you don't need to render anything when the promise rejects (or no error is possible).\n\n{#await promise}\n\t<!-- promise is pending -->\n\t<p>waiting for the promise to resolve...</p>\n{:then value}\n\t<!-- promise was fulfilled -->\n\t<p>The value is {value}</p>\n{/await}\n\nIf you don't care about the pending state, you can also omit the initial block.\n\n{#await promise then value}\n\t<p>The value is {value}</p>\n{/await}\n\nSimilarly, if you only want to show the error state, you can omit the then block.\n\n{#await promise catch error}\n\t<p>The error is {error}</p>\n{/await}\n{#key ...}\npermalink\n{#key expression}...{/key}\n\nKey blocks destroy and recreate their contents when the value of an expression changes.\n\nThis is useful if you want an element to play its transition whenever a value changes.\n\n{#key value}\n\t<div transition:fade>{value}</div>\n{/key}\n\nWhen used around components, this will cause them to be reinstantiated and reinitialised.\n\n{#key value}\n\t<Component />\n{/key}\nPREVIOUS\nBasic markup\nNEXT\nSpecial tags"
  },
  {
    "title": "Basic markup • Docs • Svelte",
    "url": "https://svelte.dev/docs/basic-markup",
    "html": "TEMPLATE SYNTAX\n\nBasic markup\nBasic markup\nTags\nAttributes and props\nText expressions\nComments\nTags\npermalink\n\nA lowercase tag, like <div>, denotes a regular HTML element. A capitalised tag, such as <Widget> or <Namespace.Widget>, indicates a component.\n\n<script>\n\timport Widget from './Widget.svelte';\n</script>\n\n<div>\n\t<Widget />\n</div>\nAttributes and props\npermalink\n\nBy default, attributes work exactly like their HTML counterparts.\n\n<div class=\"foo\">\n\t<button disabled>can't touch this</button>\n</div>\n\nAs in HTML, values may be unquoted.\n\n<input type=checkbox />\n\nAttribute values can contain JavaScript expressions.\n\n<a href=\"page/{p}\">page {p}</a>\n\nOr they can be JavaScript expressions.\n\n<button disabled={!clickable}>...</button>\n\nBoolean attributes are included on the element if their value is truthy and excluded if it's falsy.\n\nAll other attributes are included unless their value is nullish (null or undefined).\n\n<input required={false} placeholder=\"This input field is not required\" />\n<div title={null}>This div has no title attribute</div>\n\nAn expression might include characters that would cause syntax highlighting to fail in regular HTML, so quoting the value is permitted. The quotes do not affect how the value is parsed:\n\n<button disabled=\"{number !== 42}\">...</button>\n\nWhen the attribute name and value match (name={name}), they can be replaced with {name}.\n\n<button {disabled}>...</button>\n<!-- equivalent to\n<button disabled={disabled}>...</button>\n-->\n\nBy convention, values passed to components are referred to as properties or props rather than attributes, which are a feature of the DOM.\n\nAs with elements, name={name} can be replaced with the {name} shorthand.\n\n<Widget foo={bar} answer={42} text=\"hello\" />\n\nSpread attributes allow many attributes or properties to be passed to an element or component at once.\n\nAn element or component can have multiple spread attributes, interspersed with regular ones.\n\n<Widget {...things} />\n\n$$props references all props that are passed to a component, including ones that are not declared with export. Using $$props will not perform as well as references to a specific prop because changes to any prop will cause Svelte to recheck all usages of $$props. But it can be useful in some cases – for example, when you don't know at compile time what props might be passed to a component.\n\n<Widget {...$$props} />\n\n$$restProps contains only the props which are not declared with export. It can be used to pass down other unknown attributes to an element in a component. It shares the same performance characteristics compared to specific property access as $$props.\n\n<input {...$$restProps} />\n\nThe value attribute of an input element or its children option elements must not be set with spread attributes when using bind:group or bind:checked. Svelte needs to be able to see the element's value directly in the markup in these cases so that it can link it to the bound variable.\n\nSometimes, the attribute order matters as Svelte sets attributes sequentially in JavaScript. For example, <input type=\"range\" min=\"0\" max=\"1\" value={0.5} step=\"0.1\"/>, Svelte will attempt to set the value to 1 (rounding up from 0.5 as the step by default is 1), and then set the step to 0.1. To fix this, change it to <input type=\"range\" min=\"0\" max=\"1\" step=\"0.1\" value={0.5}/>.\n\nAnother example is <img src=\"...\" loading=\"lazy\" />. Svelte will set the img src before making the img element loading=\"lazy\", which is probably too late. Change this to <img loading=\"lazy\" src=\"...\"> to make the image lazily loaded.\n\nText expressions\npermalink\n\nA JavaScript expression can be included as text by surrounding it with curly braces.\n\n{expression}\n\nCurly braces can be included in a Svelte template by using their HTML entity strings: &lbrace;, &lcub;, or &#123; for { and &rbrace;, &rcub;, or &#125; for }.\n\nIf you're using a regular expression (RegExp) literal notation, you'll need to wrap it in parentheses.\n\n<h1>Hello {name}!</h1>\n<p>{a} + {b} = {a + b}.</p>\n\n<div>{(/^[A-Za-z ]+$/).test(value) ? x : y}</div>\nComments\npermalink\n\nYou can use HTML comments inside components.\n\n<!-- this is a comment! --><h1>Hello world</h1>\n\nComments beginning with svelte-ignore disable warnings for the next block of markup. Usually, these are accessibility warnings; make sure that you're disabling them for a good reason.\n\n<!-- svelte-ignore a11y-autofocus -->\n<input bind:value={name} autofocus />\nPREVIOUS\nSvelte components\nNEXT\nLogic blocks"
  },
  {
    "title": "Svelte components • Docs • Svelte",
    "url": "https://svelte.dev/docs/svelte-components",
    "html": "TEMPLATE SYNTAX\n\nSvelte components\nSvelte components\n<script>\n<script context=\"module\">\n<style>\n\nComponents are the building blocks of Svelte applications. They are written into .svelte files, using a superset of HTML.\n\nAll three sections — script, styles and markup — are optional.\n\n<script>\n\t// logic goes here\n</script>\n\n<!-- markup (zero or more items) goes here -->\n\n<style>\n\t/* styles go here */\n</style>\n<script>\npermalink\n\nA <script> block contains JavaScript that runs when a component instance is created. Variables declared (or imported) at the top level are 'visible' from the component's markup. There are four additional rules:\n\n1. export creates a component prop\npermalink\n\nSvelte uses the export keyword to mark a variable declaration as a property or prop, which means it becomes accessible to consumers of the component (see the section on attributes and props for more information).\n\n<script>\n\texport let foo;\n\n\t// Values that are passed in as props\n\t// are immediately available\n\tconsole.log({ foo });\n</script>\n\nYou can specify a default initial value for a prop. It will be used if the component's consumer doesn't specify the prop on the component (or if its initial value is undefined) when instantiating the component. Note that if the values of props are subsequently updated, then any prop whose value is not specified will be set to undefined (rather than its initial value).\n\nIn development mode (see the compiler options), a warning will be printed if no default initial value is provided and the consumer does not specify a value. To squelch this warning, ensure that a default initial value is specified, even if it is undefined.\n\n<script>\n\texport let bar = 'optional default initial value';\n\texport let baz = undefined;\n</script>\n\nIf you export a const, class or function, it is readonly from outside the component. Functions are valid prop values, however, as shown below.\n\nApp.svelte\n<script>\n\t// these are readonly\n\texport const thisIs = 'readonly';\n\n\t/** @param {string} name */\n\texport function greet(name) {\n\t\talert(`hello ${name}!`);\n\t}\n\n\t// this is a prop\n\texport let format = (n) => n.toFixed(2);\n</script>\n\nReadonly props can be accessed as properties on the element, tied to the component using bind:this syntax.\n\nYou can use reserved words as prop names.\n\nApp.svelte\n<script>\n\t/** @type {string} */\n\tlet className;\n\n\t// creates a `class` property, even\n\t// though it is a reserved word\n\texport { className as class };\n</script>\n2. Assignments are 'reactive'\npermalink\n\nTo change component state and trigger a re-render, just assign to a locally declared variable.\n\nUpdate expressions (count += 1) and property assignments (obj.x = y) have the same effect.\n\n<script>\n\tlet count = 0;\n\n\tfunction handleClick() {\n\t\t// calling this function will trigger an\n\t\t// update if the markup references `count`\n\t\tcount = count + 1;\n\t}\n</script>\n\nBecause Svelte's reactivity is based on assignments, using array methods like .push() and .splice() won't automatically trigger updates. A subsequent assignment is required to trigger the update. This and more details can also be found in the tutorial.\n\n<script>\n\tlet arr = [0, 1];\n\n\tfunction handleClick() {\n\t\t// this method call does not trigger an update\n\t\tarr.push(2);\n\t\t// this assignment will trigger an update\n\t\t// if the markup references `arr`\n\t\tarr = arr;\n\t}\n</script>\n\nSvelte's <script> blocks are run only when the component is created, so assignments within a <script> block are not automatically run again when a prop updates. If you'd like to track changes to a prop, see the next example in the following section.\n\n<script>\n\texport let person;\n\t// this will only set `name` on component creation\n\t// it will not update when `person` does\n\tlet { name } = person;\n</script>\n3. $: marks a statement as reactive\npermalink\n\nAny top-level statement (i.e. not inside a block or a function) can be made reactive by prefixing it with the $: JS label syntax. Reactive statements run after other script code and before the component markup is rendered, whenever the values that they depend on have changed.\n\n<script>\n\texport let title;\n\texport let person;\n\n\t// this will update `document.title` whenever\n\t// the `title` prop changes\n\t$: document.title = title;\n\n\t$: {\n\t\tconsole.log(`multiple statements can be combined`);\n\t\tconsole.log(`the current title is ${title}`);\n\t}\n\n\t// this will update `name` when 'person' changes\n\t$: ({ name } = person);\n\n\t// don't do this. it will run before the previous line\n\tlet name2 = name;\n</script>\n\nOnly values which directly appear within the $: block will become dependencies of the reactive statement. For example, in the code below total will only update when x changes, but not y.\n\nApp.svelte\n<script>\n\tlet x = 0;\n\tlet y = 0;\n\n\t/** @param {number} value */\n\tfunction yPlusAValue(value) {\n\t\treturn value + y;\n\t}\n\n\t$: total = yPlusAValue(x);\n</script>\n\nTotal: {total}\n<button on:click={() => x++}> Increment X </button>\n\n<button on:click={() => y++}> Increment Y </button>\n\nIt is important to note that the reactive blocks are ordered via simple static analysis at compile time, and all the compiler looks at are the variables that are assigned to and used within the block itself, not in any functions called by them. This means that yDependent will not be updated when x is updated in the following example:\n\n<script>\n\tlet x = 0;\n\tlet y = 0;\n\n\t/** @param {number} value */\n\tfunction setY(value) {\n\t\ty = value;\n\t}\n\n\t$: yDependent = y;\n\t$: setY(x);\n</script>\n\nMoving the line $: yDependent = y below $: setY(x) will cause yDependent to be updated when x is updated.\n\nIf a statement consists entirely of an assignment to an undeclared variable, Svelte will inject a let declaration on your behalf.\n\nApp.svelte\n<script>\n\t/** @type {number} */\n\texport let num;\n\n\t// we don't need to declare `squared` and `cubed`\n\t// — Svelte does it for us\n\t$: squared = num * num;\n\t$: cubed = squared * num;\n</script>\n4. Prefix stores with $ to access their values\npermalink\n\nA store is an object that allows reactive access to a value via a simple store contract. The svelte/store module contains minimal store implementations which fulfil this contract.\n\nAny time you have a reference to a store, you can access its value inside a component by prefixing it with the $ character. This causes Svelte to declare the prefixed variable, subscribe to the store at component initialization and unsubscribe when appropriate.\n\nAssignments to $-prefixed variables require that the variable be a writable store, and will result in a call to the store's .set method.\n\nNote that the store must be declared at the top level of the component — not inside an if block or a function, for example.\n\nLocal variables (that do not represent store values) must not have a $ prefix.\n\n<script>\n\timport { writable } from 'svelte/store';\n\n\tconst count = writable(0);\n\tconsole.log($count); // logs 0\n\n\tcount.set(1);\n\tconsole.log($count); // logs 1\n\n\t$count = 2;\n\tconsole.log($count); // logs 2\n</script>\nStore contract\npermalink\nstore = { subscribe: (subscription: (value: any) => void) => (() => void), set?: (value: any) => void }\n\nYou can create your own stores without relying on svelte/store, by implementing the store contract:\n\nA store must contain a .subscribe method, which must accept as its argument a subscription function. This subscription function must be immediately and synchronously called with the store's current value upon calling .subscribe. All of a store's active subscription functions must later be synchronously called whenever the store's value changes.\nThe .subscribe method must return an unsubscribe function. Calling an unsubscribe function must stop its subscription, and its corresponding subscription function must not be called again by the store.\nA store may optionally contain a .set method, which must accept as its argument a new value for the store, and which synchronously calls all of the store's active subscription functions. Such a store is called a writable store.\n\nFor interoperability with RxJS Observables, the .subscribe method is also allowed to return an object with an .unsubscribe method, rather than return the unsubscription function directly. Note however that unless .subscribe synchronously calls the subscription (which is not required by the Observable spec), Svelte will see the value of the store as undefined until it does.\n\n<script context=\"module\">\npermalink\n\nA <script> tag with a context=\"module\" attribute runs once when the module first evaluates, rather than for each component instance. Values declared in this block are accessible from a regular <script> (and the component markup) but not vice versa.\n\nYou can export bindings from this block, and they will become exports of the compiled module.\n\nYou cannot export default, since the default export is the component itself.\n\nVariables defined in module scripts are not reactive — reassigning them will not trigger a rerender even though the variable itself will update. For values shared between multiple components, consider using a store.\n\n<script context=\"module\">\n\tlet totalComponents = 0;\n\n\t// the export keyword allows this function to imported with e.g.\n\t// `import Example, { alertTotal } from './Example.svelte'`\n\texport function alertTotal() {\n\t\talert(totalComponents);\n\t}\n</script>\n\n<script>\n\ttotalComponents += 1;\n\tconsole.log(`total number of times this component has been created: ${totalComponents}`);\n</script>\n<style>\npermalink\n\nCSS inside a <style> block will be scoped to that component.\n\nThis works by adding a class to affected elements, which is based on a hash of the component styles (e.g. svelte-123xyz).\n\n<style>\n\tp {\n\t\t/* this will only affect <p> elements in this component */\n\t\tcolor: burlywood;\n\t}\n</style>\n\nTo apply styles to a selector globally, use the :global(...) modifier.\n\n<style>\n\t:global(body) {\n\t\t/* this will apply to <body> */\n\t\tmargin: 0;\n\t}\n\n\tdiv :global(strong) {\n\t\t/* this will apply to all <strong> elements, in any\n\t\t\t component, that are inside <div> elements belonging\n\t\t\t to this component */\n\t\tcolor: goldenrod;\n\t}\n\n\tp:global(.red) {\n\t\t/* this will apply to all <p> elements belonging to this\n\t\t\t component with a class of red, even if class=\"red\" does\n\t\t\t not initially appear in the markup, and is instead\n\t\t\t added at runtime. This is useful when the class\n\t\t\t of the element is dynamically applied, for instance\n\t\t\t when updating the element's classList property directly. */\n\t}\n</style>\n\nIf you want to make @keyframes that are accessible globally, you need to prepend your keyframe names with -global-.\n\nThe -global- part will be removed when compiled, and the keyframe then be referenced using just my-animation-name elsewhere in your code.\n\n<style>\n\t@keyframes -global-my-animation-name {\n\t\t/* code goes here */\n\t}\n</style>\n\nThere should only be 1 top-level <style> tag per component.\n\nHowever, it is possible to have <style> tag nested inside other elements or logic blocks.\n\nIn that case, the <style> tag will be inserted as-is into the DOM, no scoping or processing will be done on the <style> tag.\n\n<div>\n\t<style>\n\t\t/* this style tag will be inserted as-is */\n\t\tdiv {\n\t\t\t/* this will apply to all `<div>` elements in the DOM */\n\t\t\tcolor: red;\n\t\t}\n\t</style>\n</div>\nPREVIOUS\nIntroduction\nNEXT\nBasic markup"
  },
  {
    "title": "Introduction • Docs • Svelte",
    "url": "https://svelte.dev/docs/introduction",
    "html": "GETTING STARTED\n\nIntroduction\nIntroduction\nStart a new project\nEditor tooling\nGetting help\n\nWelcome to the Svelte reference documentation! This is intended as a resource for people who already have some familiarity with Svelte and want to learn more about using it.\n\nIf that's not you (yet), you may prefer to visit the interactive tutorial or the examples before consulting this reference. You can try Svelte online using the REPL. Alternatively, if you'd like a more fully-featured environment, you can try Svelte on StackBlitz.\n\nStart a new project\npermalink\n\nWe recommend using SvelteKit, the official application framework from the Svelte team:\n\nnpm create svelte@latest myapp\ncd myapp\nnpm install\nnpm run dev\n\nSvelteKit will handle calling the Svelte compiler to convert your .svelte files into .js files that create the DOM and .css files that style it. It also provides all the other pieces you need to build a web application such as a development server, routing, deployment, and SSR support. SvelteKit uses Vite to build your code.\n\nAlternatives to SvelteKit\npermalink\n\nIf you don't want to use SvelteKit for some reason, you can also use Svelte with Vite (but without SvelteKit) by running npm create vite@latest and selecting the svelte option. With this, npm run build will generate HTML, JS and CSS files inside the dist directory. In most cases, you will probably need to choose a routing library as well.\n\nAlternatively, there are plugins for all the major web bundlers to handle Svelte compilation — which will output .js and .css that you can insert into your HTML — but most others won't handle SSR.\n\nEditor tooling\npermalink\n\nThe Svelte team maintains a VS Code extension and there are integrations with various other editors and tools as well.\n\nGetting help\npermalink\n\nDon't be shy about asking for help in the Discord chatroom! You can also find answers on Stack Overflow.\n\nPREVIOUS\nNEXT\nSvelte components"
  }
]
