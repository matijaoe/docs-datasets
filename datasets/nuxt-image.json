[
  {
    "title": "Twicpics - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/twicpics",
    "html": "Providers\n\nTwicpics\nSource\n\nNuxt Image internally use Twicpics as static provider.\n\nIntegration between Twicpics and the image module.\n\nWhat is TwicPics?\n\nTwicpics is a Responsive Image Service Solution (SaaS) that enables on-demand responsive image generation.\n\nUsing the TwicPics Provider you can, out of the box, benefit from at least :\n\nperformance of our network: global CDN, optimized protocols and competitive caching\nideal compression: modern technology and Next-Gen formats (TwicPics delivers WebP natively for accounting browsers and can also delivers avif)\n\nAnd using the TwicPics API, you will be able to access all these features: smart cropping with TwicPics focus auto, true color, flip, turn, crop, zoom.\n\nRequirement\n\nThe only requirement is to have a TwicPics account. If you don't already have one, you can easily create your own TwicPics account for free.\n\nSetup\n\nYou just need to configure the TwicPics provider with the baseURL set to your TwicPics Domain.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    twicpics: {\n\n      baseURL: 'https://<your-twicpics-domain>/'\n\n      // Feel free to use our demo domain to try the following examples.\n\n      // baseUrl: 'https://demo.twic.pics/'\n\n    }\n\n  }\n\n})\n\nStandard properties\n\nTwicPics Provider complies with the documentation of nuxt-img and nuxt-picture.\n\nfit\n\nfit determines how the image is resized in relation to the parameters height and width.\n\nTwicPics Provider supports all the the standard values for fit property of Nuxt image and Nuxt picture.\n\nSyntax: fit='__cover__' (default value)\n\nThis will return a variant of your master image cropped to 300x300 while preserving aspect ratio.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/football.jpg\"\n\n  height=300\n\n  width=300\n\n/>\n\n\nThis will return a variant of your master image resized to 300x300 with distortion.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/football.jpg\"\n\n  fit=\"resize\"\n\n  height=300\n\n  width=300\n\n/>\n\n\nThis will bring your image back to a 300x600 area with respect to the ratio (1:1) using letterboxing.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  fit=\"contain\"\n\n  height=600\n\n  width=300\n\n/>\n\n\nThe letterboxing strips are transparent areas. Feel free to select the color of your choice by using the background property.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  fit=\"contain\"\n\n  height=600\n\n  width=300\n\n  background: \"red\"\n\n/>\n\nformat\n\nSpecifies the output format. It can be an image format or a preview format. By default, TwicPics will \"guess\" the best output format for the requesting browser, but you can use format to change this behavior.\n\nSyntax: format='avif'|'heif'|'jpeg'|'png'|__'webp'__\n\nWebP is the default format provided by TwicPics (if the browser supports it).\n\nExamples:\n\nThis will return a variant of your image in avif format.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  format=\"avif\"\n\n/>\n\n\nThis will return a blurry preview of your image in svg format.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  format=\"preview\"\n\n/>\n\n\nMore informations about format here.\n\nquality\n\nSpecifies the output quality as a number between 1 (poor quality) and 100 (best quality).\n\nSyntax: quality=number\n\nTwicPics considers quality=70 as default value.\n\nNB: TwicPics automatically manages the returned quality according to the network performance for an optimized display speed even in difficult conditions.\n\nNB : when Data Saver is activated (android mobile only), default quality=10.\n\nExample:\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  quality=1\n\n/>\n\n\nMore informations about quality here.\n\nbackground\n\nbackground specifies a color that will show through transparent and translucent parts of the image. This will have no effect on images with no transparency nor translucency.\n\nSyntax: background=color\n\nExample:\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/icon-500.png\"\n\n  background=\"red\"\n\n/>\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  fit=\"contain\"\n\n  height=600\n\n  width=300\n\n  background: 'red'\n\n/>\n\n\nMore informations about background here.\n\nTwicPics modifiers\n\nIn addition to the standard parameters, the specific features of the TwicPics API are accessible via the modifiers prop of nuxt-img or nuxt-picture.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/path-to-nuxt-demo.jpg\"\n\n  ...\n\n  standard props\n\n  ...\n\n  :modifiers=\"{key_1: value_1, ..., key_n: value_n}\"\n\n/>\n\n\nA complete list of these features and their uses is accessible here.\n\ncrop\n\ncrop will extract a zone from the image which size is the given crop size. If no coordinates are given, the focus point will be used as a guide to determine where to start the extraction. If coordinates are given, they will be used to determine the top-left pixel from which to start the extraction and the focus point will be reset to the center of the resulting image.\n\nSyntax: { crop: size@coordinates }\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat.jpg\"\n\n  :modifiers=\"{crop:'500x100'}\" <!-- no coordinates given -->\n\n/>\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat.jpg\"\n\n  :modifiers=\"{crop:'500x100@700x400'}\" <!-- passing coordinates -->\n\n/>\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat.jpg\"\n\n  :modifiers=\"{focus:'auto', crop:'500x100'}\" <!-- using focus auto -->\n\n/>\n\n\nMore informations about crop here.\n\nflip\n\nflip will invert the image horizontally, vertically or both depending on the expression provided.\n\nSyntax: { flip: 'both' | 'x' | 'y' }\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/puppy.jpg\"\n\n  :modifiers=\"{flip:'both'}\" <!-- horizontal and vertical -->\n\n/>\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/puppy.jpg\"\n\n  :modifiers=\"{flip:'x'}\" <!-- horizontal -->\n\n/>\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/puppy.jpg\"\n\n  :modifiers=\"{flip:'y'}\" <!-- vertical -->\n\n/>\n\n\nMore informations about flip here.\n\nfocus\n\nfocus will set the focus point coordinates. It doesn't modify the output image in any way but will change the behavior of further transformations that take the focus point into account (namely cover, crop and resize).\n\nIf auto is used in place of actual coordinates, the focus point will be chosen automagically for you!\n\nSyntax: { focus: coordinates|'auto' }\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  :modifiers=\"{focus:'auto', crop:'500x500'}\" <!-- using crop with focus auto -->\n\n/>\n\n\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/football.jpg\"\n\n  :modifiers=\"{focus:'auto', cover:'1:1'}\" <!-- changing ratio with focus auto -->\n\n/>\n\n\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/path-to-nuxt-demo.jpg\"\n\n  :modifiers=\"{focus:'200x200', cover:'1:1'}\" <!-- changing ratio with selected focus -->\n\n/>\n\n\nNB : focus must be placed before the transformations modifying the output image (namely cover, crop and resize).\n\nMore informations about focus here.\n\ntruecolor\n\ntruecolor can be used to prevent color quantization. If no boolean is provided, true is assumed.\n\nBy default, quantization is allowed (truecolor=false).\n\nQuantization occurs whenever the output format is png.\n\nUse truecolor if you want to distribute substantially larger but more accurate images with translucency to users on browsers with no WebP support or when png is required as output format.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/peacock.jpg\"\n\n  format=\"png\"\n\n  :modifiers=\"{truecolor:true}\" <!-- disallowes color quantization -->\n\n/>\n\n\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/peacock.jpg\"\n\n  format=\"png\"\n\n  :modifiers=\"{truecolor:false}\" <!-- allowes color quantization (default value) -->\n\n/>\n\n\nMore informations about truecolor here.\n\nturn\n\nturn will change the orientation of the image. It accepts an angle in degrees or an expression. Angles will be rounded to the closest multiple of 90°.\n\nSyntax: { turn: number | 'flip' | 'left' | 'right' }\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/football.jpg\"\n\n  :modifiers=\"{turn:'left'}\" <!-- turns image at -90° -->\n\n/>\n\n\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/football.jpg\"\n\n  :modifiers=\"{turn:180}\" <!-- turns image at 180° -->\n\n/>\n\n\nMore informations about turn here.\n\nzoom\n\nZooms into the image by a factor equal or superior to 1 towards the focus point while preserving the image size.\n\nSyntax: { zoom: number }\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cherry-3.jpg\"\n\n  :modifiers=\"{zoom:1.5}\" <!-- zooms into image by a factor 1.5 -->\n\n/>\n\n\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cherry-3.jpg\"\n\n :modifiers=\"{zoom:3}\" <!-- zooms into image by a factor 3 -->\n\n/>\n\n\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cherry-3.jpg\"\n\n :modifiers=\"{focus:'auto', zoom:3}\" <!-- zooms into image by a factor 3 in direction of the focus-->\n\n/>\n\n\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cherry-3.jpg\"\n\n :modifiers=\"{focus:'200x200', zoom:3}\" <!-- zooms into image by a factor 3 in direction of the focus-->\n\n/>\n\n\nMore informations about zoom here.\n\nCombination of parameters\n\nYou can combine several transformations of the TwicPics API.\n\nBe aware that the order of the parameters can be significant.\n\nExample:\n\nThis will return a variant of image for which we have, in order:\n\ncropped the image from the center to 16:9 aspect ratio\nthen placed the focus on the center of interest of the cropped image\nthen rotate the image 90° to the left\n\nThe result is a 9:16 (not 16:9) image with a possibly false area of interest.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/football.jpg\"\n\n  :modifiers=\"{cover:'16:9', focus:'auto', turn:'left'}\"\n\n/>\n\n\nThis will return a variant of your image for which we have, in order:\n\nplaced the focus on the center of interest of the original image\nthen cropped the image to 16:9 from the center of interest\nthen rotated the image 90° to the left\n\nThe result is a cropped image with the area of interest retained and displayed in 16:9 format.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/football.jpg\"\n\n  fit=\"fill\"\n\n  :modifiers=\"{focus:'auto', turn:'left', cover:'16:9'}\"\n\n/>\n\nDealing with image ratio\n\nLet's say you want to display an image in 4:3 aspect ratio with a width of 300px.\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  width=300\n\n  fit=\"fill\"\n\n  :modifiers=\"{cover:'4:3'}\"\n\n/>\n\n\nOr, with focus='auto'\n\n<NuxtImg\n\n  provider=\"twicpics\"\n\n  src=\"/cat_1x1.jpg\"\n\n  width=300\n\n  fit=\"fill\"\n\n  :modifiers=\"{focus:'auto', cover:'4:3'}\"\n\n/>\n\nGo further with TwicPics\n\nTwicPics offers a collection of web components that will allow you to exploit all its power :\n\nPixel Perfect\nLayout Driven\nIdeal Compression\nLazy Loading\nLQIP\nCLS Optimization\n\nA specific integration to Nuxt is available here.\n\nStrapi\n\nNuxt Image with Strapi integration.\n\nUnsplash\n\nNuxt Image has first class integration with Unsplash."
  },
  {
    "title": "Static Images - Nuxt Image",
    "url": "https://image.nuxt.com/advanced/static-images",
    "html": "Advanced\n\nStatic Images\n\nOptimizing images for static websites.\n\nIf you are building a static site using nuxt generate, Nuxt Image will optimize and save your images locally when your site is generated - and deploy them alongside your generated pages.\n\nIf you disabled server-side rendering (ssr: false in the nuxt.config), Nuxt Image won't be able to optimize your images during the static generation process.\n\nIn that case, you can tell Nuxt to pre-render images by using the nitro.prerender.routes option:\n\nexport default defineNuxtConfig({\n\n  ssr: false,\n\n  nitro: {\n\n    prerender: {\n\n      routes: [\n\n        '/_ipx/w_120/market.jpg',\n\n        '/_ipx/w_140/market.jpg',\n\n        // etc.\n\n      ]\n\n    }\n\n  }\n\n})\n\n\nCustom Provider\n\nIf a CDN provider is not supported, you can define it yourself."
  },
  {
    "title": "Custom Provider - Nuxt Image",
    "url": "https://image.nuxt.com/advanced/custom-provider",
    "html": "Advanced\n\nCustom Provider\n\nIf a CDN provider is not supported, you can define it yourself.\n\nProvider Entry\n\nThe runtime will receive a source, image modifiers and its provider options. It is responsible for generating a url for optimized images, and needs to be isomorphic because it may be called on either server or client.\n\nproviders/my-provider.ts\nimport { joinURL } from 'ufo'\n\nimport type { ProviderGetImage } from '@nuxt/image'\n\nimport { createOperationsGenerator } from '#image'\n\n\n\nconst operationsGenerator = createOperationsGenerator()\n\n\n\nexport const getImage: ProviderGetImage = (\n\n  src,\n\n  { modifiers = {}, baseURL } = {}\n\n) => {\n\n\n\n  if (!baseURL) {\n\n    // also support runtime config \n\n    baseURL = useRuntimeConfig().public.siteUrl\n\n  }\n\n\n\n  const operations = operationsGenerator(modifiers)\n\n\n\n  return {\n\n    url: joinURL(baseURL, src + (operations ? '?' + operations : '')),\n\n  }\n\n}\n\nParameters\nsrc: Source path of the image.\nmodifiers: List of image modifiers that are defined in the image component or as a preset.\nctx: (ImageCTX) Image module runtime context\noptions: (CreateImageOptions) Image module global runtime options\n$img: The $img helper\n\nNote: Values in ctx might change. Use it with caution.\n\nReturn\nurl: Absolute or relative url of optimized image.\nUse your provider\nRegister provider\n\nAfter you create your own provider, you should register it in the nuxt.config. In order to do that create a property inside image.provider.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  // ...\n\n  image: {\n\n    providers: {\n\n      myProvider: {\n\n        name: 'myProvider', // optional value to overrider provider name\n\n        provider: '~/providers/my-provider.ts', // Path to custom provider\n\n        options: {\n\n          // ... provider options\n\n          baseURL: \"https://site.com\"\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\n\nThere are plenty of useful utilities that can be used to write providers by importing from #image. See src/runtime/providers for more info.\n\nUsage\n\nSet attribute provider as your custom provider name.\n\npages/index.vue\n<NuxtImg provider=\"myProvider\" src=\"/image.png\" >\n\n<!-- <img src=\"https://site.com/image.png\" /> -->\n\n\nVercel\n\nOptimize images at Vercel's Edge Network.\n\nStatic Images\n\nOptimizing images for static websites."
  },
  {
    "title": "Vercel - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/vercel",
    "html": "Providers\n\nVercel\nSource\n\nOptimize images at Vercel's Edge Network.\n\nWhen deploying your nuxt applications to Vercel platform, image module can use Vercel's Edge Network to optimize images on demand.\n\nThis provider will be enabled by default in vercel deployments.\n\nDomains\n\nTo use external URLs (images not in public/ directory), hostnames should be whitelisted.\n\nExample:\n\nnuxt.config\nexport default {\n\n  image: {\n\n    domains: [\n\n      'avatars0.githubusercontent.com'\n\n    ]\n\n  }\n\n}\n\nSizes\n\nSpecify any custom width property you use in <NuxtImg>, <NuxtPicture> and $img.\n\nIf a width is not defined, image will fallback to the next bigger width.\n\nExample:\n\nnuxt.config\nexport default {\n\n  image: {\n\n    screens: {\n\n      icon: 40,\n\n      avatar: 24\n\n    }\n\n  }\n\n}\n\n\nUploadcare\n\nPower up file uploading, processing and delivery for your app in one sitting.\n\nCustom Provider\n\nIf a CDN provider is not supported, you can define it yourself."
  },
  {
    "title": "Uploadcare - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/uploadcare",
    "html": "Providers\n\nUploadcare\nSource\n\nPower up file uploading, processing and delivery for your app in one sitting.\n\nIntegration between Uploadcare and the Nuxt Image module.\n\nUsage\n\nTo use images from uploadcare, specify the provider as uploadcare and set the image src to the UUID provided on the dashboard.\n\npage.vue\n<NuxtImg\n\n  provider=\"uploadcare\"\n\n  src=\"c160afba-8b42-45a9-a46a-d393248b0072\"\n\n  alt=\"My image from uploadcare\"\n\n/>\n\nModifiers\n\nTo see all possible modifiers and their options, check out the image transformations documentation or the URL API Reference.\n\nTypes are provided for the following modifiers:\n\nsrc/types/module.ts\n  // Image Compression\n\n  format: 'jpeg' | 'png' | 'webp' | 'auto'\n\n  quality: 'smart' | 'smart_retina' | 'normal' | 'better' | 'best' | 'lighter' | 'lightest'\n\n  progressive: 'yes' | 'no'\n\n  strip_meta: 'all' | 'none' | 'sensitive'\n\n\n\n  // Image Geometry\n\n  preview: `${number}x${number}` // Height x Width\n\n  resize: `${number}x${number}` | `${number}x`| `x${number}` \n\n  smart_resize: `${number}x${number}`\n\n  crop: string | string[]\n\n  scale_crop: string | string[]\n\n  border_radius: string | string[]\n\n  setfill: string // 3, 6 or 8 digit hex color\n\n  zoom_objects: string // 1 to 100\n\n\nPlease feel free to open a PR to improve support for additional operations.\n\nConfiguration\n\nBy default, all file URLs use the ucarecdn.com domain. By setting a custom CDN CNAME, file URLs can use cdn.mycompany.com instead.\n\nSee the Uploadcare documentation for how to enable a custom domain in your project. To tell Nuxt Image about the custom CDN name, use the following configuration:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    uploadcare: {\n\n      cdnURL: 'cdn.mycompany.com',\n\n    }\n\n  }\n\n})\n\n\nUnsplash\n\nNuxt Image has first class integration with Unsplash.\n\nVercel\n\nOptimize images at Vercel's Edge Network."
  },
  {
    "title": "Unsplash - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/unsplash",
    "html": "Providers\n\nUnsplash\nSource\n\nNuxt Image has first class integration with Unsplash.\n\nIntegration between Unsplash and the image module. See Unsplash License for what usage is permitted.\n\nDynamically resizable images\n\nEvery image returned by the Unsplash API is a dynamic image URL, which means that it can be manipulated to create new transformations of the image by simply adjusting the query parameters of the image URL.\n\nThis enables resizing, cropping, compression, and changing the format of the image in realtime client-side, without any API calls.\n\nUnder the hood, Unsplash uses Imgix, a powerful image manipulation service to provide dynamic image URLs.\n\nSupported parameters\n\nUnsplash officially support the parameters:\n\nw, h: for adjusting the width and height of a photo\ncrop: for applying cropping to the photo\nfm: for converting image format\nauto=format: for automatically choosing the optimal image format depending on user browser\nq: for changing the compression quality when using lossy file formats\nfit: for changing the fit of the image within the specified dimensions\ndpr: for adjusting the device pixel ratio of the image\n\nThe other parameters offered by Imgix can be used, but we don’t officially support them and may remove support for them at any time in the future.\n\n💫 Tip The API returns image URLs containing an ixid parameter. All resizing and manipulations of image URLs must keep this parameter as it allows for your application to report photo views and be compliant with the API Guidelines.\n\nTwicpics\n\nNuxt Image internally use Twicpics as static provider.\n\nUploadcare\n\nPower up file uploading, processing and delivery for your app in one sitting."
  },
  {
    "title": "Sirv - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/sirv",
    "html": "Providers\n\nSirv\nSource\n\nNuxt Image integration with Sirv media management, transformation and delivery platform.\n\nIntegration between Sirv and Nuxt image.\n\nTo use Sirv provider, you need to set up your Sirv URL as the baseURL in the Nuxt Image module configuration, like this:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    sirv: {\n\n      baseURL: 'https://youralias.sirv.com/' \n\n    }\n\n  }\n\n})\n\n\nGet your alias from your Sirv account details page or set up a custom domain (instructions).\n\nSirv fit parameters\n\nBy default, Sirv will scale the image, preserving its aspect ratio, to fit within the smallest dimension. Here's the map of standard values for the fit property and how they're going to be interpreted by Sirv:\n\nfill: ignore\ninside: fill\noutside: fill\nnoUpscaling: noup, this is the default option for Sirv image provider, so you don't need to specify it explicitly.\nformat\n\nIf no format is specified, Sirv will deliver your images in the optimal format by default. Alternatively, you can specify a custom format for the image like this:\n\n<NuxtImg\n\n    provider=\"sirv\"\n\n    src=\"/example-image.jpg\"\n\n    width=\"300\"\n\n    format=\"webp\"\n\n/>\n\nSirv modifiers\n\nTo use Sirv-specific transformations, add them in the modifier prop.\n\nprofile\n\nUse Sirv profiles to combine multiple transformation options into a single parameter. For example, you can combine canvas, crop and watermark parameters into a single profile and use it like this:\n\n<NuxtImg\n\n    provider=\"sirv\"\n\n    src=\"/example-image.jpg\"\n\n    width=\"300\"\n\n    :modifiers=\"{profile: 'my-profile'}\n\n/>\n\ncanvas\n\nUse the canvas modifier to add a canvas around your image. You can also set its width, height, color, and position.\n\nsharpen\n\nSharpen the image using the sharpen modifier.\n\n<NuxtImg\n\n  provider=\"sirv\"\n\n  src=\"/example-image.jpg\"\n\n  width=\"300\"\n\n  :modifiers=\"{sharpen: 50}\"\n\n/>\n\nframe\n\nAdd a frame/border to your images using the frame modifier. You can also set its width and color.\n\n<NuxtImg\n\n  provider=\"sirv\"\n\n  src=\"/example-image.jpg\"\n\n  width=\"300\"\n\n  :modifiers=\"{\n\n    frameStyle: 'solid',\n\n    frameColor: '00000',\n\n    frameWidth: '2',\n\n    frameRimColor: '97A6B1',\n\n    frameRimWidth: '2'\n\n   }\"\n\n/>\n\nrotate\n\nUse the rotate modifier to rotate your image. You can specify the number of degrees to rotate the image by.\n\n<NuxtImg\n\n  provider=\"sirv\"\n\n  src=\"/example-image.jpg\"\n\n  :modifiers=\"{rotate: 90}\"\n\n/>\n\nColor and light options\n\nSirv has various color manipulation options like grayscale, colorize,colortone,colorLevels, as well as light manipulation options like lightness, hue, saturation, highlights, shadows, brightness, exposure, contrast.\n\nHere's how to convert an image to grayscale:\n\n<NuxtImg\n\n  provider=\"sirv\"\n\n  src=\"/example-image.jpg\"\n\n  width=\"300\"\n\n  :modifiers=\"{grayscale: true}\"\n\n/>\n\nWatermarks and text overlays\n\nUsing Sirv's Nuxt Image integration, you can overlay images or text over other images for watermarking or creating a dynamic banner using custom text!\n\nwatermark\n\nAdd an image overlay over your existing image using the watermark modifier. Used mostly for watermarking, but can be useful for creating banners, OG images, and personalization. Here's an example of a single watermark:\n\n<NuxtImg provider=\"sirv\" \n\n src=\"example-image.jpg\" \n\n width=\"300\" \n\n :modifiers=\"{\n\n    watermark: '/watermark-v1.png',\n\n    watermarkPosition: 'center',\n\n    watermarkWidth: '30%',\n\n  }\" \n\n/>\n\n\nFind out more about Sirv watermarks here.\n\nOverlay Text\n\nYou can add text overlays to your images and have full freedom over their positioning and looks.\n\n<NuxtImg provider=\"sirv\" \n\n  src=\"example-image.jpg\" width=\"300\"\n\n  :modifiers=\"{\n\n    text: 'Hello there',\n\n    textAlign: 'center',\n\n    textPositionGravity: 'south',\n\n    textBackgroundColor: '#ffff',\n\n    textSize: 60,\n\n    textFontFamily: 'Arial',\n\n    textColor: 'white',\n\n  }\" \n\n/>\n\n\nMore examples of text overlays can be found here.\n\nList of supported transformations\n\nSirv's Nuxt Image integration uses intuitive names for each transformation. If you use a property that does not match any of the following supported options, it will be added in the URL as it is.\n\nSupported Parameter Name\tTranslates to Parameter\tDescription\nwidth\tw\tWidth of image.\nheight\th\tHeight of image.\ns\ts\tResize the image by its biggest side\nquality\tq\tJPEG image quality (percentage).\nfit\tscale.option\tImage scaling options.\nprofile\tprofile\tApply a Sirv profile\nformat\tformat\tImage format served (defaults to optimal).\nwebpFallback\twebp-fallback\tImage format for browsers without WebP support.\nsubsampling\tsubsampling\tChroma subsampling to reduce JPEG file size.\ngifCompression\tgif.lossy\tApply lossy compression, to reduce GIF file size.\ncrop\tcrop.type\tAutomatically crop to edge of image contents; point of interest; or face.\ncropAr\tcrop.aspectratio\tAspect ratio of the crop\ncw\tcw\tCrop the image to a specific width.\nch\tch\tCrop the image to a specific height.\ncx\tcx\tPosition to start image crop (from top).\ncy\tcy\tPosition to start image crop (from left).\ncropPaddingX\tcrop.pad.x\tAdd padding to left/right of crop area\ncropPaddingY\tcrop.pad.y\tAdd padding to top/bottom of crop area.\ncanvasHeight\tcanvas.height\tCreate a canvas around the image (height).\ncanvasWidth\tcanvas.width\tCreate a canvas around the image (width).\ncanvasAr\tcanvas.aspectratio\tAspect ratio of the canvas from 1-99 e.g. 16:9\ncanvasPosition\tcanvas.position\tPosition of the canvas behind the image.\ncanvasBorderWidth\tcanvas.border.width\tAdds additional width left and right of the canvas.\ncanvasBorderHeight\tcanvas.border.height\tAdds additional height above and below the canvas.\ncanvasBorderColor\tcanvas.border.color\tColor of the canvas border e.g. E0AA80 or red.\ncanvasBorderOpacity\tcanvas.border.opacity\tOpacity of the canvas border.\nwatermark\twatermark\tFilepath of the image to be overlayed.\nwatermarkPosition\twatermark.position\tPosition of the watermark on the image.\nwatermarkPositionGravity\twatermark.position.gravity\tsets the starting point for shifting the x & y values.\nwatermarkPositionX\twatermark.position.x\tPosition of the watermark (from left).\nwatermarkPositionY\twatermark.position.y\tPosition of the watermark (from top).\nwatermarkWidth\twatermark.scale.width\tWidth of watermark.\nwatermarkHeight\twatermark.scale.height\tHeight of watermark.\ntext\ttext\tDisplay text on your image.\ntextBase64\ttext.text64\tAlternative to text parameter, with Base64 encoding\ntextSize\ttext.size\tWidth of text area in relation to image.\ntextAlign\ttext.align\tAlign the multiline text.\ntextPosition\ttext.position\tLocation of the text on the image.\ntextPositionX\ttext.position.x\tLocation of the text (from left).\ntextPositionY\ttext.position.y\tLocation of the text (from top).\ntextPositionGravity\ttext.position.gravity\tMaster location of the text on the image.\ntextFontSize\ttext.font.size\tFix the size of the text in px.\ntextFontStyle\ttext.font.style\tStyle of the text.\ntextFontFamily\ttext.font.family\tChoose a font e.g. \"Open Sans\".\ntextFontWeight\ttext.font.weight\tChoose font weight (light, normal, semi-bold, bold, extra-bold).\ntextColor\ttext.color\tText color e.g. E0AA80 or E0AA8020.\ntextOpacity\ttext.opacity\tText opacity.\ntextOutlineWidth\ttext.outline.width\tAdd an outline around the text.\ntextoutlineColor\ttext.outline.color\tColor of the text outline.\ntextOutlineOpacity\ttext.outline.opacity\tOpacity of the text outline.\ntextOutlineBlur\ttext.outline.blur\tBlur the edge of the text outline.\ntextBackgroundColor\ttext.background.color\tBackground color e.g. E0AA80 or E0AA8020.\ntextBackgroundOpacity\ttext.background.opacity\tBackground opacity.\nsharpen\tsharpen\tSharpen the image.\nblur\tblur\tBlur the image.\ngrayscale\tgrayscale\tMake the image black & white.\ncolorize\tcolorize\tOverlay a color on the image.\ncolorizeColor\tcolorize.color\tThe color of the colorize option.\ncolorizeOpacity\tcolorize.opacity\tOpacity of the color overlay.\ncolortone\tcolortone\tChange the color tone of the image.\ncolortoneColor\tcolortone.color\tApply a color tone to an image.\ncolortoneLevel\tcolortone.level\tSet the level of blending with the original image.\ncolortoneMode\tcolortone.mode\tApply the color tone to the entire image or shadows/highlights only.\nvignette\tvigette.value\tAdjust the depth of the vignette.\nvignetteColor\tvigette.color\tAdd a vignette (dark edges) around the image.\nlightness\tlightness\tChange the lightness of the image.\ncolorlevelBlack\tcolorlevel.black\tAdjust black level of image.\ncolorlevelWhite\tcolorlevel.white\tAdjust white level of image.\nhistogram\thistogram\tDisplay a histogram of RGB levels.\nhue\thue\tChange the hue of the image.\nsaturation\tsaturation\tChange the saturation of the image.\nhighlights\thighlights\tChange the highlights of the image.\nshadows\tshadows\tChange the shadows of the image.\nbrightness\tbrightness\tChange the brightness of the image.\nexposure\texposure\tChange the exposure of the image.\ncontrast\tcontrast\tChange the contrast of the image.\nrotate\trotate\tNumber of degrees to rotate the image.\nflip\tflip\tFlip image vertically (mirror).\nflop\tflop\tFlip image horizontally (mirror).\nopacity\topacity\tOpacity of PNG images.\nframeStyle\tframe.style\tAdd a frame around the image.\nframeColor\tframe.color\tFrame color e.g. E0AA80 or E0AA8020.\nframeWidth\tframe.width\tFrame width.\nframeRimColor\tframe.rim.color\tFrame rim color e.g. E0AA80 or E0AA8020.\nframeRimWidth\tframe.rim.width\tFrame rim width.\npdfPage\tpage\tPage number of PDF when converted to image.\n\nLearn more about Sirv's Image transformations from the official documentation.\n\nSanity\n\nNuxt Image has first class integration with Sanity.\n\nStoryblok\n\nNuxt Image internally use Storyblok as static provider."
  },
  {
    "title": "Storyblok - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/storyblok",
    "html": "Providers\n\nStoryblok\nSource\n\nNuxt Image internally use Storyblok as static provider.\n\nIntegration between Storyblok and the image module. To use this provider you just need to specify the base url of your service in Storyblok.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    storyblok: {\n\n      baseURL: 'https://a.storyblok.com'\n\n    }\n\n  }\n\n})\n\nStoryblok modifiers\n\nI am following all modifiers present on Storyblok image service\n\nResizing\n\nCheck Storyblok documentation if you want to know more.\n\nthe logic is:\n\nIf you do not define either width or height, the image will not be resized.\nIf you define only width or only height the image will be proportionately resized based on the one you defined.\n\nExample:\n\n<div>Original</div>\n\n<NuxtImg\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg\"\n\n/>\n\n\n\n<div>Resized static</div>\n\n<NuxtImg\n\n  width=\"500\"\n\n  height=\"500\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg\"\n\n/>\n\n\n\n<div>Proportional to Width</div>\n\n<NuxtImg\n\n  width=\"500\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg\"\n\n/>\n\n\n\n<div>Proportional to Height</div>\n\n<NuxtImg\n\n  height=\"500\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg\"\n\n/>\n\nFit in with background or not\n\nCheck Storyblok documentation if you want to know more.\n\nIf you want to use it just add a props fit=\"in\". Take care that storyblok only support fit-in.\n\nYou can also use the fill filters to fill your fit-in with a specific background. If you not defining value it will be transparent.\n\nExample:\n\n<div>Fit in with background CCCCCC</div>\n\n<NuxtImg\n\n  width=\"200\"\n\n  height=\"200\"\n\n  fit=\"in\"\n\n  :modifiers=\"{ filters: { fill: 'CCCCCC' } }\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg\"\n\n/>\n\nFormat\n\nCheck Storyblok documentation if you want to know more.\n\nYou can modify your image format. Supported format are webp, jpeg and png.\n\nExample:\n\n<h3>Format</h3>\n\n<NuxtImg\n\n  width=\"200\"\n\n  format=\"webp\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg\"\n\n/>\n\nQuality\n\nCheck Storyblok documentation if you want to know more.\n\nYou can update your image quality by defining the quality filters.\n\nExample:\n\n <div class=\"flex\">\n\n<div>Resized and 10% Quality</div>\n\n<NuxtImg\n\n  provider=\"storyblok\"\n\n  width=\"200\"\n\n  quality=\"10\"\n\n  src=\"https://a.storyblok.com/f/39898/3310x2192/e4ec08624e/demo-image.jpeg\"\n\n/>\n\n</div>\n\nFacial detection\n\nCheck Storyblok documentation if you want to know more.\n\nTo have a smart crop just define a smart property inside modifier.\n\nExample:\n\n<h3>Facial detection</h3>\n\n\n\n<div>Resized without Smart Crop</div>\n\n<NuxtImg\n\n  width=\"600\"\n\n  height=\"130\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/2250x1500/c15735a73c/demo-image-human.jpeg\"\n\n/>\n\n\n\n<div>Resized with Smart Crop</div>\n\n<NuxtImg\n\n  width=\"600\"\n\n  height=\"130\"\n\n  :modifiers=\"{ smart: true }\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/2250x1500/c15735a73c/demo-image-human.jpeg\"\n\n/>\n\nCustom focal point\n\nCheck Storyblok documentation if you want to know more.\n\nStoryblok offer you the focalize on a specific part of your image. Just use focal filters.\n\nExample:\n\n<div>Focus on the bottom of the image</div>\n\n<NuxtImg\n\n  width=\"600\"\n\n  height=\"130\"\n\n  :modifiers=\"{ filters: { focal: '450x500:550x600' } }\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/1000x600/d962430746/demo-image-human.jpeg\"\n\n/>\n\n\n\n<div>Focus on the top of the image</div>\n\n<NuxtImg\n\n  width=\"600\"\n\n  height=\"130\"\n\n  :modifiers=\"{ filters: { focal: '450x0:550x100' } }\"\n\n  provider=\"storyblok\"\n\n  src=\"https://a.storyblok.com/f/39898/1000x600/d962430746/demo-image-human.jpeg\"\n\n/>\n\n\nSirv\n\nNuxt Image integration with Sirv media management, transformation and delivery platform.\n\nStrapi\n\nNuxt Image with Strapi integration."
  },
  {
    "title": "Strapi - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/strapi",
    "html": "Providers\n\nStrapi\nSource\n\nNuxt Image with Strapi integration.\n\nIntegration between Strapi and the image module.\n\nNo specific configuration is required. You just need to specify strapi in your configuration to make it the default:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    strapi: {}\n\n  }\n\n})\n\n\nOverride default options:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    strapi: {\n\n      baseURL: 'http://localhost:1337/uploads/'\n\n    }\n\n  }\n\n})\n\nModifiers\n\nThe breakpoint modifier is used to specify the size of the image.\n\nBy default, when the image is uploaded and Enable responsive friendly upload Strapi setting is enabled in the settings panel the plugin will generate the following responsive image sizes:\n\nName\tLargest Dimension\nsmall\t500px\nmedium\t750px\nlarge\t1000px\n\nYou can override the default breakpoints. See the Upload configuration in the Strapi documentation.\n\nIf you don't set breakpoint modifier, the original image size will be used:\n\n<NuxtImg provider=\"strapi\" src=\"...\" />\n\n\nDefine breakpoint modifier:\n\n<NuxtImg provider=\"strapi\" src=\"...\" :modifiers=\"{ breakpoint: 'small' }\" />\n\nOnly one breakpoint can be modified per image.\n\nStoryblok\n\nNuxt Image internally use Storyblok as static provider.\n\nTwicpics\n\nNuxt Image internally use Twicpics as static provider."
  },
  {
    "title": "Prepr - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/prepr",
    "html": "Providers\n\nPrepr\nSource\n\nNuxt Image integration with Prepr CMS.\n\nIntegration between Prepr and Nuxt Image.\n\nTo use this provider you just need to specify the projectName of your project in Prepr.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    prepr: {\n\n      // E.g.: https://YourProjectName.prepr.io/\n\n      projectName: 'YourProjectName',\n\n    }\n\n  }\n\n})\n\nModifiers\n\nThe Prepr provider supports a number of additional modifiers. For a full list, check out the Prepr documentation. All current transformations currently mentioned in Prepr docs are supported.\n\nFor the time being you might find the following links useful:\n\nAssets Resizing via REST API\nUnderstanding your marketing and design team workflows\nprepr.io does not provide a way to restrict what domains can request assets to your project's CDN, nor limit the maximum size in pixels or bytes of images that are served from the CDN.\nConvenience key modifiers\n\nThe following more readable modifiers are supported, in addition to Prepr's native modifiers:\n\ncrop is equivalent to c\nformat is equivalent to format\nheight is equivalent to h\nquality is equivalent to q\nwidth is equivalent to w\nfit\n\nIn addition to the values specified in the Prepr docs, which are respected, the following options from the default fit behavior are supported:\n\ncover - this will behave like the Prepr modifier crop, when passed without a value (defaults to centre)\nFor the time being, other fit options are not supported by this provider.\n\nNetlify\n\nOptimize images with Netlify's dynamic image transformation service.\n\nPrismic\n\nNuxt Image has first class integration with Prismic."
  },
  {
    "title": "Sanity - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/sanity",
    "html": "Providers\n\nSanity\nSource\n\nNuxt Image has first class integration with Sanity.\n\nIntegration between Sanity and Nuxt Image.\n\nTo use this provider you just need to specify the projectId of your project in Sanity.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    sanity: {\n\n      projectId: 'yourprojectid',\n\n      // Defaults to 'production'\n\n      // dataset: 'development'\n\n    }\n\n  }\n\n})\n\nModifiers\n\nThe Sanity provider supports a number of additional modifiers. For a full list, check out the Sanity documentation. All of the modifiers mentioned in the Sanity docs are supported, with the following notes.\n\nExtra convenience modifiers\n\nThe following more readable modifiers are also supported:\n\nbackground - equivalent to bg\ndownload - equivalent to dl\nsharpen - equivalent to sharp\norientation - equivalent to or\nminHeight or min-height - equivalent to min-h\nmaxHeight or max-height - equivalent to max-h\nminWidth or min-width - equivalent to min-w\nmaxWidth or max-width - equivalent to max-w\nsaturation - equivalent to sat\nfit\n\nIn addition to the values specified in the Sanity docs, which are respected, the following options from the default fit behavior are supported:\n\ncover - this will behave like the Sanity modifier crop\ncontain - this will behave like the Sanity modifier fill, and defaults to filling with a white background. (You can specify your own background color with the background modifier.)\ninside - this will behave like the Sanity modifier min\noutside - this will behave like the Sanity modifier max\nfill - this will behave like the Sanity modifier scale\nFor compatibility with other providers, fit: fill is equivalent to the Sanity parameter ?fit=scale. If you need the Sanity ?fit=fill behavior, use fit: contain instead.\nformat\n\nYou can specify any of the formats suppored by Sanity. If this is omitted, the Sanity provider will default to auto=format.\n\ncrop and hotspot\n\nYou can pass your Sanity crop and hotspot image data as modifiers and Nuxt Image will correctly generate the rect, fp-x and fp-y parameters for you.\n\nPrismic\n\nNuxt Image has first class integration with Prismic.\n\nSirv\n\nNuxt Image integration with Sirv media management, transformation and delivery platform."
  },
  {
    "title": "Prismic - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/prismic",
    "html": "Providers\n\nPrismic\nSource\n\nNuxt Image has first class integration with Prismic.\n\nIntegration between Prismic and the image module.\n\nNo specific configuration is required for Prismic support. You just need to specify provider: 'prismic' in your configuration to make it the default:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    prismic: {}\n\n  }\n\n})\n\n\nYou can also pass it directly to your component when you need it, for example:\n\n*.vue\n<NuxtImg provider=\"prismic\" src=\"...\" />\n\nPrismic allows content writer to manipulate images through its UI (cropping, rezising, etc.). To preserve that behavior this provider does not strip query parameters coming from Prismic. Instead it only overrides them when needed, keeping developers in control.\n\nPrepr\n\nNuxt Image integration with Prepr CMS.\n\nSanity\n\nNuxt Image has first class integration with Sanity."
  },
  {
    "title": "Netlify - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/netlify",
    "html": "Providers\n\nNetlify\nSource\n\nOptimize images with Netlify's dynamic image transformation service.\n\nNetlify offers dynamic image transformation for all JPEG, PNG, and GIF files you have set to be tracked with Netlify Large Media.\n\nBefore setting provider: 'netlify', make sure you have followed the steps to enable Netlify Large Media.\nModifiers\n\nIn addition to height and width, the Netlify provider supports the following modifiers:\n\nfit\nDefault: contain\nValid options: contain (equivalent to nf_resize=fit) and fill (equivalent to nf_resize=smartcrop)\n\nIPX\n\nIPX is the built-in and self hosted image optimizer for Nuxt Image.\n\nPrepr\n\nNuxt Image integration with Prepr CMS."
  },
  {
    "title": "Imgix - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/imgix",
    "html": "Providers\n\nImgix\nSource\n\nNuxt Image has first class integration with Imgix.\n\nIntegration between Imgix and the image module.\n\nTo use this provider you just need to specify the base url of your service in Imgix.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    imgix: {\n\n      baseURL: 'https://assets.imgix.net'\n\n    }\n\n  }\n\n})\n\nimgix fit values\n\nBeside the standard values for fit property of Nuxt image and Nuxt picture, imgix offers the following for extra resizing experience:\n\nclamp - Resizes the image to fit within the width and height dimensions without cropping or distorting the image, and the remaining space is filled with extended pixels from the edge of the image. The resulting image will match the constraining dimensions. The pixel extension is called an affine clamp, hence the value name, \"clamp\".\nclip - The default fit setting for imgix images. Resizes the image to fit within the width and height boundaries without cropping or distorting the image. The resulting image will match one of the constraining dimensions, while the other dimension is altered to maintain the same aspect ratio of the input image.\nfacearea - Finds the area containing all faces, or a specific face in an image, and scales it to specified width and height dimensions. Can be used in conjunction with faceindex to identify a specific face, as well as facepad to include additional padded area around the face to zoom out from the immediate area around the faces.\nfillMax - Resizes the image to fit within the requested width and height dimensions while preserving the original aspect ratio and without discarding any original image data. If the requested width or height exceeds that of the original, the original image remains the same size. The excess space is filled with a solid color or blurred version of the image. The resulting image exactly matches the requested dimensions.\nimgix modifiers\n\nBeside the standard modifiers, you can also pass all imgix-specific render API parameters to the modifiers prop.\n\nFor a full list of these modifiers and their uses, check out imgix's image Rendering API documentation.\n\nimgix best practices\n\nSome common best practices when using imgix, would be to include our auto parameter, which will automatically apply the best format for an image and compress the image as well. Combine this with some top of intelligent cropping and resizing and you will have a great image!\n\n<NuxtImg\n\n  provider=\"imgix\"\n\n  src=\"/blog/woman-hat.jpg\"\n\n  width=\"300\"\n\n  height=\"500\"\n\n  fit=\"cover\"\n\n  :modifiers=\"{ auto: 'format,compress', crop: 'faces' }\"\n\n/>\n\n\nThis will return a 300 x 500 image, which has been compressed, will display next-gen formats for a browser, and has been cropped intelligently to the face of the woman in the hat.\n\nAdditional Documentation\n\nYou can find additional documentation and a step-by-step tutorial in an imgix blog article titled Using the New Nuxt Component with imgix.\n\nImageKit\n\nNuxt Image has first class integration with ImageKit.\n\nIPX\n\nIPX is the built-in and self hosted image optimizer for Nuxt Image."
  },
  {
    "title": "ImageKit - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/imagekit",
    "html": "Providers\n\nImageKit\nSource\n\nNuxt Image has first class integration with ImageKit.\n\nIntegration between ImageKit and the image module.\n\nTo use the ImageKit provider, you need to set your ImageKit account URL-endpoint as the base url like below.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    imagekit: {\n\n      baseURL: 'https://ik.imagekit.io/your_imagekit_id'\n\n    }\n\n  }\n\n})\n\n\nYou can get URL-endpoint from your ImageKit dashboard - https://imagekit.io/dashboard#url-endpoints.\n\nImageKit fit Parameters\n\nIn addition to the standard fit properties of Nuxt Image and Nuxt Picture, ImageKit offers more cropping and resizing options to the users:\n\nextract - The output image has its height, width as requested, and the aspect ratio is preserved. Unlike the cover parameter, we extract out a region of the requested dimension from the original image.\npad_extract - This parameter is similar to extract. This comes in handy in scenarios where we want to extract an image of a larger dimension from a smaller image. So, the pad_extract mode adds solid colored padding around the image to match the exact size requested.\n\nRead ImageKit crop and crop mode documentation for more details and examples of how it works.\n\nImageKit Modifiers\n\nOn top of the standard Nuxt Image modifiers, a user can also leverage ImageKit-specific transformation parameters provided in the modifier prop.\n\nfocus\n\nThis parameter can be used along with resizing and cropping to focus on the desired part of the image. You can use focus parameter values like left, right, top, bottom, center, top, left, bottom, right, top_left, top_right, bottom_left and bottom_right.\n\nCustom coordinates can also be used to focus using parameter value custom. Learn more from example.\n\nMoreover, ImageKit also provides smart cropping that can automatically detect the most important part of the image using auto. And, face can be used to find a face (or multiple faces) in an image and focus on that.\n\nCheck out ImageKit's documentation on focus to learn more.\n\nblur\n\nThis can be used to blur an image. Use modifier blur to specify the Gaussian Blur radius that is to be applied to the image. Possible values include integers between 1 to 100.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  :modifiers=\"{blur: 10}\"\n\n/>\n\neffectGray\n\nTurn your image to a grayscale version using the effectGray modifier.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  height=\"300\"\n\n  :modifiers=\"{effectGray: true}\"\n\n/>\n\nnamed\n\nUse named transformations as an alias for an entire transformation string.\n\nFor example, we can create a named transformation - media_library_thumbnail for a transformation string - tr:w-100,h-100,c-at_max,fo-auto.\n\nborder\n\nAdd a border to your images using the border modifier. You can also set its width and color.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  width=\"300\"\n\n  :modifiers=\"{border: '20_FF0000'}\"\n\n/>\n\nrotate\n\nUse the rotate modifier to rotate your image. Possible values are - 0, 90, 180, 270, 360, and auto.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  :modifiers=\"{rotate: 90}\"\n\n/>\n\nradius\n\nGive rounded corners to your image using radius. Possible values are - positive integers and max.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  :modifiers=\"{radius: 20}\"\n\n/>\n\nbg\n\nSpecify background color and its opacity for your image using the bg modifier.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  height=\"1200\"\n\n  width=\"1200\"\n\n  fit=\"pad_extract\"\n\n  :modifiers=\"{bg: '272B38'}\"\n\n/>\n\n\nRead more about ImageKit crop, resize, and other common transformations here.\n\nOverlay Transformation Modifiers\n\nUsing ImageKit's Nuxt Image integration, you can overlay images or text over other images for watermarking or creating a dynamic banner using custom text!\n\noverlayImage\n\nOverlay an image on top of another image (base image) using the overlayImage modifier. You can use this to create dynamic banners, watermarking, etc.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  :modifiers=\"modifiers\"\n\n  />\n\n\n\n<script>\n\n  export default {\n\n    data() {\n\n      return {\n\n        modifiers: {\n\n          overlayImage: 'default-image.jpg',\n\n          overlaywidth: 300,\n\n          overlayHeight: 200,\n\n          overlayFocus: 'top_left',\n\n          overlayImageBorder: '5_FFFFFF',\n\n        }\n\n      }\n\n    }\n\n  }\n\n</script>\n\nOverlay Text\n\nYou can overlay text on an image and apply various transformations to it as per your needs.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  :modifiers=\"modifiers\"\n\n/>\n\n\n\n<script>\n\n  export default {\n\n    data() {\n\n      return {\n\n        modifiers: {\n\n          overlayText: 'overlay made easy',\n\n          overlayRadius: 30,\n\n          overlayTextBackground: 'FFFFFF80',\n\n          overlayTextFontSize: '45',\n\n          overlayTextColor: '000000',\n\n          overlayTextPadding: '40'\n\n        }\n\n      }\n\n    }\n\n  }\n\n</script>\n\n\nRead more about ImageKit's overlay transformation parameters here.\n\nImage Enhancement Modifiers\neffectContrast\n\nEnhance contrast of an image using the effectContrast modifier.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  height=\"300\"\n\n  :modifiers=\"{effectContrast: true}\"\n\n/>\n\neffectSharpen\n\nSharpen the input image using the effectSharpen modifier.\n\n<NuxtImg\n\n  provider=\"imagekit\"\n\n  src=\"/default-image.jpg\"\n\n  height=\"300\"\n\n  :modifiers=\"{effectSharpen: 10}\"\n\n/>\n\nList of supported transforms\n\nImageKit's Nuxt Image integration provides an easy-to-remember name for each transformation parameter. It makes your code more readable. If you use a property that does not match any of the following supported options, it will be added in the URL as it is.\n\nSupported Parameter Name\tTranslates to Parameter\nbg\tbg\naspectRatio\tar\nx\tx\ny\ty\nxc\txc\nyc\tyc\noix\toix\noiy\toiy\noixc\toixc\noiyc\toiyc\ncrop\tc\ncropMode\tcm\nfocus\tfo\nradius\tr\nborder\tb\nrotate\trt\nblur\tbl\nnamed\tn\noverlayX\tox\noverlayY\toy\noverlayFocus\tofo\noverlayHeight\toh\noverlayWidth\tow\noverlayImage\toi\noverlayImageTrim\toit\noverlayImageAspectRatio\toiar\noverlayImageBackground\toibg\noverlayImageBorder\toib\noverlayImageDPR\toidpr\noverlayImageQuality\toiq\noverlayImageCropping\toic\noverlayImageCropMode\toicm\noverlayText\tot\noverlayTextFontSize\tots\noverlayTextFontFamily\totf\noverlayTextColor\totc\noverlayTextTransparency\toa\noverlayTextTypography\tott\noverlayBackground\tobg\noverlayTextEncoded\tote\noverlayTextWidth\totw\noverlayTextBackground\totbg\noverlayTextPadding\totp\noverlayTextInnerAlignment\totia\noverlayRadius\tor\nprogressive\tpr\nlossless\tlo\ntrim\tt\nmetadata\tmd\ncolorProfile\tcp\ndefaultImage\tdi\ndpr\tdpr\neffectSharpen\te-sharpen\neffectUSM\te-usm\neffectContrast\te-contrast\neffectGray\te-grayscale\noriginal\torig\n\nLearn more about ImageKit's Image transformations from the official documentation.\n\nImageEngine\n\nNuxt Image has first class integration with ImageEngine.\n\nImgix\n\nNuxt Image has first class integration with Imgix."
  },
  {
    "title": "IPX - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/ipx",
    "html": "Providers\n\nIPX\nSource\n\nIPX is the built-in and self hosted image optimizer for Nuxt Image.\n\nNuxt Image comes with a preconfigured instance of unjs/ipx. An open source, self-hosted image optimizer based on lovell/sharp.\n\nAdditional Modifiers\n\nYou can use additional modifiers supported by IPX.\n\nExample:\n\n<NuxtImg src=\"/image.png\" :modifiers=\"{ grayscale: true, tint: '#00DC82' }\" />\n\n\nImgix\n\nNuxt Image has first class integration with Imgix.\n\nNetlify\n\nOptimize images with Netlify's dynamic image transformation service."
  },
  {
    "title": "ImageEngine - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/imageengine",
    "html": "Providers\n\nImageEngine\nSource\n\nNuxt Image has first class integration with ImageEngine.\n\nIntegration between ImageEngine and the image module.\n\nAt a minimum, you must configure the imageengine provider with the baseURL set to your ImageEngine Delivery Address:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    imageengine: {\n\n      baseURL: 'https://xxxxx.imgeng.in'\n\n    }\n\n  }\n\n})\n\nImageEngine fit values\n\nThe standard values for fit property map onto ImageEngine Directives as follows:\n\ncover: m_cropbox\ncontain: m_letterbox\nfill: m_stretch\ninside: m_box, this is the default fit method for the ImageEngine provider.\noutside: This fit method is not supported and functions the same as inside.\nImageEngine modifiers\n\nIn addition to the standard modifiers, you can also use all ImageEngine Directives by adding them to the modifiers property with the following attribute names:\n\nformat: f directive\nfit: m directive\npassThrough: pass directive\nsharpen: s directive\nrotate: r directive\nscreenPercent: pc directive\ncrop: cr directive\ninline: in directive\nmetadata: meta directive\n\nNote that the standard quality attribute is converted to the ImageEngine cmpr compression directive. quality is the opposite of compression, so 80% quality equals 20% compression. Since ImageEngine automatically adapts image quality the visitor's device, browser and network quality, it is recommended that you do not explicitly set the quality. If you want to completely disable all optimizations to an image, you should use :modifiers=\"{ passThrough: 'true' }\", which will serve the unaltered image.\n\nExample 1: Cropping an image to a width and height of 100x80, starting 10 pixels from the top and 20 pixels from the left:\n\n<NuxtImg\n\n  provider=\"imageengine\"\n\n  src=\"/some-image.jpg\"\n\n  width=\"100\"\n\n  height=\"80\"\n\n  :modifiers=\"{ cr: '100,80,10,20' }\"\n\n/>\n\n\nExample 2: Instruct ImageEngine to keep the image's EXIF metadata (which is normally removed to reduce the image byte size):\n\n<NuxtImg\n\n  provider=\"imageengine\"\n\n  src=\"/some-image.jpg\"\n\n  width=\"100\"\n\n  height=\"80\"\n\n  :modifiers=\"{ meta: 'true' }\"\n\n/>\n\nImageEngine best practices\nAutomatic format and quality detection\n\nImageEngine automatically detects the best format and quality for your image based on the characteristics of the specific device that requested it.\n\nThis feature is very effective and it is not recommended that you disable it, but if you must, you can manually specify the format (ex: format='webp') and quality (quality='80').\n\nImageEngine settings\n\nImageEngine allows you to set all of the modifiers/directives in the ImageEngine control panel under advanced settings. This is a good place to set default adjustments since you can modify them without having to make changes to your Nuxt codebase. If a directive is set in both Nuxt and the ImageEngine User-Adjustable Settings, the value in Nuxt takes priority.\n\nGumlet\n\nNuxt Image has first class integration with Gumlet.\n\nImageKit\n\nNuxt Image has first class integration with ImageKit."
  },
  {
    "title": "Gumlet - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/gumlet",
    "html": "Providers\n\nGumlet\nSource\n\nNuxt Image has first class integration with Gumlet.\n\nIntegration between Gumlet and the image module.\n\nTo use this provider you just need to specify the base url of your service in Gumlet.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    gumlet: {\n\n      baseURL: 'https://demo.gumlet.io'\n\n    }\n\n  }\n\n})\n\ngumlet mode values\n\nGumlet supports all the the standard values for fit property of Nuxt image and Nuxt picture.\n\ngumlet modifiers\n\nBeside the standard modifiers, you can also pass all gumlet-specific render API parameters to the modifiers prop.\n\nFor a full list of these modifiers and their uses, check out Gumlet's image Rendering API documentation.\n\ngumlet best practices\n\nSome common best practices when using Gumlet, would be to include our format=auto parameter, which will automatically apply the best format for an image and compress the image as well. Combine this with some top of intelligent cropping and resizing and you will have a great image!\n\n<NuxtImg\n\n  provider=\"gumlet\"\n\n  src=\"/sea.jpeg\"\n\n  width=\"300\"\n\n  height=\"500\"\n\n  fit=\"cover\"\n\n  :modifiers=\"{ format: 'auto', compress: 'true' }\"\n\n/>\n\n\nThis will return a 300 x 500 image, which has been compressed, will display next-gen formats for a browser, and has been cropped intelligently to the face of the woman in the hat.\n\nGlide\n\nNuxt Image has first class integration with Glide.\n\nImageEngine\n\nNuxt Image has first class integration with ImageEngine."
  },
  {
    "title": "Glide - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/glide",
    "html": "Providers\n\nGlide\nSource\n\nNuxt Image has first class integration with Glide.\n\nIntegration between Glide and the image module.\n\nTo use this provider you just need to specify the base url of your service in glide.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    glide: {\n\n      // baseURL of your laravel application\n\n      baseURL: 'https://glide.herokuapp.com/1.0/'\n\n    }\n\n  }\n\n})\n\n\nFastly\n\nNuxt Image has first class integration with Fastly.\n\nGumlet\n\nNuxt Image has first class integration with Gumlet."
  },
  {
    "title": "Fastly - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/fastly",
    "html": "Providers\n\nFastly\nSource\n\nNuxt Image has first class integration with Fastly.\n\nIntegration between Fastly and the image module.\n\nTo use this provider you just need to specify the base url of your service in Fastly.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    fastly: {\n\n      baseURL: 'https://www.fastly.io'\n\n    }\n\n  }\n\n})\n\n\nEdgio\n\nOptimize images with Edgio (formerly Layer0)'s optimization service.\n\nGlide\n\nNuxt Image has first class integration with Glide."
  },
  {
    "title": "Edgio - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/edgio",
    "html": "Providers\n\nEdgio\nSource\n\nOptimize images with Edgio (formerly Layer0)'s optimization service.\n\nEdgio provides a simple HTTP service for optimizing images.\n\nThe image optimizer will only return an optimized image for mobile browsers. Desktop browsers are served the original image.\n\nThis integration works out of the box without need to configure! See the Documentation for more information.\n\nExample:\n\n<NuxtImg provider=\"edgio\" src=\"https://i.imgur.com/LFtQeX2.jpeg\" width=\"200\" height=\"200\" quality=\"80\" />\n\nModifiers\n\nEdgio supports the following modifiers: height, width and quality\n\nOptions\nbaseURL\nDefault: https://opt.moovweb.net\n\nDirectus\n\nNuxt Image with Directus integration.\n\nFastly\n\nNuxt Image has first class integration with Fastly."
  },
  {
    "title": "Directus - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/directus",
    "html": "Providers\n\nDirectus\nSource\n\nNuxt Image with Directus integration.\n\nIntegration between Directus and the image module.\n\nTo use this provider you just need to specify the base URL of your project.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    directus: {\n\n      // This URL needs to include the final `assets/` directory\n\n      baseURL: 'http://localhost:8055/assets/',\n\n    }\n\n  }\n\n})\n\n\nYou can easily override default options:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    directus: {\n\n      baseURL: 'http://mydirectus-domain.com/assets/',\n\n      modifiers: {\n\n        withoutEnlargement: 'true',\n\n        transforms: [['blur', 4], ['negate']]\n\n      }\n\n    }\n\n  }\n\n})\n\nModifiers\n\nAll the default modifiers from Directus documentation are available.\n\n<NuxtImg\n\n  provider=\"directus\"\n\n  src=\"ad514db1-eb90-4523-8183-46781437e7ee\"\n\n  height=\"512\"\n\n  fit=\"inside\"\n\n  quality=\"20\"\n\n  :modifiers=\"{ withoutEnlargement: 'true' }\"\n\n/>\n\n\nSince Directus exposes the full sharp API through the transforms parameter, we can use it inside our modifiers prop:\n\n<NuxtImg\n\n  provider=\"directus\"\n\n  src=\"ad514db1-eb90-4523-8183-46781437e7ee\"\n\n  :modifiers=\"{ height: '512', withoutEnlargement: 'true', transforms: [['blur', 4], ['negate']] }\"\n\n/>\n\nNote that the transforms parameter, as stated in the Directus documentation, is basically a list of lists. This is to facilitate the use of those sharp functions, like normalise, that would need multiple values in input: transforms: [['normalise', 1, 99], ['blur', 4], ['negate']].\n\nContentful\n\nNuxt Image has first class integration with Contentful.\n\nEdgio\n\nOptimize images with Edgio (formerly Layer0)'s optimization service."
  },
  {
    "title": "Contentful - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/contentful",
    "html": "Providers\n\nContentful\nSource\n\nNuxt Image has first class integration with Contentful.\n\nIntegration between Contentful and the image module.\n\nTo use this provider you just need to specify the base url of your service in Contentful.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    contentful: {}\n\n  }\n\n})\n\n\nCloudinary\n\nNuxt Image has first class integration with Cloudinary.\n\nDirectus\n\nNuxt Image with Directus integration."
  },
  {
    "title": "Cloudinary - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/cloudinary",
    "html": "Providers\n\nCloudinary\nSource\n\nNuxt Image has first class integration with Cloudinary.\n\nIntegration between Cloudinary and the image module.\n\nTo use this provider you just need to specify the base url of your project in cloudinary.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudinary: {\n\n      baseURL: 'https://res.cloudinary.com/<your-cloud-name>/image/upload/'\n\n    }\n\n  }\n\n})\n\nRemote Images\n\nTo handle remote image data, you can either use fetch or upload.\n\nConsult the cloudinary documentation for the difference between the two.\n\nFetch\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudinary: {\n\n      baseURL: 'https://res.cloudinary.com/<your-cloud-name>/image/fetch/'\n\n    }\n\n  }\n\n})\n\n<NuxtImg provider=\"cloudinary\" src=\"https://upload.wikimedia.org/wikipedia/commons/a/ae/Olympic_flag.jpg\" width=\"300\" height=\"200\" />\n\n\nNote: You will need to configure your \"Allowed fetch domains\" to do the above.\n\nUpload\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudinary: {\n\n      baseURL: 'https://res.cloudinary.com/<your-cloud-name>/image/upload/<mapping-folder>'\n\n    }\n\n  }\n\n})\n\n<NuxtImg provider=\"cloudinary\" src=\"/commons/a/ae/Olympic_flag.jpg\" width=\"300\" height=\"200\" />\n\n\nNote: You will need to configure your \"Auto upload mapping\" to do the above.\n\nCloudinary fit values\n\nBeside the standard values for fit property of Nuxt image and Nuxt picture, Cloudinary offers the following for extra resizing experience:\n\nminCover - Same like cover but only resizing if the original image is smaller than the given minimum (width and height).\nminInside - Same as the inside mode but only if the original image is smaller than the given minimum (width and height).\ncoverLimit - Same as the cover mode but only if the original image is larger than the given limit (width and height)\nthumbnail- Generate a thumbnail using face detection.\ncropping - Used to extract a given width & height out of the original image. The original proportions are retained.\n\nCheck out Cloudinary resize mode Documentation for more details.\n\nCloudinary modifiers\n\nBeside the standard modifiers, you can also pass the following Cloudinary-specific transformation params to modifiers prop.\n\nThe Cloudinary provider automatically enables automatic format selection and automatic quality selection for best performance.\nrotate\n\nAccepted values:\n\nAny degree number, or\nauto_right | auto_left | ignore | vflip | hflip\n\nTo rotate or flip a given asset by certain degrees, or automatically based on orientation.\n\nroundCorner\n\nRound the specified corners of the desired image. If pass only a number or max (all corners will be applied). The syntax for other use cases is as below:\n\nUsing 2 values: top_left_bottom_right_radius:top_right_bottom_left_radius(Example: 20:40)\nUsing 3 values: top_left:top_right_bottom_left:bottom_right (Example: 20:30:40)\nUsing 4 values: top_left:top_right:bottom_left:bottom_right (Example: 20:0:40:40)\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"300\"\n\n  height=\"169\"\n\n  :modifiers=\"{ roundCorner: 'max' }\"\n\n/>\n\ngravity\n\nDetemine which part of the image to cropped or to place the overlay. Accepted values: auto, subject, face, sink, faceCenter, multipleFaces, multipleFacesCenter, north, northEast, northWest, west, southWest, south, southEast, east, center\n\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"300\"\n\n  height=\"300\"\n\n  fit=\"fill\"\n\n  :modifiers=\"{ gravity: 'subject' }\"\n\n/>\n\neffect\n\nApply a filter or an effect on the desired asset. See Effects for images for the full list of syntax and available effects.\n\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"300\"\n\n  height=\"300\"\n\n  fit=\"fill\"\n\n  :modifiers=\"{ effect: 'grayscale' }\"\n\n/>\n\ncolor\n\nColor to use when text captions, shadow effect and colorize effect are in use.\n\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"300\"\n\n  :modifiers=\"{ effect: 'colorize:50', color: 'red' }\"\n\n/>\n\nflags\n\nOne of more flags to alter the default transformation behavior. See Flags for Images for more information.\n\ndpr\n\nThe target device pixel ratio for the asset. auto means automatically matching the DPR settings in user's device.\n\nopacity\n\nAdjust the opacity of the desired image. Scale: 0 to 100 (%).\n\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"300\"\n\n  :modifiers=\"{ opacity: 50 }\"\n\n/>\n\noverlay\n\nCreate a layer over the base image. This can be use with x, y, gravity to customize the position of the overlay.\n\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"100\"\n\n  height=\"100\"\n\n  fit=\"thumb\"\n\n  :modifiers=\"modifiers\"\n\n/>\n\n\n\n<script>\n\n  export default {\n\n    data() {\n\n      return {\n\n        modifiers: {\n\n          gravity: 'north',\n\n          overlay: 'text:default_style:Hello+World',\n\n        }\n\n      }\n\n    }\n\n  }\n\n</script>\n\n\nSee Overlay Documentation for more information.\n\nunderlay\n\nCreate a layer below a partial-transparent image. This can be use with x, y, gravity to customize the position of the overlay.\n\ntransformation\n\nA pre-defined named transformation to apply to the asset.\n\nzoom\n\nUse together with fit='crop' or fit='thumb' to decide how much of original image/video surronding the face to keep using face detection.\n\nindex.vue\n<template>\n\n  <NuxtImg\n\n    provider=\"cloudinary\"\n\n    src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n    width=\"100\"\n\n    height=\"100\"\n\n    fit=\"thumb\"\n\n    :modifiers=\"modifiers\"\n\n  />\n\n</template>\n\n\n\n<script>\n\n  export default {\n\n    data() {\n\n      return {\n\n        modifiers: {\n\n          zoom: 0.75,\n\n          gravity: \"face\"\n\n        }\n\n      }\n\n    }\n\n  }\n\n</script>\n\ncolorSpace\n\nColor space to use for the delivery image url. See Color space Documentation for accepted values details.\n\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"300\"\n\n  :modifiers=\"{ colorSpace: 'srgb' }\"\n\n/>\n\ncustomFunc\n\nCall a custom function on Cloudinary side. See Custom Functions for more details.\n\ndensity\n\nTo define the density number when converting a vector file to image format.\n\naspectRatio\n\nTo crop or resize the asset to a new aspect ratio, for use with a crop/resize mode that determines how the asset is adjusted to the new dimensions.\n\nSee Cloudinary Image Transformation API for more details.\n\nCloudimage\n\nNuxt Image has first class integration with Cloudimage.\n\nContentful\n\nNuxt Image has first class integration with Contentful."
  },
  {
    "title": "Cloudimage - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/cloudimage",
    "html": "Providers\n\nCloudimage\nSource\n\nNuxt Image has first class integration with Cloudimage.\n\nIntegration between Cloudimage and the image module.\n\nTo use this provider you need to specify your Cloudimage token and the baseURL of your image storage.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudimage: {\n\n      token: 'your_cloudimage_token',\n\n      baseURL: 'origin_image_url' // or alias\n\n    }\n\n  }\n\n})\n\nOptions\ntoken\nType: String (required)\n\nYour Cloudimage customer token. Register for a Cloudimage account to get one. Registration takes less than a minute and is totally free.\n\nbaseURL\nType: String (required)\n\nYour origin image URL or storage alias that allows to shorten your origin image URLs.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudimage: {\n\n      token: 'demo',\n\n      baseURL: 'sample.li'\n\n    }\n\n  }\n\n})\n\n\nThese formats all work as well:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudimage: {\n\n      token: 'demo',\n\n      baseURL: 'sample.li/images',\n\n      baseURL: 'https://sample.li/images',\n\n      baseURL: '_sl_' // alias defined in your Cloudimage storage settings\n\n    }\n\n  }\n\n})\n\napiVersion\nType: String\nDefault: empty string\n\nAllow using a specific version of the API.\n\nFor tokens created before 20.10.2021, apiVersion needs to be set to v7.\n\nHere's an official demo config. demo is an old token hence apiVersion needs to be defined as well.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudimage: {\n\n      token: 'demo',\n\n      baseURL: 'sample.li',\n\n      apiVersion: 'v7'\n\n    }\n\n  }\n\n})\n\ncdnURL\nType: String\nDefault: https://{token}.cloudimg.io/{apiVersion}\n\nReplaces the dynamically built URL\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudimage: {\n\n      cdnURL: 'https://demo.cloudimg.io/v7',\n\n    }\n\n  }\n\n})\n\nCloudimage modifiers\n\nBeside the standard modifiers, also you can pass Cloudimage-specific Cloudimage-specific transformation params to modifiers prop.\n\nCloudimage fit values\n\nBeside the standard values for fit property of Nuxt image and Nuxt picture, Cloudimage offers the following for extra resizing params:\n\ncrop - Crops the image to specified dimensions (width and height) and keeps proportions.\nface - Crops the image automatically keeping the most prominent face.\nfit - Resizes the image to fit into a specified width and height box, adds padding (image or solid colour) to keep proportions.\ncropfit - Sets crop or fit resize mode depending on the origin and the desired dimensions.\nbound - Resizes to a given width and height box and keeps proportions. Similar to fit but without adding padding.\nboundmin - Resizes an image while bounding the smaller dimension to the desired width or height while keeping proportions.\n\nCloudflare\n\nNuxt Image has first class integration with Cloudflare.\n\nCloudinary\n\nNuxt Image has first class integration with Cloudinary."
  },
  {
    "title": "AWS Amplify - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/aws-amplify",
    "html": "Providers\n\nAWS Amplify\nSource\n\nNuxt Image has first class integration with AWS Amplify Hosting\n\nIntegration between AWS Amplify Hosting and the image module.\n\nThis provider will be enabled by default in AWS Amplify deployments.\n\nThis is an experimental preset and will be available soon! 🚀\n\nDomains\n\nTo use external URLs (images not in public/ directory), hostnames should be whitelisted.\n\nExample:\n\nnuxt.config\nexport default {\n\n  image: {\n\n    domains: [\n\n      'avatars0.githubusercontent.com'\n\n    ]\n\n  }\n\n}\n\nSizes\n\nSpecify any custom width property you use in <NuxtImg>, <NuxtPicture> and $img.\n\nIf a width is not defined, image will fallback to the next bigger width.\n\nExample:\n\nnuxt.config\nexport default {\n\n  image: {\n\n    screens: {\n\n      icon: 40,\n\n      avatar: 24\n\n    }\n\n  }\n\n}\n\n\nAliyun\n\nNuxt Image has first class integration with Aliyun.\n\nCloudflare\n\nNuxt Image has first class integration with Cloudflare."
  },
  {
    "title": "Cloudflare - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/cloudflare",
    "html": "Providers\n\nCloudflare\nSource\n\nNuxt Image has first class integration with Cloudflare.\n\nIntegration between Cloudflare and the image module.\n\nTo use this provider you just need to specify the base url (zone) of your service:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    cloudflare: {\n\n      baseURL: 'https://that-test.site'\n\n    }\n\n  }\n\n})\n\n\nExample:\n\n<NuxtImg provider=\"cloudflare\" src=\"/burger.jpeg\" height=\"300\" :modifiers=\"{ fit: 'contain' }\" />\n\nOptions\nbaseURL\n\nDefault: /\n\nYour deployment's domain (zone).\n\nNote: /cdn-cgi/image/ will be automatically appended for generating URLs.\n\nAWS Amplify\n\nNuxt Image has first class integration with AWS Amplify Hosting\n\nCloudimage\n\nNuxt Image has first class integration with Cloudimage."
  },
  {
    "title": "Aliyun - Nuxt Image Providers",
    "url": "https://image.nuxt.com/providers/aliyun",
    "html": "Providers\n\nAliyun\nSource\n\nNuxt Image has first class integration with Aliyun.\n\nIntegration between Aliyun CDN and the image module.\n\nTo use this provider you just need to specify the base url (zone) of your service:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    aliyun: {\n\n      baseURL: \"https://that-test.site\",\n\n    },\n\n  },\n\n});\n\n\nExample:\n\n<NuxtImg\n\n  provider=\"aliyun\"\n\n  src=\"/burger.jpeg\"\n\n  height=\"300\"\n\n  :modifiers=\"{ fit: 'contain' }\"\n\n/>\n\nOptions\nbaseURL\n\nDefault: /\n\nYour deployment's domain (zone).\n\nmodifiers\n\nExample:\n\n{\n\n  resize: {\n\n    fw: 900,\n\n    fh: 200\n\n  },\n\n  rotate:180,\n\n  bright:50\n\n  ...\n\n}\n\n\nFor more modifiers configuration items, see aliyun cdn docs\n\nuseImage()\n\nA Vue composable that returns a helper function to generate optimized image URLs.\n\nAWS Amplify\n\nNuxt Image has first class integration with AWS Amplify Hosting"
  },
  {
    "title": "useImage() - Nuxt Image",
    "url": "https://image.nuxt.com/usage/use-image",
    "html": "Usage\n\nuseImage()\nSource\n\nA Vue composable that returns a helper function to generate optimized image URLs.\n\nSometimes you might need to use a generated image URL directly with applied transformations instead of the <NuxtImg> and <NuxtPicture> components. This is where useImage() comes in (and the helper function it returns, which you will often see referenced directly as $img or img).\n\nUsage\nconst img = useImage()\n\n\n\nimg(src, modifiers, options)\n\n\nExample: Generate image URL for backgroundImage style.\n\nconst img = useImage()\n\nconst backgroundStyles = computed(() => {\n\n  const imgUrl = img('https://github.com/nuxt.png', { width: 100 })\n\n  return { backgroundImage: `url('${imgUrl}')` }\n\n})\n\nimg.getSizes\nconst img = useImage()\n\n\n\nimg.getSizes(src, { sizes, modifiers })\n\nUnstable: getSizes API might change or be removed.\n\nParameters:\n\nsrc: (string) Source to original image id\nsizes: (string) List of responsive image sizes ({breakpoint}:{size}{unit})\nmodifiers: (object) Modifiers passed to provider for resizing and optimizing\nwidth: resize to the specified width (in pixels)\nheight: resize to specified height (in pixels)\nquality: Change image quality (0 to 100)\nformat: Change the image format\n(any other custom provider modifier)\noptions: (object)\nprovider: (string) Provider name other than default (see providers)\npreset: Use a preset\n\nExample: Responsive srcset with Vuetify v-img\n\n<script setup lang=\"ts\">\n\nconst props = defineProps({\n\n  height: { type: [Number, String], default: 500 },\n\n  src: {\n\n    type: String,\n\n    default: '/img/header-bg.jpg'\n\n  }\n\n})\n\nconst img = useImage()\n\nconst _srcset = computed(() => {\n\n  return img.getSizes(props.src, {\n\n    sizes: 'xs:100vw sm:100vw md:100vw lg:100vw xl:100vw',\n\n    modifiers: {\n\n      format: 'webp',\n\n      quality: 70,\n\n      height: props.height\n\n    }\n\n  })\n\n})\n\n</script>\n\n\n\n<template>\n\n  <v-img\n\n    :lazy-src=\"img(src, { width: 10, quality: 70 })\"\n\n    :src=\"img(src, { height, quality: 70 })\"\n\n    :srcset=\"_srcset.srcset\"\n\n    :height=\"height\"\n\n    :sizes=\"_srcset.sizes\"\n\n  ></v-img>\n\n</template>\n\n\n<NuxtPicture>\n\nDiscover how to use and configure the Nuxt Picture component.\n\nAliyun\n\nNuxt Image has first class integration with Aliyun."
  },
  {
    "title": "<NuxtImg> - Nuxt Image",
    "url": "https://image.nuxt.com/usage/nuxt-img",
    "html": "Usage\n\n<NuxtImg>\nSource\n\nDiscover how to use and configure the Nuxt Image component.\n\n<NuxtImg> is a drop-in replacement for the native <img> tag.\n\nUses built-in provider to optimize local and remote images\nConverts src to provider optimized URLs\nAutomatically resizes images based on width and height\nGenerates responsive sizes when providing sizes option\nSupports native lazy loading as well as other <img> attributes\nUsage\n\n<NuxtImg> outputs a native img tag directly (without any wrapper around it). Use it like you would use the <img> tag:\n\n<NuxtImg src=\"/nuxt-icon.png\" />\n\n\nWill result in:\n\n<img src=\"/nuxt-icon.png\" />\n\nWith default provider, you should put /nuxt-icon.png inside public/ directory for Nuxt 3 make the above example work.\nProps\nsrc\n\nPath to image file\n\nsrc should be in the form of an absolute path for static images in public/ directory. Otherwise path that is expected by provider that starts with / or a URL.\n\n<NuxtImg src=\"/nuxt.png\" />\n\n\nFor image optimization when using external urls in src, we need to whitelist them using domains option.\n\nwidth / height\n\nSpecify width/height of the image.\n\nUse desired width/height for static sized images like icons or avatars\nUse original image width/height for responsive images (when using sizes)\nsizes\n\nSpecify responsive sizes.\n\nThis is a space-separated list of screen size/width pairs. You can see a list of the defined screen sizes here).\n\nBy default Nuxt generates responsive-first sizing.\n\nIf you omit a screen size prefix (like sm:) then this size is the 'default' size of the image. Otherwise, Nuxt will pick the smallest size as the default size of the image.\nThis default size is used up until the next specified screen width, and so on. Each specified size pair applies up - so md:400px means that the image will be sized 400px on md screens and up.\n\nExample:\n\n<NuxtImg\n\n  src=\"/logos/nuxt.png\"\n\n  sizes=\"100vw sm:50vw md:400px\"\n\n/>\n\ndensities\n\nTo generate special versions of images for screens with increased pixel density.\n\nExample:\n\n<NuxtImg\n\n  src=\"/logos/nuxt.png\"\n\n  height=\"50\"\n\n  densities=\"x1 x2\"\n\n/>\n\n<!--\n\n<img\n\n  src=\"/_ipx/w_50/logos/nuxt.png\" \n\n  srcset=\"/_ipx/w_100/logos/nuxt.png x2\"\n\n/>\n\n-->\n\nplaceholder\n\nDisplay a placeholder image before the actual image is fully loaded.\n\nThe placeholder prop can be either a string, a boolean, a number, or an array. The usage is shown below for each case.\n\n<!-- Automatically generate a placeholder based on the original image -->\n\n<nuxt-img src=\"/nuxt.png\" placeholder />\n\n\n\n<!-- Set a width, height for the automatically generated placeholder  -->\n\n<nuxt-img src=\"/nuxt.png\" :placeholder=\"[50, 25]\" />\n\n\n\n<!-- Set a width, height, quality & blur for the automatically generated placeholder  -->\n\n<nuxt-img src=\"/nuxt.png\" :placeholder=\"[50, 25, 75, 5]\" />\n\n\n\n<!-- Set the width & height of the automatically generated placeholder, image will be a square -->\n\n<nuxt-img src=\"/nuxt.png\" :placeholder=\"15\" />\n\n\n\n<!-- Provide your own image -->\n\n<nuxt-img src=\"/nuxt.png\" placeholder=\"./placeholder.png\" />\n\n\nYou can also leverage useImage() to generate a placeholder image based on the original image, can be useful if the source is an SVG or you want better control on the modifiers:\n\n<script setup>\n\nconst img = useImage()\n\n</script>\n\n\n\n<template>\n\n  <NuxtImg :placeholder=\"img(`/nuxt.svg`, { h: 10, f: 'png', blur: 2, q: 50 })\" src=\"/nuxt.svg`\" />\n\n</template>\n\nprovider\n\nUse other provider instead of default provider option specified in nuxt.config\n\nExample:\n\nindex.vue\nnuxt.config.ts\n<template>\n\n  <NuxtImg\n\n    provider=\"cloudinary\"\n\n    src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n    width=\"300\"\n\n    height=\"169\"\n\n  />\n\n</template>\n\npreset\n\nPresets are predefined sets of image modifiers that can be used create unified form of images in your projects.\n\nWe can define presets using presets options in nuxt.config\nindex.vue\nnuxt.config.ts\n<template>\n\n  <NuxtImg preset=\"cover\" src=\"/nuxt-icon.png\" />\n\n</template>\n\nformat\n\nIn case you want to serve images in a specific format, use this prop.\n\n<NuxtImg format=\"webp\" src=\"/nuxt-icon.png\" ... />\n\n\nAvailable formats are webp, avif, jpeg, jpg, png, gif and svg. If the format is not specified, it will respect the default image format.\n\nquality\n\nThe quality for the generated image(s).\n\n<NuxtImg src=\"/nuxt.jpg\" quality=\"80\" width=\"200\" height=\"100\" />\n\nfit\n\nThe fit property specifies the size of the images. There are five standard values you can use with this property.\n\ncover: (default) Preserving aspect ratio, ensure the image covers both provided dimensions by cropping/clipping to fit\ncontain: Preserving aspect ratio, contain within both provided dimensions using \"letterboxing\" where necessary.\nfill: Ignore the aspect ratio of the input and stretch to both provided dimensions.\ninside: Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.\noutside: Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified.\n<NuxtImg fit=\"cover\" src=\"/nuxt-icon.png\" width=\"200\" height=\"100\" />\n\nSome providers support other values.\nmodifiers\n\nIn addition to the standard modifiers, each provider might have its own additional modifiers. Because these modifiers depend on the provider, refer to its documentation to know what can be used.\n\nUsing the modifiers prop lets you use any of these transformations.\n\nExample:\n\n<NuxtImg\n\n  provider=\"cloudinary\"\n\n  src=\"/remote/nuxt-org/blog/going-full-static/main.png\"\n\n  width=\"300\"\n\n  height=\"169\"\n\n  :modifiers=\"{ roundCorner: '0:100' }\"\n\n/>\n\npreload\n\nIn case you want to preload the image, use this prop. This will place a corresponding link tag in the page's head.\n\n<NuxtImg preload src=\"/nuxt-icon.png\" />\n\nloading\n\nThis is a native attribute that provides a hint to the browser on how to handle the loading of an image which is outside the viewport. It is supported by the latest version of all major browsers since March 2022.\n\nSet loading=\"lazy\" to defer loading of an image until it appears in the viewport.\n\n<NuxtImg src=\"/nuxt-icon.png\" loading=\"lazy\" />\n\nnonce\n\nThis is a native global attribute that defines a cryptographic nonce (number used once) that can be used by Content Security Policy to determine whether or not a given fetch will be allowed to proceed for a given element. Providing a nonce allows you to avoid using the CSP unsafe-inline directive, which would allowlist all inline script or styles.\n\n<NuxtImg src=\"/nuxt-icon.png\" :nonce=\"nonce\" />\n\n\n\n<script lang=\"ts\" setup>\n\n// useNonce is not provided by nuxt/image but might be\n\n// provided by another module, for example nuxt-security\n\nconst nonce = useNonce()\n\n</script>\n\nEvents\n\nNative events emitted by the <img> element contained by <NuxtImg> and <NuxtPicture> components are re-emitted and can be listened to.\n\nExample: Listen to the native onLoad event from <NuxtImg>\n\n<NuxtImg\n\n  src=\"/images/colors.jpg\"\n\n  width=\"500\"\n\n  height=\"500\"\n\n  @load=\"doSomethingOnLoad\"\n\n/>\n\n\nContributing\n\nWe can never thank you enough for your contributions. ❤️\n\n<NuxtPicture>\n\nDiscover how to use and configure the Nuxt Picture component."
  },
  {
    "title": "<NuxtPicture> - Nuxt Image",
    "url": "https://image.nuxt.com/usage/nuxt-picture",
    "html": "Usage\n\n<NuxtPicture>\nSource\n\nDiscover how to use and configure the Nuxt Picture component.\n\n<NuxtPicture> is a drop-in replacement for the native <picture> tag.\n\nUsage of <NuxtPicture> is almost identical to <NuxtImg> but also allows serving modern formats like webp when possible.\n\nLearn more about the <picture> tag on MDN.\n\nProps\nSee props supported by<NuxtImg>\nformat\n\nFormat on pictures can be used to serve images in multiple formats. A legacy format will be generated automatically. So in the example below avif, webp and png would be generated. They will be added in the same order they are added to the format attribute.\n\n<NuxtPicture format=\"avif,webp\" src=\"/nuxt-icon.png\" ... />\n\n\nAvailable formats are webp, avif, jpeg, jpg, png and gif. If the format is not specified, it will respect the default image format.\n\nlegacyFormat\n\nFormat used for fallback. Default is conditional:\n\nIf original format supports transparency (png, webp and gif), png is used for fallback\nOtherwise jpeg is used for fallback\nimgAttrs\n\nAllows you to set additional HTML-attributes on the img element.\n\nExample:\n\n<NuxtPicture\n\n  src=\"/nuxt-icon.png\"\n\n  :imgAttrs=\"{id:'my-id', class:'my-class', style:'display:block', 'data-my-data': 'my-value'}\"\n\n/>\n\n\n<NuxtImg>\n\nDiscover how to use and configure the Nuxt Image component.\n\nuseImage()\n\nA Vue composable that returns a helper function to generate optimized image URLs."
  },
  {
    "title": "Providers - Nuxt Image",
    "url": "https://image.nuxt.com/get-started/providers",
    "html": "Get Started\n\nProviders\n\nNuxt Image supports multiple providers for high performances.\n\nIntroduction to providers\n\nProviders are integrations between Nuxt Image and third-party image transformation services. Each provider is responsible for generating correct URLs for that image transformation service.\n\nNuxt Image can be configured to work with any external image transformation service. Checkout sidebar for list of preconfigured providers.\n\nIf you are looking for a specific provider that is not already supported, you can create your own provider.\n\nNuxt Image will automatically optimize <NuxtImg> or <NuxtPicture> sources and accepts all options for specified target, except for modifiers that are specific to other providers.\n\nDefault Provider\n\nThe default optimizer and provider for Nuxt Image is ipx. Either option can be used without any configuration.\n\nLocal Images\n\nImages should be stored in the public/ directory of your project.\n\nFor example, when using <NuxtImg src=\"/nuxt-icon.png\" />, it should be placed in public/ folder under the path public/nuxt-icon.png.\n\nFor more information, you can learn more about the public directory.\n\nImage stored in the assets/ directory are not proccessed with Nuxt Image because those images are managed by webpack.\nRemote Images\n\nUsing default provider, you can also optimize external URLs. For this, you need to add them to domains option.\n\nEnvironment Detection\n\nYou can set default provider using NUXT_IMAGE_PROVIDER environment variable.\n\nProviders detected automatically:\n\nVercel\nCustom Provider\n\nIt is possible to define your own provider, learn more how to create a custom provider.\n\nConfiguration\n\nNuxt Image is configured with sensible defaults.\n\nContributing\n\nWe can never thank you enough for your contributions. ❤️"
  },
  {
    "title": "Configuration - Nuxt Image",
    "url": "https://image.nuxt.com/get-started/configuration",
    "html": "Get Started\n\nConfiguration\n\nNuxt Image is configured with sensible defaults.\n\nTo configure the image module and customize its behavior, you can use the image property in your nuxt.config:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    // Options\n\n  }\n\n})\n\ninject\n\nBy default Nuxt Image v1 adopts a composable approach. If you do not use the components no additional code will be added to your bundle. But if you wish to globally initialize an $img helper that will be available throughout your application, you can do so.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    inject: true\n\n  }\n\n})\n\nquality\n\nThe quality for the generated image(s).\n\nYou can also override this option at the component level by using the quality prop.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    quality: 80,\n\n  }\n\n})\n\nformat\n\nDefault: ['webp']\n\nYou can use this option to configure the default format for your images used by <NuxtPicture>. The available formats are webp, avif, jpeg, jpg, png, and gif. The order of the formats is important, as the first format that is supported by the browser will be used. You can pass multiple values like ['avif', 'webp'].\n\nYou can also override this option at the component level by using the format prop.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    format: ['webp']\n\n  }\n\n})\n\nscreens\n\nList of predefined screen sizes.\n\nThese sizes will be used to generate resized and optimized versions of an image (for example, with the sizes modifier).\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    // The screen sizes predefined by `@nuxt/image`:\n\n    screens: {\n\n      'xs': 320,\n\n      'sm': 640,\n\n      'md': 768,\n\n      'lg': 1024,\n\n      'xl': 1280,\n\n      'xxl': 1536,\n\n      '2xl': 1536\n\n    },\n\n  }\n\n})\n\ndomains\n\nTo enable image optimization on an external website, specify which domains are allowed to be optimized. This option will be used to detect whether a remote image should be optimized or not. This is needed to ensure that external urls can't be abused.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    domains: ['nuxtjs.org']\n\n  }\n\n})\n\npresets\n\nPresets are collections of pre-defined configurations for your projects. Presets will help you to unify images all over your project.\n\nnuxt.config.ts\nindex.vue\nexport default defineNuxtConfig({\n\n  image: {\n\n    presets: {\n\n      avatar: {\n\n        modifiers: {\n\n          format: 'jpg',\n\n          width: 50,\n\n          height: 50\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\nproviders\n\nIn order to create and use a custom provider, you need to use the providers option and define your custom providers.\n\nnuxt.config.ts\nindex.vue\nexport default defineNuxtConfig({\n\n  image: {\n\n    providers: {\n\n      random: {\n\n        provider: '~/providers/random',\n\n        options: {}\n\n      }\n\n    }\n\n  }\n\n})\n\nprovider\n\nDefault: ipx (or ipxStatic if used with a static nitro preset, such as if you are running nuxt generate)\n\nWe can specify default provider to be used when not specified in component or when calling $img.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    provider: 'twicpics',\n\n    twicpics: {\n\n      baseURL: 'https://nuxt-demo.twic.pics'\n\n    }\n\n  }\n\n})\n\nmodifiers\n\nYou can set default modifiers for the selected provider.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    provider: 'cloudinary',\n\n    cloudinary: {\n\n      baseURL: 'https://res.cloudinary.com/<company>/image/fetch/',\n\n      modifiers: {\n\n        effect: 'sharpen:100',\n\n        quality: 'auto:best',\n\n      }\n\n    }\n\n  }\n\n})\n\ndensities\n\nDefault: [1, 2]\n\nSpecify a value to work with devicePixelRatio > 1 (these are devices with retina display and others). You must specify for which devicePixelRatio values you want to adapt images.\n\nYou can read more about devicePixelRatio on MDN.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    densities: [1, 2, 3],\n\n  }\n\n})\n\ndir\n\nDefault: public\n\nThis option allows you to specify the location of the source images when using the ipx or ipxStatic provider.\n\nFor example you might want the source images in assets/images directory rather than the default public directory so the source images don't get copied into dist and deployed:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    dir: 'assets/images'\n\n  }\n\n})\n\n\nNotes:\n\nFor ipxStatic provider, if images weren't crawled during generation (unreachable modals, pages or dynamic runtime size), changing dir from public causes 404 errors.\nFor ipx provider, make sure to deploy customized dir as well.\nFor some providers (like vercel), using a directory other than public/ for assets is not supported since resizing happens at runtime (instead of build/generate time) and source fetched from the public/ directory (deployment URL)\nalias\n\nThis option allows you to specify aliases for src.\n\nWhen using the default ipx provider, URL aliases are shortened on the server-side. This is especially useful for optimizing external URLs and not including them in HTML.\n\nWhen using other providers, aliases are resolved in runtime and included in HTML. (only the usage is simplified)\n\nExample:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  image: {\n\n    domains: [\n\n      'images.unsplash.com'\n\n    ],\n\n    alias: {\n\n      unsplash: 'https://images.unsplash.com'\n\n    }\n\n  }\n\n})\n\n\nBefore using alias:\n\n<NuxtImg src=\"https://images.unsplash.com/<id>\" />\n\n\nGenerates:\n\n<img src=\"/_ipx/https://images.unsplash.com/<id>\">\n\n\nAfter using alias:\n\n<NuxtImg src=\"/unsplash/<id>\" />\n\n\nGenerates:\n\n<img src=\"/_ipx/unsplash/<id>\" />\n\n\nBoth usage and output are simplified!\n\nInstallation\n\nUsing image module in your Nuxt project is only one command away.\n\nProviders\n\nNuxt Image supports multiple providers for high performances."
  },
  {
    "title": "Installation - Nuxt Image",
    "url": "https://image.nuxt.com/get-started/installation",
    "html": "Get Started\n\nInstallation\n\nUsing image module in your Nuxt project is only one command away.\n\nYou are reading the v1 documentation compatible with Nuxt 3.\nCheckout v0.image.nuxtjs.org for Nuxt 2 compatible version. (Announcement).\n\nAdd @nuxt/image dependency to your project:\n\npnpm\nyarn\nnpm\npnpm add @nuxt/image\n\n\nAdd it to modules in your nuxt.config:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  modules: [\n\n    '@nuxt/image',\n\n  ]\n\n})\n\n\nYou can now start using <NuxtImg> and <NuxtPicture> components in your application ✨\n\nConfiguration\n\nAdd an image section in your nuxt.config:\n\nnuxt.config.ts\nimage: {\n\n  // Options\n\n}\n\nCheckout the image configuration for all available options and features to customize.\nEdge Channel\n\nAfter each commit is merged into the main branch of @nuxt/image and passing all tests, we trigger an automated npm release using Github Actions publishing a @nuxt/image-edge package.\n\nYou can opt in to use this release channel and avoid waiting for the next release and helping the module by beta testing changes.\n\nThe build and publishing method and quality of edge releases are the same as stable ones. The only difference is that you should often check the GitHub repository for updates. There is a slight chance of regressions not being caught during the review process and by the automated tests. Therefore, we internally use this channel to double-check everything before each release.\n\nOpting into the edge channel\n\nUpdate @nuxt/image dependency inside package.json:\n\npackage.json\n{\n\n  \"devDependencies\": {\n\n-   \"@nuxt/image\": \"^1.0.0\"\n\n+   \"@nuxt/image\": \"npm:@nuxt/image-edge@latest\"\n\n  }\n\n}\n\n\nRemove lockfile (package-lock.json, yarn.lock, or pnpm-lock.yaml) and reinstall dependencies.\n\nOpting out from the edge channel\n\nUpdate @nuxt/image dependency inside package.json:\n\npackage.json\n{\n\n  \"devDependencies\": {\n\n-   \"@nuxt/image\": \"npm:@nuxt/image-edge@latest\"\n\n+   \"@nuxt/image\": \"^1.0.0\"\n\n  }\n\n}\n\n\nRemove lockfile (package-lock.json, yarn.lock, or pnpm-lock.yaml) and reinstall dependencies.\n\nTroubleshooting\n\nIf an error occurs during installation:\n\nEnsure using LTS version of NodeJS (NodeJS Download page)\nTry to upgrade to latest versions:\npnpm\nyarn\nnpm\npnpm up @nuxt/image\n\nTry recreating lock-file:\nnpx nuxt@latest upgrade --force\n\nIf there is still an error related to sharp and node-gyp, it is is probably becase your OS architecture or NodeJS version is not included in pre-built binaries and needs to built from source (for example, this sometimes occurs on Apple M1). Checkout node-gyp for install requirements.\nIf none of the above worked, please open an issue and include error trace, OS, Node version and the package manager used for installing.\n \n\nConfiguration\n\nNuxt Image is configured with sensible defaults."
  }
]
