[
  {
    "title": "Hst.Variant | Histoire",
    "url": "https://histoire.dev/reference/svelte3/variant.html#VPContent",
    "html": "Hst.Variant\n#\n\nCreate different sub stories around the same component by using the <Hst.Variant> tag multiple times inside the same <Hst.Story> tag.\n\ntitle\n#\n\nTitle of the variant.\n\nsvelte\n<Hst.Story title=\"Cars\">\n  <Hst.Variant title=\"default\">\n    🚗\n  </Hst.Variant>\n  <Hst.Variant title=\"Fast\">\n    🏎️\n  </Hst.Variant>\n  <Hst.Variant title=\"Slow\">\n    🚜\n  </Hst.Variant>\n</Hst.Story>\n\nid\n#\n\nId of the variant used in the URL. By default, the id is automatically generated with the index of the variant in the list. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant id=\"default\">\n    🚗\n  </Hst.Variant>\n  <Hst.Variant id=\"fast\">\n    🏎️\n  </Hst.Variant>\n  <Hst.Variant id=\"slow\">\n    🚜\n  </Hst.Variant>\n</Hst.Story>\n\nicon\n#\n\nAn Iconify id to customize the variant icon in the UI.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant icon=\"lucide:car\">\n    🚗\n  </Hst.Variant>\n</Hst.Story>\n\niconColor\n#\n\nThe icon color.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant icon-color=\"#8B5CF6\">\n    🚗\n  </Hst.Variant>\n</Hst.Story>\n\nsource\n#\n\nThe copyable source code of the variant.\n\nsvelte\n<script>\n  export let Hst\n\n  const source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<Hst.Story>\n  <Hst.Variant {source}>\n    <!-- ... -->\n  </Hst.Variant>\n</Hst.Story>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant responsiveDisabled>\n    <!-- ... -->\n  </Hst.Variant>\n</Hst.Story>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant autoPropsDisabled>\n    <!-- ... -->\n  </Hst.Variant>\n</Hst.Story>\n\nSlot: default\n#\n\nContent of the variant.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant>\n    <pre>{{ state }}</pre>\n  </Hst.Variant>\n</Hst.Story>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant>\n    <svelte:fragment slot=\"controls\">\n      <!-- Interact with state here -->\n    </svelte:fragment>\n  </Hst.Variant>\n</Hst.Story>\n"
  },
  {
    "title": "Hst.Story | Histoire",
    "url": "https://histoire.dev/reference/svelte3/story.html#VPContent",
    "html": "Hst.Story\n#\n\nCreate a story. Must be at the top level of the story file.\n\ntitle\n#\n\nTitle of the story.\n\nsvelte\n<Hst.Story title=\"My story\">\n  Hello world\n</Hst.Story>\n\nid\n#\n\nId of the story used in the URL. By default, the id is automatically generated from the file path. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nsvelte\n<Hst.Story id=\"my-story\">\n  Hello world\n</Hst.Story>\n\nlayout\n#\n\nLayout of the story. Object with the following properties:\n\ntype: 'single' or 'grid'\nwith type: 'single' you can specify:\niframe: Whether to isolate the story in an iframe. You might want to disable it if you want to pass complexe parameters that can't be serialized.\nwith type: 'grid' you can specify:\nwidth: Column size. Can be number (pixels) or string (like '100%').\n\nLearn more\n\ngroup\n#\n\nThe id of a group to include the story in.\n\nsvelte\n<Hst.Story group=\"my-group\">\n  Hello world\n</Hst.Story>\n\n\nLearn more\n\nicon\n#\n\nAn Iconify id to customize the story icon in the tree.\n\nsvelte\n<Hst.Story icon=\"lucide:cpu\">\n  Hello world\n</Hst.Story>\n\niconColor\n#\n\nThe icon color.\n\nsvelte\n<Hst.Story icon-color=\"#8B5CF6\">\n  Hello world\n</Hst.Story>\n\nsource\n#\n\nThe copyable source code of the story.\n\nsvelte\n<script>\n  export let Hst\n\n  const source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<Hst.Story {source}>\n  <!-- ... -->\n</Hst.Story>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nsvelte\n<Hst.Story responsiveDisabled>\n  <!-- ... -->\n</Hst.Story>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nsvelte\n<Hst.Story autoPropsDisabled>\n  <!-- ... -->\n</Hst.Story>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story. This will be the default content for variants of the story but you can override it by defining a controls slot in a variant.\n\nsvelte\n<Hst.Story>\n  <svelte:fragment slot=\"controls\">\n    <!-- Interact with state here -->\n  </svelte:fragment>\n\n  <Hst.Variant>\n    <!-- Controls reused here -->\n  </Hst.Variant>\n</Hst.Story>\n"
  },
  {
    "title": "Variant | Histoire",
    "url": "https://histoire.dev/reference/vue3/variant.html#VPContent",
    "html": "Variant\n#\n\nCreate different sub stories around the same component by using the <Variant> tag multiple times inside the same <Story> tag.\n\ntitle\n#\n\nTitle of the variant.\n\nvue\n<template>\n  <Story title=\"Cars\">\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\nid\n#\n\nId of the variant used in the URL. By default, the id is automatically generated with the index of the variant in the list. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nvue\n<template>\n  <Story>\n    <Variant id=\"default\">\n      🚗\n    </Variant>\n    <Variant id=\"fast\">\n      🏎️\n    </Variant>\n    <Variant id=\"slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\ninitState\n#\n\nFunction that returns the intial state.\n\nvue\n<script setup>\nfunction initState () {\n  return {\n    disabled: false,\n    content: \"Hello world\"\n  }\n}\n</script>\n\n<template>\n  <Story title=\"My Button\">\n    <Variant title=\"Default\" :init-state=\"initState\">\n      <template #default=\"{ state }\">\n        <button :disabled=\"state.disabled\">\n          {{ state.content }}\n        </button>\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nLearn more\n\nsetupApp\n#\n\nA function to configure the Vue application.\n\nIt receives a payload object as parameter with the following properties:\n\napp: The Vue application instance.\nstory: The story object.\nvariant: The variant object.\nvue\n<script setup>\nfunction mySetupApp ({ app, story, variant }) {\n  app.provide('demo', 'meow')\n}\n</script>\n\n<template>\n  <Story>\n    <Variant :setup-app=\"mySetupApp\">\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\n\nLearn more\n\nicon\n#\n\nAn Iconify id to customize the variant icon in the UI.\n\nvue\n<template>\n  <Story>\n    <Variant icon=\"lucide:car\">\n      🚗\n    </Variant>\n  </Story>\n</template>\n\niconColor\n#\n\nThe icon color.\n\nvue\n<template>\n  <Story>\n    <Variant icon-color=\"#8B5CF6\">\n      🚗\n    </Variant>\n  </Story>\n</template>\n\nsource\n#\n\nThe copyable source code of the variant.\n\nvue\n<script setup>\nconst source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<template>\n  <Story>\n    <Variant :source=\"source\">\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nvue\n<template>\n  <Story>\n    <Variant responsive-disabled>\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nvue\n<template>\n  <Story>\n    <Variant auto-props-disabled>\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\nSlot: default\n#\n\nContent of the variant.\n\nProps:\n\nstate: Object with the current state of the variant (if you are using initState).\nvue\n<template>\n  <Story>\n    <Variant>\n      <template #default=\"{ state }\">\n        <pre>{{ state }}</pre>\n      </template>\n    </Variant>\n  </Story>\n</template>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story.\n\nProps:\n\nstate: Object with the current state of the variant (if you are using initState).\nvue\n<template>\n  <Story>\n    <Variant>\n      <template #controls=\"{ state }\">\n        <!-- Interact with state here -->\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nLearn more\n\nSlot: source\n#\n\nManual copyable source code.\n\nvue\n<template>\n  <Story>\n    <Variant>\n      <template #source>\n        <textarea v-pre>\n          <h1>Toto</h1>\n\n          <input\n            v-model.number=\"count\"\n            type=\"number\"\n          >\n        </textarea>\n      </template>\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Story | Histoire",
    "url": "https://histoire.dev/reference/vue3/story.html#VPContent",
    "html": "Story\n#\n\nCreate a story. Must be at the top level of the story file.\n\ntitle\n#\n\nTitle of the story.\n\nvue\n<template>\n  <Story title=\"My story\">\n    Hello world\n  </Story>\n</template>\n\nid\n#\n\nId of the story used in the URL. By default, the id is automatically generated from the file path. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nvue\n<template>\n  <Story id=\"my-story\">\n    Hello world\n  </Story>\n</template>\n\nlayout\n#\n\nLayout of the story. Object with the following properties:\n\ntype: 'single' or 'grid'\nwith type: 'single' you can specify:\niframe: Whether to isolate the story in an iframe. You might want to disable it if you want to pass complexe parameters that can't be serialized.\nwith type: 'grid' you can specify:\nwidth: Column size. Can be number (pixels) or string (like '100%').\n\nLearn more\n\ninitState\n#\n\nFunction that returns the intial state. Will be used as default value for variants.\n\nvue\n<script setup>\nfunction initState () {\n  return {\n    disabled: false,\n    content: \"Hello world\"\n  }\n}\n</script>\n\n<template>\n  <Story title=\"My Button\" :init-state=\"initState\">\n    <template #default=\"{ state }\">\n      <button :disabled=\"state.disabled\">\n        {{ state.content }}\n      </button>\n    </template>\n  </Story>\n</template>\n\n\nLearn more\n\nsetupApp\n#\n\nA function to configure the Vue application. This will be the default for the variants in the story.\n\nIt receives a payload object as parameter with the following properties:\n\napp: The Vue application instance.\nstory: The story object.\nvariant: The variant object.\nvue\n<script setup>\nfunction mySetupApp ({ app, story, variant }) {\n  app.provide('demo', 'meow')\n}\n</script>\n\n<template>\n  <Story :setup-app=\"mySetupApp\">\n    <!-- ... -->\n  </Story>\n</template>\n\n\nLearn more\n\ngroup\n#\n\nThe id of a group to include the story in.\n\nvue\n<template>\n  <Story group=\"my-group\">\n    Hello world\n  </Story>\n</template>\n\n\nLearn more\n\nicon\n#\n\nAn Iconify id to customize the story icon in the tree.\n\nvue\n<template>\n  <Story icon=\"lucide:cpu\">\n    Hello world\n  </Story>\n</template>\n\niconColor\n#\n\nThe icon color.\n\nvue\n<template>\n  <Story icon-color=\"#8B5CF6\">\n    Hello world\n  </Story>\n</template>\n\ndocsOnly\n#\n\nThis story will only render a documentation page.\n\nvue\n<template>\n  <Story\n    group=\"top\"\n    docs-only\n    icon=\"carbon:bookmark\"\n  />\n</template>\n\n<docs lang=\"md\">\n# Welcome\n\nThis is a demo book using Vue 3.\n\n---\n\nLearn more about Histoire [here](https://histoire.dev/).\n</docs>\n\n\nsource\n#\n\nThe copyable source code of the story.\n\nvue\n<script setup>\nconst source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<template>\n  <Story :source=\"source\">\n    <!-- ... -->\n  </Story>\n</template>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nvue\n<template>\n  <Story responsive-disabled>\n    <!-- ... -->\n  </Story>\n</template>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nvue\n<template>\n  <Story auto-props-disabled>\n    <!-- ... -->\n  </Story>\n</template>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story. This will be the default content for variants of the story but you can override it by defining a controls slot in a variant.\n\nProps:\n\nstate: Object with the current state of the variant (if you are using initState).\nvue\n<template>\n  <Story>\n    <template #controls=\"{ state }\">\n      <!-- Interact with state here -->\n    </template>\n\n    <Variant>\n      <!-- Controls reused here -->\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Plugin API | Histoire",
    "url": "https://histoire.dev/reference/plugin-api.html#VPContent",
    "html": "Plugin API\n#\n\nWARNING\n\nThis doc and the Plugin API are work-in-progress. Expect changes."
  },
  {
    "title": "Client API Reference | Histoire",
    "url": "https://histoire.dev/reference/client.html#VPContent",
    "html": "Client API Reference\n#\n\nYou can access various APIs meant to be used inside stories from the histoire/client module.\n\nlogEvent\n#\n\nLogs an event in the Events sidepane.\n\njs\nimport { logEvent } from 'histoire/client'\n\nlogEvent('click', { some: 'data' })\n\nisCollecting\n#\n\nReturns true if the story is executing through the NodeJS server.\n\njs\nimport { isCollecting } from 'histoire/client'\n\nif (!isCollecting()) {\n  // do something only in the browser\n}\n\nisDark\n#\n\nReturns true if dark mode is enabled.\n\njs\nimport { isDark } from 'histoire/client'\n\nif (isDark()) {\n  // do something only in dark mode\n}\n\ntoggleDark\n#\n\ntoggleDark(value?: boolean): boolean\n\nToggles dark mode. If value is provided, it will be used instead of toggling. Returns the new value.\n\njs\nimport { toggleDark } from 'histoire/client'\n\ntoggleDark(true)\n"
  },
  {
    "title": "Hst.Variant | Histoire",
    "url": "https://histoire.dev/reference/svelte3/variant.html",
    "html": "Hst.Variant\n#\n\nCreate different sub stories around the same component by using the <Hst.Variant> tag multiple times inside the same <Hst.Story> tag.\n\ntitle\n#\n\nTitle of the variant.\n\nsvelte\n<Hst.Story title=\"Cars\">\n  <Hst.Variant title=\"default\">\n    🚗\n  </Hst.Variant>\n  <Hst.Variant title=\"Fast\">\n    🏎️\n  </Hst.Variant>\n  <Hst.Variant title=\"Slow\">\n    🚜\n  </Hst.Variant>\n</Hst.Story>\n\nid\n#\n\nId of the variant used in the URL. By default, the id is automatically generated with the index of the variant in the list. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant id=\"default\">\n    🚗\n  </Hst.Variant>\n  <Hst.Variant id=\"fast\">\n    🏎️\n  </Hst.Variant>\n  <Hst.Variant id=\"slow\">\n    🚜\n  </Hst.Variant>\n</Hst.Story>\n\nicon\n#\n\nAn Iconify id to customize the variant icon in the UI.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant icon=\"lucide:car\">\n    🚗\n  </Hst.Variant>\n</Hst.Story>\n\niconColor\n#\n\nThe icon color.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant icon-color=\"#8B5CF6\">\n    🚗\n  </Hst.Variant>\n</Hst.Story>\n\nsource\n#\n\nThe copyable source code of the variant.\n\nsvelte\n<script>\n  export let Hst\n\n  const source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<Hst.Story>\n  <Hst.Variant {source}>\n    <!-- ... -->\n  </Hst.Variant>\n</Hst.Story>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant responsiveDisabled>\n    <!-- ... -->\n  </Hst.Variant>\n</Hst.Story>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant autoPropsDisabled>\n    <!-- ... -->\n  </Hst.Variant>\n</Hst.Story>\n\nSlot: default\n#\n\nContent of the variant.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant>\n    <pre>{{ state }}</pre>\n  </Hst.Variant>\n</Hst.Story>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story.\n\nsvelte\n<Hst.Story>\n  <Hst.Variant>\n    <svelte:fragment slot=\"controls\">\n      <!-- Interact with state here -->\n    </svelte:fragment>\n  </Hst.Variant>\n</Hst.Story>\n"
  },
  {
    "title": "Hst.Story | Histoire",
    "url": "https://histoire.dev/reference/svelte3/story.html",
    "html": "Hst.Story\n#\n\nCreate a story. Must be at the top level of the story file.\n\ntitle\n#\n\nTitle of the story.\n\nsvelte\n<Hst.Story title=\"My story\">\n  Hello world\n</Hst.Story>\n\nid\n#\n\nId of the story used in the URL. By default, the id is automatically generated from the file path. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nsvelte\n<Hst.Story id=\"my-story\">\n  Hello world\n</Hst.Story>\n\nlayout\n#\n\nLayout of the story. Object with the following properties:\n\ntype: 'single' or 'grid'\nwith type: 'single' you can specify:\niframe: Whether to isolate the story in an iframe. You might want to disable it if you want to pass complexe parameters that can't be serialized.\nwith type: 'grid' you can specify:\nwidth: Column size. Can be number (pixels) or string (like '100%').\n\nLearn more\n\ngroup\n#\n\nThe id of a group to include the story in.\n\nsvelte\n<Hst.Story group=\"my-group\">\n  Hello world\n</Hst.Story>\n\n\nLearn more\n\nicon\n#\n\nAn Iconify id to customize the story icon in the tree.\n\nsvelte\n<Hst.Story icon=\"lucide:cpu\">\n  Hello world\n</Hst.Story>\n\niconColor\n#\n\nThe icon color.\n\nsvelte\n<Hst.Story icon-color=\"#8B5CF6\">\n  Hello world\n</Hst.Story>\n\nsource\n#\n\nThe copyable source code of the story.\n\nsvelte\n<script>\n  export let Hst\n\n  const source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<Hst.Story {source}>\n  <!-- ... -->\n</Hst.Story>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nsvelte\n<Hst.Story responsiveDisabled>\n  <!-- ... -->\n</Hst.Story>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nsvelte\n<Hst.Story autoPropsDisabled>\n  <!-- ... -->\n</Hst.Story>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story. This will be the default content for variants of the story but you can override it by defining a controls slot in a variant.\n\nsvelte\n<Hst.Story>\n  <svelte:fragment slot=\"controls\">\n    <!-- Interact with state here -->\n  </svelte:fragment>\n\n  <Hst.Variant>\n    <!-- Controls reused here -->\n  </Hst.Variant>\n</Hst.Story>\n"
  },
  {
    "title": "Variant | Histoire",
    "url": "https://histoire.dev/reference/vue3/variant.html",
    "html": "Variant\n#\n\nCreate different sub stories around the same component by using the <Variant> tag multiple times inside the same <Story> tag.\n\ntitle\n#\n\nTitle of the variant.\n\nvue\n<template>\n  <Story title=\"Cars\">\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\nid\n#\n\nId of the variant used in the URL. By default, the id is automatically generated with the index of the variant in the list. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nvue\n<template>\n  <Story>\n    <Variant id=\"default\">\n      🚗\n    </Variant>\n    <Variant id=\"fast\">\n      🏎️\n    </Variant>\n    <Variant id=\"slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\ninitState\n#\n\nFunction that returns the intial state.\n\nvue\n<script setup>\nfunction initState () {\n  return {\n    disabled: false,\n    content: \"Hello world\"\n  }\n}\n</script>\n\n<template>\n  <Story title=\"My Button\">\n    <Variant title=\"Default\" :init-state=\"initState\">\n      <template #default=\"{ state }\">\n        <button :disabled=\"state.disabled\">\n          {{ state.content }}\n        </button>\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nLearn more\n\nsetupApp\n#\n\nA function to configure the Vue application.\n\nIt receives a payload object as parameter with the following properties:\n\napp: The Vue application instance.\nstory: The story object.\nvariant: The variant object.\nvue\n<script setup>\nfunction mySetupApp ({ app, story, variant }) {\n  app.provide('demo', 'meow')\n}\n</script>\n\n<template>\n  <Story>\n    <Variant :setup-app=\"mySetupApp\">\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\n\nLearn more\n\nicon\n#\n\nAn Iconify id to customize the variant icon in the UI.\n\nvue\n<template>\n  <Story>\n    <Variant icon=\"lucide:car\">\n      🚗\n    </Variant>\n  </Story>\n</template>\n\niconColor\n#\n\nThe icon color.\n\nvue\n<template>\n  <Story>\n    <Variant icon-color=\"#8B5CF6\">\n      🚗\n    </Variant>\n  </Story>\n</template>\n\nsource\n#\n\nThe copyable source code of the variant.\n\nvue\n<script setup>\nconst source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<template>\n  <Story>\n    <Variant :source=\"source\">\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nvue\n<template>\n  <Story>\n    <Variant responsive-disabled>\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nvue\n<template>\n  <Story>\n    <Variant auto-props-disabled>\n      <!-- ... -->\n    </Variant>\n  </Story>\n</template>\n\nSlot: default\n#\n\nContent of the variant.\n\nProps:\n\nstate: Object with the current state of the variant (if you are using initState).\nvue\n<template>\n  <Story>\n    <Variant>\n      <template #default=\"{ state }\">\n        <pre>{{ state }}</pre>\n      </template>\n    </Variant>\n  </Story>\n</template>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story.\n\nProps:\n\nstate: Object with the current state of the variant (if you are using initState).\nvue\n<template>\n  <Story>\n    <Variant>\n      <template #controls=\"{ state }\">\n        <!-- Interact with state here -->\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nLearn more\n\nSlot: source\n#\n\nManual copyable source code.\n\nvue\n<template>\n  <Story>\n    <Variant>\n      <template #source>\n        <textarea v-pre>\n          <h1>Toto</h1>\n\n          <input\n            v-model.number=\"count\"\n            type=\"number\"\n          >\n        </textarea>\n      </template>\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Story | Histoire",
    "url": "https://histoire.dev/reference/vue3/story.html",
    "html": "Story\n#\n\nCreate a story. Must be at the top level of the story file.\n\ntitle\n#\n\nTitle of the story.\n\nvue\n<template>\n  <Story title=\"My story\">\n    Hello world\n  </Story>\n</template>\n\nid\n#\n\nId of the story used in the URL. By default, the id is automatically generated from the file path. Setting an id manually will ensure the URL parameter doesn't change with the order of the variants in the story.\n\nvue\n<template>\n  <Story id=\"my-story\">\n    Hello world\n  </Story>\n</template>\n\nlayout\n#\n\nLayout of the story. Object with the following properties:\n\ntype: 'single' or 'grid'\nwith type: 'single' you can specify:\niframe: Whether to isolate the story in an iframe. You might want to disable it if you want to pass complexe parameters that can't be serialized.\nwith type: 'grid' you can specify:\nwidth: Column size. Can be number (pixels) or string (like '100%').\n\nLearn more\n\ninitState\n#\n\nFunction that returns the intial state. Will be used as default value for variants.\n\nvue\n<script setup>\nfunction initState () {\n  return {\n    disabled: false,\n    content: \"Hello world\"\n  }\n}\n</script>\n\n<template>\n  <Story title=\"My Button\" :init-state=\"initState\">\n    <template #default=\"{ state }\">\n      <button :disabled=\"state.disabled\">\n        {{ state.content }}\n      </button>\n    </template>\n  </Story>\n</template>\n\n\nLearn more\n\nsetupApp\n#\n\nA function to configure the Vue application. This will be the default for the variants in the story.\n\nIt receives a payload object as parameter with the following properties:\n\napp: The Vue application instance.\nstory: The story object.\nvariant: The variant object.\nvue\n<script setup>\nfunction mySetupApp ({ app, story, variant }) {\n  app.provide('demo', 'meow')\n}\n</script>\n\n<template>\n  <Story :setup-app=\"mySetupApp\">\n    <!-- ... -->\n  </Story>\n</template>\n\n\nLearn more\n\ngroup\n#\n\nThe id of a group to include the story in.\n\nvue\n<template>\n  <Story group=\"my-group\">\n    Hello world\n  </Story>\n</template>\n\n\nLearn more\n\nicon\n#\n\nAn Iconify id to customize the story icon in the tree.\n\nvue\n<template>\n  <Story icon=\"lucide:cpu\">\n    Hello world\n  </Story>\n</template>\n\niconColor\n#\n\nThe icon color.\n\nvue\n<template>\n  <Story icon-color=\"#8B5CF6\">\n    Hello world\n  </Story>\n</template>\n\ndocsOnly\n#\n\nThis story will only render a documentation page.\n\nvue\n<template>\n  <Story\n    group=\"top\"\n    docs-only\n    icon=\"carbon:bookmark\"\n  />\n</template>\n\n<docs lang=\"md\">\n# Welcome\n\nThis is a demo book using Vue 3.\n\n---\n\nLearn more about Histoire [here](https://histoire.dev/).\n</docs>\n\n\nsource\n#\n\nThe copyable source code of the story.\n\nvue\n<script setup>\nconst source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>`\n</script>\n\n<template>\n  <Story :source=\"source\">\n    <!-- ... -->\n  </Story>\n</template>\n\nresponsiveDisabled\n#\n\nDisables the responsive menu, preview resize handles and makes the preview laways fit the available space.\n\nvue\n<template>\n  <Story responsive-disabled>\n    <!-- ... -->\n  </Story>\n</template>\n\nautoPropsDisabled\n#\n\nDisables the automatic detection of props of the components in the story.\n\nvue\n<template>\n  <Story auto-props-disabled>\n    <!-- ... -->\n  </Story>\n</template>\n\nSlot: controls\n#\n\nContent of the 'Controls' pane used to interact with the story. This will be the default content for variants of the story but you can override it by defining a controls slot in a variant.\n\nProps:\n\nstate: Object with the current state of the variant (if you are using initState).\nvue\n<template>\n  <Story>\n    <template #controls=\"{ state }\">\n      <!-- Interact with state here -->\n    </template>\n\n    <Variant>\n      <!-- Controls reused here -->\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Plugin API | Histoire",
    "url": "https://histoire.dev/reference/plugin-api.html",
    "html": "Plugin API\n#\n\nWARNING\n\nThis doc and the Plugin API are work-in-progress. Expect changes."
  },
  {
    "title": "Client API Reference | Histoire",
    "url": "https://histoire.dev/reference/client.html",
    "html": "Client API Reference\n#\n\nYou can access various APIs meant to be used inside stories from the histoire/client module.\n\nlogEvent\n#\n\nLogs an event in the Events sidepane.\n\njs\nimport { logEvent } from 'histoire/client'\n\nlogEvent('click', { some: 'data' })\n\nisCollecting\n#\n\nReturns true if the story is executing through the NodeJS server.\n\njs\nimport { isCollecting } from 'histoire/client'\n\nif (!isCollecting()) {\n  // do something only in the browser\n}\n\nisDark\n#\n\nReturns true if dark mode is enabled.\n\njs\nimport { isDark } from 'histoire/client'\n\nif (isDark()) {\n  // do something only in dark mode\n}\n\ntoggleDark\n#\n\ntoggleDark(value?: boolean): boolean\n\nToggles dark mode. If value is provided, it will be used instead of toggling. Returns the new value.\n\njs\nimport { toggleDark } from 'histoire/client'\n\ntoggleDark(true)\n"
  },
  {
    "title": "Configuration Reference | Histoire",
    "url": "https://histoire.dev/reference/config.html",
    "html": "Configuration Reference\n#\n\nLearn more about configuring Histoire here.\n\nplugins\n#\n\nArray of plugins. Learn more about official plugins and how to develop them.\n\nts\nimport { HstVue } from '@histoire/plugin-vue'\nimport { HstNuxt } from '@histoire/plugin-nuxt'\n\nexport default defineConfig({\n  plugins: [\n    HstVue(),\n    HstNuxt(),\n  ],\n})\n\noutDir\n#\n\nstring - Default: '.histoire/dist'\n\nOutput directory.\n\nts\nexport default defineConfig({\n  outDir: '.histoire/dist',\n})\n\nstoryMatch\n#\n\nstring[] - Default: ['**/*.story.vue']\n\nGlob patterns for story files to include.\n\nts\nexport default defineConfig({\n  storyMatch: [\n    '**/*.story.vue',\n  ],\n})\n\n\nUse src/**/*.story.vue to prevent search errors in binary files (e.g., in iOS or Android folders) when using Ionic Capacitor.\n\nstoryIgnored\n#\n\nstring[] - Default: [ '**/node_modules/**', '**/dist/**' ]\n\nGlob patterns to ignore files while searching for story files.\n\nts\nexport default defineConfig({\n  storyIgnored: [\n    '**/node_modules/**',\n    '**/dist/**',\n  ],\n})\n\ntree\n#\n\nObject - Default: { file: 'title', order: 'asc' }\n\nHow to generate the story tree.\n\nLearn more: Vue 3\n\nProperties:\n\nfile: 'title' | 'path' | ((file: TreeFile) => string[]): How to get the path of a story.\norder: 'asc' | ((a: string, b: string) => number): How to sort the stories.\nts\nexport default defineConfig({\n  tree: {\n    file: 'title',\n    order: 'asc',\n  },\n})\n\ntheme\n#\n\nObject\n\nCustomize the look of the book.\n\nLearn more\n\nProperties:\n\ntitle: string: Main page title. For example: 'Acme Inc.'\nlogo: Object: Logo configuration.\nsquare: string: Square logo image without text.\nlight: string: Full logo for light theme.\ndark: string: Full logo for dark theme.\nfavicon: string: Href to the favicon file (not processed by Vite). Put the file in the public directory.\ncolors: Object: Customize the colors. Each color should be an object with shades as keys.\nlogoHref: string: Add a link to the main logo\ndarkClass: string: Class added to the story preview when dark mode is enabled (default is 'dark').\ndefaultColorScheme: 'light' | 'dark' | 'auto': Default color scheme for the app. 'auto' will use the system preference.\nhideColorSchemeSwitch: boolean: Hides the dark mode button in the toolbar.\nstoreColorScheme: boolean: Enable persistence of the color scheme in the browser's local storage.\nts\nimport { defaultColors } from 'histoire'\n\nexport default defineConfig({\n  theme: {\n    title: 'Acme Design System',\n    favicon: '/my-favicon.svg',\n    logo: {\n      square: '/src/img/logo-square.svg',\n      light: '/src/img/logo-light.svg',\n      dark: '/src/img/logo-dark.svg',\n    },\n    colors: {\n      primary: defaultColors.cyan,\n    },\n    logoHref: 'https://acme.com',\n    defaultColorScheme: 'light',\n    hideColorSchemeSwitch: true,\n    storeColorScheme: false,\n  },\n})\n\nsetupFile\n#\n\nstring | { browser: string, server: string }\n\nSetup file exporting a default function executed when setting up each story preview.\n\nImport custom CSS files from this file.\n\nLearn more\n\nts\nexport default defineConfig({\n  setupFile: '/src/histoire-setup.ts',\n})\n\n\nIf you need a different version for the NodeJS server (while collecting stories), you can use an object:\n\nts\nexport default defineConfig({\n  setupFile: {\n    browser: '/src/histoire-setup.ts',\n    server: '/src/histoire-setup.server.ts',\n  },\n})\n\n\nThis can be useful if you need to exclude some imported libraries that only works in the browser.\n\ndefaultStoryProps\n#\n\nObject\n\nDefault values for story props.\n\nts\nexport default defineConfig({\n  defaultStoryProps: {\n    icon: 'carbon:assembly-reference',\n    iconColor: '#00c5a5',\n    layout: {\n      type: 'grid',\n      width: 300,\n    },\n    responsiveDisabled: true,\n    autoPropsDisabled: true,\n  },\n})\n\nresponsivePresets\n#\n\nArray\n\nPredefined responsive sizes for story playgrounds.\n\nEach object in the array is a preset with the following properties:\n\nlabel: string: Label for the preset.\nwidth: number: Width of the preset (pixels).\nheight: number: Height of the preset (pixels).\n\nDefault values are shown in the example below:\n\nts\nexport default defineConfig({\n  responsivePresets: [\n    {\n      label: 'Mobile (Small)',\n      width: 320,\n      height: 560,\n    },\n    {\n      label: 'Mobile (Medium)',\n      width: 360,\n      height: 640,\n    },\n    {\n      label: 'Mobile (Large)',\n      width: 414,\n      height: 896,\n    },\n    {\n      label: 'Tablet',\n      width: 768,\n      height: 1024,\n    },\n    {\n      label: 'Laptop (Small)',\n      width: 1024,\n      height: null,\n    },\n    {\n      label: 'Laptop (Large)',\n      width: 1366,\n      height: null,\n    },\n    {\n      label: 'Desktop',\n      width: 1920,\n      height: null,\n    },\n    {\n      label: '4K',\n      width: 3840,\n      height: null,\n    },\n  ],\n})\n\nbackgroundPresets\n#\n\nArray\n\nBackground color of the story preview.\n\nEach object in the array is a preset with the following properties:\n\nlabel: string: Label for the preset.\ncolor: string: Color of the preset.\ncontrastColor?: string: Contrast color of preset\n\nDefault values are shown in the example below:\n\nts\nexport default defineConfig({\n  backgroundPresets: [\n    {\n      label: 'Transparent',\n      color: 'transparent',\n      contrastColor: '#333'\n    },\n    {\n      label: 'White',\n      color: '#fff',\n      contrastColor: '#333'\n    },\n    {\n      label: 'Light gray',\n      color: '#aaa',\n      contrastColor: '#eee'\n    },\n    {\n      label: 'Dark gray',\n      color: '#333',\n      contrastColor: '#ccc'\n    },\n    {\n      label: 'Black',\n      color: '#000',\n      contrastColor: '#fff'\n    },\n  ],\n})\n\n\nYou can use current contrast color via the css variable --histoire-contrast-color:\n\ncss\n.my-class {\n  color: var(--histoire-contrast-color);\n}\n\nautoApplyContrastColor\n#\n\nboolean - Default: false\n\nAutomatically apply the contrast color to the story preview text.\n\nts\nexport default defineConfig({\n  autoApplyContrastColor: true,\n})\n\nmarkdown\n#\n\n(md: MarkdownIt) => MarkdownIt | Promise<MarkdownIt>\n\nCustomize the markdown-it renderer.\n\nts\nexport default defineConfig({\n  markdown: (md) => {\n    md.use(SomeMarkdownItPlugin)\n  },\n})\n\nrouterMode\n#\n\n'history' | 'hash' - Default: 'history'\n\nChanges the router mode:\n\n'history': HTML 5 history mode with cleaner URLs.\n'hash': Use the hashtag hack in the URL to support more servers and static hosting services.\nts\nexport default defineConfig({\n  routerMode: 'hash',\n})\n\nvite\n#\n\nViteConfig | ((config: ViteConfig, env: ViteConfigEnv) => void | ViteConfig | Promise<void | ViteConfig>)\n\nVite config override.\n\nts\nexport default defineConfig({\n  vite: {\n    server: {\n      port: 3042,\n    },\n  },\n})\n\nviteIgnorePlugins\n#\n\nstring[]\n\nList of Vite plugin names to exclude for Histoire.\n\nts\nexport default defineConfig({\n  viteIgnorePlugins: [\n    'vite-plugin-example',\n  ],\n})\n\nviteNodeTransformMode\n#\n\n{ web?, ssr? }\n\nDetermine the transform method of modules\n\nviteNodeTransformMode.ssr\n#\n\nRegExp[] - Default: [/\\.([cm]?[jt]sx?|json)$/]\n\nUse SSR transform pipeline for the specified files.\nVite plugins will receive ssr: true flag when processing those files.\n\nviteNodeTransformMode.web\n#\n\nRegExp[] - Default: modules other than those specified in transformMode.ssr\n\nFirst do a normal transform pipeline (targeting browser), then do a SSR rewrite to run the code in Node.\nVite plugins will receive ssr: false flag when processing those files.\n\nWhen you use JSX as component models other than React (e.g. Vue JSX or SolidJS), you might want to config as following to make .tsx / .jsx transformed as client-side components:\n\nts\nexport default defineConfig({\n  viteNodeTransformMode: {\n    web: [/\\.[jt]sx$/],\n  },\n})\n\nviteNodeInlineDeps\n#\n\nRegExp[]\n\nTranspile dependencies when collecting stories on Node.js.\n\nFor example, if you have a dependency that contains ESM code but Node tries to load it in CommonJS context, you might have this kind of error:\n\n.../my-project/node_modules/.pnpm/some-library@1.0.0/lib/esm/index.js:3\nexport function foo() {\n^^^^^^\n\nSyntaxError: Unexpected token 'export'\n    at Object.compileFunction (node:vm:352:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1031:15)\n    ...\n\nWe can see that the some-library (made-up name) is misconfigured and Node treats it as CommonJS code (the cjs/loader is being used) but it contains ESM code. Hence the error.\n\nts\nexport default defineConfig({\n  viteNodeInlineDeps: [\n    /some-library/,\n  ],\n})\n\ncollectMaxThreads\n#\n\nnumber - Default: available cpus\n\nNumber of maximum threads used to collect stories (both for development and building). Threads count will never go above this limit but might be lower.\n\nts\nexport default defineConfig({\n  collectMaxThreads: 4,\n})\n"
  },
  {
    "title": "Lost Pixel visual regression testing | Histoire",
    "url": "https://histoire.dev/examples/visual-regression-testing/lost-pixel.html#VPContent",
    "html": "Lost Pixel visual regression testing\n#\n\nLost Pixel is a modern open-source visual regression testing tool that allows you to run self-hosted visual regression tests. Lost Pixel Platofrm is for teams and is a cloud version of visual testing.\n\nSetting up self-hosted visual testing\n#\n\nLost Pixel has first-class Histoire support meaning that you don't need to do much to add visual tests to your app if you have your Histoire book ready!\n\nStart with installing lost-pixel by npm install lost-pixel and creating a lostpixel.config.js|ts file with following contents.\n\njavascript\nimport { CustomProjectConfig } from 'lost-pixel';\n\nexport const config: CustomProjectConfig = {\n  histoireShots: {\n    histoireUrl: './.histoire/dist',\n  },\n  generateOnly: true,\n  failOnDifference: true\n};\n\n\nBefore running visual tests you need to have your Histoire book built first.\n\nThis setup allows you to run visual tests locally. To test your stories run npx lost-pixel\n\nTo update the baselines run npx lost-pixel update.\n\nGitHub actions\n#\n\nTo run your tests on CI you can use lost-pixel action utility. If you are running on any other CI provider - lost-pixel is a docker image that is runnable on CI of your choice(only within GitHub currently though)\n\nyaml\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18.x\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build histoire\n        run: npm run story:build\n\n      - name: Lost Pixel\n        uses: lost-pixel/lost-pixel@v3.8.0\n\n\nTo update baselines locally run npx lost-pixel docker update, this will ensure that lost-pixel runs in docker and there are no OS differences in rendering between CI and local tests.\n\nLost Pixel Platform\n#\n\nIf you have self-hosted version of tests working it is not complicated to migrate to Lost Pixel Platform. Follow this guide to achieve that."
  },
  {
    "title": "Histoire Screenshot with Percy for visual regression testing | Histoire",
    "url": "https://histoire.dev/examples/visual-regression-testing/percy.html#VPContent",
    "html": "Histoire Screenshot with Percy for visual regression testing\n#\n\nYou need the Percy CLI installed to be able to send snapshots to Percy.\n\nbash\npnpm add -D @histoire/plugin-percy\n\n\nAdd the plugin in histoire config:\n\njs\nimport { defineConfig } from 'histoire'\nimport { HstPercy } from '@histoire/plugin-percy'\n\nexport default defineConfig({\n  plugins: [\n    HstPercy({\n      // Options here\n    }),\n  ],\n})\n\n\nThen use the Percy CLI\n\nbash\n# Replace `story:build` with the script to build the stories if you changed it\npercy exec pnpm run story:build\n"
  },
  {
    "title": "Controlled stories | Histoire",
    "url": "https://histoire.dev/examples/vue3/controlled-stories.html#VPContent",
    "html": "Controlled stories\n#\n\nThese patterns let you create custom controls to update your component\n\nSingle control\n#\n\nThis will display a control panel for the story.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyComponent from './MyComponent.vue'\n\nconst state = reactive({\n  text: \"Hello world\"\n})\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <MyComponent :argument=\"state.text\" />\n    <template #controls>\n      <HstText v-model=\"state.text\" title=\"Content\" />\n    </template>\n  </Story>\n</template>\n\nGlobal variant control\n#\n\nThis will display a control panel for all the variants.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyComponent from './MyComponent.vue'\n\nconst state = reactive({\n  text: \"Hello world\"\n})\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant title=\"MyVariant Red\">\n      <MyComponent :argument=\"state.text\" color=\"red\" />\n    </Variant>\n    <Variant title=\"MyVariant Blue\">\n      <MyComponent :argument=\"state.text\" color=\"blue\" />\n    </Variant>\n    <template #controls>\n      <HstText v-model=\"state.text\" title=\"Content\" />\n    </template>\n  </Story>\n</template>\n\nSpecific variant control\n#\n\nThis will display a control panel only for one variant.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyComponent from './MyComponent.vue'\n\nconst state = reactive({\n  text: \"Hello world\"\n})\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant title=\"MyVariant Red\">\n      <MyComponent :argument=\"state.text\" color=\"red\" />\n      <template #controls>\n        <HstText v-model=\"state.text\" title=\"Content\" />\n      </template>\n    </Variant>\n    <Variant title=\"MyVariant Blue\">\n      <MyComponent argument=\"hello\" color=\"blue\" />\n    </Variant>\n  </Story>\n</template>\n\nIsolated variant control\n#\n\nThis will isolate each variant so that you control only one variant at a time.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n\nfunction initState () {\n  return {\n    text: \"Hello world\"\n  }\n}\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant \n      title=\"MyVariant Red\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <MyComponent :argument=\"state.text\" color=\"red\" />\n      </template>\n      <template #controls=\"{ state }\">\n        <HstText v-model=\"state.text\" title=\"Content\" />\n      </template>\n    </Variant>\n    <Variant\n      title=\"MyVariant Blue\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <MyComponent :argument=\"state.text\" color=\"blue\" />\n      </template>\n      <template #controls=\"{ state }\">\n        <HstText v-model=\"state.text\" title=\"Content\" />\n      </template>\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Story with variants | Histoire",
    "url": "https://histoire.dev/examples/vue3/variant-stories.html#VPContent",
    "html": "Story with variants\n#\n\nThese patterns let you create several variants of your component to visualize several state of your component.\n\nIsolated\n#\n\nThis will display variants as separate pages that you can navigate into. This view will be the same as single stories, and you will be able to resize your components.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant title=\"MyVariant 1\">\n      <MyComponent argument=\"hello\" />\n    </Variant>\n    <Variant title=\"MyVariant 2\">\n      <MyComponent argument=\"world\" />\n    </Variant>\n  </Story>\n</template>\n\nGrid\n#\n\nThis will display variants in a grid for you to visualize all the variants in the same page. Though, you must fix the width (it can be a percentage).\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'grid', width: '200px' }\"\n  >\n    <Variant title=\"MyVariant 1\">\n      <MyComponent argument=\"hello\" />\n    </Variant>\n    <Variant title=\"MyVariant 2\">\n      <MyComponent argument=\"world\" />\n    </Variant>\n  </Story>\n</template>\n\nAuto generated grid\n#\n\nWhen you have a lot of variant to test, it can be easier to auto generated them with this pattern.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n\nconst arguments = [\"hello\", \"world\", \"etc\", \"...\"];\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'grid', width: '200px' }\"\n  >\n    <Variant\n      v-for=\"(argument, key) of arguments\"\n      :key=\"key\"\n      :title=\"'MyVariant ' + key\"\n    >\n      <MyComponent :argument=\"argument\" />\n    </Variant>\n  </Story>\n</template>\n\nAuto generated grid with props binding\n#\n\nWhen your variants have a lot of arguments, you can use this pattern.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n\nconst propsVariants = [\n  { argument: \"hello\", color: \"red\", count:4 },\n  { argument: \"world\", color: \"blue\", count:5 },\n  { argument: \"etc\", color: \"violet\", count:6 },\n];\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'grid', width: '200px' }\"\n  >\n    <Variant\n      v-for=\"(props, key) of propsVariants\"\n      :key=\"key\"\n      :title=\"'MyVariant ' + key\"\n    >\n      <MyComponent v-bind=\"props\" />\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Tailwind CSS example | Histoire",
    "url": "https://histoire.dev/examples/tailwind.html#VPContent",
    "html": "Tailwind CSS example\n#\n\nIn this example, we will see how to add Tailwind CSS to the stories.\n\nCSS file\n#\n\nMake sure your project has a style file with the Tailwind directives.\n\ncss\n/* src/tailwind.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nSetup file\n#\n\nHistoire allows us to execute a setup file automatically when rendering the stories. This is useful to add global CSS files. Learn more\n\njs\n// src/histoire-setup.ts\n\nimport './tailwind.css'\n\n\nWe need to tell Histoire to use this file in the configuration file. Learn more\n\njs\n// histoire.config.ts\n\nimport { defineConfig } from 'histoire'\n\nexport default defineConfig({\n  setupFile: '/src/histoire-setup.ts',\n})\n\n\nYou can now use Tailwind utility classes in your stories (or import components using them)!"
  },
  {
    "title": "Single stories | Histoire",
    "url": "https://histoire.dev/examples/vue3/single-stories.html#VPContent",
    "html": "Single stories\n#\n\nHere are some pattern examples to test your component without any variant. This is the simplest way to get you started.\n\nWithin an iframe\n#\n\nThis will display your component inside an iframe to be able to test the responsiveness correctly. The iframe is needed for CSS media queries to work properly.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <MyComponent />\n  </Story>\n</template>\n\nIntegrated\n#\n\nThis will integrate your component directly in the app. The advantage being that you can pass complex arguments (such as functions or recursive object), but responsiveness won't work for CSS media queries.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'single', iframe: false }\"\n  >\n    <MyComponent />\n  </Story>\n</template>\n"
  },
  {
    "title": "Lost Pixel visual regression testing | Histoire",
    "url": "https://histoire.dev/examples/visual-regression-testing/lost-pixel.html",
    "html": "Lost Pixel visual regression testing\n#\n\nLost Pixel is a modern open-source visual regression testing tool that allows you to run self-hosted visual regression tests. Lost Pixel Platofrm is for teams and is a cloud version of visual testing.\n\nSetting up self-hosted visual testing\n#\n\nLost Pixel has first-class Histoire support meaning that you don't need to do much to add visual tests to your app if you have your Histoire book ready!\n\nStart with installing lost-pixel by npm install lost-pixel and creating a lostpixel.config.js|ts file with following contents.\n\njavascript\nimport { CustomProjectConfig } from 'lost-pixel';\n\nexport const config: CustomProjectConfig = {\n  histoireShots: {\n    histoireUrl: './.histoire/dist',\n  },\n  generateOnly: true,\n  failOnDifference: true\n};\n\n\nBefore running visual tests you need to have your Histoire book built first.\n\nThis setup allows you to run visual tests locally. To test your stories run npx lost-pixel\n\nTo update the baselines run npx lost-pixel update.\n\nGitHub actions\n#\n\nTo run your tests on CI you can use lost-pixel action utility. If you are running on any other CI provider - lost-pixel is a docker image that is runnable on CI of your choice(only within GitHub currently though)\n\nyaml\non: [push]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version: 18.x\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build histoire\n        run: npm run story:build\n\n      - name: Lost Pixel\n        uses: lost-pixel/lost-pixel@v3.8.0\n\n\nTo update baselines locally run npx lost-pixel docker update, this will ensure that lost-pixel runs in docker and there are no OS differences in rendering between CI and local tests.\n\nLost Pixel Platform\n#\n\nIf you have self-hosted version of tests working it is not complicated to migrate to Lost Pixel Platform. Follow this guide to achieve that."
  },
  {
    "title": "Histoire Screenshot with Percy for visual regression testing | Histoire",
    "url": "https://histoire.dev/examples/visual-regression-testing/percy.html",
    "html": "Histoire Screenshot with Percy for visual regression testing\n#\n\nYou need the Percy CLI installed to be able to send snapshots to Percy.\n\nbash\npnpm add -D @histoire/plugin-percy\n\n\nAdd the plugin in histoire config:\n\njs\nimport { defineConfig } from 'histoire'\nimport { HstPercy } from '@histoire/plugin-percy'\n\nexport default defineConfig({\n  plugins: [\n    HstPercy({\n      // Options here\n    }),\n  ],\n})\n\n\nThen use the Percy CLI\n\nbash\n# Replace `story:build` with the script to build the stories if you changed it\npercy exec pnpm run story:build\n"
  },
  {
    "title": "Controlled stories | Histoire",
    "url": "https://histoire.dev/examples/vue3/controlled-stories.html",
    "html": "Controlled stories\n#\n\nThese patterns let you create custom controls to update your component\n\nSingle control\n#\n\nThis will display a control panel for the story.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyComponent from './MyComponent.vue'\n\nconst state = reactive({\n  text: \"Hello world\"\n})\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <MyComponent :argument=\"state.text\" />\n    <template #controls>\n      <HstText v-model=\"state.text\" title=\"Content\" />\n    </template>\n  </Story>\n</template>\n\nGlobal variant control\n#\n\nThis will display a control panel for all the variants.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyComponent from './MyComponent.vue'\n\nconst state = reactive({\n  text: \"Hello world\"\n})\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant title=\"MyVariant Red\">\n      <MyComponent :argument=\"state.text\" color=\"red\" />\n    </Variant>\n    <Variant title=\"MyVariant Blue\">\n      <MyComponent :argument=\"state.text\" color=\"blue\" />\n    </Variant>\n    <template #controls>\n      <HstText v-model=\"state.text\" title=\"Content\" />\n    </template>\n  </Story>\n</template>\n\nSpecific variant control\n#\n\nThis will display a control panel only for one variant.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyComponent from './MyComponent.vue'\n\nconst state = reactive({\n  text: \"Hello world\"\n})\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant title=\"MyVariant Red\">\n      <MyComponent :argument=\"state.text\" color=\"red\" />\n      <template #controls>\n        <HstText v-model=\"state.text\" title=\"Content\" />\n      </template>\n    </Variant>\n    <Variant title=\"MyVariant Blue\">\n      <MyComponent argument=\"hello\" color=\"blue\" />\n    </Variant>\n  </Story>\n</template>\n\nIsolated variant control\n#\n\nThis will isolate each variant so that you control only one variant at a time.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n\nfunction initState () {\n  return {\n    text: \"Hello world\"\n  }\n}\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant \n      title=\"MyVariant Red\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <MyComponent :argument=\"state.text\" color=\"red\" />\n      </template>\n      <template #controls=\"{ state }\">\n        <HstText v-model=\"state.text\" title=\"Content\" />\n      </template>\n    </Variant>\n    <Variant\n      title=\"MyVariant Blue\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <MyComponent :argument=\"state.text\" color=\"blue\" />\n      </template>\n      <template #controls=\"{ state }\">\n        <HstText v-model=\"state.text\" title=\"Content\" />\n      </template>\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Story with variants | Histoire",
    "url": "https://histoire.dev/examples/vue3/variant-stories.html",
    "html": "Story with variants\n#\n\nThese patterns let you create several variants of your component to visualize several state of your component.\n\nIsolated\n#\n\nThis will display variants as separate pages that you can navigate into. This view will be the same as single stories, and you will be able to resize your components.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <Variant title=\"MyVariant 1\">\n      <MyComponent argument=\"hello\" />\n    </Variant>\n    <Variant title=\"MyVariant 2\">\n      <MyComponent argument=\"world\" />\n    </Variant>\n  </Story>\n</template>\n\nGrid\n#\n\nThis will display variants in a grid for you to visualize all the variants in the same page. Though, you must fix the width (it can be a percentage).\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'grid', width: '200px' }\"\n  >\n    <Variant title=\"MyVariant 1\">\n      <MyComponent argument=\"hello\" />\n    </Variant>\n    <Variant title=\"MyVariant 2\">\n      <MyComponent argument=\"world\" />\n    </Variant>\n  </Story>\n</template>\n\nAuto generated grid\n#\n\nWhen you have a lot of variant to test, it can be easier to auto generated them with this pattern.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n\nconst arguments = [\"hello\", \"world\", \"etc\", \"...\"];\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'grid', width: '200px' }\"\n  >\n    <Variant\n      v-for=\"(argument, key) of arguments\"\n      :key=\"key\"\n      :title=\"'MyVariant ' + key\"\n    >\n      <MyComponent :argument=\"argument\" />\n    </Variant>\n  </Story>\n</template>\n\nAuto generated grid with props binding\n#\n\nWhen your variants have a lot of arguments, you can use this pattern.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n\nconst propsVariants = [\n  { argument: \"hello\", color: \"red\", count:4 },\n  { argument: \"world\", color: \"blue\", count:5 },\n  { argument: \"etc\", color: \"violet\", count:6 },\n];\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'grid', width: '200px' }\"\n  >\n    <Variant\n      v-for=\"(props, key) of propsVariants\"\n      :key=\"key\"\n      :title=\"'MyVariant ' + key\"\n    >\n      <MyComponent v-bind=\"props\" />\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Tailwind CSS example | Histoire",
    "url": "https://histoire.dev/examples/tailwind.html",
    "html": "Tailwind CSS example\n#\n\nIn this example, we will see how to add Tailwind CSS to the stories.\n\nCSS file\n#\n\nMake sure your project has a style file with the Tailwind directives.\n\ncss\n/* src/tailwind.css */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nSetup file\n#\n\nHistoire allows us to execute a setup file automatically when rendering the stories. This is useful to add global CSS files. Learn more\n\njs\n// src/histoire-setup.ts\n\nimport './tailwind.css'\n\n\nWe need to tell Histoire to use this file in the configuration file. Learn more\n\njs\n// histoire.config.ts\n\nimport { defineConfig } from 'histoire'\n\nexport default defineConfig({\n  setupFile: '/src/histoire-setup.ts',\n})\n\n\nYou can now use Tailwind utility classes in your stories (or import components using them)!"
  },
  {
    "title": "Single stories | Histoire",
    "url": "https://histoire.dev/examples/vue3/single-stories.html",
    "html": "Single stories\n#\n\nHere are some pattern examples to test your component without any variant. This is the simplest way to get you started.\n\nWithin an iframe\n#\n\nThis will display your component inside an iframe to be able to test the responsiveness correctly. The iframe is needed for CSS media queries to work properly.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story title=\"MyStory\">\n    <MyComponent />\n  </Story>\n</template>\n\nIntegrated\n#\n\nThis will integrate your component directly in the app. The advantage being that you can pass complex arguments (such as functions or recursive object), but responsiveness won't work for CSS media queries.\n\nvue\n<script lang=\"ts\" setup>\nimport MyComponent from './MyComponent.vue'\n</script>\n\n<template>\n  <Story\n    title=\"MyStory\"\n    :layout=\"{ type: 'single', iframe: false }\"\n  >\n    <MyComponent />\n  </Story>\n</template>\n"
  },
  {
    "title": "Documentation | Histoire",
    "url": "https://histoire.dev/guide/vue3/docs.html#VPContent",
    "html": "Documentation\n#\nMarkdown\n#\nCustom block\n#\n\nHistoire lets you write markdown documentation for your stories using Vue custom blocks. Add a docs tag in your story file:\n\nvue\n<template>\n  <!-- Your story goes here -->\n</template>\n\n<docs lang=\"md\">\n# My documentation\n\nCheckout this [cool video](https://www.youtube.com/watch?v=dQw4w9WgXcQ)!\n</docs>\n\nSibling markdown\n#\n\nTo add documentation to a story, you can also create a file with the same name next to it, with the .md extension.\n\nFor example, if your story is BaseButton.story.vue, create a BaseButton.story.md file.\n\nSibling markdown files are higher priority than custom blocks.\n\nStandalone page\n#\n\nIf you create a markdown file ending with .story.md that isn't related to a sibling story file, it will automatically create a virtual story that renders the markdown as a page.\n\nYou can add a frontmatter to the markdown to customize the virtual story with the following properties:\n\nid (reference)\ntitle (reference)\nicon (reference)\niconColor (reference)\ngroup (reference)\n\nExample Introduction.story.md file:\n\nmd\n---\ngroup: 'top'\nicon: 'carbon:bookmark'\n---\n\n# Welcome\n\nThis is a demo book using Vue 3.\n\n---\n\nLearn more about Histoire [here](https://histoire.dev/).\n\nLinks\n#\n\nYou can link to other stories using a relative path to the story file:\n\nmd\n- [Go to Story](./BaseButton.story.vue)\n- [Go to CodeGen > Slots](./CodeGen.story.vue?variantId=slots)\n- [Go to Markdown file](./MarkdownFile.story.md)\n\nSource code\n#\n\nBy default, Histoire will attempt to generate a copyable source code from the story, dynamically from the current state.\n\nCurrently automatic source code generation is only supported for:\n\nVue 3\n\nTo document a copyable source code manually you can use either the source prop or the source slot.\n\nvue\n<script lang=\"ts\" setup>\nfunction initState () {\n  return {\n    count: 0,\n  }\n}\n\nconst source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>\n\n<p>{{ count }}</p>\n\n<template #named=\"{ shown, hide }\">\n  <MyComponent\n    v-if=\"shown\"\n    :item=\"{ foo: 'bar' }\"\n    @close=\"hide()\"\n  />\n</template>`\n</script>\n\n<template>\n  <Story title=\"Hand-written source\">\n    <Variant\n      title=\"Source prop\"\n      :init-state=\"initState\"\n      :source=\"source\"\n    >\n      <template #default=\"{ state }\">\n        <h1>Toto</h1>\n\n        <input\n          v-model.number=\"state.count\"\n          type=\"number\"\n        >\n      </template>\n    </Variant>\n    <Variant\n      title=\"Source template\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <h1>Toto</h1>\n\n        <input\n          v-model.number=\"state.count\"\n          type=\"number\"\n        >\n      </template>\n\n      <template #source>\n        <textarea v-pre>\n          <h1>Toto</h1>\n\n          <input\n            v-model.number=\"count\"\n            type=\"number\"\n          >\n\n          <p>{{ count }}</p>\n\n          <template #named=\"{ shown, hide }\">\n            <MyComponent\n              v-if=\"shown\"\n              :item=\"{ foo: 'bar' }\"\n              @close=\"hide()\"\n            />\n          </template>\n        </textarea>\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nTIP\n\nYou should use a <textarea v-pre> element in the source slot to prevent Vue from compiling the template."
  },
  {
    "title": "Hierarchy | Histoire",
    "url": "https://histoire.dev/guide/vue3/hierarchy.html#VPContent",
    "html": "Hierarchy\n#\n\nYou can customize the story explorer tree.\n\nUsing the title\n#\n\nBy default, Histoire uses the title of your stories to create the hierarchy. If you want to put a story in a specific folder or subfolder, just write the path as the title of your Story.\n\nvue\n<template>\n  <Story title=\"Folder/Sub Folder/My story\" >\n    <!-- Your story goes here -->\n  </Story>\n</template>\n\nUsing the file path\n#\n\nIf you want to use the real path of your story files, you can change that in your Histoire configuration file.\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    file: 'path',\n  },\n})\n\nCustom logic\n#\n\nIf you want a custom hierarchy, you can define your own function that takes an object with the title and the path of your story as an argument, and returns an array of string being the path of your story in the app.\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    file: ({ title, path }) => title.split('/'), // equivalent to default behavior\n  },\n})\n\nSorting\n#\n\nBy default, files and stories are sorted by ascending order. But you might want to sort things differently, for example display some stories at the beginning. You can do so by providing a sorting function in your configuration file.\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    order: (a, b) => a.localeCompare(b), // equivalent to default behavior\n  },\n})\n\nGroups\n#\n\nSometimes, you might have additional organization needs for the stories. Besides folders, Histoire also provides groups, which are little different:\n\nexpanded by default\nonly root level\nmanual order\nindependant from the hierarchy defined thanks to tree.file (see above)\n\nYou can define groups in your configuration with the groups property. It's an array of group objects with the following properties:\n\ntitle: the title of the group (use an empty string to have an untoggable group)\nid (optional): the id of the group, useful to reference it using the Story group prop\ninclude (optional): function that takes a file object [1] and returns a boolean, true if the file should be included in the group.\n\n[1]: the file objects have the following properties:\n\ntitle: the title of the story\npath: the path of the story file\n\nThe stories are distributed in groups according to the following rules in this order:\n\ngroup prop of the <Story>\ninclude function of the groups, respecting the order in the groups array (a story may only appear in one group maximum)\n\nFiles not included in a group are always displayed after the last group.\n\nExample:\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    groups: [\n      {\n        id: 'top',\n        title: '', // No toggle\n      },\n      {\n        title: 'My Group',\n        include: file => /Code gen|Controls|Docs/.test(file.title),\n      },\n      {\n        title: 'Components',\n        include: file => !file.title.includes('Serialize'),\n      },\n      {\n        title: 'Others',\n        include: file => true,\n      },\n    ],\n  },\n})\n\n\nYou can use the group prop to reference a group in your stories using its id.\n\nvue\n<template>\n  <Story group=\"top\">\n    This is a demo book using Vue 3.\n  </Story>\n</template>\n"
  },
  {
    "title": "Wrapper | Histoire",
    "url": "https://histoire.dev/guide/vue3/wrapper.html#VPContent",
    "html": "Wrapper\n#\n\nA Wrapper allows you to render things around the displayed story/variant.\n\nIn your setup file, you can add wrapper components with addWrapper:\n\nts\nimport { defineSetupVue3 } from '@histoire/plugin-vue'\nimport WrapperGlobal from './histoire/GlobalWrapper.vue'\n\nexport const setupVue3 = defineSetupVue3(({ addWrapper }) => {\n  addWrapper(WrapperGlobal)\n})\n\n\nThe rendering will recursively occur in all the wrappers default slot.\n\nHere is an example for a wrapper component:\n\nvue\n<script lang=\"ts\" setup>\nimport { Story, Variant } from 'histoire'\n\nconst props = defineProps<{\n  story: Story\n  variant?: Variant\n}>()\n\nfunction hasWrapper () {\n  return props.story.meta?.wrapper !== false &&\n    props.variant?.meta?.wrapper !== false\n}\n</script>\n\n<template>\n  <div\n    class=\"global-wrapper\"\n    :style=\"hasWrapper() ? 'padding: 0.25rem; border: solid 1px rgba(0, 0, 0, 0.05);' : ''\"\n  >\n    <slot />\n  </div>\n</template>\n\n\nNow, all stories and variants will be rendered with a small padding and a border.\n\nIn the above example, we also use the meta prop to allow disabling the wrapper style:\n\nvue\n<template>\n  <Story>\n    <Variant title=\"With wrapper\">\n      🙀\n    </Variant>\n    <Variant\n      title=\"Without wrapper\"\n      :meta=\"{ wrapper: false }\"\n    >\n      😼\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "App setup | Histoire",
    "url": "https://histoire.dev/guide/vue3/app-setup.html#VPContent",
    "html": "App setup\n#\nGlobal setup\n#\n\nYou can define a setup function globally in your setup file defined by the setupFile option in the global configuration (learn more).\n\nFor Vue 3, it must be called setupVue3. Histoire provides an optional defineSetupVue3 helper to have better types in your IDE:\n\nts\nimport { createPinia } from 'pinia'\nimport { defineSetupVue3 } from '@histoire/plugin-vue'\n\nexport const setupVue3 = defineSetupVue3(({ app, story, variant }) => {\n  // Vue plugin\n  app.use(createPinia())\n\n  // Global component\n  app.component('GlobalComponent', MyGlobalComponent)\n\n  // Global property\n  app.config.globalProperties.$t = (key) => translate(key)\n\n  // Provide\n  app.provide('key', 'meow')\n})\n\n\nTIP\n\nYou can also import global CSS files or JS files in this setup file.\n\nLocal setup\n#\n\nInside each story, you can define a setupApp prop that will be called by Histoire allowing you to configure the sandbox application as well. It will not override the global setup function, but will be called after it. It works the same way with the same parameters.\n\nvue\n<script setup>\nimport InjectDemo from './InjectDemo.vue'\n\nfunction mySetupApp ({ app, story, variant }) {\n  app.provide('demo', 'meow')\n}\n</script>\n\n<template>\n  <Story title=\"Story setup\">\n    <Variant title=\"Global setup\">\n      <InjectDemo />\n    </Variant>\n\n    <Variant\n      title=\"Local setup\"\n      :setup-app=\"mySetupApp\"\n    >\n      <InjectDemo />\n    </Variant>\n  </Story>\n</template>\n\n\nYou can put the prop on the <Story> component too, so that <Variant> will have a default value for it. Redefining the prop on a <Variant> will override the function though.\n\nExamples\n#\nVue Router\n#\nvue\n<script setup>\nimport { createRouter, createMemoryHistory } from 'vue-router'\n\nfunction setupApp ({ app, story, variant }) {\n  // Router mock\n  app.use(createRouter({\n    history: createMemoryHistory(),\n    routes: [\n      { path: '/', name: 'home', component: { render: () => null } },\n    ],\n  }))\n}\n</script>\n\n<template>\n  <Story\n    title=\"Vue router example\"\n    :setup-app=\"setupApp\"\n  >\n    <pre>{{ $route }}</pre>\n  </Story>\n</template>\n\nPinia\n#\n\nIn global setup file:\n\nts\nimport { createPinia } from 'pinia'\nimport { defineSetupVue3 } from '@histoire/plugin-vue'\n\nexport const setupVue3 = defineSetupVue3(({ app, story, variant }) => {\n  // Vue plugin\n  app.use(createPinia())\n})\n\n\nIn component:\n\nvue\n<script setup>\nimport { useItemStore } from '../stores/item.js'\n\nconst itemStore = useItemStore()\n</script>\n\n<template>\n  <pre>{{ itemStore.items }}</pre>\n</template>\n\n\nIn story file:\n\nvue\n<script setup>\nimport MyItems from './MyItems.vue'\n</script>\n\n<template>\n  <Story\n    title=\"Pinia example\"\n  >\n    <MyItems />\n  </Story>\n</template>\n\nVuex\n#\nvue\n<script setup>\nimport { createStore } from 'vuex'\n\nfunction setupApp ({ app, story, variant }) {\n  // Store mock\n  app.use(createStore({\n    state: () => ({\n      hello: 'meow',\n    }),\n  }))\n}\n</script>\n\n<template>\n  <Story\n    title=\"Vuex example\"\n    :setup-app=\"setupApp\"\n  >\n    <pre>{{ $store.state }}</pre>\n  </Story>\n</template>\n"
  },
  {
    "title": "Events | Histoire",
    "url": "https://histoire.dev/guide/vue3/events.html#VPContent",
    "html": "Events\n#\n\nHistoire can display a list of events emitted from your story. To register new events, use the logEvent function from histoire/client.\n\nThe first parameter is the name of the event, and the second one is a data object you want to display when clicking on the event.\n\nvue\n<script lang=\"ts\" setup>\nimport EventButton from './EventButton.vue'\nimport { logEvent } from 'histoire/client'\n</script>\n\n<template>\n  <Story\n    title=\"events/EventButton\"\n  >\n    <EventButton @myEvent=\"logEvent('My event', $event)\" /><br>\n    <button @click=\"logEvent('Click', $event)\">\n      Click\n    </button>\n  </Story>\n</template>\n"
  },
  {
    "title": "State & Controls | Histoire",
    "url": "https://histoire.dev/guide/vue3/controls.html#VPContent",
    "html": "State & Controls\n#\n\nControls give you the ability to interact with your components arguments.\n\nDefining a state\n#\n\nThe first step is to define the state that will be shared to your story. Histoire will automatically synchronize the data or reactive data returned in your setup. Then you can proceed using your state as usual.\n\nExample with Option API:\n\nvue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport MyButton from './MyButton.vue'\n\nexport default defineComponent({\n  components: {\n    MyButton,\n  },\n\n  data () {\n    // Histoire will inspect and synchronize this\n    return {\n      state: {\n        disabled: false,\n        content: 'Hello world',\n      },\n      message: 'Meow!',\n    }\n  },\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <input v-model.number=\"message\">\n    </Variant>\n  </Story>\n</template>\n\n\nExample with Composition API:\n\nvue\n<script lang=\"ts\">\nimport { reactive, ref, defineComponent } from 'vue'\nimport MyButton from './MyButton.vue'\n\nexport default defineComponent({\n  components: {\n    MyButton,\n  },\n\n  setup () {\n    const state = reactive({\n      disabled: false,\n      content: 'Hello world',\n    })\n\n    const message = ref('Meow!')\n\n    // Histoire will inspect and synchronize this\n    return {\n      state,\n      message,\n    }\n  }\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <input v-model.number=\"message\">\n    </Variant>\n  </Story>\n</template>\n\n\nExample with Composition API (Script Setup):\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive, ref } from 'vue'\nimport MyButton from './MyButton.vue'\n\nconst state = reactive({\n  disabled: false,\n  content: 'Hello world',\n})\n\nconst message = ref('Meow!')\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <input v-model.number=\"message\">\n    </Variant>\n  </Story>\n</template>\n\n\nIt can also be useful to declare some data that isn't going to be reactive, for example some fixture data or configuration:\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyButton from './MyButton.vue'\n\n// Main reactive state of the stories\nconst state = reactive({\n  colorId: 'primary',\n})\n\n// Some fixture/configuration data\nconst colors = {\n  primary: '#f00',\n  secondary: '#0f0',\n  // ...\n}\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :color=\"colors[state.colorId]\">\n        {{ state.colorId }}\n      </MyButton>\n    </Variant>\n  </Story>\n</template>\n\nControls panel\n#\n\nTo create the control panel, Histoire provides a controls slot. You are free to render any element or components inside the slot.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyButton from './MyButton.vue'\n\nconst state = reactive({\n  disabled: false,\n  content: 'Hello world',\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <template #controls>\n        Content: <input type=\"text\" v-model=\"state.content\" />\n        Disabled: <input type=\"checkbox\" v-model=\"state.disabled\" />\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nYou can also share the same default controls for all variants by putting the slot directly under the <Story> component:\n\nvue\n<template>\n  <Story>\n    <template #controls>\n      Content: <input type=\"text\" v-model=\"state.content\" />\n      Disabled: <input type=\"checkbox\" v-model=\"state.disabled\" />\n    </template>\n\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n      <!-- Reusing controls -->\n    </Variant>\n\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n      <!-- Reusing controls -->\n    </Variant>\n  </Story>\n</template>\n\n\nA variant can then override the slot if needed.\n\nBuiltin controls\n#\n\nTo build a control panel a bit more easily, Histoire provides builtin controls with design that fits the rest of the UI.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyButton from './MyButton.vue'\n\nconst state = reactive({\n  disabled: false,\n  content: 'Hello world',\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <template #controls>\n        <HstText v-model=\"state.content\" title=\"Content\" />\n        <HstCheckbox v-model=\"state.disabled\" title=\"Disabled\" />\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nCheck out all the available controls in their book: controls.histoire.dev.\n\nInit state\n#\n\nAs an alternative to the above, you can pass an initState prop to the Story or Variant, which should be a function returning a state object. It's useful to have different states for variants in the same story and to be a bit more explicit at the expense of being more verbose.\n\nYou can then use the state slot props on the <Variant> slots to access the state.\n\nExample:\n\nvue\n<script lang=\"ts\" setup>\nfunction initState () {\n  return {\n    count: 0,\n    text: '',\n  }\n}\n\nfunction initState2 () {\n  return {\n    meow: {\n      foo: 'bar',\n    },\n  }\n}\n</script>\n\n<template>\n  <Story\n    title=\"State\"\n  >\n    <Variant\n      title=\"default\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <h1>State</h1>\n        <div>\n          <pre>{{ state }}</pre>\n          <input\n            v-model.number=\"state.count\"\n            type=\"number\"\n          >\n          <input\n            v-model=\"state.text\"\n          >\n        </div>\n      </template>\n\n      <template #controls=\"{ state }\">\n        <div class=\"controls\">\n          <button @click=\"state.count--\">\n            -1\n          </button>\n          <button @click=\"state.count++\">\n            +1\n          </button>\n          <span>{{ state.count }}</span>\n        </div>\n\n        <HstText\n          v-model=\"state.text\"\n          title=\"Text\"\n        />\n      </template>\n    </Variant>\n\n    <Variant\n      title=\"Nested state object\"\n      :init-state=\"initState2\"\n    >\n      <template #default=\"{ state }\">\n        <input v-model=\"state.meow.foo\">\n      </template>\n\n      <template #controls=\"{ state }\">\n        <HstText\n          v-model=\"state.meow.foo\"\n          title=\"meow.foo\"\n        />\n      </template>\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "How to write stories? | Histoire",
    "url": "https://histoire.dev/guide/vue3/stories.html#VPContent",
    "html": "How to write stories?\n#\n\nStories are vue files ending with .story.vue. You just need to use the <Story> tag at the root of your template.\n\nvue\n<!-- Meow.story.vue -->\n<template>\n  <Story>\n    🐱\n  </Story>\n</template>\n\n\nThe title of the story is provided with the (optional) title prop:\n\nvue\n<template>\n  <Story title=\"🐱 Meow\">\n    🐱\n  </Story>\n</template>\n\n\nYou can of course add <style> and/or <script> elements just like you would with any .vue file.\n\nFor example, you will usually import and use a component in your story:\n\nvue\n<!-- Meow.story.vue -->\n<script setup>\nimport Meow from './Meow.vue'\n</script>\n\n<template>\n  <Story>\n    <Meow/>\n  </Story>\n</template>\n\nVariants\n#\n\nStories can have different variants representing the same component. You can define variants using the <Variant> tag. Similar to the story, you can provide a title to your variant with the title prop.\n\nvue\n<template>\n  <Story title=\"Cars\">\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\nLayout\n#\n\nYou can change the layout of the variant by using the layout prop with an object. The type property is required to specify which layout to use.\n\nSingle layout\n#\n\nThis is the default layout, displaying one variant at a time. The default behavior is to isolate the story with an iframe.\n\nAdditional layout properties:\n\niframe: (default: true) enables the iframe, useful when your CSS has media queries for responsive design.\nvue\n<template>\n  <Story\n    title=\"Cars\"\n    :layout=\"{ type: 'single', iframe: true }\"\n  >\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\nGrid layout\n#\n\nDisplay all the variants in a grid.\n\nAdditional layout properties:\n\nwidth: Column size. Can be number (pixels) or string (like '100%').\nvue\n<template>\n  <Story\n    title=\"Cars\"\n    :layout=\"{ type: 'grid', width: 200 }\"\n  >\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Hierarchy | Histoire",
    "url": "https://histoire.dev/guide/vue3/hierarchy.html",
    "html": "Hierarchy\n#\n\nYou can customize the story explorer tree.\n\nUsing the title\n#\n\nBy default, Histoire uses the title of your stories to create the hierarchy. If you want to put a story in a specific folder or subfolder, just write the path as the title of your Story.\n\nvue\n<template>\n  <Story title=\"Folder/Sub Folder/My story\" >\n    <!-- Your story goes here -->\n  </Story>\n</template>\n\nUsing the file path\n#\n\nIf you want to use the real path of your story files, you can change that in your Histoire configuration file.\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    file: 'path',\n  },\n})\n\nCustom logic\n#\n\nIf you want a custom hierarchy, you can define your own function that takes an object with the title and the path of your story as an argument, and returns an array of string being the path of your story in the app.\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    file: ({ title, path }) => title.split('/'), // equivalent to default behavior\n  },\n})\n\nSorting\n#\n\nBy default, files and stories are sorted by ascending order. But you might want to sort things differently, for example display some stories at the beginning. You can do so by providing a sorting function in your configuration file.\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    order: (a, b) => a.localeCompare(b), // equivalent to default behavior\n  },\n})\n\nGroups\n#\n\nSometimes, you might have additional organization needs for the stories. Besides folders, Histoire also provides groups, which are little different:\n\nexpanded by default\nonly root level\nmanual order\nindependant from the hierarchy defined thanks to tree.file (see above)\n\nYou can define groups in your configuration with the groups property. It's an array of group objects with the following properties:\n\ntitle: the title of the group (use an empty string to have an untoggable group)\nid (optional): the id of the group, useful to reference it using the Story group prop\ninclude (optional): function that takes a file object [1] and returns a boolean, true if the file should be included in the group.\n\n[1]: the file objects have the following properties:\n\ntitle: the title of the story\npath: the path of the story file\n\nThe stories are distributed in groups according to the following rules in this order:\n\ngroup prop of the <Story>\ninclude function of the groups, respecting the order in the groups array (a story may only appear in one group maximum)\n\nFiles not included in a group are always displayed after the last group.\n\nExample:\n\nts\n// histoire.config.ts\n\nexport default defineConfig({ \n  tree: {\n    groups: [\n      {\n        id: 'top',\n        title: '', // No toggle\n      },\n      {\n        title: 'My Group',\n        include: file => /Code gen|Controls|Docs/.test(file.title),\n      },\n      {\n        title: 'Components',\n        include: file => !file.title.includes('Serialize'),\n      },\n      {\n        title: 'Others',\n        include: file => true,\n      },\n    ],\n  },\n})\n\n\nYou can use the group prop to reference a group in your stories using its id.\n\nvue\n<template>\n  <Story group=\"top\">\n    This is a demo book using Vue 3.\n  </Story>\n</template>\n"
  },
  {
    "title": "Documentation | Histoire",
    "url": "https://histoire.dev/guide/vue3/docs.html",
    "html": "Documentation\n#\nMarkdown\n#\nCustom block\n#\n\nHistoire lets you write markdown documentation for your stories using Vue custom blocks. Add a docs tag in your story file:\n\nvue\n<template>\n  <!-- Your story goes here -->\n</template>\n\n<docs lang=\"md\">\n# My documentation\n\nCheckout this [cool video](https://www.youtube.com/watch?v=dQw4w9WgXcQ)!\n</docs>\n\nSibling markdown\n#\n\nTo add documentation to a story, you can also create a file with the same name next to it, with the .md extension.\n\nFor example, if your story is BaseButton.story.vue, create a BaseButton.story.md file.\n\nSibling markdown files are higher priority than custom blocks.\n\nStandalone page\n#\n\nIf you create a markdown file ending with .story.md that isn't related to a sibling story file, it will automatically create a virtual story that renders the markdown as a page.\n\nYou can add a frontmatter to the markdown to customize the virtual story with the following properties:\n\nid (reference)\ntitle (reference)\nicon (reference)\niconColor (reference)\ngroup (reference)\n\nExample Introduction.story.md file:\n\nmd\n---\ngroup: 'top'\nicon: 'carbon:bookmark'\n---\n\n# Welcome\n\nThis is a demo book using Vue 3.\n\n---\n\nLearn more about Histoire [here](https://histoire.dev/).\n\nLinks\n#\n\nYou can link to other stories using a relative path to the story file:\n\nmd\n- [Go to Story](./BaseButton.story.vue)\n- [Go to CodeGen > Slots](./CodeGen.story.vue?variantId=slots)\n- [Go to Markdown file](./MarkdownFile.story.md)\n\nSource code\n#\n\nBy default, Histoire will attempt to generate a copyable source code from the story, dynamically from the current state.\n\nCurrently automatic source code generation is only supported for:\n\nVue 3\n\nTo document a copyable source code manually you can use either the source prop or the source slot.\n\nvue\n<script lang=\"ts\" setup>\nfunction initState () {\n  return {\n    count: 0,\n  }\n}\n\nconst source = `<h1>Toto</h1>\n\n<input\n  v-model.number=\"count\"\n  type=\"number\"\n>\n\n<p>{{ count }}</p>\n\n<template #named=\"{ shown, hide }\">\n  <MyComponent\n    v-if=\"shown\"\n    :item=\"{ foo: 'bar' }\"\n    @close=\"hide()\"\n  />\n</template>`\n</script>\n\n<template>\n  <Story title=\"Hand-written source\">\n    <Variant\n      title=\"Source prop\"\n      :init-state=\"initState\"\n      :source=\"source\"\n    >\n      <template #default=\"{ state }\">\n        <h1>Toto</h1>\n\n        <input\n          v-model.number=\"state.count\"\n          type=\"number\"\n        >\n      </template>\n    </Variant>\n    <Variant\n      title=\"Source template\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <h1>Toto</h1>\n\n        <input\n          v-model.number=\"state.count\"\n          type=\"number\"\n        >\n      </template>\n\n      <template #source>\n        <textarea v-pre>\n          <h1>Toto</h1>\n\n          <input\n            v-model.number=\"count\"\n            type=\"number\"\n          >\n\n          <p>{{ count }}</p>\n\n          <template #named=\"{ shown, hide }\">\n            <MyComponent\n              v-if=\"shown\"\n              :item=\"{ foo: 'bar' }\"\n              @close=\"hide()\"\n            />\n          </template>\n        </textarea>\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nTIP\n\nYou should use a <textarea v-pre> element in the source slot to prevent Vue from compiling the template."
  },
  {
    "title": "Wrapper | Histoire",
    "url": "https://histoire.dev/guide/vue3/wrapper.html",
    "html": "Wrapper\n#\n\nA Wrapper allows you to render things around the displayed story/variant.\n\nIn your setup file, you can add wrapper components with addWrapper:\n\nts\nimport { defineSetupVue3 } from '@histoire/plugin-vue'\nimport WrapperGlobal from './histoire/GlobalWrapper.vue'\n\nexport const setupVue3 = defineSetupVue3(({ addWrapper }) => {\n  addWrapper(WrapperGlobal)\n})\n\n\nThe rendering will recursively occur in all the wrappers default slot.\n\nHere is an example for a wrapper component:\n\nvue\n<script lang=\"ts\" setup>\nimport { Story, Variant } from 'histoire'\n\nconst props = defineProps<{\n  story: Story\n  variant?: Variant\n}>()\n\nfunction hasWrapper () {\n  return props.story.meta?.wrapper !== false &&\n    props.variant?.meta?.wrapper !== false\n}\n</script>\n\n<template>\n  <div\n    class=\"global-wrapper\"\n    :style=\"hasWrapper() ? 'padding: 0.25rem; border: solid 1px rgba(0, 0, 0, 0.05);' : ''\"\n  >\n    <slot />\n  </div>\n</template>\n\n\nNow, all stories and variants will be rendered with a small padding and a border.\n\nIn the above example, we also use the meta prop to allow disabling the wrapper style:\n\nvue\n<template>\n  <Story>\n    <Variant title=\"With wrapper\">\n      🙀\n    </Variant>\n    <Variant\n      title=\"Without wrapper\"\n      :meta=\"{ wrapper: false }\"\n    >\n      😼\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "App setup | Histoire",
    "url": "https://histoire.dev/guide/vue3/app-setup.html",
    "html": "App setup\n#\nGlobal setup\n#\n\nYou can define a setup function globally in your setup file defined by the setupFile option in the global configuration (learn more).\n\nFor Vue 3, it must be called setupVue3. Histoire provides an optional defineSetupVue3 helper to have better types in your IDE:\n\nts\nimport { createPinia } from 'pinia'\nimport { defineSetupVue3 } from '@histoire/plugin-vue'\n\nexport const setupVue3 = defineSetupVue3(({ app, story, variant }) => {\n  // Vue plugin\n  app.use(createPinia())\n\n  // Global component\n  app.component('GlobalComponent', MyGlobalComponent)\n\n  // Global property\n  app.config.globalProperties.$t = (key) => translate(key)\n\n  // Provide\n  app.provide('key', 'meow')\n})\n\n\nTIP\n\nYou can also import global CSS files or JS files in this setup file.\n\nLocal setup\n#\n\nInside each story, you can define a setupApp prop that will be called by Histoire allowing you to configure the sandbox application as well. It will not override the global setup function, but will be called after it. It works the same way with the same parameters.\n\nvue\n<script setup>\nimport InjectDemo from './InjectDemo.vue'\n\nfunction mySetupApp ({ app, story, variant }) {\n  app.provide('demo', 'meow')\n}\n</script>\n\n<template>\n  <Story title=\"Story setup\">\n    <Variant title=\"Global setup\">\n      <InjectDemo />\n    </Variant>\n\n    <Variant\n      title=\"Local setup\"\n      :setup-app=\"mySetupApp\"\n    >\n      <InjectDemo />\n    </Variant>\n  </Story>\n</template>\n\n\nYou can put the prop on the <Story> component too, so that <Variant> will have a default value for it. Redefining the prop on a <Variant> will override the function though.\n\nExamples\n#\nVue Router\n#\nvue\n<script setup>\nimport { createRouter, createMemoryHistory } from 'vue-router'\n\nfunction setupApp ({ app, story, variant }) {\n  // Router mock\n  app.use(createRouter({\n    history: createMemoryHistory(),\n    routes: [\n      { path: '/', name: 'home', component: { render: () => null } },\n    ],\n  }))\n}\n</script>\n\n<template>\n  <Story\n    title=\"Vue router example\"\n    :setup-app=\"setupApp\"\n  >\n    <pre>{{ $route }}</pre>\n  </Story>\n</template>\n\nPinia\n#\n\nIn global setup file:\n\nts\nimport { createPinia } from 'pinia'\nimport { defineSetupVue3 } from '@histoire/plugin-vue'\n\nexport const setupVue3 = defineSetupVue3(({ app, story, variant }) => {\n  // Vue plugin\n  app.use(createPinia())\n})\n\n\nIn component:\n\nvue\n<script setup>\nimport { useItemStore } from '../stores/item.js'\n\nconst itemStore = useItemStore()\n</script>\n\n<template>\n  <pre>{{ itemStore.items }}</pre>\n</template>\n\n\nIn story file:\n\nvue\n<script setup>\nimport MyItems from './MyItems.vue'\n</script>\n\n<template>\n  <Story\n    title=\"Pinia example\"\n  >\n    <MyItems />\n  </Story>\n</template>\n\nVuex\n#\nvue\n<script setup>\nimport { createStore } from 'vuex'\n\nfunction setupApp ({ app, story, variant }) {\n  // Store mock\n  app.use(createStore({\n    state: () => ({\n      hello: 'meow',\n    }),\n  }))\n}\n</script>\n\n<template>\n  <Story\n    title=\"Vuex example\"\n    :setup-app=\"setupApp\"\n  >\n    <pre>{{ $store.state }}</pre>\n  </Story>\n</template>\n"
  },
  {
    "title": "Events | Histoire",
    "url": "https://histoire.dev/guide/vue3/events.html",
    "html": "Events\n#\n\nHistoire can display a list of events emitted from your story. To register new events, use the logEvent function from histoire/client.\n\nThe first parameter is the name of the event, and the second one is a data object you want to display when clicking on the event.\n\nvue\n<script lang=\"ts\" setup>\nimport EventButton from './EventButton.vue'\nimport { logEvent } from 'histoire/client'\n</script>\n\n<template>\n  <Story\n    title=\"events/EventButton\"\n  >\n    <EventButton @myEvent=\"logEvent('My event', $event)\" /><br>\n    <button @click=\"logEvent('Click', $event)\">\n      Click\n    </button>\n  </Story>\n</template>\n"
  },
  {
    "title": "State & Controls | Histoire",
    "url": "https://histoire.dev/guide/vue3/controls.html",
    "html": "State & Controls\n#\n\nControls give you the ability to interact with your components arguments.\n\nDefining a state\n#\n\nThe first step is to define the state that will be shared to your story. Histoire will automatically synchronize the data or reactive data returned in your setup. Then you can proceed using your state as usual.\n\nExample with Option API:\n\nvue\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport MyButton from './MyButton.vue'\n\nexport default defineComponent({\n  components: {\n    MyButton,\n  },\n\n  data () {\n    // Histoire will inspect and synchronize this\n    return {\n      state: {\n        disabled: false,\n        content: 'Hello world',\n      },\n      message: 'Meow!',\n    }\n  },\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <input v-model.number=\"message\">\n    </Variant>\n  </Story>\n</template>\n\n\nExample with Composition API:\n\nvue\n<script lang=\"ts\">\nimport { reactive, ref, defineComponent } from 'vue'\nimport MyButton from './MyButton.vue'\n\nexport default defineComponent({\n  components: {\n    MyButton,\n  },\n\n  setup () {\n    const state = reactive({\n      disabled: false,\n      content: 'Hello world',\n    })\n\n    const message = ref('Meow!')\n\n    // Histoire will inspect and synchronize this\n    return {\n      state,\n      message,\n    }\n  }\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <input v-model.number=\"message\">\n    </Variant>\n  </Story>\n</template>\n\n\nExample with Composition API (Script Setup):\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive, ref } from 'vue'\nimport MyButton from './MyButton.vue'\n\nconst state = reactive({\n  disabled: false,\n  content: 'Hello world',\n})\n\nconst message = ref('Meow!')\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <input v-model.number=\"message\">\n    </Variant>\n  </Story>\n</template>\n\n\nIt can also be useful to declare some data that isn't going to be reactive, for example some fixture data or configuration:\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyButton from './MyButton.vue'\n\n// Main reactive state of the stories\nconst state = reactive({\n  colorId: 'primary',\n})\n\n// Some fixture/configuration data\nconst colors = {\n  primary: '#f00',\n  secondary: '#0f0',\n  // ...\n}\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :color=\"colors[state.colorId]\">\n        {{ state.colorId }}\n      </MyButton>\n    </Variant>\n  </Story>\n</template>\n\nControls panel\n#\n\nTo create the control panel, Histoire provides a controls slot. You are free to render any element or components inside the slot.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyButton from './MyButton.vue'\n\nconst state = reactive({\n  disabled: false,\n  content: 'Hello world',\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <template #controls>\n        Content: <input type=\"text\" v-model=\"state.content\" />\n        Disabled: <input type=\"checkbox\" v-model=\"state.disabled\" />\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nYou can also share the same default controls for all variants by putting the slot directly under the <Story> component:\n\nvue\n<template>\n  <Story>\n    <template #controls>\n      Content: <input type=\"text\" v-model=\"state.content\" />\n      Disabled: <input type=\"checkbox\" v-model=\"state.disabled\" />\n    </template>\n\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n      <!-- Reusing controls -->\n    </Variant>\n\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n      <!-- Reusing controls -->\n    </Variant>\n  </Story>\n</template>\n\n\nA variant can then override the slot if needed.\n\nBuiltin controls\n#\n\nTo build a control panel a bit more easily, Histoire provides builtin controls with design that fits the rest of the UI.\n\nvue\n<script lang=\"ts\" setup>\nimport { reactive } from 'vue'\nimport MyButton from './MyButton.vue'\n\nconst state = reactive({\n  disabled: false,\n  content: 'Hello world',\n})\n</script>\n\n<template>\n  <Story>\n    <Variant>\n      <MyButton :disabled=\"state.disabled\">\n        {{ state.content }}\n      </MyButton>\n\n      <template #controls>\n        <HstText v-model=\"state.content\" title=\"Content\" />\n        <HstCheckbox v-model=\"state.disabled\" title=\"Disabled\" />\n      </template>\n    </Variant>\n  </Story>\n</template>\n\n\nCheck out all the available controls in their book: controls.histoire.dev.\n\nInit state\n#\n\nAs an alternative to the above, you can pass an initState prop to the Story or Variant, which should be a function returning a state object. It's useful to have different states for variants in the same story and to be a bit more explicit at the expense of being more verbose.\n\nYou can then use the state slot props on the <Variant> slots to access the state.\n\nExample:\n\nvue\n<script lang=\"ts\" setup>\nfunction initState () {\n  return {\n    count: 0,\n    text: '',\n  }\n}\n\nfunction initState2 () {\n  return {\n    meow: {\n      foo: 'bar',\n    },\n  }\n}\n</script>\n\n<template>\n  <Story\n    title=\"State\"\n  >\n    <Variant\n      title=\"default\"\n      :init-state=\"initState\"\n    >\n      <template #default=\"{ state }\">\n        <h1>State</h1>\n        <div>\n          <pre>{{ state }}</pre>\n          <input\n            v-model.number=\"state.count\"\n            type=\"number\"\n          >\n          <input\n            v-model=\"state.text\"\n          >\n        </div>\n      </template>\n\n      <template #controls=\"{ state }\">\n        <div class=\"controls\">\n          <button @click=\"state.count--\">\n            -1\n          </button>\n          <button @click=\"state.count++\">\n            +1\n          </button>\n          <span>{{ state.count }}</span>\n        </div>\n\n        <HstText\n          v-model=\"state.text\"\n          title=\"Text\"\n        />\n      </template>\n    </Variant>\n\n    <Variant\n      title=\"Nested state object\"\n      :init-state=\"initState2\"\n    >\n      <template #default=\"{ state }\">\n        <input v-model=\"state.meow.foo\">\n      </template>\n\n      <template #controls=\"{ state }\">\n        <HstText\n          v-model=\"state.meow.foo\"\n          title=\"meow.foo\"\n        />\n      </template>\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "How to write stories? | Histoire",
    "url": "https://histoire.dev/guide/vue3/stories.html",
    "html": "How to write stories?\n#\n\nStories are vue files ending with .story.vue. You just need to use the <Story> tag at the root of your template.\n\nvue\n<!-- Meow.story.vue -->\n<template>\n  <Story>\n    🐱\n  </Story>\n</template>\n\n\nThe title of the story is provided with the (optional) title prop:\n\nvue\n<template>\n  <Story title=\"🐱 Meow\">\n    🐱\n  </Story>\n</template>\n\n\nYou can of course add <style> and/or <script> elements just like you would with any .vue file.\n\nFor example, you will usually import and use a component in your story:\n\nvue\n<!-- Meow.story.vue -->\n<script setup>\nimport Meow from './Meow.vue'\n</script>\n\n<template>\n  <Story>\n    <Meow/>\n  </Story>\n</template>\n\nVariants\n#\n\nStories can have different variants representing the same component. You can define variants using the <Variant> tag. Similar to the story, you can provide a title to your variant with the title prop.\n\nvue\n<template>\n  <Story title=\"Cars\">\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\nLayout\n#\n\nYou can change the layout of the variant by using the layout prop with an object. The type property is required to specify which layout to use.\n\nSingle layout\n#\n\nThis is the default layout, displaying one variant at a time. The default behavior is to isolate the story with an iframe.\n\nAdditional layout properties:\n\niframe: (default: true) enables the iframe, useful when your CSS has media queries for responsive design.\nvue\n<template>\n  <Story\n    title=\"Cars\"\n    :layout=\"{ type: 'single', iframe: true }\"\n  >\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n\nGrid layout\n#\n\nDisplay all the variants in a grid.\n\nAdditional layout properties:\n\nwidth: Column size. Can be number (pixels) or string (like '100%').\nvue\n<template>\n  <Story\n    title=\"Cars\"\n    :layout=\"{ type: 'grid', width: 200 }\"\n  >\n    <Variant title=\"default\">\n      🚗\n    </Variant>\n    <Variant title=\"Fast\">\n      🏎️\n    </Variant>\n    <Variant title=\"Slow\">\n      🚜\n    </Variant>\n  </Story>\n</template>\n"
  },
  {
    "title": "Getting started with Histoire | Histoire",
    "url": "https://histoire.dev/guide/vue3/getting-started.html",
    "html": "Getting started with Histoire\n#\nOverview\n#\n\nHistoire is the French word for \"Story\" and is pronounced /is.twaʁ/, like \"is·twar\" \n\nHistoire is a tool to generate stories applications (or \"books\").\n\nLearn more about Histoire here »\n\nOnline demo\nTry it in a live editor\nSponsors\n#\n\nHistoire is an Open-Source project supported by our sponsors - thank you!\n\n💚\nBecome a sponsor\nSee our sponsors »\nInstallation\n#\n\nInstall the histoire and @histoire/plugin-vue packages into your project:\n\nshell\npnpm i -D histoire @histoire/plugin-vue\n# OR\nnpm i -D histoire @histoire/plugin-vue\n# OR\nyarn add -D histoire @histoire/plugin-vue\n\n\nCreate an histoire.config.js or histoire.config.ts file in your project root to enable the Vue plugin:\n\nts\nimport { defineConfig } from 'histoire'\nimport { HstVue } from '@histoire/plugin-vue'\n\nexport default defineConfig({\n  plugins: [\n    HstVue(),\n  ],\n})\n\nCommand Line Interface\n#\n\nHistoire provides the following commands:\n\nhistoire dev: starts a development server with hot-reload\nhistoire build: builds the app for production\nhistoire preview: starts an HTTP server that serves the built app\n\nYou can add these to your package.json like this:\n\njson\n{\n  \"scripts\": {\n    \"story:dev\": \"histoire dev\",\n    \"story:build\": \"histoire build\",\n    \"story:preview\": \"histoire preview\"\n  }\n}\n\n\nAnd then run them with npm run story:dev or npm run story:build.\n\nYou can specify additional CLI options like --port. For a full list of CLI options, run npx histoire --help in your project.\n\nTypeScript\n#\n\nTo enable the global components types in your project, create an env.d.ts file at the root of your project if it doesn't already exist.\n\nts\n/// <reference types=\"@histoire/plugin-vue/components\" />\n\n\nAnd add it in the include field of your tsconfig.json.\n\nExample:\n\njson\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",\n    \"module\": \"esnext\",\n    \"lib\": [\"esnext\"],\n    \"moduleResolution\": \"node\",\n    \"esModuleInterop\": true,\n    \"strict\": true,\n    \"strictNullChecks\": true,\n    \"resolveJsonModule\": true,\n    \"jsx\": \"preserve\"\n  },\n  \"include\": [\n    \"env.d.ts\",\n    \"src/**/*\",\n    \"src/**/*.vue\"\n  ]\n}\n\nNuxt\n#\nTry it in a live editor\n\nHistoire supports Nuxt 3 with the @histoire/plugin-nuxt package.\n\nbash\npnpm add -D @histoire/plugin-nuxt\n\n\nAdd the plugin in histoire config:\n\njs\nimport { defineConfig } from 'histoire'\nimport { HstVue } from '@histoire/plugin-vue'\nimport { HstNuxt } from '@histoire/plugin-nuxt'\n\nexport default defineConfig({\n  plugins: [\n    HstVue(),\n    HstNuxt(),\n  ],\n})\n\nConfiguration\n#\n\nLearn more about configuring Histoire here.\n\nCommunity\n#\n\nIf you have questions or need help, reach out to the community at Discord and GitHub Discussions."
  }
]
