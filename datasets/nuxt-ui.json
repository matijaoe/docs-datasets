[
  {
    "title": "Header - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/header/header",
    "html": "Pro\nComponents\nHeader\nHeader\nGitHub\n\nA responsive and sticky <header> component.\n\nUsage\n\nUse the links prop to display a list of links in the center of the header. Those links will transform into a styled Popover if they have children. You can also use the #left, #center and #right slots to customize it further.\n\nBy default, a link labeled Nuxt UI Pro that goes to the / route will be displayed on the left. You can change the link by using the to prop and use the #logo slot to put your own logo. If you want to completely override this, use the #left slot.\n\nDocumentation\nPro\nReleases\n<script setup lang=\"ts\">\n\nimport type { NavItem } from '@nuxt/content/dist/runtime/types'\n\n\n\nconst navigation = inject<Ref<NavItem[]>>('navigation')\n\n\n\nconst links = [{\n\n  label: 'Documentation',\n\n  icon: 'i-heroicons-book-open',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Pro',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  to: '/pro'\n\n}, {\n\n  label: 'Releases',\n\n  icon: 'i-heroicons-rocket-launch',\n\n  to: 'https://github.com/nuxt/ui/releases',\n\n  target: '_blank'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UHeader :links=\"links\">\n\n    <template #logo>\n\n      <Logo class=\"w-auto h-6\" />\n\n    </template>\n\n\n\n    <template #right>\n\n      <UDocsSearchButton :label=\"null\" />\n\n\n\n      <UColorModeButton />\n\n\n\n      <UButton to=\"https://github.com/nuxt/ui\" target=\"_blank\" icon=\"i-simple-icons-github\" color=\"gray\" variant=\"ghost\" />\n\n    </template>\n\n\n\n    <template #panel>\n\n      <UNavigationTree :links=\"mapContentNavigation(navigation)\" />\n\n    </template>\n\n  </UHeader>\n\n</template>\n\n\nThe links prop will be displayed in the center of the header using the HeaderLinks component.\n\nYou can override this by using the #center slot, for example you could put the DocsSearchButton component there, it will fit perfectly.\n\n<template>\n\n  <UHeader>\n\n    <template #center>\n\n      <UDocsSearchButton />\n\n    </template>\n\n  </UHeader>\n\n</template>\n\n\nOn mobile, the links in the #center slot will be hidden and a hamburger menu will be displayed instead.\n\nIf you've overriden the #center slot, it's up to you to add the hidden lg:flex classes.\n\nTo customize the panel that opens when clicking on the hamburger menu, use the #panel slot. You could put the NavigationTree component and/or the AsideLinks components there for example, they will fit perfectly too.\n\n<template>\n\n  <UHeader>\n\n    <template #panel>\n\n      <UAsideLinks :links=\"links\" />\n\n\n\n      <UNavigationTree :links=\"mapContentNavigation(navigation)\" />\n\n    </template>\n\n  </UHeader>\n\n</template>\n\nTake a look at the mobile version of this documentation to see how it looks like.\nSlots\ntop\n{}\nleft\n{}\nlogo\n{}\ncenter\n{}\nright\n{}\npanel-button\n{ open: any; }\nbottom\n{}\npanel\n{}\nProps\nui\n{}\n{}\nto\nstring\n\"/\"\nlinks\nLink[]\n[]\nShow properties\ntitle\nstring\nundefined\n\nContent\n\nLearn how to build your app with @nuxt/content module.\n\nHeaderLinks\n\nA list of links displayed in the Header."
  },
  {
    "title": "AsideLinks - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/aside/aside-links",
    "html": "Pro\nComponents\nAside\nAsideLinks\nLink\nGitHub\n\nA list of links displayed in the Aside.\n\nThis component is used internally by the Aside, it's unlikely you'll need to use it directly.\nUsage\nDocumentation\nPlayground\nRoadmap\nPro\nReleases\n<script setup>\n\nconst links = [{\n\n  label: 'Documentation',\n\n  icon: 'i-heroicons-book-open-solid',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Playground',\n\n  icon: 'i-simple-icons-stackblitz',\n\n  to: '/playground'\n\n}, {\n\n  label: 'Roadmap',\n\n  icon: 'i-heroicons-beaker',\n\n  to: '/roadmap'\n\n}, {\n\n  label: 'Pro',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  to: '/pro'\n\n}, {\n\n  label: 'Releases',\n\n  icon: 'i-heroicons-rocket-launch',\n\n  to: 'https://github.com/nuxt/ui/releases',\n\n  target: '_blank'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UAsideLinks :links=\"links\" />\n\n</template>\n\nProps\nui\nany\nlinks\nLink[]\nShow properties\n\nAside\n\nA sticky <aside> with customizable slots and anchors.\n\nNavigationTree\n\nA ready to use links tree to navigate between pages."
  },
  {
    "title": "Aside - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/aside/aside",
    "html": "Pro\nComponents\nAside\nAside\nGitHub\n\nA sticky <aside> with customizable slots and anchors.\n\nUsage\n\nThe Aside component will instantiate a sticky <aside> element, displayed only after the lg breakpoint with a min-height based on the --header-height variable.\n\nUse the links prop to display a list of links at the top of the Aside and the #top or #bottom slots to display content above or below the links.\n\nSearch...\nK\nDocumentation\nPlayground\nRoadmap\nPro\nReleases\nLearn how to contribute\n<script setup>\n\nconst links = [{\n\n  label: 'Documentation',\n\n  icon: 'i-heroicons-book-open',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Playground',\n\n  icon: 'i-simple-icons-stackblitz',\n\n  to: '/playground'\n\n}, {\n\n  label: 'Roadmap',\n\n  icon: 'i-heroicons-academic-cap',\n\n  to: '/roadmap'\n\n}, {\n\n  label: 'Pro',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  to: '/pro'\n\n}, {\n\n  label: 'Releases',\n\n  icon: 'i-heroicons-rocket-launch',\n\n  to: 'https://github.com/nuxt/ui/releases',\n\n  target: '_blank'\n\n}]\n\n\n\nconst pageLinks = [{\n\n  icon: 'i-heroicons-heart',\n\n  label: 'Learn how to contribute',\n\n  to: '/getting-started/contributing',\n\n  target: '_blank'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UAside :links=\"links\">\n\n    <template #top>\n\n      <UDocsSearchButton />\n\n    </template>\n\n\n\n    <Placeholder class=\"h-60\" />\n\n\n\n    <template #bottom>\n\n      <UDivider type=\"dashed\" class=\"my-6\" />\n\n\n\n      <UPageLinks :links=\"pageLinks\" />\n\n    </template>\n\n  </UAside>\n\n</template>\n\n\nYou'll usually use this component in the #left slot of a Page with a NavigationTree inside.\n\nlayouts/docs.vue\n<template>\n\n  <UContainer>\n\n    <UPage>\n\n      <template #left>\n\n        <UAside :links=\"links\">\n\n          <UNavigationTree :links=\"navigationLinks\" default-open :multiple=\"false\" />\n\n        </UAside>\n\n      </template>\n\n\n\n      <slot />\n\n    </UPage>\n\n  </UContainer>\n\n</template>\n\nSlots\ntop\n{}\nlinks\n{}\ndefault\n{}\nbottom\n{}\nProps\nui\nunknown\nlinks\nLink[]\nShow properties\n\nDocsToc\n\nA sticky Table of Contents with customizable slots.\n\nAsideLinks\n\nA list of links displayed in the Aside."
  },
  {
    "title": "DocsSurround - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/docs/docs-surround",
    "html": "Pro\nComponents\nDocs\nDocsSurround\nGitHub\n\nA pair of prev and next links to navigate between pages.\n\nUsage\n\nSetup\n\nLearn how to install Nuxt UI Pro in your Nuxt application.\n\nContent\n\nLearn how to build your app with @nuxt/content module.\n\n<script setup>\n\nconst { data: surround } = await useAsyncData(`${route.path}-surround`, () => {\n\n  return queryContent()\n\n    .where({ _extension: 'md', navigation: { $ne: false } })\n\n    .only(['title', 'description', '_path'])\n\n    .findSurround(withoutTrailingSlash(route.path))\n\n})\n\n</script>\n\n\n\n<template>\n\n  <UDocsSurround :surround=\"surround\" />\n\n</template>\n\n\nYou'll usually use this component in a [...slug].vue page:\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nimport { withoutTrailingSlash } from 'ufo'\n\n\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\nif (!page.value) {\n\n  throw createError({ statusCode: 404, statusMessage: 'Page not found', fatal: true })\n\n}\n\n\n\nconst { data: surround } = await useAsyncData(`${route.path}-surround`, () => {\n\n  return queryContent()\n\n    .where({ _extension: 'md', navigation: { $ne: false } })\n\n    .only(['title', 'description', '_path'])\n\n    .findSurround(withoutTrailingSlash(route.path))\n\n})\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader :title=\"page.title\" :description=\"page.description\" :links=\"page.links\" />\n\n\n\n    <UPageBody prose>\n\n      <ContentRenderer v-if=\"page.body\" :value=\"page\" />\n\n\n\n      <hr v-if=\"surround?.length\">\n\n\n\n      <UDocsSurround :surround=\"surround\" />\n\n    </UPageBody>\n\n\n\n    <template v-if=\"page.body?.toc?.links?.length\" #right>\n\n      <UDocsToc :links=\"page.body.toc.links\" />\n\n    </template>\n\n  </UPage>\n\n</template>\n\nProps\nui\nunknown\nsurround\nPick<ParsedContent, string>[]\n\nDocsSearchButton\n\nA pre-styled Button to open the DocsSearch modal.\n\nDocsToc\n\nA sticky Table of Contents with customizable slots."
  },
  {
    "title": "PricingCard - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/pricing/pricing-card",
    "html": "Pro\nComponents\nPricing\nPricingCard\nCard\nGitHub\n\nA pre-built Card with all you need to display a pricing plan.\n\nUsage\n\nBuilt on top of the Card component, the PricingCard can be used in a PricingGrid.\n\nUse the title, description, price, discount and cycle props to customize the card.\n\ntitle\ndescription\nprice\ndiscount\ncycle\nhighlight\nalign\nbottom\n\nSolo\n\nMost popular\n\nFor bootstrappers and indie hackers.\n\n$199\n\n/month\n\nOne developer\nUnlimited projects\nUnlimited minor & patch updates\nLifetime access\nBuy now\n<UPricingCard\n\n  title=\"Solo\"\n\n  description=\"For bootstrappers and indie hackers.\"\n\n  price=\"$199\"\n\n  discount=\"\"\n\n  cycle=\"/month\"\n\n  :highlight=\"false\"\n\n  :badge=\"{ label: 'Most popular' }\"\n\n  :button=\"{ label: 'Buy now' }\"\n\n  align=\"bottom\"\n\n  :features=\"['One developer', 'Unlimited projects', 'Unlimited minor & patch updates', 'Lifetime access']\"\n\n/>\n\nSlots\nheader\n{}\ntitle\n{}\ndescription\n{}\nfeatures\n{}\nfooter\n{}\nProps\nui\n{}\n{}\ndescription\nstring\nundefined\nbutton\nany\nundefined\nbadge\nany\nundefined\ntitle\nstring\n\"\"\nalign\n\"top\" | \"bottom\"\n\"bottom\"\nfeatures\nstring[]\n[]\nprice\nstring\n\"\"\ndiscount\nstring\nundefined\ncycle\nstring\nundefined\nhighlight\nboolean\nfalse\nscale\nboolean\nfalse\n\nPageError\n\nA pre-built error component with NuxtError support.\n\nPricingGrid\n\nA customizable grid for your PricingCard components."
  },
  {
    "title": "DocsSearchButton - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/docs/docs-search-button",
    "html": "Pro\nComponents\nDocs\nDocsSearchButton\nButton\nGitHub\n\nA pre-styled Button to open the DocsSearch modal.\n\nUsage\n\nThe Button is already styled and will render as an icon button if you unset the label. You can override all the Button props as it's the root component.\n\nlabel\nSearch...\nK\n<UDocsSearchButton label=\"Search...\" />\n\nProps\nlabel\nstring\n\"Search...\"\n\nDocsSearch\n\nA ready to use CommandPalette to add to your documentation.\n\nDocsSurround\n\nA pair of prev and next links to navigate between pages."
  },
  {
    "title": "Footer - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/footer/footer",
    "html": "Pro\nComponents\nFooter\nFooter\nGitHub\n\nA responsive <footer> component.\n\nUsage\n\nUse the links prop to display a list of links in the center of the footer. You can also use the #left, #center and #right slots to customize it further.\n\nNuxt UI\nNuxt Docs\nNuxt Studio\nCopyright © 2023\n<script setup>\n\nconst links = [{\n\n  label: 'Nuxt UI',\n\n  to: 'https://ui.nuxt.com/'\n\n}, {\n\n  label: 'Nuxt Docs',\n\n  to: 'https://nuxt.com'\n\n}, {\n\n  label: 'Nuxt Studio',\n\n  to: 'https://nuxt.studio'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UFooter :links=\"links\">\n\n    <template #left>\n\n      Copyright © {{ new Date().getFullYear() }}\n\n    </template>\n\n\n\n    <template #right>\n\n      <UButton icon=\"i-simple-icons-x\" color=\"gray\" variant=\"ghost\" to=\"https://x.com/nuxt_js\" target=\"_blank\" />\n\n      <UButton icon=\"i-simple-icons-discord\" color=\"gray\" variant=\"ghost\" to=\"https://discord.com/invite/ps2h6QT\" target=\"_blank\" />\n\n      <UButton icon=\"i-simple-icons-github\" color=\"gray\" variant=\"ghost\" to=\"https://github.com/nuxt/nuxt\" target=\"_blank\" />\n\n    </template>\n\n  </UFooter>\n\n</template>\n\nThere is also a #top slot available, check out the FooterColumns component.\nSlots\ntop\n{}\nright\n{}\ncenter\n{}\nleft\n{}\nProps\nui\n{}\n{}\nlinks\nLink[]\n[]\nShow properties\n\nMain\n\nA <main> component to fill the screen.\n\nFooterLinks\n\nA list of links displayed in the Footer."
  },
  {
    "title": "HeaderLinks - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/header/header-links",
    "html": "Pro\nComponents\nHeader\nHeaderLinks\nLink\nGitHub\n\nA list of links displayed in the Header.\n\nThis component is used internally by the Header, it's unlikely you'll need to use it directly.\nUsage\nDocumentation\nPlayground\nRoadmap\nPro\nReleases\n<script setup>\n\nconst links = [{\n\n  label: 'Documentation',\n\n  icon: 'i-heroicons-book-open',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Playground',\n\n  icon: 'i-simple-icons-stackblitz',\n\n  to: '/playground'\n\n}, {\n\n  label: 'Roadmap',\n\n  icon: 'i-heroicons-academic-cap',\n\n  to: '/roadmap'\n\n}, {\n\n  label: 'Pro',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  to: '/pro',\n\n  children: [{\n\n    label: 'Features',\n\n    to: '/pro#features',\n\n    exactHash: true,\n\n    icon: 'i-heroicons-beaker',\n\n    description: 'Discover all the features of Nuxt UI Pro.'\n\n  }, {\n\n    label: 'Pricing',\n\n    to: '/pro#pricing',\n\n    exactHash: true,\n\n    icon: 'i-heroicons-credit-card',\n\n    description: 'A simple pricing, for solo developers or teams.'\n\n  }, {\n\n    label: 'Guide',\n\n    to: '/pro/guide',\n\n    icon: 'i-heroicons-book-open',\n\n    description: 'Learn how to use Nuxt UI Pro in your app.'\n\n  }, {\n\n    label: 'Components',\n\n    to: '/pro/components',\n\n    icon: 'i-heroicons-cube-transparent',\n\n    description: 'Discover all the components available in Nuxt UI Pro.'\n\n  }]\n\n}, {\n\n  label: 'Releases',\n\n  icon: 'i-heroicons-rocket-launch',\n\n  to: 'https://github.com/nuxt/ui/releases',\n\n  target: '_blank'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UHeaderLinks :links=\"links\" />\n\n</template>\n\nProps\nui\nany\nlinks\nLink[]\nShow properties\n\nHeader\n\nA responsive and sticky <header> component.\n\nMain\n\nA <main> component to fill the screen."
  },
  {
    "title": "LandingGrid - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/landing/landing-grid",
    "html": "Pro\nComponents\nLanding\nLandingGrid\nGitHub\n\nA customizable grid to display cards as a masonry layout.\n\nUsage\n\nUse some LandingCard, PageCard or anything really in the default slot to display a masonry grid.\n\nColor Palette\n\nChoose a primary and a gray color from your Tailwind CSS color palette.\n\nFully Customizable\n\nChange the style of any component in your App Config or with ui prop.\n\nIcons\n\nChoose any of the 100k+ icons from the most popular icon libraries.\n\nKeyboard Shortcuts\n\nNuxt UI comes with a set of Vue composables to easily handle shortcuts.\n\n<template>\n\n  <ULandingGrid>\n\n    <ULandingCard class=\"col-span-6 row-span-2\" icon=\"i-heroicons-swatch\" title=\"Color Palette\" description=\"Choose a primary and a gray color from your Tailwind CSS color palette.\" />\n\n    <ULandingCard class=\"col-span-6 row-span-4\" icon=\"i-heroicons-wrench-screwdriver\" title=\"Fully Customizable\" description=\"Change the style of any component in your App Config or with ui prop.\" />\n\n    <ULandingCard class=\"col-span-6 row-span-4\" icon=\"i-heroicons-face-smile\" title=\"Icons\" description=\"Choose any of the 100k+ icons from the most popular icon libraries.\" />\n\n    <ULandingCard class=\"col-span-6 row-span-2\" icon=\"i-heroicons-computer-desktop\" title=\"Keyboard Shortcuts\" description=\"Nuxt UI comes with a set of Vue composables to easily handle shortcuts.\" />\n\n  </ULandingGrid>\n\n</template>\n\n\nThis component can be put directly inside a LandingSection with its content fetched from @nuxt/content easily:\n\ncontent/index.yml\nfeatures:\n\n  title: Everything you expect from a<br class=\"hidden lg:block\"> <span class=\"text-primary\">UI component library</span>\n\n  cards:\n\n    - title: Color Palette\n\n      description: 'Choose a primary and a gray color from your Tailwind CSS color palette. Components will be styled accordingly.'\n\n      icon: i-heroicons-swatch\n\n      to: /getting-started/theming#colors\n\n      class: 'col-span-7 row-span-3'\n\n    - title: Fully Customizable\n\n      description: 'Change the style of any component in your App Config or customize them specifically through the ui prop.'\n\n      icon: i-heroicons-wrench-screwdriver\n\n      to: /getting-started/theming#components\n\n      class: 'col-span-5 row-span-5 lg:mb-10'\n\n    - title: Icons\n\n      description: 'Choose any of the 100k+ icons from the most popular icon libraries with the Icon component or the icon prop.'\n\n      icon: i-heroicons-face-smile\n\n      to: /getting-started/theming#icons\n\n      class: 'col-span-7 row-span-3'\n\n    - title: Light & Dark\n\n      description: 'Every component is designed with dark mode in mind. Works out of the box with @nuxtjs/color-mode.'\n\n      to: /getting-started/theming#dark-mode\n\n      icon: i-heroicons-moon\n\n      class: 'col-span-5 row-span-5 lg:-mt-10 lg:mb-20'\n\n    - title: Keyboard Shortcuts\n\n      description: 'Nuxt UI comes with a set of Vue composables to easily handle keyboard shortcuts in your app.'\n\n      icon: i-heroicons-computer-desktop\n\n      to: /getting-started/shortcuts\n\n      class: 'col-span-7 row-span-3'\n\nWe're using .yml files as an example here but you can use any format supported by @nuxt/content like .md or .json.\npages/index.vue\n<script setup>\n\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n\n</script>\n\n\n\n<template>\n\n  <ULandingSection :title=\"page.features.title\">\n\n    <ULandingGrid>\n\n      <ULandingCard\n\n        v-for=\"(card, index) of section.cards\"\n\n        :key=\"index\"\n\n        v-bind=\"card\"\n\n      />\n\n    </ULandingGrid>\n\n  </ULandingSection>\n\n</template>\n\nProps\nui\nunknown\nSlots\ndefault\n{}\n\nLandingSection\n\nA customizable section for your landing pages.\n\nLandingCard\n\nA pre-built Card with slot support and hover effect."
  },
  {
    "title": "Select - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/select",
    "html": "Forms\nSelect\nGitHub\n\nDisplay a select field.\n\nUsage\n\nThe Select component is a wrapper around the native <select> HTML element. For more advanced use cases like searching or multiple selection, consider using the SelectMenu component.\n\nUse a v-model to make the Select reactive alongside the options prop to pass an array of strings or objects.\n\nUnited States\nCanada\nMexico\n<script setup>\n\nconst countries = ['United States', 'Canada', 'Mexico']\n\n\n\nconst country = ref(countries[0])\n\n</script>\n\n\n\n<template>\n\n  <USelect v-model=\"country\" :options=\"countries\" />\n\n</template>\n\n\nWhen using objects, you can configure which field will be used for display through the option-attribute prop that defaults to label and which field will be used for comparison through the value-attribute prop that defaults to value.\n\nAdding a disabled key to the objects will control the disabled state of the option.\n\nUnited States\nCanada\nMexico\n<script setup>\n\nconst countries = [{\n\n  name: 'United States',\n\n  value: 'US'\n\n}, {\n\n  name: 'Canada',\n\n  value: 'CA',\n\n  disabled: true\n\n}, {\n\n  name: 'Mexico',\n\n  value: 'MX'\n\n}]\n\n\n\nconst country = ref('CA')\n\n</script>\n\n\n\n<template>\n\n  <USelect v-model=\"country\" :options=\"countries\" option-attribute=\"name\" />\n\n</template>\n\nStyle\n\nUse the color and variant props to change the visual style of the Select.\n\ncolor\nprimary\nvariant\noutline\nUnited States\nCanada\nMexico\n<USelect\n\n  color=\"primary\"\n\n  variant=\"outline\"\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n/>\n\n\nBesides all the colors from the ui.colors object, you can also use the white (default) and gray colors with their pre-defined variants.\n\nWhite\nvariant\noutline\nUnited States\nCanada\nMexico\n<USelect\n\n  color=\"white\"\n\n  variant=\"outline\"\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n/>\n\nGray\nvariant\noutline\nUnited States\nCanada\nMexico\n<USelect\n\n  color=\"gray\"\n\n  variant=\"outline\"\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n/>\n\nSize\n\nUse the size prop to change the size of the Select.\n\nsize\nsm\nUnited States\nCanada\nMexico\n<USelect size=\"sm\" :options=\"['United States', 'Canada', 'Mexico']\" />\n\nPlaceholder\n\nUse the placeholder prop to set a placeholder text.\n\nplaceholder\nSearch...\nUnited States\nCanada\nMexico\n<USelect\n\n  placeholder=\"Search...\"\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n/>\n\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name}.\n\nUse the trailing-icon prop to set a different icon or change it globally in ui.select.default.trailingIcon. Defaults to i-heroicons-chevron-down-20-solid.\n\ncolor\nwhite\nsize\nsm\nSearch...\nUnited States\nCanada\nMexico\n<USelect\n\n  icon=\"i-heroicons-magnifying-glass-20-solid\"\n\n  color=\"white\"\n\n  size=\"sm\"\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n  placeholder=\"Search...\"\n\n/>\n\nDisabled\n\nUse the disabled prop to disable the Select.\n\ndisabled\nSearch...\nUnited States\nCanada\nMexico\n<USelect\n\n  disabled\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n  placeholder=\"Search...\"\n\n/>\n\n\nAdd a disabled key with a truthy value to the options array of object to disable a single option.\n\nLoading\n\nUse the loading prop to show a loading icon and disable the Input.\n\nUse the loading-icon prop to set a different icon or change it globally in ui.select.default.loadingIcon. Defaults to i-heroicons-arrow-path-20-solid.\n\nloading\nSearch...\nUnited States\nCanada\nMexico\n<USelect\n\n  loading\n\n  icon=\"i-heroicons-magnifying-glass-20-solid\"\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n  placeholder=\"Search...\"\n\n/>\n\nSlots\nleading\n\nUse the #leading slot to set the content of the leading icon.\n\nSearch...\nUnited States\nCanada\nMexico\n<USelect\n\n  :options=\"['United States', 'Canada', 'Mexico']\"\n\n  placeholder=\"Search...\"\n\n>\n\n  <template #leading>\n\n    <UAvatar\n\n      src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n      size=\"3xs\"\n\n    />\n\n  </template>\n\n</USelect>\n\ntrailing\n\nUse the #trailing slot to set the content of the trailing icon.\n\nSearch...\n<USelect placeholder=\"Search...\">\n\n  <template #trailing>\n\n    <UIcon name=\"i-heroicons-arrows-up-down-20-solid\" />\n\n  </template>\n\n</USelect>\n\nProps\nname\nstring\nnull\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nsize\nSelectSize\nnull\n\"md\"\"2xs\"\"xs\"\"sm\"\"lg\"\"xl\"\nicon\nstring\nnull\nid\nstring\nnull\nmodelValue\nstring | number | Record<string, any>\n\"\"\noptions\nunknown[]\n[]\nvariant\nSelectVariant\nconfig.default.variant\n\"outline\"\"none\"\nplaceholder\nstring\nnull\nloadingIcon\nstring\nconfig.default.loadingIcon\nleadingIcon\nstring\nnull\ntrailingIcon\nstring\nconfig.default.trailingIcon\noptionAttribute\nstring\n\"label\"\nvalueAttribute\nstring\n\"value\"\nselectClass\nstring\nnull\nrequired\nboolean\nfalse\ndisabled\nboolean\nfalse\nleading\nboolean\nfalse\ntrailing\nboolean\nfalse\nloading\nboolean\nfalse\npadded\nboolean\ntrue\nConfig\n{\n\n  \"wrapper\": \"relative\",\n\n  \"base\": \"relative block w-full disabled:cursor-not-allowed disabled:opacity-75 focus:outline-none border-0\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"placeholder\": \"text-gray-900 dark:text-white\",\n\n  \"size\": {\n\n    \"2xs\": \"text-xs\",\n\n    \"xs\": \"text-xs\",\n\n    \"sm\": \"text-sm\",\n\n    \"md\": \"text-sm\",\n\n    \"lg\": \"text-sm\",\n\n    \"xl\": \"text-base\"\n\n  },\n\n  \"gap\": {\n\n    \"2xs\": \"gap-x-1\",\n\n    \"xs\": \"gap-x-1.5\",\n\n    \"sm\": \"gap-x-1.5\",\n\n    \"md\": \"gap-x-2\",\n\n    \"lg\": \"gap-x-2.5\",\n\n    \"xl\": \"gap-x-2.5\"\n\n  },\n\n  \"padding\": {\n\n    \"2xs\": \"px-2 py-1\",\n\n    \"xs\": \"px-2.5 py-1.5\",\n\n    \"sm\": \"px-2.5 py-1.5\",\n\n    \"md\": \"px-3 py-2\",\n\n    \"lg\": \"px-3.5 py-2.5\",\n\n    \"xl\": \"px-3.5 py-2.5\"\n\n  },\n\n  \"leading\": {\n\n    \"padding\": {\n\n      \"2xs\": \"ps-7\",\n\n      \"xs\": \"ps-8\",\n\n      \"sm\": \"ps-9\",\n\n      \"md\": \"ps-10\",\n\n      \"lg\": \"ps-11\",\n\n      \"xl\": \"ps-12\"\n\n    }\n\n  },\n\n  \"trailing\": {\n\n    \"padding\": {\n\n      \"2xs\": \"pe-7\",\n\n      \"xs\": \"pe-8\",\n\n      \"sm\": \"pe-9\",\n\n      \"md\": \"pe-10\",\n\n      \"lg\": \"pe-11\",\n\n      \"xl\": \"pe-12\"\n\n    }\n\n  },\n\n  \"color\": {\n\n    \"white\": {\n\n      \"outline\": \"shadow-sm bg-white dark:bg-gray-900 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n\n    },\n\n    \"gray\": {\n\n      \"outline\": \"shadow-sm bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n\n    }\n\n  },\n\n  \"variant\": {\n\n    \"outline\": \"shadow-sm bg-transparent text-gray-900 dark:text-white ring-1 ring-inset ring-{color}-500 dark:ring-{color}-400 focus:ring-2 focus:ring-{color}-500 dark:focus:ring-{color}-400\",\n\n    \"none\": \"bg-transparent focus:ring-0 focus:shadow-none\"\n\n  },\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 text-gray-400 dark:text-gray-500\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"size\": {\n\n      \"2xs\": \"h-4 w-4\",\n\n      \"xs\": \"h-4 w-4\",\n\n      \"sm\": \"h-5 w-5\",\n\n      \"md\": \"h-5 w-5\",\n\n      \"lg\": \"h-5 w-5\",\n\n      \"xl\": \"h-6 w-6\"\n\n    },\n\n    \"leading\": {\n\n      \"wrapper\": \"absolute inset-y-0 start-0 flex items-center\",\n\n      \"pointer\": \"pointer-events-none\",\n\n      \"padding\": {\n\n        \"2xs\": \"ps-2\",\n\n        \"xs\": \"ps-2.5\",\n\n        \"sm\": \"ps-2.5\",\n\n        \"md\": \"ps-3\",\n\n        \"lg\": \"ps-3.5\",\n\n        \"xl\": \"ps-3.5\"\n\n      }\n\n    },\n\n    \"trailing\": {\n\n      \"wrapper\": \"absolute inset-y-0 end-0 flex items-center\",\n\n      \"pointer\": \"pointer-events-none\",\n\n      \"padding\": {\n\n        \"2xs\": \"pe-2\",\n\n        \"xs\": \"pe-2.5\",\n\n        \"sm\": \"pe-2.5\",\n\n        \"md\": \"pe-3\",\n\n        \"lg\": \"pe-3.5\",\n\n        \"xl\": \"pe-3.5\"\n\n      }\n\n    }\n\n  },\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"color\": \"white\",\n\n    \"variant\": \"outline\",\n\n    \"loadingIcon\": \"i-heroicons-arrow-path-20-solid\",\n\n    \"trailingIcon\": \"i-heroicons-chevron-down-20-solid\"\n\n  }\n\n}\n\n\nTextarea\n\nDisplay a textarea field.\n\nSelectMenu\n\nDisplay a select menu with advanced features."
  },
  {
    "title": "Accordion - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/accordion",
    "html": "Elements\nAccordion\nGitHub\nDisclosure\n\nDisplay togglable accordion panels.\n\nUsage\n\nPass an array to the items prop of the Accordion component. Each item can have any property from the Button component such as label, icon, color, variant, size, etc. but also:\n\nslot - A key to customize the item with a slot.\ncontent - The content to display in the panel by default.\ndisabled - Determines whether the item is disabled or not.\ndefaultOpen - Determines whether the item is initially open or closed.\ncloseOthers - Determines whether the item click close others or not. It only works with multiple mode.\nGetting Started\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\nInstallation\nTheming\nLayouts\nComponents\nUtilities\n<script setup>\n\nconst items = [{\n\n  label: 'Getting Started',\n\n  icon: 'i-heroicons-information-circle',\n\n  defaultOpen: true,\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Installation',\n\n  icon: 'i-heroicons-arrow-down-tray',\n\n  disabled: true,\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Theming',\n\n  icon: 'i-heroicons-eye-dropper',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Layouts',\n\n  icon: 'i-heroicons-rectangle-group',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Components',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Utilities',\n\n  icon: 'i-heroicons-wrench-screwdriver',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UAccordion :items=\"items\" />\n\n</template>\n\nStyle\n\nYou can also pass any prop from the Button component directly to the Accordion component to style the buttons.\n\ncolor\nprimary\nvariant\nsoft\nsize\nsm\n1. What is Nuxt UI?\n2. Getting Started\n3. Theming\n4. Components\n<UAccordion\n\n  color=\"primary\"\n\n  variant=\"soft\"\n\n  size=\"sm\"\n\n  :items=\"[{ label: '1. What is Nuxt UI?', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: '2. Getting Started', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: '3. Theming', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: '4. Components', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }]\"\n\n/>\n\nIcon\n\nUse any icon from Iconify by setting the open-icon and close-icon props by using this pattern: i-{collection_name}-{icon_name} or change it globally in ui.accordion.default.openIcon and ui.accordion.default.closeIcon.\n\nYou can also set them to null to hide the icons.\n\n1. What is Nuxt UI?\n2. Getting Started\n3. Theming\n4. Components\n<UAccordion\n\n  open-icon=\"i-heroicons-plus\"\n\n  close-icon=\"i-heroicons-minus\"\n\n  :items=\"[{ label: '1. What is Nuxt UI?', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: '2. Getting Started', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: '3. Theming', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: '4. Components', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }]\"\n\n/>\n\nMultiple\n\nUse the multiple prop to to allow multiple elements to be opened at the same time.\n\nmultiple\nWhat is Nuxt UI?\nGetting Started\nTheming\nComponents\n<UAccordion\n\n  multiple\n\n  :items=\"[{ label: 'What is Nuxt UI?', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: 'Getting Started', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: 'Theming', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: 'Components', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }]\"\n\n/>\n\nOpen\n\nUse the default-open prop to open all items by default. Works better when the multiple prop is set to true.\n\nWhat is Nuxt UI?\nLorem ipsum dolor sit amet, consectetur adipiscing elit\nGetting Started\nLorem ipsum dolor sit amet, consectetur adipiscing elit\nTheming\nLorem ipsum dolor sit amet, consectetur adipiscing elit\nComponents\nLorem ipsum dolor sit amet, consectetur adipiscing elit\n<UAccordion\n\n  default-open\n\n  multiple\n\n  :items=\"[{ label: 'What is Nuxt UI?', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: 'Getting Started', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: 'Theming', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }, { label: 'Components', content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit' }]\"\n\n/>\n\nSlots\n\nYou can use slots to customize the buttons and items content of the Accordion.\n\ndefault\n\nUse the #default slot to customize the trigger buttons. You will have access to the item, index, open properties and close method in the slot scope.\n\n1. Getting Started\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n2. Installation\n3. Theming\n4. Layouts\n5. Components\n6. Utilities\n<script setup>\n\nconst items = [{\n\n  label: 'Getting Started',\n\n  icon: 'i-heroicons-information-circle',\n\n  defaultOpen: true,\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Installation',\n\n  icon: 'i-heroicons-arrow-down-tray',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Theming',\n\n  icon: 'i-heroicons-eye-dropper',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Layouts',\n\n  icon: 'i-heroicons-rectangle-group',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Components',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Utilities',\n\n  icon: 'i-heroicons-wrench-screwdriver',\n\n  content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UAccordion :items=\"items\" :ui=\"{ wrapper: 'flex flex-col w-full' }\">\n\n    <template #default=\"{ item, index, open }\">\n\n      <UButton color=\"gray\" variant=\"ghost\" class=\"border-b border-gray-200 dark:border-gray-700\" :ui=\"{ rounded: 'rounded-none', padding: { sm: 'p-3' } }\">\n\n        <template #leading>\n\n          <div class=\"w-6 h-6 rounded-full bg-primary-500 dark:bg-primary-400 flex items-center justify-center -my-1\">\n\n            <UIcon :name=\"item.icon\" class=\"w-4 h-4 text-white dark:text-gray-900\" />\n\n          </div>\n\n        </template>\n\n\n\n        <span class=\"truncate\">{{ index + 1 }}. {{ item.label }}</span>\n\n\n\n        <template #trailing>\n\n          <UIcon\n\n            name=\"i-heroicons-chevron-right-20-solid\"\n\n            class=\"w-5 h-5 ms-auto transform transition-transform duration-200\"\n\n            :class=\"[open && 'rotate-90']\"\n\n          />\n\n        </template>\n\n      </UButton>\n\n    </template>\n\n  </UAccordion>\n\n</template>\n\nitem\n\nUse the #item slot to customize the items content or pass a slot property to customize a specific item. You will have access to the item, index, open properties and close method in the slot scope.\n\nGetting Started\n\nFully styled and customizable components for Nuxt.\n\nInstallation\nInstallation\n\nInstall @nuxt/ui dependency to your project:\n\n$ npm i @nuxt/ui\n$ yarn add @nuxt/ui\n$ pnpm add @nuxt/ui\nTheming\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.\n\nLayouts\nComponents\nUtilities\n<script setup>\n\nconst items = [{\n\n  label: 'Getting Started',\n\n  icon: 'i-heroicons-information-circle',\n\n  defaultOpen: true,\n\n  slot: 'getting-started'\n\n}, {\n\n  label: 'Installation',\n\n  icon: 'i-heroicons-arrow-down-tray',\n\n  defaultOpen: true,\n\n  slot: 'installation'\n\n}, {\n\n  label: 'Theming',\n\n  icon: 'i-heroicons-eye-dropper',\n\n  defaultOpen: true,\n\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Layouts',\n\n  icon: 'i-heroicons-rectangle-group',\n\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Components',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}, {\n\n  label: 'Utilities',\n\n  icon: 'i-heroicons-wrench-screwdriver',\n\n  description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed neque elit, tristique placerat feugiat ac, facilisis vitae arcu. Proin eget egestas augue. Praesent ut sem nec arcu pellentesque aliquet. Duis dapibus diam vel metus tempus vulputate.'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UAccordion :items=\"items\">\n\n    <template #item=\"{ item }\">\n\n      <p class=\"italic text-gray-900 dark:text-white text-center\">\n\n        {{ item.description }}\n\n      </p>\n\n    </template>\n\n\n\n    <template #getting-started>\n\n      <div class=\"text-gray-900 dark:text-white text-center\">\n\n        <Logo class=\"w-auto h-8 mx-auto\" />\n\n\n\n        <p class=\"text-sm text-gray-500 dark:text-gray-400 mt-2\">\n\n          Fully styled and customizable components for Nuxt.\n\n        </p>\n\n      </div>\n\n    </template>\n\n\n\n    <template #installation=\"{ description }\">\n\n      <div class=\"flex flex-col justify-center items-center gap-1 mb-4\">\n\n        <h3 class=\"text-xl font-bold text-gray-900 dark:text-white\">\n\n          Installation\n\n        </h3>\n\n        <p class=\"text-sm text-gray-500 dark:text-gray-400\">\n\n          Install <code>@nuxt/ui</code> dependency to your project:\n\n        </p>\n\n        <p>\n\n          {{ description }}\n\n        </p>\n\n      </div>\n\n\n\n      <div class=\"flex flex-col items-center\">\n\n        <code>$ npm i @nuxt/ui</code>\n\n        <code>$ yarn add @nuxt/ui</code>\n\n        <code>$ pnpm add @nuxt/ui</code>\n\n      </div>\n\n    </template>\n\n  </UAccordion>\n\n</template>\n\nProps\nui\nany\nundefined\nitems\nAccordionItem[]\n[]\nShow properties\nopenIcon\nstring\nconfig.default.openIcon\ncloseIcon\nstring\nconfig.default.closeIcon\ndefaultOpen\nboolean\nfalse\nmultiple\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"w-full flex flex-col\",\n\n  \"item\": {\n\n    \"base\": \"\",\n\n    \"size\": \"text-sm\",\n\n    \"color\": \"text-gray-500 dark:text-gray-400\",\n\n    \"padding\": \"pt-1.5 pb-3\",\n\n    \"icon\": \"ms-auto transform transition-transform duration-200\"\n\n  },\n\n  \"transition\": {\n\n    \"enterActiveClass\": \"overflow-hidden transition-[height] duration-200 ease-out\",\n\n    \"leaveActiveClass\": \"overflow-hidden transition-[height] duration-200 ease-out\"\n\n  },\n\n  \"default\": {\n\n    \"openIcon\": \"i-heroicons-chevron-down-20-solid\",\n\n    \"closeIcon\": \"\",\n\n    \"class\": \"mb-1.5 w-full\",\n\n    \"variant\": \"soft\"\n\n  }\n\n}\n\n\nContributing\n\nLearn how to contribute to Nuxt UI.\n\nAlert\n\nDisplay an alert element to draw attention."
  },
  {
    "title": "Tabs - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/tabs",
    "html": "Pro\nComponents\nProse\nTabs\nGitHub\n\nToggle content using the Tabs component.\n\nUsage\n\nWrap your content around a Tabs component. You can pass the label and icon props to the children to customize the tab.\n\nCode\nPreview\n::callout\n\nLorem velit voluptate ex reprehenderit ullamco et culpa.\n\n::\n\n::tabs\n\n  ::div\n\n  ---\n\n  label: Code\n\n  icon: i-heroicons-code-bracket-square\n\n  ---\n\n\n\n  ```mdc\n\n  ::callout\n\n  Lorem velit voluptate ex reprehenderit ullamco et culpa.\n\n  ::\n\n  ```\n\n  ::\n\n\n\n  ::div\n\n  ---\n\n  label: Preview\n\n  icon: i-heroicons-magnifying-glass-circle\n\n  ---\n\n\n\n  ::callout\n\n  Lorem velit voluptate ex reprehenderit ullamco et culpa.\n\n  ::\n\n  ::\n\n::\n\nYou might need to wrap your children in a div if you don't want to pass-through props or when using code-blocks.\n\nShortcut\n\nA <kbd> in your content."
  },
  {
    "title": "Shortcut - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/shortcut",
    "html": "Pro\nComponents\nProse\nShortcut\nKbd\nGitHub\n\nA <kbd> in your content.\n\nUsage\n\nBuilt on top of the Kbd component, the Shortcut component will help you display a keyboard shortcut in your content.\n\nK\n:shortcut{value=\"K\"}\n\n\nYou can also specify the meta key to automatically display either ⌘ or Ctrl based on the platform.\n\n K\n\n:shortcut{value=\"meta\"} :shortcut{value=\"K\"}\n\nProps\nvalue\nrequired\nstring\n\nCollapsible\n\nA toggle to display nested properties.\n\nTabs\n\nToggle content using the Tabs component."
  },
  {
    "title": "Collapsible - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/collapsible",
    "html": "Pro\nComponents\nProse\nCollapsible\nGitHub\n\nA toggle to display nested properties.\n\nUsage\n\nMost often used in conjunction with the Field and FieldGroup components, the Collapsible component allows you to toggle the display of nested properties.\n\nlinks\nLink[]\nShow properties\n::field{name=\"links\" type=\"Link[]\"}\n\n  ::collapsible\n\n    :field{name=\"label\" type=\"string\" required}\n\n  ::\n\n::\n\n\nYou can change the icon specifically in your app.config.ts through the ui.content.collapsible.icon key:\n\nexport default defineAppConfig({\n\n  ui: {\n\n    content: {\n\n      collapsible: {\n\n        button: {\n\n          icon: {\n\n            name: 'i-ph-caret-down'\n\n          }\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\n\nOr globally through the ui.icons.chevron key:\n\nexport default defineAppConfig({\n\n  ui: {\n\n    icons: {\n\n      chevron: 'i-ph-caret-down'\n\n    }\n\n  }\n\n})\n\nProps\nname\nstring\n\"properties\"\n\nFieldGroup\n\nGroup fields together in a list.\n\nShortcut\n\nA <kbd> in your content."
  },
  {
    "title": "FieldGroup - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/field-group",
    "html": "Pro\nComponents\nProse\nFieldGroup\nGitHub\n\nGroup fields together in a list.\n\nUsage\nvalidate (path?: string, opts: { silent?: boolean })\nPromise<T>\n\nTriggers form validation. Will raise any errors unless opts.silent is set to true.\n\nclear (path?: string)\nvoid\n\nClears form errors associated with a specific path. If no path is provided, clears all form errors.\n\ngetErrors (path?: string)\nFormError[]\n\nRetrieves form errors associated with a specific path. If no path is provided, returns all form errors.\n\nsetErrors (errors: FormError[], path?: string)\nvoid\n\nSets form errors for a given path. If no path is provided, overrides all errors.\n\nerrors\nRef<FormError[]>\n\nA reference to the array containing validation errors. Use this to access or manipulate the error information.\n\n::field-group\n\n  ::field{name=\"validate (path?: string, opts: { silent?: boolean })\" type=\"Promise<T>\"}\n\n  Triggers form validation. Will raise any errors unless `opts.silent` is set to true.\n\n  ::\n\n  ::field{name=\"clear (path?: string)\" type=\"void\"}\n\n  Clears form errors associated with a specific path. If no path is provided, clears all form errors.\n\n  ::\n\n  ::field{name=\"getErrors (path?: string)\" type=\"FormError[]\"}\n\n  Retrieves form errors associated with a specific path. If no path is provided, returns all form errors.\n\n  ::\n\n  ::field{name=\"setErrors (errors: FormError[], path?: string)\" type=\"void\"}\n\n  Sets form errors for a given path. If no path is provided, overrides all errors.\n\n  ::\n\n  ::field{name=\"errors\" type=\"Ref<FormError[]>\"}\n\n  A reference to the array containing validation errors. Use this to access or manipulate the error information.\n\n  ::\n\n::\n\n\nField\n\nA field, prop or parameter to display in your content.\n\nCollapsible\n\nA toggle to display nested properties."
  },
  {
    "title": "Field - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/field",
    "html": "Pro\nComponents\nProse\nField\nGitHub\n\nA field, prop or parameter to display in your content.\n\nUsage\n\nUse the name, type, required and default props to display a field component in your content.\n\nname\nrequired\nstring\n\nThe description can be set as prop or in the default slot with full markdown support.\n\n::field{name=\"name\" type=\"string\" required}\n\nThe `description` can be set as prop or in the default slot with full **markdown** support.\n\n::\n\nProps\nname\nrequired\nstring\ndefault\nstring\nundefined\ntype\nstring\n\"string\"\ndescription\nstring\nundefined\nrequired\nboolean\nfalse\n\nCodeGroup\n\nGroup code blocks together in tabs.\n\nFieldGroup\n\nGroup fields together in a list."
  },
  {
    "title": "CodeGroup - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/code-group",
    "html": "Pro\nComponents\nProse\nCodeGroup\nGitHub\n\nGroup code blocks together in tabs.\n\nUsage\n\nWrap your code blocks around a CodeGroup component:\n\npnpm\nyarn\nnpm\npnpm add @nuxt/ui\n\n::code-group\n\n\n\n```bash [pnpm]\n\npnpm add @nuxt/ui\n\n```\n\n\n\n```bash [yarn]\n\nyarn add @nuxt/ui\n\n```\n\n\n\n```bash [npm]\n\nnpm install @nuxt/ui\n\n```\n\n::\n\n\nLike the CodeBlock component, filenames, icons and copy buttons are automatically supported.\n\nnuxt.config.ts\napp.config.ts\ntailwind.config.ts\nexport default defineNuxtConfig({\n\n  ui: {\n\n    icons: ['heroicons', 'simple-icons']\n\n  }\n\n})\n\n\nCodeBlock\n\nA code-block with automatic syntax highlighting, filename and copy button.\n\nField\n\nA field, prop or parameter to display in your content."
  },
  {
    "title": "CodeBlock - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/code-block",
    "html": "Pro\nComponents\nProse\nCodeBlock\n\nA code-block with automatic syntax highlighting, filename and copy button.\n\nUsage\n\nCode blocks are rendered by the ProseCode component of Nuxt Content and syntax highlighting is done underneath by Shikiji.\n\nBy default for syntax highlighting, material-theme-lighter and material-theme-palenight VSCode themes are used for light & dark mode respectively. You can change this in your nuxt.config.ts through the content.highlight key.\n\nNuxt UI Pro overrides the ProseCode component to add some extra features like a copy button, a filename and automatic icons.\n\nexport default defineNuxtConfig({\n\n  extends: ['@nuxt/ui-pro'],\n\n  modules: ['@nuxt/ui']\n\n})\n\n```ts\n\nexport default defineNuxtConfig({\n\n  extends: ['@nuxt/ui-pro'],\n\n  modules: ['@nuxt/ui']\n\n})\n\n```\n\nName\n\nWhen using a CodeBlock, you can specify a filename that will be displayed on top of the code block.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  extends: ['@nuxt/ui-pro'],\n\n  modules: ['@nuxt/ui']\n\n})\n\n```ts [nuxt.config.ts]\n\nexport default defineNuxtConfig({\n\n  extends: ['@nuxt/ui-pro'],\n\n  modules: ['@nuxt/ui']\n\n})\n\n```\n\nIcon\n\nWhen specifying a filename, an icon will be automatically displayed based on the extension or the name.\n\nSome icons are already defined by default, but you can add more in your app.config.ts through the ui.content.prose.code.icon key:\n\nexport default defineAppConfig({\n\n  ui: {\n\n    content: {\n\n      prose: {\n\n        code: {\n\n          icon: {\n\n            terminal: 'i-ph-terminal-window-duotone'\n\n          }\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\n\nHere is the default mapping:\n\n{\n\n  'package.json': 'vscode-icons:file-type-node',\n\n  'tsconfig.json': 'vscode-icons:file-type-tsconfig',\n\n  '.npmrc': 'vscode-icons:file-type-npm',\n\n  '.editorconfig': 'vscode-icons:file-type-editorconfig',\n\n  '.eslintrc': 'vscode-icons:file-type-eslint',\n\n  '.eslintrc.cjs': 'vscode-icons:file-type-eslint',\n\n  '.eslintignore': 'vscode-icons:file-type-eslint',\n\n  '.gitignore': 'vscode-icons:file-type-git',\n\n  'yarn.lock': 'vscode-icons:file-type-yarn',\n\n  '.env': 'vscode-icons:file-type-dotenv',\n\n  '.env.example': 'vscode-icons:file-type-dotenv',\n\n  '.vscode/settings.json': 'vscode-icons:file-type-vscode',\n\n  '.nuxtrc': 'vscode-icons:file-type-nuxt',\n\n  '.nuxtignore': 'vscode-icons:file-type-nuxt',\n\n  'nuxt.config.ts': 'vscode-icons:file-type-nuxt',\n\n  'tailwind.config.ts': 'vscode-icons:file-type-tailwind',\n\n  ts: 'vscode-icons:file-type-typescript',\n\n  tsx: 'vscode-icons:file-type-typescript',\n\n  mjs: 'vscode-icons:file-type-js',\n\n  cjs: 'vscode-icons:file-type-js',\n\n  js: 'vscode-icons:file-type-js',\n\n  jsx: 'vscode-icons:file-type-js',\n\n  md: 'vscode-icons:file-type-markdown',\n\n  ico: 'vscode-icons:file-type-favicon',\n\n  npm: 'vscode-icons:file-type-npm',\n\n  pnpm: 'vscode-icons:file-type-pnpm',\n\n  npx: 'vscode-icons:file-type-npm',\n\n  yarn: 'vscode-icons:file-type-yarn',\n\n  bun: 'vscode-icons:file-type-bun',\n\n  yml: 'vscode-icons:file-type-yaml',\n\n  terminal: 'i-heroicons-command-line'\n\n}\n\nCopy\n\nEvery code block has a copy button that will copy the code to your clipboard. You can change the icon in your app.config.ts through the ui.content.prose.code.button.icon key:\n\nexport default defineAppConfig({\n\n  ui: {\n\n    content: {\n\n      prose: {\n\n        code: {\n\n          button: {\n\n            icon: {\n\n              copy: 'i-ph-copy-duotone',\n\n              copied: 'i-ph-check-square-duotone'\n\n            }\n\n          }\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\n\nCardGroup\n\nGroup cards together in a grid.\n\nCodeGroup\n\nGroup code blocks together in tabs."
  },
  {
    "title": "CardGroup - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/card-group",
    "html": "Pro\nComponents\nProse\nCardGroup\nGitHub\n\nGroup cards together in a grid.\n\nUsage\n\nComponents\n\nExplore Nuxt built-in components for pages, layouts, head, and more.\n\nComposables\n\nDiscover Nuxt composable functions for data-fetching, head management and more.\n\nUtils\n\nLearn about Nuxt utility functions for navigation, error handling and more.\n\nCommands\n\nList of Nuxt CLI commands to init, analyze, build, and preview your application.\n\n::card-group\n\n  ::card\n\n  ---\n\n  title: Components\n\n  icon: i-heroicons-cube\n\n  to: https://nuxt.com/docs/api/components/client-only\n\n  target: _blank\n\n  ---\n\n  Explore Nuxt built-in components for pages, layouts, head, and more.\n\n  ::\n\n  ::card\n\n  ---\n\n  title: Composables\n\n  icon: i-heroicons-arrows-right-left\n\n  to: https://nuxt.com/docs/api/composables/use-app-config\n\n  target: _blank\n\n  ---\n\n  Discover Nuxt composable functions for data-fetching, head management and more.\n\n  ::\n\n  ::card\n\n  ---\n\n  title: Utils\n\n  icon: i-heroicons-scissors\n\n  to: https://nuxt.com/docs/api/utils/dollarfetch\n\n  target: _blank\n\n  ---\n\n  Learn about Nuxt utility functions for navigation, error handling and more.\n\n  ::\n\n  ::card\n\n  ---\n\n  title: Commands\n\n  icon: i-heroicons-command-line\n\n  to: https://nuxt.com/docs/api/commands/add\n\n  target: _blank\n\n  ---\n\n  List of Nuxt CLI commands to init, analyze, build, and preview your application.\n\n  ::\n\n::\n\n\nCard\n\nA card to link your content with other pages.\n\nCodeBlock\n\nA code-block with automatic syntax highlighting, filename and copy button."
  },
  {
    "title": "Callout - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/callout",
    "html": "Pro\nComponents\nProse\nCallout\nGitHub\n\nA callout to add eye-catching context to your content.\n\nUsage\n\nUse the default slot to display a callout component with full markdown support.\n\nThis is a callout with full markdown support. It can be used to link to another page.\n::callout\n\nThis is a `callout` with full **markdown** support. It can be used to link to [another page](/pro/components/prose/card).\n\n::\n\nIcon\n\nYou can add an icon prop to display an icon on the left of the callout:\n\nThis suggests a helpful tip.\n::callout{icon=\"i-heroicons-light-bulb\"}\n\nThis suggests a helpful tip.\n\n::\n\nColor\n\nYou can use the color prop to change the color of the callout:\n\nThis raises a warning to watch out for.\n::callout{icon=\"i-heroicons-exclamation-triangle\" color=\"amber\"}\n\nThis raises a warning to watch out for.\n\n::\n\nLink\n\nYou can add a to prop to make it a link, an external icon will be displayed when the link is external:\n\nCheck out this documentation.\n::callout{icon=\"i-heroicons-light-bulb\" to=\"https://nuxt.com\" target=\"_blank\"}\n\nCheck out this documentation.\n\n::\n\nProps\nicon\nstring\nundefined\ncolor\nstring\n\"primary\"\nto\nstring\nundefined\ntarget\nstring\nundefined\nui\nany\n{}\n\nColorModeToggle\n\nA Toggle to switch between color mode.\n\nCard\n\nA card to link your content with other pages."
  },
  {
    "title": "Card - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/prose/card",
    "html": "Pro\nComponents\nProse\nCard\nGitHub\n\nA card to link your content with other pages.\n\nUsage\n\nUse the title and icon props to display a card component in your content, the description will be displayed in the default slot with full markdown support.\n\nComponents\n\nDiscover all the components available in Nuxt UI Pro.\n\n::card{title=\"Components\" icon=\"i-heroicons-cube-transparent\"}\n\nDiscover all the components available in **Nuxt UI Pro**.\n\n::\n\nColor\n\nYou can use the color prop to change the color of the card:\n\nComponents\n\nDiscover all the components available in Nuxt UI Pro.\n\n::card{title=\"Components\" icon=\"i-heroicons-cube-transparent\" color=\"red\"}\n\nDiscover all the components available in **Nuxt UI Pro**.\n\n::\n\nLink\n\nYou can add a to prop to make it a link, an external icon will be displayed when the link is external:\n\nComponents\n\nExplore Nuxt built-in components for pages, layouts, head, and more.\n\n::card\n\n---\n\ntitle: Components\n\nicon: i-heroicons-cube\n\nto: https://nuxt.com/docs/api/components/client-only\n\ntarget: _blank\n\n---\n\nExplore Nuxt built-in components for pages, layouts, head, and more.\n\n::\n\nProps\nicon\nstring\nundefined\ncolor\nstring\n\"primary\"\nto\nstring\nundefined\ntarget\nstring\nundefined\nui\nany\n{}\n\nCallout\n\nA callout to add eye-catching context to your content.\n\nCardGroup\n\nGroup cards together in a grid."
  },
  {
    "title": "NavigationTree - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/navigation/navigation-tree",
    "html": "Pro\nComponents\nNavigation\nNavigationTree\nGitHub\n\nA ready to use links tree to navigate between pages.\n\nUsage\n\nPass a tree of links with their children to the links prop, this will automatically create an accordion when there are children or display a simple link otherwise:\n\nUse the mapContentNavigation util to transform @nuxt/content navigation into @nuxt/ui-pro links.\nGetting Started\nElements\nForms\nData\nNavigation\nOverlays\nLayout\nPro\nGuide\nComponents\nHeader\nMain\nFooter\nLanding\nPage\nPricing\nDocs\nAside\nNavigation\nNavigationTree\nNavigationLinks\nNavigationAccordion\nColor Mode\nProse\n<script lang=\"ts\" setup>\n\nimport type { NavItem } from '@nuxt/content/dist/runtime/types'\n\n\n\nconst navigation = inject<Ref<NavItem[]>>('navigation')\n\n</script>\n\n\n\n<template>\n\n  <UNavigationTree :links=\"mapContentNavigation(navigation)\" :multiple=\"false\" default-open />\n\n</template>\n\nMultiple\n\nYou can disallow multiple accordion items to be open at the same time by setting the multiple prop to false (defaults to true):\n\n<template>\n\n  <UNavigationTree :links=\"links\" :multiple=\"false\" />\n\n</template>\n\nDefault open\n\nYou can set the default-open prop to true to automatically open the tree matching the current route (defaults to false):\n\n<template>\n\n  <UNavigationTree :links=\"links\" default-open />\n\n</template>\n\n\nYou'll usually use this component in an Aside component or in the #panel slot of an Header:\n\nlayouts/docs.vue\n<template>\n\n  <UContainer>\n\n    <UPage>\n\n      <template #left>\n\n        <UAside>\n\n          <UNavigationTree :links=\"mapContentNavigation(navigation)\" />\n\n        </UAside>\n\n      </template>\n\n\n\n      <slot />\n\n    </UPage>\n\n  </UContainer>\n\n</template>\n\ncomponents/Header.vue\n<template>\n\n  <UHeader :links=\"links\">\n\n    <template #logo>\n\n      <Logo class=\"w-auto h-6\" />\n\n    </template>\n\n\n\n    <template #right>\n\n      <UColorModeButton />\n\n    </template>\n\n\n\n    <template #panel>\n\n      <UNavigationTree :links=\"mapContentNavigation(navigation)\" default-open :multiple=\"false\" />\n\n    </template>\n\n  </UHeader>\n\n</template>\n\nProps\nui\n{}\n{}\nlinks\nLink[]\n[]\nShow properties\nlevel\nnumber\n0\nmultiple\nboolean\ntrue\ndefaultOpen\nboolean\nundefined\n\nAsideLinks\n\nA list of links displayed in the Aside.\n\nNavigationLinks\n\nA list of links displayed in the NavigationTree."
  },
  {
    "title": "ColorModeToggle - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/color-mode/color-mode-toggle",
    "html": "Pro\nComponents\nColor Mode\nColorModeToggle\nToggle\nGitHub\n\nA Toggle to switch between color mode.\n\nUsage\n<UColorModeToggle />\n\n\nColorModeButton\n\nA Button to switch between color mode.\n\nCallout\n\nA callout to add eye-catching context to your content."
  },
  {
    "title": "ColorModeButton - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/color-mode/color-mode-button",
    "html": "Pro\nComponents\nColor Mode\nColorModeButton\nButton\nGitHub\n\nA Button to switch between color mode.\n\nUsage\n<UColorModeButton />\n\n\nColorModeAvatar\n\nAn Avatar with a different src for light and dark mode.\n\nColorModeToggle\n\nA Toggle to switch between color mode."
  },
  {
    "title": "ColorModeAvatar - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/color-mode/color-mode-avatar",
    "html": "Pro\nComponents\nColor Mode\nColorModeAvatar\nAvatar\nGitHub\n\nAn Avatar with a different src for light and dark mode.\n\nUsage\n<script setup>\n\nconst light = 'https://avatars.githubusercontent.com/u/739984?v=4'\n\nconst dark = 'https://avatars.githubusercontent.com/u/904724?v=4'\n\n</script>\n\n\n\n<template>\n\n  <UColorModeAvatar :light=\"light\" :dark=\"dark\" size=\"xl\" />\n\n</template>\n\nProps\ndark\nrequired\nstring\nlight\nrequired\nstring\n\nNavigationAccordion\n\nA pre-styled Accordion displayed in the NavigationTree.\n\nColorModeButton\n\nA Button to switch between color mode."
  },
  {
    "title": "NavigationAccordion - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/navigation/navigation-accordion",
    "html": "Pro\nComponents\nNavigation\nNavigationAccordion\nAccordion\nGitHub\n\nA pre-styled Accordion displayed in the NavigationTree.\n\nThis component is used internally by the NavigationTree, it's unlikely you'll need to use it directly.\nUsage\nGuide\nSetup\nUsage\nContent\n<script setup>\n\nconst links = [{\n\n  label: 'Guide',\n\n  children: [{\n\n    label: 'Setup',\n\n    to: '/pro/guide'\n\n  }, {\n\n    label: 'Usage',\n\n    to: '/pro/guide/usage'\n\n  }, {\n\n    label: 'Content',\n\n    to: '/pro/guide/usage'\n\n  }]\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UNavigationAccordion :links=\"links\" />\n\n</template>\n\nProps\nui\nany\n{}\nlinks\nLink[]\n[]\nShow properties\nlevel\nnumber\n0\nmultiple\nboolean\ntrue\ndefaultOpen\nboolean\nundefined\n\nNavigationLinks\n\nA list of links displayed in the NavigationTree.\n\nColorModeAvatar\n\nAn Avatar with a different src for light and dark mode."
  },
  {
    "title": "NavigationLinks - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/navigation/navigation-links",
    "html": "Pro\nComponents\nNavigation\nNavigationLinks\nLink\nGitHub\n\nA list of links displayed in the NavigationTree.\n\nThis component is used internally by the NavigationTree, it's unlikely you'll need to use it directly.\nUsage\nDocsSearch\nDocsSearchButton\nNew\nDocsSurround\nDocsToc\n<script setup>\n\nconst links = [ {\n\n  label: 'DocsSearch',\n\n  to: '/pro/components/docs/docs-search',\n\n  icon: 'i-heroicons-document-magnifying-glass'\n\n}, {\n\n  label: 'DocsSearchButton',\n\n  to: '/pro/components/docs/docs-search-button',\n\n  icon: 'i-heroicons-magnifying-glass',\n\n  badge: 'New'\n\n}, {\n\n  label: 'DocsSurround',\n\n  to: '/pro/components/docs/docs-surround',\n\n  icon: 'i-heroicons-arrows-right-left'\n\n}, {\n\n  label: 'DocsToc',\n\n  to: '/pro/components/docs/docs-toc',\n\n  icon: 'i-heroicons-list-bullet'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UNavigationLinks :links=\"links\" />\n\n</template>\n\nSlots\nbadge\n{}\nProps\nui\n{}\n{}\nlinks\nLink[]\n[]\nShow properties\nlevel\nnumber\n0\n\nNavigationTree\n\nA ready to use links tree to navigate between pages.\n\nNavigationAccordion\n\nA pre-styled Accordion displayed in the NavigationTree."
  },
  {
    "title": "DocsSearch - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/docs/docs-search",
    "html": "Pro\nComponents\nDocs\nDocsSearch\nCommandPalette\nGitHub\n\nA ready to use CommandPalette to add to your documentation.\n\nUsage\n\nUse the files and navigation props to provide the content to search through.\n\nYou can open the CommandPalette by pressing ⌘ K or using the DocsSearchButton component. You can also do this manually with const { toggleDocsSearch } = useUIState().\n\nYou'll usually use this component in your app.vue:\n\napp.vue\n<script setup lang=\"ts\">\n\nconst { data: navigation } = await useAsyncData('navigation', () => fetchContentNavigation())\n\nconst { data: files } = useLazyFetch<ParsedContent[]>('/api/search.json', { default: () => [], server: false })\n\n\n\nconst links = [{\n\n  label: 'Documentation',\n\n  icon: 'i-heroicons-book-open',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Playground',\n\n  icon: 'i-simple-icons-stackblitz',\n\n  to: '/playground'\n\n}, {\n\n  label: 'Roadmap',\n\n  icon: 'i-heroicons-academic-cap',\n\n  to: '/roadmap'\n\n}, {\n\n  label: 'Pro',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  to: '/pro'\n\n}, {\n\n  label: 'Releases',\n\n  icon: 'i-heroicons-rocket-launch',\n\n  to: 'https://github.com/nuxt/ui/releases',\n\n  target: '_blank'\n\n}]\n\n\n\nprovide('navigation', navigation)\n\nprovide('files', files)\n\n</script>\n\n\n\n<template>\n\n  <Header :links=\"links\" />\n\n\n\n  <NuxtLayout>\n\n    <NuxtPage />\n\n  </NuxtLayout>\n\n\n\n  <Footer />\n\n\n\n  <ClientOnly>\n\n    <LazyUDocsSearch :files=\"files\" :navigation=\"navigation\" :links=\"links\" />\n\n  </ClientOnly>\n\n\n\n  <UNotifications />\n\n</template>\n\n\nIt is recommended to wrap the DocsSearch component in a ClientOnly component so it's not rendered on the server.\n\nThe files are fetched from the /api/search.json endpoint, to achieve the same thing you'll need to create a server route:\n\nserver/api/search.json.get.ts\nimport { serverQueryContent } from '#content/server'\n\n\n\nexport default eventHandler(async (event) => {\n\n  return serverQueryContent(event).where({ _type: 'markdown', navigation: { $ne: false } }).find()\n\n})\n\n\nWe recommend using this method instead of fetching the files directly, the performances will be better.\n\nColor Mode\n\nBy default, a group of commands will be added to the command palette so you can switch between light and dark mode. This will only take effect if the colorMode is not forced in a specific page which can be achieved through definePageMeta:\n\npages/index.vue\n<script setup lang=\"ts\">\n\ndefinePageMeta({\n\n  colorMode: 'dark'\n\n})\n\n</script>\n\n\nYou can also disable this behaviour manually by setting the hide-color-mode prop: <UDocsSearch hide-color-mode />. This can be quite useful when forcing the color mode for the entire app in your nuxt.config.ts:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  colorMode: {\n\n    preference: 'light'\n\n  }\n\n})\n\nProps\nfiles\nParsedContent[]\nShow properties\nnavigation\nNavItem[]\nShow properties\nlinks\nLink[]\nShow properties\ngroups\nGroup[]\nShow properties\nfuse\nunknown\nui\nunknown\nhideColorMode\nboolean\n\nPricingGrid\n\nA customizable grid for your PricingCard components.\n\nDocsSearchButton\n\nA pre-styled Button to open the DocsSearch modal."
  },
  {
    "title": "DocsToc - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/docs/docs-toc",
    "html": "Pro\nComponents\nDocs\nDocsToc\nGitHub\n\nA sticky Table of Contents with customizable slots.\n\nUsage\nTable of Contents\nIntroduction\nConfiguration\nVariables\nIcons\nStructure\nnuxt.config.ts\napp.config.ts\ntailwind.config.ts\napp.vue\npages/index.vue\n<script setup>\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\n</script>\n\n\n\n<template>\n\n  <UDocsToc :links=\"page.body.toc.links\" />\n\n</template>\n\n\nYou'll usually use this component in the #right slot of a Page:\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nimport { withoutTrailingSlash } from 'ufo'\n\n\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\nif (!page.value) {\n\n  throw createError({ statusCode: 404, statusMessage: 'Page not found', fatal: true })\n\n}\n\n\n\nconst { data: surround } = await useAsyncData(`${route.path}-surround`, () => {\n\n  return queryContent()\n\n    .where({ _extension: 'md', navigation: { $ne: false } })\n\n    .only(['title', 'description', '_path'])\n\n    .findSurround(withoutTrailingSlash(route.path))\n\n})\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader :title=\"page.title\" :description=\"page.description\" :links=\"page.links\" />\n\n\n\n    <UPageBody prose>\n\n      <ContentRenderer v-if=\"page.body\" :value=\"page\" />\n\n\n\n      <hr v-if=\"surround?.length\">\n\n\n\n      <UDocsSurround :surround=\"surround\" />\n\n    </UPageBody>\n\n\n\n    <template v-if=\"page.body?.toc?.links?.length\" #right>\n\n      <UDocsToc :links=\"page.body.toc.links\" />\n\n    </template>\n\n  </UPage>\n\n</template>\n\nSlots\ntop\n{}\nbottom\n{}\nProps\nlinks\nTocLink[]\n[]\nShow properties\nui\nany\n{}\ntitle\nstring\n\"Table of Contents\"\n\nDocsSurround\n\nA pair of prev and next links to navigate between pages.\n\nAside\n\nA sticky <aside> with customizable slots and anchors."
  },
  {
    "title": "PricingGrid - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/pricing/pricing-grid",
    "html": "Pro\nComponents\nPricing\nPricingGrid\nGitHub\n\nA customizable grid for your PricingCard components.\n\nUsage\n\nUse some PricingCard to display pricing plans side by side.\n\ncompact\n\nFree\n\nGet started for free in development.\n\n \n\nSolo\n\nFor bootstrappers and indie hackers.\n\n$199\n\nTeam\n\nUnlimited license for growing teams.\n\n$699\n\n<UPricingGrid :compact=\"false\">\n\n  <UPricingCard\n\n    title=\"Free\"\n\n    description=\"Get started for free in development.\"\n\n  />\n\n  <UPricingCard\n\n    title=\"Solo\"\n\n    description=\"For bootstrappers and indie hackers.\"\n\n    price=\"$199\"\n\n    scale\n\n    highlight\n\n  />\n\n  <UPricingCard\n\n    title=\"Team\"\n\n    description=\"Unlimited license for growing teams.\"\n\n    price=\"$699\"\n\n  />\n\n</UPricingGrid>\n\nSlots\ndefault\n{}\nProps\nui\nunknown\ncompact\nboolean\n\nPricingCard\n\nA pre-built Card with all you need to display a pricing plan.\n\nDocsSearch\n\nA ready to use CommandPalette to add to your documentation."
  },
  {
    "title": "PageError - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-error",
    "html": "Pro\nComponents\nPage\nPageError\nGitHub\n\nA pre-built error component with NuxtError support.\n\nUsage\nstatus\nname\nmessage\n\n404\n\nPage not found\n\nThe page you are looking for does not exist.\n\nGo back home\n<UPageError\n\n  :status=\"404\"\n\n  name=\"Page not found\"\n\n  message=\"The page you are looking for does not exist.\"\n\n/>\n\n\nYou'll usually use this component in your error.vue file:\n\nerror.vue\n<template>\n\n  <div>\n\n    <UHeader />\n\n\n\n    <UContainer>\n\n      <UMain>\n\n        <UPage>\n\n          <UPageError :error=\"error\" />\n\n        </UPage>\n\n      </UMain>\n\n    </UContainer>\n\n  </div>\n\n</template>\n\n\n\n<script setup lang=\"ts\">\n\nimport type { NuxtError } from '#app'\n\n\n\ndefineProps<{\n\n  error: NuxtError\n\n}>()\n\n</script>\n\nYou might want to replicate the code of your app.vue inside your error.vue file to have the same layout and features, here is an example: https://github.com/nuxt/ui/blob/dev/docs/error.vue\n\nYou can read more about how to handle errors in the Nuxt documentation, but when using nuxt generate it is recommended to add fatal: true inside your createError call to make sure the error page is displayed:\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\nif (!page.value) {\n\n  throw createError({ statusCode: 404, statusMessage: 'Page not found', fatal: true })\n\n}\n\n</script>\n\nProps\nname\nstring\n\"An error occurred\"\nui\n{}\n{}\nerror\nany\nundefined\nmessage\nstring\n\"This is not the page you're looking for.\"\nstatus\nnumber\n404\nclearButton\n{}\n{}\n\nPageLinks\n\nA list of links to display in your pages.\n\nPricingCard\n\nA pre-built Card with all you need to display a pricing plan."
  },
  {
    "title": "PageCard - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-card",
    "html": "Pro\nComponents\nPage\nPageCard\nCard\nGitHub\n\nA pre-built Card to add links in your pages.\n\nUsage\n\nBuilt on top of the Card component, the PageCard can be used in a PageGrid, PageColumns or a LandingGrid.\n\nUse the title, description and icon props to customize the card.\n\ntitle\ndescription\n\nTailwind CSS\n\nAdd Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.\n\n<UPageCard\n\n  title=\"Tailwind CSS\"\n\n  description=\"Add Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.\"\n\n  icon=\"i-simple-icons-tailwindcss\"\n\n/>\n\n\nYou can also pass any property from the NuxtLink component such as to, target, exact, etc.\n\ntitle\ndescription\n\nTailwind CSS\n\nAdd Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.\n\n<UPageCard\n\n  title=\"Tailwind CSS\"\n\n  description=\"Add Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.\"\n\n  icon=\"i-simple-icons-tailwindcss\"\n\n  to=\"https://nuxt.com/modules/tailwindcss\"\n\n  target=\"_blank\"\n\n/>\n\nLook at the Nuxt.com modules page to see what you can do!\nSlots\nheader\n{}\nicon\n{}\ntitle\n{}\ndescription\n{}\ndefault\n{}\nfooter\n{}\nProps\nui\nunknown\nicon\nstring\ndescription\nstring\nto\nunknown\nhref\nunknown\ntarget\n\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | (string & {})\nrel\nstring\nactiveClass\nstring\nexactActiveClass\nstring\nariaCurrentValue\nstring\ntitle\nstring\nreplace\nboolean\nexternal\nboolean\ncustom\nboolean\nnoRel\nboolean\nprefetch\nboolean\nnoPrefetch\nboolean\n\nPageGrid\n\nA customizable grid to display cards in your pages.\n\nPageLinks\n\nA list of links to display in your pages."
  },
  {
    "title": "PageLinks - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-links",
    "html": "Pro\nComponents\nPage\nPageLinks\nLink\nGitHub\n\nA list of links to display in your pages.\n\nUsage\n\nUse the title and links props to display a list of links.\n\ntitle\n\nDiscover\n\nEdit this page\nStar on GitHub\nNuxt documentation\n<UPageLinks\n\n  :links=\"[{ icon: 'i-heroicons-pencil-square', label: 'Edit this page' }, { icon: 'i-heroicons-star', label: 'Star on GitHub', to: 'https://github.com/nuxt/ui', target: '_blank' }, { icon: 'i-heroicons-book-open', label: 'Nuxt documentation', to: 'https://nuxt.com', target: '_blank' }]\"\n\n  title=\"Discover\"\n\n/>\n\n\nYou'll usually use this component in the #bottom slot of an Aside or DocsToc component. This will match the design of the links from DocsToc and NavigationTree.\n\npages/[...slug].vue\n<script setup>\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\nif (!page.value) {\n\n  throw createError({ statusCode: 404, statusMessage: 'Page not found', fatal: true })\n\n}\n\n\n\nconst links = computed(() => [{\n\n  icon: 'i-ph-pen-duotone',\n\n  label: 'Edit this page',\n\n  to: `https://github.com/nuxt/nuxt/edit/main/docs/${page?.value?._file?.split('/').slice(1).join('/')}`,\n\n  target: '_blank'\n\n}, {\n\n  icon: 'i-ph-shooting-star-duotone',\n\n  label: 'Star on GitHub',\n\n  to: 'https://github.com/nuxt/nuxt',\n\n  target: '_blank'\n\n}, {\n\n  icon: 'i-ph-chat-centered-text-duotone',\n\n  label: 'Chat on Discord',\n\n  to: 'https://discord.com/invite/ps2h6QT',\n\n  target: '_blank'\n\n}, {\n\n  icon: 'i-ph-hand-heart-duotone',\n\n  label: 'Become a Sponsor',\n\n  to: 'https://github.com/sponsors/nuxt',\n\n  target: '_blank'\n\n}])\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader v-bind=\"page\" />\n\n\n\n    <UPageBody prose>\n\n      <ContentRenderer v-if=\"page && page.body\" :value=\"page\" />\n\n    </UPageBody>\n\n\n\n    <template v-if=\"page.toc !== false\" #right>\n\n      <UDocsToc :links=\"page.body?.toc?.links\">\n\n        <template #bottom>\n\n          <div class=\"hidden lg:block space-y-6\" :class=\"{ '!mt-6': page.body?.toc?.links?.length }\">\n\n            <UDivider v-if=\"page.body?.toc?.links?.length\" type=\"dashed\" />\n\n\n\n            <UPageLinks title=\"Community\" :links=\"links\" />\n\n          </div>\n\n        </template>\n\n      </UDocsToc>\n\n    </template>\n\n  </UPage>\n\n</template>\n\nSlots\ntitle\n{}\ndefault\n{}\nProps\nui\nany\nlinks\nLink[]\nShow properties\ntitle\nstring\n\nPageCard\n\nA pre-built Card to add links in your pages.\n\nPageError\n\nA pre-built error component with NuxtError support."
  },
  {
    "title": "PageGrid - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-grid",
    "html": "Pro\nComponents\nPage\nPageGrid\nGitHub\n\nA customizable grid to display cards in your pages.\n\nUsage\n\nUse some PageCard, LandingCard or anything really in the default slot to display a basic grid.\n\nVueUse\n\nCollection of essential Vue Composition Utilities for Vue 2 and 3.\n\nESLint\n\nESLint module for Nuxt.\n\nTailwind CSS\n\nAdd Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.\n\n<script setup>\n\nconst modules = [{\n\n  title: 'VueUse',\n\n  description: 'Collection of essential Vue Composition Utilities for Vue 2 and 3.',\n\n  to: 'https://github.com/vueuse/vueuse',\n\n  icon: 'i-simple-icons-nuxtdotjs'\n\n}, {\n\n  title: 'ESLint',\n\n  description: 'ESLint module for Nuxt.',\n\n  to: 'https://github.com/nuxt-community/eslint-module',\n\n  icon: 'i-simple-icons-eslint'\n\n}, {\n\n  title: 'Tailwind CSS',\n\n  description: 'Add Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.',\n\n  to: 'https://github.com/nuxt-modules/tailwindcss',\n\n  icon: 'i-simple-icons-tailwindcss'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UPageGrid>\n\n    <UPageCard v-for=\"(module, index) in modules\" :key=\"index\" v-bind=\"module\" target=\"_blank\">\n\n      <template #description>\n\n        <span class=\"line-clamp-2\">{{ module.description }}</span>\n\n      </template>\n\n    </UPageCard>\n\n  </UPageGrid>\n\n</template>\n\nSlots\ndefault\n{}\nProps\nui\nunknown\n\nPageColumns\n\nA customizable column component to display cards in your pages.\n\nPageCard\n\nA pre-built Card to add links in your pages."
  },
  {
    "title": "PageColumns - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-columns",
    "html": "Pro\nComponents\nPage\nPageColumns\nGitHub\n\nA customizable column component to display cards in your pages.\n\nUsage\n\nUse some PageCard or anything really in the default slot to display them as columns.\n\nNostrud reprehenderit magna deserunt dolor.\n\nEvan you\n\nCreator of Vue.js and Vite\n\nIrure irure dolore Lorem dolor anim velit id fugiat minim cupidatat dolore nulla Lorem aliquip cillum.\n\nGuillermo Rauch\n\nCo-founder and CEO of Vercel\n\nMagna labore amet velit eiusmod velit dolor cillum sunt est tempor ea commodo fugiat amet tempor.\n\nAddy Osmani\n\nChief Engineer of Chrome\n\nCulpa amet do sit officia non magna cillum ullamco dolore qui sunt occaecat.\n\nSarah Drasner\n\nDirector of Engineering, Google\n\nEx veniam eu incididunt.\n\nDominik Angerer\n\nCo-founder of Storyblok\n\nNostrud id Lorem laborum ut eiusmod voluptate aliquip non esse sint occaecat.\n\nSavas Vedova\n\nSernior Frontend Engineer at GitLab\n\n<script setup>\n\nconst testimonials = [{\n\n  quote: 'Nostrud reprehenderit magna deserunt dolor.',\n\n  author: {\n\n    name: 'Evan you',\n\n    job: 'Creator of Vue.js and Vite',\n\n    src: 'https://ipx.nuxt.com/f_auto,s_40x40/gh_avatar/yyx990803'\n\n  }\n\n}, {\n\n  quote: 'Irure irure dolore Lorem dolor anim velit id fugiat minim cupidatat dolore nulla Lorem aliquip cillum.',\n\n  author: {\n\n    name: 'Guillermo Rauch',\n\n    job: 'Co-founder and CEO of Vercel',\n\n    src: 'https://ipx.nuxt.com/f_auto,s_40x40/gh_avatar/rauchg'\n\n  }\n\n}, {\n\n  quote: 'Magna labore amet velit eiusmod velit dolor cillum sunt est tempor ea commodo fugiat amet tempor.',\n\n  author: {\n\n    name: 'Addy Osmani',\n\n    job: 'Chief Engineer of Chrome',\n\n    src: 'https://ipx.nuxt.com/f_auto,s_40x40/gh_avatar/addyosmani'\n\n  }\n\n}, {\n\n  quote: 'Culpa amet do sit officia non magna cillum ullamco dolore qui sunt occaecat.',\n\n  author: {\n\n    name: 'Sarah Drasner',\n\n    job: 'Director of Engineering, Google',\n\n    src: 'https://ipx.nuxt.com/f_auto,s_40x40/gh_avatar/sdras'\n\n  }\n\n}, {\n\n  quote: 'Ex veniam eu incididunt.',\n\n  author: {\n\n    name: 'Dominik Angerer',\n\n    job: 'Co-founder of Storyblok',\n\n    src: 'https://ipx.nuxt.com/f_auto,s_40x40/gh_avatar/DominikAngerer'\n\n  }\n\n}, {\n\n  quote: 'Nostrud id Lorem laborum ut eiusmod voluptate aliquip non esse sint occaecat.',\n\n  author: {\n\n    name: 'Savas Vedova',\n\n    job: 'Sernior Frontend Engineer at GitLab',\n\n    src: 'https://ipx.nuxt.com/f_auto,s_40x40/gh_avatar/svedova'\n\n  }\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UPageColumns>\n\n    <UPageCard v-for=\"(testimonial, index) in testimonials\" :key=\"index\">\n\n      <q class=\"italic text-gray-500 dark:text-gray-400\">\n\n        {{ testimonial.quote }}\n\n      </q>\n\n\n\n      <div class=\"flex gap-x-3 items-center mt-3\">\n\n        <UAvatar :src=\"testimonial.author.src\" :alt=\"testimonial.author.name\" size=\"sm\" />\n\n\n\n        <div class=\"min-w-0 text-sm\">\n\n          <p class=\"font-semibold\">\n\n            {{ testimonial.author.name }}\n\n          </p>\n\n          <p class=\"truncate\">\n\n            {{ testimonial.author.job }}\n\n          </p>\n\n        </div>\n\n      </div>\n\n    </UPageCard>\n\n  </UPageColumns>\n\n</template>\n\nSlots\ndefault\n{}\nProps\nui\nunknown\n\nPageBody\n\nA wrapper around your pages content.\n\nPageGrid\n\nA customizable grid to display cards in your pages."
  },
  {
    "title": "PageHero - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-hero",
    "html": "Pro\nComponents\nPage\nPageHero\nGitHub\n\nA responsive hero for your pages.\n\nUsage\n\nUse the PageHero component above a Page.\n\n<template>\n\n  <UContainer>\n\n    <UPageHero />\n\n\n\n    <UPage>\n\n      <UPageHeader />\n\n\n\n      <UPageBody />\n\n    </UPage>\n\n  </UContainer>\n\n</template>\n\n\nUse the title and description props to customize the hero.\n\ntitle\ndescription\nOfficial Support\n\nThrough NuxtLabs experts and agency networks, we have a solution for every need.\n\n<UPageHero\n\n  title=\"Official Support\"\n\n  description=\"Through NuxtLabs experts and agency networks, we have a solution for every need.\"\n\n/>\n\n\nUse the icon prop to add an icon on top of the title.\n\ntitle\ndescription\nOfficial Support\n\nThrough NuxtLabs experts and agency networks, we have a solution for every need.\n\n<UPageHero\n\n  icon=\"i-heroicons-lifebuoy\"\n\n  title=\"Official Support\"\n\n  description=\"Through NuxtLabs experts and agency networks, we have a solution for every need.\"\n\n/>\n\n\nYou can add anything you want in the default slot, an image or a code-block using the MDC component (when using @nuxt/content) for example.\n\nYou can change the align prop from left to center or right to position the slot differently.\n\ntitle\ndescription\nalign\nleft\nOfficial Support\n\nThrough NuxtLabs experts and agency networks, we have a solution for every need.\n\n<UPageHero\n\n  title=\"Official Support\"\n\n  description=\"Through NuxtLabs experts and agency networks, we have a solution for every need.\"\n\n  align=\"left\"\n\n>\n\n  <img\n\n    src=\"https://picsum.photos/640/360\"\n\n    class=\"w-full rounded-md shadow-xl ring-1 ring-gray-300 dark:ring-gray-700\"\n\n  />\n\n</UPageHero>\n\n\nUse the links prop to add some Buttons below the description. Those will be rendered below the default slot when the align prop is set to center.\n\ntitle\ndescription\nalign\nleft\nOfficial Support\n\nThrough NuxtLabs experts and agency networks, we have a solution for every need.\n\nGet started\nLearn more\n<UPageHero\n\n  title=\"Official Support\"\n\n  description=\"Through NuxtLabs experts and agency networks, we have a solution for every need.\"\n\n  align=\"left\"\n\n  :links=\"[{ label: 'Get started', color: 'black', size: 'lg' }, { label: 'Learn more', color: 'gray', size: 'lg', trailingIcon: 'i-heroicons-arrow-right-20-solid' }]\"\n\n>\n\n  <img\n\n    src=\"https://picsum.photos/360/640\"\n\n    class=\"w-full rounded-md shadow-xl ring-1 ring-gray-300 dark:ring-gray-700\"\n\n  />\n\n</UPageHero>\n\n\nYou can also use the #title, #description and #links slots to customize the content of the hero. This can be quite useful when using @nuxt/content if your content has HTML for example:\n\ncontent/newsletter.yml\ntitle: The Nuxt Newsletter\n\nhead.title: Nuxt Newsletter\n\ndescription: 'Get the latest releases and news about Nuxt and its ecosystem with our newsletter.'\n\nnavigation: false\n\nhero:\n\n  title: The <span class=\"text-primary\">Nuxt</span> Newsletter\n\n  align: 'center'\n\nWe're using .yml files as an example here but you can use any format supported by @nuxt/content like .md or .json.\npages/newsletter.vue\n<script setup>\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\n</script>\n\n\n\n<template>\n\n  <UContainer>\n\n    <UPageHero :description=\"page.description\" :align=\"page.hero.align\">\n\n      <template #title>\n\n        <span v-html=\"page.hero.title\" />\n\n      </template>\n\n    </UPageHero>\n\n\n\n    <UPage>\n\n      <UPageBody>\n\n        <ULandingCTA />\n\n      </UPageBody>\n\n    </UPage>\n\n  </UContainer>\n\n</template>\n\nSlots\ntitle\n{}\ndescription\n{}\nlinks\n{}\ndefault\n{}\nProps\nui\n{}\n{}\nicon\nstring\nundefined\ndescription\nstring\n\"\"\nlinks\n(Button & { click?: Function; })[]\n[]\nShow properties\ntitle\nstring\n\"\"\nalign\n\"left\" | \"right\" | \"center\"\n\"left\"\n\nPage\n\nA dynamic grid layout for your pages.\n\nPageHeader\n\nA responsive header for your pages."
  },
  {
    "title": "PageHeader - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-header",
    "html": "Pro\nComponents\nPage\nPageHeader\nGitHub\n\nA responsive header for your pages.\n\nUsage\n\nUse the PageHeader component in the default slot of a Page.\n\n<template>\n\n  <UPage>\n\n    <UPageHeader />\n\n\n\n    <UPageBody />\n\n  </UPage>\n\n</template>\n\n\nUse the title, description and headline props to customize the header.\n\nheadline\ntitle\ndescription\nPage\nPageHeader\n\nA responsive header for your pages.\n\n<UPageHeader\n\n  headline=\"Page\"\n\n  title=\"PageHeader\"\n\n  description=\"A responsive header for your pages.\"\n\n/>\n\n\nUse the links prop to add some Buttons at the right of the header.\n\nheadline\ntitle\ndescription\nPage\nPageHeader\nGitHub\n\nA responsive header for your pages.\n\n<UPageHeader\n\n  headline=\"Page\"\n\n  title=\"PageHeader\"\n\n  description=\"A responsive header for your pages.\"\n\n  :links=\"[{ label: 'GitHub', color: 'white', to: 'https://github.com/nuxt/ui-pro/blob/dev/components/page/PageHeader.vue', target: '_blank', icon: 'i-simple-icons-github' }]\"\n\n/>\n\n\nUse the icon prop to add an icon to the left of the title.\n\ntitle\ndescription\nicon\ntailwindcss\n\nAdd Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.\n\n<UPageHeader\n\n  title=\"tailwindcss\"\n\n  description=\"Add Tailwind CSS to your Nuxt application in seconds with PurgeCSS included for minimal CSS.\"\n\n  icon=\"i-simple-icons-tailwindcss\"\n\n/>\n\n\nYou'll usually use this component in a [...slug].vue page:\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader :title=\"page.title\" :description=\"page.description\" :links=\"page.links\" />\n\n\n\n    <UPageBody prose>\n\n      <ContentRenderer v-if=\"page.body\" :value=\"page\" />\n\n    </UPageBody>\n\n\n\n    <template #right>\n\n      <UDocsToc :links=\"page.body.toc.links\" />\n\n    </template>\n\n  </UPage>\n\n</template>\n\nWhen using @nuxt/content, you can use the findPageHeadline or findPageBreadcrumb utils to set the headline prop or slot.\nSlots\nheadline\n{}\nicon\n{}\ntitle\n{}\nlinks\n{}\ndescription\n{}\ndefault\n{}\nProps\nui\n{}\n{}\nicon\nstring\nundefined\ndescription\nstring\n\"\"\nlinks\n(Button & { click?: Function; })[]\n[]\nShow properties\ntitle\nstring\n\"\"\nheadline\nstring\nundefined\n\nPageHero\n\nA responsive hero for your pages.\n\nPageBody\n\nA wrapper around your pages content."
  },
  {
    "title": "PageBody - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page-body",
    "html": "Pro\nComponents\nPage\nPageBody\nGitHub\n\nA wrapper around your pages content.\n\nUsage\n\nUse the PageBody component in the default slot of a Page.\n\nThis wrapper will add some spacing to your content.\n\n<template>\n\n  <UPage>\n\n    <UPageBody>\n\n      <UPageGrid>\n\n        <UPageCard />\n\n      </UPageGrid>\n\n    </UPageBody>\n\n  </UPage>\n\n</template>\n\n\nYou can use the prose prop to automatically add prose prose-primary dark:prose-invert max-w-none classes to your content.\n\n<template>\n\n  <UPage>\n\n    <UPageBody prose>\n\n      <ContentRenderer :value=\"page\" />\n\n    </UPageBody>\n\n  </UPage>\n\n</template>\n\n\nYou'll usually use this component in a [...slug].vue page:\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader :title=\"page.title\" :description=\"page.description\" :links=\"page.links\" />\n\n\n\n    <UPageBody prose>\n\n      <ContentRenderer v-if=\"page.body\" :value=\"page\" />\n\n    </UPageBody>\n\n\n\n    <template #right>\n\n      <UDocsToc :links=\"page.body.toc.links\" />\n\n    </template>\n\n  </UPage>\n\n</template>\n\nSlots\ndefault\n{}\nProps\nui\n{}\n{}\nprose\nboolean\nfalse\n\nPageHeader\n\nA responsive header for your pages.\n\nPageColumns\n\nA customizable column component to display cards in your pages."
  },
  {
    "title": "LandingCard - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/landing/landing-card",
    "html": "Pro\nComponents\nLanding\nLandingCard\nCard\nGitHub\n\nA pre-built Card with slot support and hover effect.\n\nUsage\n\nBuilt on top of the Card component, the LandingCard can be used in a LandingGrid or a PageGrid.\n\nUse the title, description, icon and color props to customize the card.\n\nYou can also pass any property from the NuxtLink component such as to, target, exact, etc.\n\ntitle\ndescription\ncolor\nprimary\n\nColor Palette\n\nChoose a primary and a gray color from your Tailwind CSS color palette. Components will be styled accordingly.\n\n<ULandingCard\n\n  title=\"Color Palette\"\n\n  description=\"Choose a primary and a gray color from your Tailwind CSS color palette. Components will be styled accordingly.\"\n\n  icon=\"i-heroicons-swatch\"\n\n  color=\"primary\"\n\n/>\n\n\nYou can add anything you want in the default slot, an image for example.\n\nYou can change the orientation prop from vertical to horizontal to position the slot on the right side of the content.\n\ntitle\ndescription\ncolor\nprimary\norientation\nhorizontal\n\nPortfolio\n\nVeniam minim ipsum anim. Irure voluptate magna dolore id dolore ex quis sint sint et duis dolor enim fugiat.\n\n<ULandingCard\n\n  title=\"Portfolio\"\n\n  description=\"Veniam minim ipsum anim. Irure voluptate magna dolore id dolore ex quis sint sint et duis dolor enim fugiat.\"\n\n  icon=\"i-heroicons-photo\"\n\n  color=\"primary\"\n\n  orientation=\"horizontal\"\n\n>\n\n  <img\n\n    src=\"https://picsum.photos/640/360?grayscale\"\n\n    class=\"w-full rounded-md\"\n\n  />\n\n</ULandingCard>\n\nSlots\nicon\n{}\ntitle\n{}\ndescription\n{}\ncontainer\n{}\ndefault\n{}\nProps\nui\nany\n{}\ncolor\nstring\n\"primary\"\nicon\nstring\nundefined\ndescription\nstring\nundefined\norientation\n\"horizontal\" | \"vertical\"\n\"vertical\"\ntitle\nstring\n\"\"\nto\nunknown\nhref\nunknown\ntarget\n\"_blank\" | \"_parent\" | \"_self\" | \"_top\" | (string & {})\nrel\nstring\nactiveClass\nstring\nexactActiveClass\nstring\nariaCurrentValue\nstring\nreplace\nboolean\nexternal\nboolean\ncustom\nboolean\nnoRel\nboolean\nprefetch\nboolean\nnoPrefetch\nboolean\n\nLandingGrid\n\nA customizable grid to display cards as a masonry layout.\n\nLandingLogos\n\nA list of logos or images to put on your landing pages."
  },
  {
    "title": "Page - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/page/page",
    "html": "Pro\nComponents\nPage\nPage\nGitHub\n\nA dynamic grid layout for your pages.\n\nUsage\n\nThe Page component will allow you to structure your pages as a grid with a left or right column. When no slots are provided, the page will be a single column.\n\n<template>\n\n  <UPage>\n\n    <template #left>\n\n      <!-- <UAside /> -->\n\n    </template>\n\n\n\n    <template #right>\n\n      <!-- <UDocsToc /> -->\n\n    </template>\n\n  </UPage>\n\n</template>\n\n\nYou'll usually use this component in a layout or parent .vue page with its #left slot:\n\npages/docs.vue\n<script setup lang=\"ts\">\n\nimport type { NavItem } from '@nuxt/content/dist/runtime/types'\n\n\n\nconst navigation = inject<Ref<NavItem[]>>('navigation')\n\n</script>\n\n\n\n<template>\n\n  <UContainer>\n\n    <UPage>\n\n      <template #left>\n\n        <UAside>\n\n          <UNavigationTree :links=\"mapContentNavigation(navigation)\" />\n\n        </UAside>\n\n      </template>\n\n\n\n      <!-- Change this to `<slot />` when in a layout. -->\n\n      <NuxtPage />\n\n    </UPage>\n\n  </UContainer>\n\n</template>\n\n\nBut you can also use it in a [...slug].vue page with its #right slot:\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader :title=\"page.title\" :description=\"page.description\" :links=\"page.links\" />\n\n\n\n    <UPageBody prose>\n\n      <ContentRenderer v-if=\"page.body\" :value=\"page\" />\n\n    </UPageBody>\n\n\n\n    <template #right>\n\n      <UDocsToc :links=\"page.body.toc.links\" />\n\n    </template>\n\n  </UPage>\n\n</template>\n\nSlots\nleft\n{}\ndefault\n{}\nright\n{}\nProps\nui\nunknown\n\nLandingFAQ\n\nA pre-styled Accordion to display an FAQ on your landing pages.\n\nPageHero\n\nA responsive hero for your pages."
  },
  {
    "title": "LandingCTA - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/landing/landing-cta",
    "html": "Pro\nComponents\nLanding\nLandingCTA\nCard\nGitHub\n\nA pre-built Card to display a call to action panel in your landing pages.\n\nUsage\n\nThe LandingCTA component will wrap your content in a Card.\n\nUse the title, description and icon props to customize the content of card.\n\ntitle\ndescription\ncard\n<ULandingCTA\n\n  title=\"Trusted and supported by our amazing community\"\n\n  description=\"We've built a strong, lasting partnership. Their trust is our driving force, propelling us towards shared success.\"\n\n  card\n\n/>\n\nYou can disable its border and card style by setting the card prop to false.\n\nYou can add anything you want in the default slot, a gradient or an image for example (this will render better on full-screen).\n\nYou can change the align prop from center to left or right to position the slot horizontaly.\n\ntitle\ndescription\nalign\nleft\ncard\n<ULandingCTA\n\n  title=\"Join us\"\n\n  description=\"Incididunt fugiat duis in.\"\n\n  align=\"left\"\n\n  card\n\n>\n\n  <img\n\n    src=\"https://picsum.photos/640/360\"\n\n    class=\"w-full rounded-md shadow-xl ring-1 ring-gray-300 dark:ring-gray-700\"\n\n  />\n\n</ULandingCTA>\n\n\nUse the links prop to add some Buttons below the description.\n\ntitle\ndescription\ncard\n<ULandingCTA\n\n  title=\"Trusted and supported by our amazing community\"\n\n  description=\"We've built a strong, lasting partnership. Their trust is our driving force, propelling us towards shared success.\"\n\n  card\n\n  :links=\"[{ label: 'Get started', color: 'gray', size: 'md' }, { label: 'Learn more', variant: 'link', color: 'gray', size: 'md', trailingIcon: 'i-heroicons-arrow-right-20-solid' }]\"\n\n/>\n\n\nThis component can be put directly inside a LandingSection or a Container directly with its content fetched from @nuxt/content easily:\n\ncontent/index.yml\ncta:\n\n  title: Trusted and supported by our amazing community\n\n  description: We've built a strong, lasting partnership. Their trust is our driving force, propelling us towards shared success.\n\n  links:\n\n    - label: 'Get started'\n\n      color: 'gray'\n\n      size: 'md'\n\n    - label: 'Learn more'\n\n      variant: 'link'\n\n      color: 'gray'\n\n      size: 'md'\n\n      trailingIcon: 'i-heroicons-arrow-right-20-solid'\n\nWe're using .yml files as an example here but you can use any format supported by @nuxt/content like .md or .json.\npages/index.vue\n<script setup>\n\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n\n</script>\n\n\n\n<template>\n\n  <ULandingSection>\n\n    <ULandingCTA v-bind=\"page.cta\" card />\n\n  </ULandingSection>\n\n</template>\n\nSlots\ntitle\n{}\ndescription\n{}\nlinks\n{}\ndefault\n{}\nProps\nui\nany\n{}\ndescription\nstring\nundefined\nlinks\n(Button & { click?: Function; })[]\n[]\nShow properties\ntitle\nstring\n\"\"\nalign\n\"left\" | \"right\" | \"center\"\n\"center\"\ncard\nboolean\ntrue\n\nLandingLogos\n\nA list of logos or images to put on your landing pages.\n\nLandingFAQ\n\nA pre-styled Accordion to display an FAQ on your landing pages."
  },
  {
    "title": "LandingFAQ - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/landing/landing-faq",
    "html": "Pro\nComponents\nLanding\nLandingFAQ\nAccordion\nGitHub\n\nA pre-styled Accordion to display an FAQ on your landing pages.\n\nUsage\n\nBuilt on top of the Accordion component, use the items prop to pass a list of questions and answers.\n\nDo you have a free trial?\nCan I use Nuxt UI Pro for Open Source projects?\nWhat does “Unlimited minor & patch updates” include?\nDo you offer technical support?\n<script setup>\n\nconst items = [{\n\n  label: 'Do you have a free trial?',\n\n  content: 'Ea est ex aliqua exercitation quis et cillum adipisicing sit tempor veniam incididunt labore.'\n\n}, {\n\n  label: 'Can I use Nuxt UI Pro for Open Source projects?',\n\n  content: 'Et adipisicing do do do sunt irure proident consequat fugiat tempor occaecat commodo fugiat in proident.'\n\n}, {\n\n  label: 'What does “Unlimited minor & patch updates” include?',\n\n  content: 'Dolor dolor consectetur tempor consectetur sint ut id ex quis voluptate dolore incididunt qui mollit.'\n\n}, {\n\n  label: 'Do you offer technical support?',\n\n  content: 'Sint id sint incididunt culpa.'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <ULandingFAQ :items=\"items\" multiple />\n\n</template>\n\nYou can set the multiple prop to true to allow multiple items to be open at the same time.\n\nThis component can be put directly inside a LandingSection with its content fetched from @nuxt/content easily:\n\ncontent/index.yml\nfaq:\n\n  title: Frequently Asked Questions\n\n  description: If you can't find what you're looking for, email our support team and if you're lucky someone will get back to you.\n\n  items:\n\n    - label: Do you have a free trial?\n\n      content: We have much better than a free trial, you can use Nuxt UI Pro for free in development mode. Once you are ready to deploy your application, you can purchase a license.\n\n      defaultOpen: true\n\n    - label: Can I use Nuxt UI Pro for Open Source projects?\n\n      content: Yes, you can use Nuxt UI Pro for your open source projects as well as your commercial projects as long as you don't sell Nuxt UI Pro as a product and that you don't share your license key.\n\n    - label: What does “Unlimited minor & patch updates” include?\n\n      content: We add new components and improvements to Nuxt UI Pro as we get new ideas and feedback, you will receive these updates for the major version you purchased. :br **Your license key will work forever for the major version.** We may release a major version including more advanced components and features in the future, you will be able to upgrade to this version with a generous discount.\n\n    - label: Do you offer technical support?\n\n      content: Once you sign up you get access to our private GitHub repository, where you can ask questions, report bugs or feature requests and get help from other customers. If you require more specialised support or consultancy, contact us at ui-pro@nuxt.com.\n\nWe're using .yml files as an example here but you can use any format supported by @nuxt/content like .md or .json.\npages/index.vue\n<script setup>\n\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n\n</script>\n\n\n\n<template>\n\n  <ULandingSection :title=\"page.faq.title\" :description=\"page.faq.description\">\n\n    <ULandingFAQ :items=\"page.faq.items\" multiple>\n\n      <template #item=\"{ item }\">\n\n        <MDC :value=\"item.content\" class=\"prose prose-primary dark:prose-invert max-w-none text-gray-500 dark:text-gray-400\" />\n\n      </template>\n\n    </ULandingFAQ>\n\n  </ULandingSection>\n\n</template>\n\nProps\nui\nany\n{}\nitems\nAccordionItem[]\n[]\nShow properties\nmultiple\nboolean\nfalse\n\nLandingCTA\n\nA pre-built Card to display a call to action panel in your landing pages.\n\nPage\n\nA dynamic grid layout for your pages."
  },
  {
    "title": "LandingSection - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/landing/landing-section",
    "html": "Pro\nComponents\nLanding\nLandingSection\nGitHub\n\nA customizable section for your landing pages.\n\nUsage\n\nThe LandingSection component will wrap your content in a Container but the wrapper takes the full width of the screen so you can easily change the background.\n\nUse the headline, title and description props to customize the content of the section.\n\nheadline\ntitle\ndescription\nPro\nThe freedom to build anything\n\nNuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\n\n<ULandingSection\n\n  headline=\"Pro\"\n\n  title=\"The freedom to build anything\"\n\n  description=\"Nuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\"\n\n/>\n\n\nUse the icon prop to add an icon on top of the title.\n\ntitle\ndescription\nThe freedom to build anything\n\nNuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\n\n<ULandingSection\n\n  icon=\"i-heroicons-rocket-launch\"\n\n  title=\"The freedom to build anything\"\n\n  description=\"Nuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\"\n\n/>\n\n\nYou can add anything you want in the default slot, an image, a code-block using the MDC component (when using @nuxt/content), a LandingGrid, a PageGrid, a PricingGrid, a LandingFAQ, a LandingCTA, etc.\n\nYou can change the align prop from center to left or right to position the slot horizontaly.\n\nheadline\ntitle\ndescription\nalign\ncenter\nPro\nThe freedom to build anything\n\nNuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\n\n<ULandingSection\n\n  headline=\"Pro\"\n\n  title=\"The freedom to build anything\"\n\n  description=\"Nuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\"\n\n  align=\"center\"\n\n>\n\n  <img\n\n    src=\"https://picsum.photos/640/360\"\n\n    class=\"w-full rounded-md shadow-xl ring-1 ring-gray-300 dark:ring-gray-700\"\n\n  />\n\n</ULandingSection>\n\n\nUse the links prop to add some Buttons below the description. Those will be rendered below the default slot when the align prop is set to center.\n\ntitle\ndescription\nalign\nleft\nThe freedom to build anything\n\nNuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\n\nExplore components\n<ULandingSection\n\n  title=\"The freedom to build anything\"\n\n  description=\"Nuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\"\n\n  :links=\"[{ label: 'Explore components', color: 'gray', trailing-icon: 'i-heroicons-arrow-right', size: 'lg' }]\"\n\n  align=\"left\"\n\n>\n\n  <img\n\n    src=\"https://picsum.photos/360/640\"\n\n    class=\"w-full rounded-md shadow-xl ring-1 ring-gray-300 dark:ring-gray-700\"\n\n  />\n\n</ULandingSection>\n\n\nUse the features prop to add a list of features below the description. Those will be rendered as a grid when the align prop is set to center.\n\ntitle\ndescription\nalign\nright\nThe freedom to build anything\n\nNuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\n\nFully customizable\nLike Nuxt UI, change the style of any component from your App Config or customize them specifically through the ui prop.\nSlots for everything\nEach component leverages the power of Vue's slots to give you the flexibility to build anything.\n<ULandingSection\n\n  title=\"The freedom to build anything\"\n\n  description=\"Nuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\"\n\n  :features=\"[{ name: 'Fully customizable', description: 'Like Nuxt UI, change the style of any component from your App Config or customize them specifically through the ui prop.', icon: 'i-heroicons-wrench-screwdriver' }, { name: 'Slots for everything', description: 'Each component leverages the power of Vue's slots to give you the flexibility to build anything.', icon: 'i-heroicons-square-3-stack-3d' }]\"\n\n  align=\"right\"\n\n>\n\n  <img\n\n    src=\"https://picsum.photos/360/640\"\n\n    class=\"w-full rounded-md shadow-xl ring-1 ring-gray-300 dark:ring-gray-700\"\n\n  />\n\n</ULandingSection>\n\n\nYou can also use the #headline, #title, #description and #links slots to customize the content of the section. This can be quite useful when using @nuxt/content if your content has HTML for example:\n\ncontent/index.yml\nfeature:\n\n  title: The freedom to build anything\n\n  description: Nuxt UI Pro ships with an extensive set of advanced components that cover a wide range of use-cases.\n\n  code: |\n\n    ```vue [app.vue]\n\n    <template>\n\n      <UHeader :links=\"links\" />\n\n\n\n      <UMain>\n\n        <ULandingHero title=\"Hello World\" />\n\n\n\n        <ULandingSection title=\"Features\">\n\n          <UPageGrid>\n\n            <ULandingCard title=\"First Card\" />\n\n            <ULandingCard title=\"Second Card\" />\n\n            <ULandingCard title=\"Third Card\" />\n\n          </UPageGrid>\n\n        </ULandingSection>\n\n      </UMain>\n\n\n\n      <UFooter />\n\n    </template>\n\n    ```\n\nWe're using .yml files as an example here but you can use any format supported by @nuxt/content like .md or .json.\npages/index.vue\n<script setup>\n\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n\n</script>\n\n\n\n<template>\n\n  <ULandingSection>\n\n     <template #title>\n\n      <span v-html=\"page.feature.title\" />\n\n    </template>\n\n\n\n    <template #description>\n\n      <span v-html=\"page.feature.description\" />\n\n    </template>\n\n\n\n    <MDC\n\n      v-if=\"page.feature.code\"\n\n      :value=\"page.feature.code\"\n\n      tag=\"pre\"\n\n      class=\"prose prose-primary dark:prose-invert max-w-none\"\n\n    />\n\n  </ULandingSection>\n\n</template>\n\n\nYou can use the slot prop to change the default slot name, this can be useful when using @nuxt/content and iterating over a list of sections for example:\n\ncontent/index.yml\nsections:\n\n  - title: 'The power of<br><span class=\"text-primary\">Vue Components</span>'\n\n    description: 'We love Vue Single-File Components as much as you do.'\n\n    class: 'dark bg-gray-900'\n\n    align: left\n\n    slot: code\n\n    code: |\n\n      ```vue [app.vue]\n\n      <template>\n\n        <NuxtPage />\n\n      </template>\n\n      ```\n\n  - title: 'Compose with<br><span class=\"text-primary\">everything you need.</span>'\n\n    slot: features\n\n    features:\n\n      - title: 'Routing & Layouts'\n\n        description: 'File based routing system to build complex views and interfaces with a powerful and conventional approach.'\n\n        icon: 'i-ph-signpost-duotone'\n\n        to: '/docs/getting-started/routing'\n\n      - title: 'Data Fetching'\n\n        description: 'Composables that run on the server to fetch data for your components and enable you to render content in different ways.'\n\n        icon: 'i-ph-plugs-connected-duotone'\n\n        to: '/docs/getting-started/data-fetching'\n\n      - title: 'Assets & Style'\n\n        description: 'Image, Font and Script optizations with a built-in support for CSS Modules, Sass, PostCSS, CSS-in-JS and more.'\n\n        icon: 'i-ph-image-duotone'\n\n        to: '/docs/getting-started/styling'\n\npages/index.vue\n<script setup>\n\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n\n</script>\n\n\n\n<template>\n\n  <ULandingSection v-for=\"(section, index) of page.sections\" :key=\"index\" :slot=\"section.slot\" :class=\"section.class\" :align=\"section.align\" :links=\"section.links\">\n\n    <template #title>\n\n      <span v-html=\"section.title\" />\n\n    </template>\n\n\n\n    <template #description>\n\n      <span v-if=\"section.description\" v-html=\"section.description\" />\n\n    </template>\n\n\n\n    <template #code>\n\n      <MDC :value=\"section.code\" tag=\"pre\" class=\"prose prose-primary dark:prose-invert max-w-none\" />\n\n    </template>\n\n\n\n    <template #features>\n\n      <UPageGrid>\n\n        <UPageCard v-for=\"(feature, index) in features\" :key=\"index\" v-bind=\"feature\" />\n\n      </UPageGrid>\n\n    </template>\n\n  </ULandingSection>\n\n</template>\n\n\nYou can use the #top and #bottom slots to add content above and below the container, this can be useful when adding some absolute positioned svgs for example.\n\nSlots\ntop\n{}\nheadline\n{}\ntitle\n{}\ndescription\n{}\nlinks\n{}\nbottom\n{}\nProps\nui\n{}\n{}\nicon\nstring\nundefined\ndescription\nstring\nundefined\nlinks\n(Button & { click?: Function; })[]\n[]\nShow properties\ntitle\nstring\n\"\"\nalign\n\"left\" | \"right\" | \"center\"\n\"center\"\nheadline\nstring\nundefined\nfeatures\n{ icon?: string; name: string; description?: string; }[]\n[]\nShow properties\nslot\nstring\nundefined\n\nLandingHero\n\nA responsive hero for your landing pages.\n\nLandingGrid\n\nA customizable grid to display cards as a masonry layout."
  },
  {
    "title": "LandingHero - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/landing/landing-hero",
    "html": "Pro\nComponents\nLanding\nLandingHero\nGitHub\n\nA responsive hero for your landing pages.\n\nUsage\n\nThe LandingHero component will wrap your content in a Container but the wrapper takes the full width of the screen so you can easily change the background.\n\nUse the title and description props to customize the content of the hero.\n\ntitle\ndescription\nTurn Your Vision into Reality\n\nWatch your dreams materialize before your eyes with us.\n\n<ULandingHero\n\n  title=\"Turn Your Vision into Reality\"\n\n  description=\"Watch your dreams materialize before your eyes with us.\"\n\n/>\n\n\nUse the links prop to add some Buttons below the description.\n\ntitle\ndescription\nTurn Your Vision into Reality\n\nWatch your dreams materialize before your eyes with us.\n\nGet Started\nLearn more\n<ULandingHero\n\n  title=\"Turn Your Vision into Reality\"\n\n  description=\"Watch your dreams materialize before your eyes with us.\"\n\n  :links=\"[{ label: 'Get Started', icon: 'i-heroicons-rocket-launch', size: 'lg' }, { label: 'Learn more', trailing-icon: 'i-heroicons-arrow-small-right', color: 'gray', size: 'lg' }]\"\n\n/>\n\n\nYou can add anything you want in the default slot, an image or a code-block using the MDC component (when using @nuxt/content) for example.\n\nYou can change the orientation prop from vertical to horizontal to position the slot on the right side of the hero (this will render better on full-screen).\n\nYou can use the #headline slot to add a Badge, a Button or anything you want above the title.\n\ntitle\ndescription\norientation\nvertical\nSee what's new in v1.17.0\nSupercharged GitHub experience\n\nWork in real-time with your team on open-source and private repositories, all in one place. Working on GitHub issues and notifications has never been that fun.\n\nContinue with GitHub\n<ULandingHero\n\n  title=\"Supercharged GitHub experience\"\n\n  description=\"Work in real-time with your team on open-source and private repositories, all in one place. Working on GitHub issues and notifications has never been that fun.\"\n\n  orientation=\"vertical\"\n\n  :links=\"[{ label: 'Continue with GitHub', icon: 'i-simple-icons-github', color: 'gray', size: 'lg' }]\"\n\n>\n\n  <template #headline>\n\n    <UButton\n\n      color=\"gray\"\n\n      to=\"https://volta.net/changelog\"\n\n      label=\"See what's new in v1.17.0\"\n\n      trailing-icon=\"i-heroicons-arrow-right\"\n\n      size=\"xs\"\n\n      class=\"rounded-full\"\n\n    />\n\n  </template>\n\n  <template #default>\n\n    <img\n\n      src=\"https://picsum.photos/640/360\"\n\n      class=\"w-full rounded-md shadow-xl ring-1 ring-gray-300 dark:ring-gray-700\"\n\n    />\n\n  </template>\n\n</ULandingHero>\n\n\nYou can also use the #title, #description and #links slots to customize the content of the hero. This can be quite useful when using @nuxt/content if your content has HTML for example:\n\ncontent/index.yml\nnavigation: false\n\nhero:\n\n  title: The <span class=\"text-primary\">Building Blocks</span> for<br>Modern Web Apps\n\n  description: 'Nuxt UI Pro is a collection of premium components built on top of Nuxt UI to create beautiful & responsive Nuxt applications in minutes.<br>It includes all primitives to build landing pages, documentation, blogs, changelog, dashboards or entire SaaS products.'\n\n  links:\n\n    - label: Get Started\n\n      to: /pro/guide\n\n      size: lg\n\n      icon: i-heroicons-rocket-launch\n\n    - label: Buy now\n\n      to: /pro#pricing\n\n      color: gray\n\n      icon: i-heroicons-credit-card\n\n      size: lg\n\nWe're using .yml files as an example here but you can use any format supported by @nuxt/content like .md or .json.\npages/index.vue\n<script setup>\n\nconst { data: page } = await useAsyncData('index', () => queryContent('/').findOne())\n\n</script>\n\n\n\n<template>\n\n  <ULandingHero :links=\"page.hero.links\">\n\n    <template #title>\n\n      <span v-html=\"page.hero.title\" />\n\n    </template>\n\n\n\n    <template #description>\n\n      <span v-html=\"page.hero.description\" />\n\n    </template>\n\n  </ULandingHero>\n\n</template>\n\n\nYou can use the #top and #bottom slots to add content above and below the container, this can be useful when adding some absolute positioned svgs for example.\n\nSlots\ntop\n{}\nheadline\n{}\ntitle\n{}\ndescription\n{}\nlinks\n{}\ndefault\n{}\nbottom\n{}\nProps\nui\n{}\n{}\ndescription\nstring\n\"\"\norientation\n\"horizontal\" | \"vertical\"\n\"vertical\"\nlinks\n(Button & { click?: Function; })[]\n[]\nShow properties\ntitle\nstring\n\"\"\n\nFooterColumns\n\nA list of links as columns to display in your Footer.\n\nLandingSection\n\nA customizable section for your landing pages."
  },
  {
    "title": "LandingLogos - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/landing/landing-logos",
    "html": "Pro\nComponents\nLanding\nLandingLogos\nGitHub\n\nA list of logos or images to put on your landing pages.\n\nUsage\n\nUse the title prop and pass a list of icons or images in the default slot.\n\ntitle\nalign\ncenter\nTrusted by the best front-end teams\n<ULandingLogos title=\"Trusted by the best front-end teams\" align=\"center\">\n\n  <UIcon name=\"i-simple-icons-github\" class=\"w-10 h-10 flex-shrink-0\" />\n\n  <UIcon name=\"i-simple-icons-discord\" class=\"w-10 h-10 flex-shrink-0\" />\n\n  <UIcon name=\"i-simple-icons-x\" class=\"w-10 h-10 flex-shrink-0\" />\n\n  <UIcon name=\"i-simple-icons-instagram\" class=\"w-10 h-10 flex-shrink-0\" />\n\n  <UIcon name=\"i-simple-icons-linkedin\" class=\"w-10 h-10 flex-shrink-0\" />\n\n  <UIcon name=\"i-simple-icons-facebook\" class=\"w-10 h-10 flex-shrink-0\" />\n\n</ULandingLogos>\n\nSlots\ndefault\n{}\nProps\nui\n{}\n{}\ntitle\nstring\n\"\"\nalign\n\"left\" | \"right\" | \"center\"\n\"center\"\n\nLandingCard\n\nA pre-built Card with slot support and hover effect.\n\nLandingCTA\n\nA pre-built Card to display a call to action panel in your landing pages."
  },
  {
    "title": "FooterColumns - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/footer/footer-columns",
    "html": "Pro\nComponents\nFooter\nFooterColumns\nLink\nGitHub\n\nA list of links as columns to display in your Footer.\n\nUsage\n\nUse the links prop to display a list of links. Each link will be a column with its children underneath.\n\nCommunity\nNuxters\nVideo Courses\nNuxt on GitHub\nSolutions\nNuxt Content\nNuxt DevTools\nNuxt Image\nNuxt UI\nSubscribe to our newsletter\nSubscribe\n<script setup>\n\nconst links = [{\n\n  label: 'Community',\n\n  children: [{\n\n    label: 'Nuxters',\n\n    to: 'https://nuxters.nuxt.com',\n\n    target: '_blank'\n\n  }, {\n\n    label: 'Video Courses',\n\n    to: 'https://masteringnuxt.com/nuxt3?ref=nuxt',\n\n    target: '_blank'\n\n  }, {\n\n    label: 'Nuxt on GitHub',\n\n    to: 'https://github.com/nuxt',\n\n    target: '_blank'\n\n  }]\n\n}, {\n\n  label: 'Solutions',\n\n  children: [{\n\n    label: 'Nuxt Content',\n\n    to: 'https://content.nuxt.com/',\n\n    target: '_blank'\n\n  }, {\n\n    label: 'Nuxt DevTools',\n\n    to: 'https://devtools.nuxt.com/',\n\n    target: '_blank'\n\n  }, {\n\n    label: 'Nuxt Image',\n\n    to: 'https://image.nuxt.com/',\n\n    target: '_blank'\n\n  }, {\n\n    label: 'Nuxt UI',\n\n    to: 'https://ui.nuxt.com/',\n\n    target: '_blank'\n\n  }]\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UFooterColumns :links=\"links\">\n\n    <template #right>\n\n      <UFormGroup name=\"email\" label=\"Subscribe to our newsletter\" size=\"lg\">\n\n        <UInput type=\"email\" :ui=\"{ icon: { trailing: { pointer: '' } } }\">\n\n          <template #trailing>\n\n            <UButton type=\"submit\" size=\"2xs\" color=\"black\" label=\"Subscribe\" />\n\n          </template>\n\n        </UInput>\n\n      </UFormGroup>\n\n    </template>\n\n  </UFooterColumns>\n\n</template>\n\n\nThe FooterColumns component is meant to be used in the #top slot of the Footer.\n\nAppFooter.vue\n<template>\n\n  <UFooter>\n\n    <template #top>\n\n      <UFooterColumns :links=\"links\" />\n\n    </template>\n\n  </UFooter>\n\n</template>\n\nSlots\nleft\n{}\nright\n{}\nProps\nui\nany\n{}\nlinks\nLink[]\n[]\nShow properties\n\nFooterLinks\n\nA list of links displayed in the Footer.\n\nLandingHero\n\nA responsive hero for your landing pages."
  },
  {
    "title": "FooterLinks - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/footer/footer-links",
    "html": "Pro\nComponents\nFooter\nFooterLinks\nLink\nGitHub\n\nA list of links displayed in the Footer.\n\nThis component is used internally by the Footer, it's unlikely you'll need to use it directly.\nUsage\nDocumentation\nPlayground\nRoadmap\nPro\nReleases\n<script setup>\n\nconst links = [{\n\n  label: 'Documentation',\n\n  icon: 'i-heroicons-book-open',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Playground',\n\n  icon: 'i-simple-icons-stackblitz',\n\n  to: '/playground'\n\n}, {\n\n  label: 'Roadmap',\n\n  icon: 'i-heroicons-academic-cap',\n\n  to: '/roadmap'\n\n}, {\n\n  label: 'Pro',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  to: '/pro'\n\n}, {\n\n  label: 'Releases',\n\n  icon: 'i-heroicons-rocket-launch',\n\n  to: 'https://github.com/nuxt/ui/releases',\n\n  target: '_blank'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UFooterLinks :links=\"links\" />\n\n</template>\n\nProps\nui\nany\n{}\nlinks\nLink[]\n[]\nShow properties\n\nFooter\n\nA responsive <footer> component.\n\nFooterColumns\n\nA list of links as columns to display in your Footer."
  },
  {
    "title": "Main - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/components/main/main",
    "html": "Pro\nComponents\nMain\nMain\nGitHub\n\nA <main> component to fill the screen.\n\nUsage\n\nThe Main component will instantiate a <main> tag and set the min-height to fill the screen based on the --header-height variable, the footer will be pushed out of the screen.\n\napp.vue\n<template>\n\n  <UHeader />\n\n\n\n  <UMain>\n\n    <NuxtLayout>\n\n      <NuxtPage />\n\n    </NuxtLayout>\n\n  </UMain>\n\n\n\n  <UFooter />\n\n</template>\n\nSlots\ndefault\n{}\nProps\nui\nunknown\n\nHeaderLinks\n\nA list of links displayed in the Header.\n\nFooter\n\nA responsive <footer> component."
  },
  {
    "title": "Usage - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/guide/usage",
    "html": "Pro\nGuide\nUsage\n\nLearn how to build your Nuxt app from scratch with Nuxt UI Pro.\n\nAs Nuxt UI Pro is built on top of Nuxt UI, you should check out the Theming documentation first. This is where you'll learn how to choose the primary and gray colors or the icons collections to use for example.\n\nComponents\n\nLike in Nuxt UI, every component is prefixed with a U to avoid conflicts with other components. For example, the Header component is named UHeader.\n\nYou can customize components the same way as @nuxt/ui, through the App Config or ui prop, both of which are smartly merged thanks to tailwind-merge. In the same way, when using the class prop on any component, it will also automatically be merged with the wrapper.\n\nFor example, if you use the LandingGrid component which has this config:\n\nconst config = {\n\n  wrapper: 'flex flex-col lg:grid gap-8 lg:grid-cols-12 relative'\n\n}\n\n\nIf you use a class as such: <ULandingGrid class=\"lg:grid-cols-10\" />, it will be merged with the wrapper class and the grid will have 10 columns instead of 12.\n\nOn top of that, Nuxt UI Pro provides some additional customization options that you can use in your app.config.ts.\n\nVariables\n\nA new variables key is available in the ui object to override some variables used in Nuxt UI Pro. By default, the following variables are used:\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    variables: {\n\n      light: {\n\n        background: '255 255 255',\n\n        foreground: 'var(--color-gray-700)'\n\n      },\n\n      dark: {\n\n        background: 'var(--color-gray-900)',\n\n        foreground: 'var(--color-gray-200)'\n\n      },\n\n      header: {\n\n        height: '4rem'\n\n      }\n\n    }\n\n  }\n\n})\n\n\nThe background and foreground variables are transformed into colors and used in some components. They are also automatically applied to the body element so you don't have to:\n\nbody {\n\n  @apply antialiased font-sans text-foreground bg-background;\n\n}\n\n\nThe header.height variable is used to set the height of the Header component. Some other components like Aside, Main, DocsToc, etc. also use it to position themselves accordingly.\n\nNew variables might be added in the future! Feel free to submit an issue if you feel like something is missing.\nIcons\n\nA new icons key is available in the ui object to override some icons used in Nuxt UI Pro. By default, the following icons are used:\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    icons: {\n\n      dark: 'i-heroicons-moon-20-solid',\n\n      light: 'i-heroicons-sun-20-solid',\n\n      search: 'i-heroicons-magnifying-glass-20-solid',\n\n      external: 'i-heroicons-arrow-up-right-20-solid',\n\n      chevron: 'i-heroicons-chevron-down-20-solid',\n\n      hash: 'i-heroicons-hashtag-20-solid'\n\n    }\n\n  }\n\n})\n\n\nThose are only shortcuts, you can still override them specifically:\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    header: {\n\n      links: {\n\n        trailingIcon: {\n\n          name: 'i-ph-caret-down' // Defaults to `ui.icons.chevron`\n\n        }\n\n      },\n\n      button: {\n\n        icon: {\n\n          open: 'i-ph-list',\n\n          close: 'i-ph-x'\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\n\nNote that those shortcuts are used for icons that are repeated across components, like the dark and light icons used in ColorModeButton, ColorModeToggle and DocsSearch components for example. Other icons like the ui.header.button shown above need to be overridden specifically.\n\nTake a look at nuxt.com app.config.ts to see how to override all the icons.\nStructure\n\nWe'll only provide examples for the most common use cases, but keep in mind that you can do whatever you want. Let's start by configuring our app, then we'll see how to build a Nuxt app with a simple landing page and then how to integrate with the @nuxt/content module.\n\nnuxt.config.ts\n\nIf you've followed the installation guide, you should already have a nuxt.config.ts file with the @nuxt/ui-pro layer and the @nuxt/ui module registered. We'll also configure @nuxt/ui module with some icons collections and take advantage of @nuxtjs/google-fonts and @nuxtjs/fontaine to choose our font.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  extends: ['@nuxt/ui-pro'],\n\n  modules: [\n\n    '@nuxtjs/fontaine',\n\n    '@nuxtjs/google-fonts',\n\n    '@nuxt/ui'\n\n  ],\n\n  ui: {\n\n    icons: ['ph', 'simple-icons']\n\n  },\n\n  colorMode: {\n\n    preference: 'dark'\n\n  },\n\n  googleFonts: {\n\n    display: 'swap',\n\n    download: true,\n\n    families: {\n\n      'DM+Sans': [400, 500, 600, 700]\n\n    }\n\n  },\n\n  fontMetrics: {\n\n    fonts: ['DM Sans']\n\n  }\n\n})\n\nYou can use any icon (100,000+) from Iconify, learn more in the Theming documentation.\napp.config.ts\n\nWe'll now create an app.config.ts file to configure the primary and gray colors. We'll also change the header height, default background and override some icons.\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    primary: 'green',\n\n    gray: 'slate',\n\n    tooltip: {\n\n      background: '!bg-background'\n\n    },\n\n    variables: {\n\n      dark: {\n\n        background: 'var(--color-gray-950)'\n\n      },\n\n      header: {\n\n        height: '5rem'\n\n      }\n\n    },\n\n    icons: {\n\n      dark: 'i-ph-moon-duotone',\n\n      light: 'i-ph-sun-duotone',\n\n      search: 'i-ph-magnifying-glass-duotone',\n\n      external: 'i-ph-arrow-up-right',\n\n      chevron: 'i-ph-caret-down',\n\n      hash: 'i-ph-hash-duotone'\n\n    },\n\n    header: {\n\n      wrapper: 'lg:mb-0 lg:border-0',\n\n      popover: {\n\n        links: {\n\n          active: 'dark:bg-gray-950/50',\n\n          inactive: 'dark:hover:bg-gray-950/50'\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\n\nLike in Nuxt UI, you'll configure components through the ui prop. The key to override a component will be its path, for example ui.landing.hero will override the LandingHero component. The only difference with Nuxt UI is that the config lives inside each component instead of a global ui.config.ts file.\n\nYou can use any color from Tailwind CSS, learn more in the Theming documentation.\ntailwind.config.ts\n\nLet's say we want to override the green color to use the one from Nuxt, we can create a tailwind.config.ts file to do so. Like any other app using Tailwind CSS, you can override any Tailwind config here. We'll also override the fontFamily to use DM Sans as our default font.\n\ntailwind.config.ts\nimport type { Config } from 'tailwindcss'\n\nimport defaultTheme from 'tailwindcss/defaultTheme'\n\n\n\nexport default <Partial<Config>>{\n\n  theme: {\n\n    extend: {\n\n      fontFamily: {\n\n        sans: ['DM Sans', 'DM Sans fallback', ...defaultTheme.fontFamily.sans]\n\n      },\n\n      colors: {\n\n        green: {\n\n          50: '#EFFDF5',\n\n          100: '#D9FBE8',\n\n          200: '#B3F5D1',\n\n          300: '#75EDAE',\n\n          400: '#00DC82',\n\n          500: '#00C16A',\n\n          600: '#00A155',\n\n          700: '#007F45',\n\n          800: '#016538',\n\n          900: '#0A5331',\n\n          950: '#052e16'\n\n        }\n\n      }\n\n    }\n\n  }\n\n}\n\napp.vue\n\nLet's add an app.vue file which will be the root component of our app. We can use the Header, Main and Footer components to build the layout of our app.\n\napp.vue\n<script setup lang=\"ts\">\n\nconst links = [{\n\n  label: 'Documentation',\n\n  icon: 'i-heroicons-book-open',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Playground',\n\n  icon: 'i-simple-icons-stackblitz',\n\n  to: '/playground'\n\n}, {\n\n  label: 'Roadmap',\n\n  icon: 'i-heroicons-academic-cap',\n\n  to: '/roadmap'\n\n}, {\n\n  label: 'Pro',\n\n  icon: 'i-heroicons-square-3-stack-3d',\n\n  to: '/pro'\n\n}, {\n\n  label: 'Releases',\n\n  icon: 'i-heroicons-rocket-launch',\n\n  to: 'https://github.com/nuxt/ui/releases',\n\n  target: '_blank'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UHeader :links=\"links\">\n\n    <template #logo>\n\n      <Logo class=\"w-auto h-6\" />\n\n    </template>\n\n\n\n    <template #right>\n\n      <UColorModeButton />\n\n\n\n      <UButton icon=\"i-simple-icons-github\" to=\"https://github.com/nuxt/nuxt\" target=\"_blank\" color=\"gray\" variant=\"ghost\" />\n\n    </template>\n\n  </UHeader>\n\n\n\n  <UMain>\n\n    <NuxtLayout>\n\n      <NuxtPage />\n\n    </NuxtLayout>\n\n  </UMain>\n\n\n\n  <UFooter>\n\n    <template #left>\n\n      <p class=\"text-gray-500 dark:text-gray-400 text-sm\">\n\n        Copyright © 2016-{{ new Date().getFullYear() }} Nuxt - <NuxtLink class=\"hover:underline\" to=\"https://github.com/nuxt/nuxt/blob/main/LICENSE\" target=\"_blank\">\n\n          MIT License\n\n        </NuxtLink>\n\n      </p>\n\n    </template>\n\n\n\n    <template #right>\n\n      <UButton to=\"https://x.com/nuxt_js\" target=\"_blank\" icon=\"i-simple-icons-x\" color=\"gray\" variant=\"ghost\" />\n\n      <UButton to=\"https://discord.com/invite/ps2h6QT\" target=\"_blank\" icon=\"i-simple-icons-discord\" color=\"gray\" variant=\"ghost\" />\n\n      <UButton to=\"https://github.com/nuxt/nuxt\" target=\"_blank\" icon=\"i-simple-icons-github\" color=\"gray\" variant=\"ghost\" />\n\n    </template>\n\n  </UFooter>\n\n  <UNotifications />\n\n</template>\n\n\nThis example is quite long but demonstrates some props and slots available to customize your app. You can find the documentation of each component in the Components section.\n\npages/index.vue\n\nNow, we can create our first page. We'll use the LandingHero and LandingSection components to build a simple landing page.\n\npages/index.vue\n<template>\n\n  <div>\n\n    <ULandingHero description=\"Nuxt UI Pro is a collection of premium components built on top of Nuxt UI to create beautiful & responsive Nuxt applications in minutes.\">\n\n      <template #title>\n\n        The <span class=\"text-primary block lg:inline-block\">Building Blocks</span> for Modern Web apps\n\n      </template>\n\n    </ULandingHero>\n\n\n\n    <ULandingSection title=\"The freedom to build anything\" align=\"left\" />\n\n\n\n    <ULandingSection title=\"The flexibility to control your data\" align=\"right\" />\n\n  </div>\n\n</template>\n\n\nThis is a very simple example as it's way easier to demonstrate with @nuxt/content rather than hard-coding the content.\n\nNuxt UI Pro components can be used in various ways, we'll release some templates soon to help you get started. With each template, a new page in the guide will be added to explain how to build a documentation, a blog, a landing page, etc.\n\nSetup\n\nLearn how to install Nuxt UI Pro in your Nuxt application.\n\nContent\n\nLearn how to build your app with @nuxt/content module."
  },
  {
    "title": "Content - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/guide/content",
    "html": "Pro\nGuide\nContent\n\nLearn how to build your app with @nuxt/content module.\n\nWhen building a landing page, a documentation, a blog or even a changelog you will need to manage content. You can do it manually by creating a new page for each content, fetch it from a CMS, store in your own database, etc. or use the @nuxt/content module to manage your content with Git.\n\nTake a look at Nuxt Studio, the Pro version of @nuxt/content which is fully compatible with @nuxt/ui-pro.\nSetup\n\nTo get started, you can follow the Installation guide or in summary:\n\npnpm\nyarn\nnpm\npnpm i @nuxt/content\n\n\nThen add the module to your nuxt.config.ts:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  extends: ['@nuxt/ui-pro'],\n\n  modules: [\n\n    '@nuxt/content',\n\n    '@nuxt/ui'\n\n  ]\n\n})\n\nYou need to register @nuxt/content before @nuxt/ui otherwise Tailwind CSS classes won't be parsed in your .md and .yml files.\n\nNow that @nuxt/content module is installed, the layer will automatically configure the syntax highlight theme with material-theme and preload some languages so you don't have to.\n\nComponents\n\nYou might be using @nuxt/content to build a documentation. To help you with that, we've built some components that you can use in your pages:\n\na full-text search command palette out of the box with the DocsSearch component. No need to setup Algolia DocSearch anymore.\na sticky Table of Contents with the DocsToc component\na prev / next navigation with the DocsSurround component\nTypography\n\nTo make the most out of @nuxt/content, we use the @tailwindcss/typography plugin to style your content. The defaults of the plugin have been overriden to use the primary and gray colors from your App Config alongside many other customizations so it matches the design system of Nuxt UI.\n\nYou will be able to wrap your <ContentSlot /> or <ContentRenderer /> with the PageBody component and its prose class to apply the prose prose-primary dark:prose-invert max-w-none classes automatically to your content and make it look great.\n\nTo help you when writing content, we've also added some components to use in your .md files using the MDC syntax like a Callout, Card, CodeGroup, etc.\n\nUtils\n\nSome utils will be auto-imported to make the bridge between @nuxt/content and @nuxt/ui-pro:\n\nmapContentNavigation\n\nThis util will map the navigation from fetchContentNavigation that you'll usually fetch in your app.vue file and transform it recursively into an array of objects expected by components like NavigationTree.\n\napp.vue\n<script setup lang=\"ts\">\n\nconst { data: navigation } = await useAsyncData('navigation', () => fetchContentNavigation())\n\n</script>\n\n\n\n<template>\n\n  <UHeader>\n\n    <template #panel>\n\n      <UNavigationTree :links=\"mapContentNavigation(navigation)\" />\n\n    </template>\n\n  </UHeader>\n\n</template>\n\nfindPageHeadline\n\nThis util will allow you to bind an headline in the PageHeader based on the page _dir.\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\n\n\nconst headline = computed(() => findPageHeadline(page.value))\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader v-bind=\"page\" :headline=\"headline\" />\n\n  </UPage>\n\n</template>\n\nfindPageBreadcrumb\n\nThis util will recursively find the breadcrumb of a page based on the navigation so you can use it in the PageHeader #headline slot.\n\npages/[...slug].vue\n<script setup lang=\"ts\">\n\nimport type { NavItem } from '@nuxt/content/dist/runtime/types'\n\n\n\nconst navigation = inject<Ref<NavItem[]>>('navigation')\n\n\n\nconst route = useRoute()\n\n\n\nconst { data: page } = await useAsyncData(route.path, () => queryContent(route.path).findOne())\n\n\n\nconst breadcrumb = computed(() => findPageBreadcrumb(navigation.value, page.value))\n\n</script>\n\n\n\n<template>\n\n  <UPage>\n\n    <UPageHeader v-bind=\"page\">\n\n      <template #headline>\n\n        <UBreadcrumb :links=\"breadcrumb\" />\n\n      </template>\n\n    </UPageHeader>\n\n  </UPage>\n\n</template>\n\n\nYou should have all the informations to start building your app with @nuxt/ui-pro, you can now explore all the available components and learn how to use them.\n\nUsage\n\nLearn how to build your Nuxt app from scratch with Nuxt UI Pro.\n\nHeader\n\nA responsive and sticky <header> component."
  },
  {
    "title": "Toggle - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/toggle",
    "html": "Forms\nToggle\nGitHub\nSwitch\n\nDisplay a toggle field.\n\nUsage\n\nUse a v-model to make the Toggle reactive.\n\n<script setup>\n\nconst selected = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <UToggle v-model=\"selected\" />\n\n</template>\n\nStyle\n\nUse the color prop to change the style of the Toggle.\n\ncolor\nprimary\n<UToggle color=\"primary\" />\n\nSize New\n\nUse the size prop to change the size of the Toggle.\n\nsize\nmd\n<UToggle size=\"md\" />\n\nIcon\n\nUse any icon from Iconify by setting the on-icon and off-icon props by using this pattern: i-{collection_name}-{icon_name} or change it globally in ui.toggle.default.onIcon and ui.toggle.default.offIcon.\n\n<UToggle\n\n  on-icon=\"i-heroicons-check-20-solid\"\n\n  off-icon=\"i-heroicons-x-mark-20-solid\"\n\n/>\n\nDisabled\n\nUse the disabled prop to disable the Toggle.\n\ndisabled\n<UToggle disabled />\n\nProps\nname\nstring\nnull\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nsize\nToggleSize\nconfig.default.size\n\"2xs\"\"xs\"\"sm\"\"md\"\"lg\"\"xl\"\"2xl\"\nid\nstring\nnull\noffIcon\nstring\nconfig.default.offIcon\nmodelValue\nboolean\nfalse\ndisabled\nboolean\nfalse\nConfig\n{\n\n  \"base\": \"relative inline-flex flex-shrink-0 border-2 border-transparent disabled:cursor-not-allowed disabled:opacity-50 focus:outline-none\",\n\n  \"rounded\": \"rounded-full\",\n\n  \"ring\": \"focus-visible:ring-2 focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-gray-900\",\n\n  \"active\": \"bg-{color}-500 dark:bg-{color}-400\",\n\n  \"inactive\": \"bg-gray-200 dark:bg-gray-700\",\n\n  \"size\": {\n\n    \"2xs\": \"h-3 w-5\",\n\n    \"xs\": \"h-3.5 w-6\",\n\n    \"sm\": \"h-4 w-7\",\n\n    \"md\": \"h-5 w-9\",\n\n    \"lg\": \"h-6 w-11\",\n\n    \"xl\": \"h-7 w-[3.25rem]\",\n\n    \"2xl\": \"h-8 w-[3.75rem]\"\n\n  },\n\n  \"container\": {\n\n    \"base\": \"pointer-events-none relative inline-block rounded-full bg-white dark:bg-gray-900 shadow transform ring-0 transition ease-in-out duration-200\",\n\n    \"active\": {\n\n      \"2xs\": \"translate-x-2 rtl:-translate-x-2\",\n\n      \"xs\": \"translate-x-2.5 rtl:-translate-x-2.5\",\n\n      \"sm\": \"translate-x-3 rtl:-translate-x-3\",\n\n      \"md\": \"translate-x-4 rtl:-translate-x-4\",\n\n      \"lg\": \"translate-x-5 rtl:-translate-x-5\",\n\n      \"xl\": \"translate-x-6 rtl:-translate-x-6\",\n\n      \"2xl\": \"translate-x-7 rtl:-translate-x-7\"\n\n    },\n\n    \"inactive\": \"translate-x-0 rtl:-translate-x-0\",\n\n    \"size\": {\n\n      \"2xs\": \"h-2 w-2\",\n\n      \"xs\": \"h-2.5 w-2.5\",\n\n      \"sm\": \"h-3 w-3\",\n\n      \"md\": \"h-4 w-4\",\n\n      \"lg\": \"h-5 w-5\",\n\n      \"xl\": \"h-6 w-6\",\n\n      \"2xl\": \"h-7 w-7\"\n\n    }\n\n  },\n\n  \"icon\": {\n\n    \"base\": \"absolute inset-0 h-full w-full flex items-center justify-center transition-opacity\",\n\n    \"active\": \"opacity-100 ease-in duration-200\",\n\n    \"inactive\": \"opacity-0 ease-out duration-100\",\n\n    \"size\": {\n\n      \"2xs\": \"h-2 w-2\",\n\n      \"xs\": \"h-2 w-2\",\n\n      \"sm\": \"h-2 w-2\",\n\n      \"md\": \"h-3 w-3\",\n\n      \"lg\": \"h-4 w-4\",\n\n      \"xl\": \"h-5 w-5\",\n\n      \"2xl\": \"h-6 w-6\"\n\n    },\n\n    \"on\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"off\": \"text-gray-400 dark:text-gray-500\"\n\n  },\n\n  \"default\": {\n\n    \"onIcon\": null,\n\n    \"offIcon\": null,\n\n    \"color\": \"primary\",\n\n    \"size\": \"md\"\n\n  }\n\n}\n\n\nRadioGroup\n\nDisplay a set of radio buttons.\n\nRange\n\nDisplay a range field"
  },
  {
    "title": "Setup - Nuxt UI Pro",
    "url": "https://ui.nuxt.com/pro/guide",
    "html": "Pro\nGuide\nSetup\n\nLearn how to install Nuxt UI Pro in your Nuxt application.\n\nIntroduction\n\nNuxt UI Pro is a premium layer built on top of Nuxt UI that provides additional components, composables and utils to build your Nuxt app. Unlike Nuxt UI low-level components, those components are oriented on structure and layout and are designed to be used as building blocks for your app.\n\nThis layer will not inject any pages or layouts, you will have to create them yourself. We believe that this provides more flexibility and allows you to build your app the way you want.\n\nWhile Nuxt UI is free and open source, UI Pro is a paid product that helps sustain Nuxt OSS development.\n\nNuxt UI Pro is already used in production on many apps so we're confident that it will help you build your app faster and better, with 10x less code.\n\nTemplates\n\nYou can get started with one of our official templates:\n\nStarter\n\nThe fastest way to get started with Nuxt UI Pro.\n\nLanding\n\nA landing page you can use as starting point.\n\nDocs\n\nWrite your docs with Nuxt Content.\n\nYou can use the Use this template button on GitHub to create a new repository or use the CLI:\n\nTerminal\nnpx nuxi init -t github:nuxt-ui-pro/docs\n\nExplore the community templates on GitHub.\nInstallation\nAdd @nuxt/ui-pro dependency to your project:\npnpm\nyarn\nnpm\npnpm i @nuxt/ui-pro\n\nNo need to install @nuxt/ui yourself as it's already a dependency of @nuxt/ui-pro.\nExtend @nuxt/ui-pro layer and register @nuxt/ui module in your nuxt.config:\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  extends: ['@nuxt/ui-pro'],\n\n  modules: ['@nuxt/ui']\n\n})\n\n\nStart your development server, you should now be able to use all the components, composables and utils from Nuxt UI Pro 🚀\n\nLicense\n\nNuxt UI Pro is free in development, but you need a license to use it in production.\n\nPurchase a license for Nuxt UI Pro.\n\nOnce purchased, you will receive an email with a license key to activate. Visit https://ui.nuxt.com/pro/activate to activate your license with your GitHub username and license key, you will be invited to the private GitHub repository.\n\nThen, use your license key in your .env file:\n\n.env\nNUXT_UI_PRO_LICENSE=<your-license-key>\n\n\nIf you have multiple projects on your machine, you can also add it to your ~/.nuxtrc:\n\n.nuxtrc\nuiPro.license=<your-token>\n\nEdge\n\nTo use the latest updates pushed on the dev branch, you can use @nuxt/ui-pro-edge.\n\nUpdate your package.json to the following:\n\npackage.json\n{\n\n  \"devDependencies\": {\n\n-   \"@nuxt/ui-pro\": \"^0.3.1\"\n\n+   \"@nuxt/ui-pro\": \"npm:@nuxt/ui-pro-edge@latest\"\n\n  }\n\n}\n\n\nThen run pnpm install, yarn install or npm install.\n\n \n\nUsage\n\nLearn how to build your Nuxt app from scratch with Nuxt UI Pro."
  },
  {
    "title": "Table - Nuxt UI",
    "url": "https://ui.nuxt.com/data/table",
    "html": "Data\nTable\nGitHub\n\nDisplay data in a table.\n\nUsage\n\nUse the rows prop to set the data to display in the table. By default, the table will display all the fields of the rows.\n\nId\tName\tTitle\tEmail\tRole\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n<script setup>\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTable :rows=\"people\" />\n\n</template>\n\nColumns\n\nUse the columns prop to configure which columns to display. It's an array of objects with the following properties:\n\nlabel - The label to display in the table header. Can be changed through the column-attribute prop.\nkey - The field to display from the row data.\nsortable - Whether the column is sortable. Defaults to false.\ndirection - The sort direction to use on first click. Defaults to asc.\nclass - The class to apply to the column cells.\nID\tUser name\tJob position\tEmail\t\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n<script setup>\n\nconst columns = [{\n\n  key: 'id',\n\n  label: 'ID'\n\n}, {\n\n  key: 'name',\n\n  label: 'User name'\n\n}, {\n\n  key: 'title',\n\n  label: 'Job position'\n\n}, {\n\n  key: 'email',\n\n  label: 'Email'\n\n}, {\n\n  key: 'role'\n\n}]\n\n\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTable :columns=\"columns\" :rows=\"people\" />\n\n</template>\n\n\nYou can easily use the SelectMenu component to change the columns to display.\n\n5 selected\nID\tName\tTitle\tEmail\tRole\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n<script setup>\n\nconst columns = [{\n\n  key: 'id',\n\n  label: 'ID'\n\n}, {\n\n  key: 'name',\n\n  label: 'Name'\n\n}, {\n\n  key: 'title',\n\n  label: 'Title'\n\n}, {\n\n  key: 'email',\n\n  label: 'Email'\n\n}, {\n\n  key: 'role',\n\n  label: 'Role'\n\n}]\n\n\n\nconst selectedColumns = ref([...columns])\n\n\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <div class=\"flex px-3 py-3.5 border-b border-gray-200 dark:border-gray-700\">\n\n      <USelectMenu v-model=\"selectedColumns\" :options=\"columns\" multiple placeholder=\"Columns\" />\n\n    </div>\n\n\n\n    <UTable :columns=\"selectedColumns\" :rows=\"people\" />\n\n  </div>\n\n</template>\n\nSortable\n\nYou can make the columns sortable by setting the sortable property to true in the column configuration.\n\nID\t\nName\n\t\nTitle\n\t\nEmail\n\tRole\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n<script setup>\n\nconst columns = [{\n\n  key: 'id',\n\n  label: 'ID'\n\n}, {\n\n  key: 'name',\n\n  label: 'Name',\n\n  sortable: true\n\n}, {\n\n  key: 'title',\n\n  label: 'Title',\n\n  sortable: true\n\n}, {\n\n  key: 'email',\n\n  label: 'Email',\n\n  sortable: true,\n\n  direction: 'desc'\n\n}, {\n\n  key: 'role',\n\n  label: 'Role'\n\n}]\n\n\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTable :columns=\"columns\" :rows=\"people\" :sort=\"{ column: 'title' }\" />\n\n</template>\n\n\nYou may specify the default direction of each column through the direction property. It can be either asc or desc, but it will default to asc.\n\nYou can specify a default sort for the table through the sort prop. It's an object with the following properties:\n\ncolumn - The column to sort by.\ndirection - The sort direction. Can be either asc or desc and defaults to asc.\nThis will set the default sort and will work even if no column is set as sortable.\n\nUse the sort-button prop to customize the sort button in the header. You can pass all the props of the Button component to customize it through this prop or globally through ui.table.default.sortButton. Its icon defaults to i-heroicons-arrows-up-down-20-solid.\n\nID\t\nName\n\t\nTitle\n\t\nEmail\n\tRole\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n<UTable\n\n  sort-asc-icon=\"i-heroicons-arrow-up-20-solid\"\n\n  sort-desc-icon=\"i-heroicons-arrow-down-20-solid\"\n\n  :sort-button=\"{ icon: 'i-heroicons-sparkles-20-solid', color: 'primary', variant: 'outline', size: '2xs', square: false, ui: { rounded: 'rounded-full' } }\"\n\n  class=\"w-full\"\n\n  :columns=\"[{ key: 'id', label: 'ID' }, { key: 'name', label: 'Name', sortable: true }, { key: 'title', label: 'Title', sortable: true }, { key: 'email', label: 'Email', sortable: true }, { key: 'role', label: 'Role' }]\"\n\n  :rows=\"[{ id: 1, name: 'Lindsay Walton', title: 'Front-end Developer', email: 'lindsay.walton@example.com', role: 'Member' }, { id: 2, name: 'Courtney Henry', title: 'Designer', email: 'courtney.henry@example.com', role: 'Admin' }, { id: 3, name: 'Tom Cook', title: 'Director of Product', email: 'tom.cook@example.com', role: 'Member' }, { id: 4, name: 'Whitney Francis', title: 'Copywriter', email: 'whitney.francis@example.com', role: 'Admin' }, { id: 5, name: 'Leonard Krasner', title: 'Senior Designer', email: 'leonard.krasner@example.com', role: 'Owner' }, { id: 6, name: 'Floyd Miles', title: 'Principal Designer', email: 'floyd.miles@example.com', role: 'Member' }]\"\n\n/>\n\n\nUse the sort-asc-icon prop to set a different icon or change it globally in ui.table.default.sortAscIcon. Defaults to i-heroicons-bars-arrow-up-20-solid.\n\nUse the sort-desc-icon prop to set a different icon or change it globally in ui.table.default.sortDescIcon. Defaults to i-heroicons-bars-arrow-down-20-solid.\n\nYou can also customize the entire header cell, read more in the Slots section.\nReactive sorting\n\nSometimes you will want to fetch new data depending on the sorted column and direction. You can use the v-model:sort to automatically update the ref reactive element every time the sorting changes on the Table. You may also use @update:sort to call your own function with the sorting data.\n\nFor example, we can take advantage of useLazyRefresh computed URL to automatically fetch the data depending on the sorting column and direction every time the sort reactive element changes.\n\n<script setup>\n\n// Ensure it uses `ref` instead of `reactive`.\n\nconst sort = ref({\n\n  column: 'name',\n\n  direction: 'desc'\n\n})\n\n\n\nconst columns = [...]\n\n\n\nconst { data, pending } = useLazyFetch(() => {\n\n  return `/api/users?orderBy=${sort.value.column}&order=${sort.value.direction}`\n\n})\n\n</script>\n\n\n\n<template>\n\n  <UTable v-model:sort=\"sort\" :loading=\"pending\" :columns=\"columns\" :rows=\"data\" />\n\n</template>\n\n\nThe initial value of sort will be respected as the initial sort column and direction, as well as each column default sorting direction.\n\nID\t\nName\n\t\nTitle\n\tEmail\t\nRole\n\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n<script setup>\n\nconst sort = ref({\n\n  column: 'name',\n\n  direction: 'desc'\n\n})\n\n\n\nconst columns = [{\n\n  key: 'id',\n\n  label: 'ID'\n\n}, {\n\n  key: 'name',\n\n  label: 'Name',\n\n  sortable: true\n\n}, {\n\n  key: 'title',\n\n  label: 'Title',\n\n  sortable: true\n\n}, {\n\n  key: 'email',\n\n  label: 'Email'\n\n}, {\n\n  key: 'role',\n\n  label: 'Role',\n\n  sortable: true,\n\n  direction: 'desc'\n\n}]\n\n\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTable v-model:sort=\"sort\" :columns=\"columns\" :rows=\"people\" />\n\n</template>\n\nSelectable\n\nUse a v-model to make the table selectable. The v-model will be an array of the selected rows.\n\n\tId\tName\tTitle\tEmail\tRole\n\n\t1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n\n\t2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n\n\t3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n\n\t4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n\n\t5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n\n\t6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n<script setup>\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n\n\nconst selected = ref([people[1]])\n\n</script>\n\n\n\n<template>\n\n  <UTable v-model=\"selected\" :rows=\"people\" />\n\n</template>\n\nYou can use the by prop to compare objects by a field instead of comparing object instances. We've replicated the behavior of Headless UI Combobox.\n\nYou can also add a select listener on your Table to make the rows clickable. The function will receive the row as the first argument.\n\nYou can use this to navigate to a page, open a modal or even to select the row manually.\n\n\tId\tName\tTitle\tEmail\tRole\n\n\t1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n\n\t2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n\n\t3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n\n\t4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n\n\t5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n<script setup>\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}]\n\n\n\nfunction select (row) {\n\n  const index = selected.value.findIndex((item) => item.id === row.id)\n\n  if (index === -1) {\n\n    selected.value.push(row)\n\n  } else {\n\n    selected.value.splice(index, 1)\n\n  }\n\n}\n\n\n\nconst selected = ref([people[1]])\n\n</script>\n\n\n\n<template>\n\n  <UTable v-model=\"selected\" :rows=\"people\" @select=\"select\" />\n\n</template>\n\nSearchable\n\nYou can easily use the Input component to filter the rows.\n\nID\tName\tTitle\tEmail\tRole\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n6\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\n<script setup>\n\nconst columns = [{\n\n  key: 'id',\n\n  label: 'ID'\n\n}, {\n\n  key: 'name',\n\n  label: 'Name'\n\n}, {\n\n  key: 'title',\n\n  label: 'Title'\n\n}, {\n\n  key: 'email',\n\n  label: 'Email'\n\n}, {\n\n  key: 'role',\n\n  label: 'Role'\n\n}]\n\n\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n\n\nconst q = ref('')\n\n\n\nconst filteredRows = computed(() => {\n\n  if (!q.value) {\n\n    return people\n\n  }\n\n\n\n  return people.filter((person) => {\n\n    return Object.values(person).some((value) => {\n\n      return String(value).toLowerCase().includes(q.value.toLowerCase())\n\n    })\n\n  })\n\n})\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <div class=\"flex px-3 py-3.5 border-b border-gray-200 dark:border-gray-700\">\n\n      <UInput v-model=\"q\" placeholder=\"Filter people...\" />\n\n    </div>\n\n\n\n    <UTable :rows=\"filteredRows\" :columns=\"columns\" />\n\n  </div>\n\n</template>\n\nPaginable\n\nYou can easily use the Pagination component to paginate the rows.\n\nId\tName\tTitle\tEmail\tRole\n1\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\n2\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\n3\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\n4\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\n5\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\n1\n2\n3\n<script setup>\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 7,\n\n  name: 'Emily Selman',\n\n  title: 'VP, User Experience',\n\n  email: '',\n\n  role: 'Admin'\n\n}, {\n\n  id: 8,\n\n  name: 'Kristin Watson',\n\n  title: 'VP, Human Resources',\n\n  email: '',\n\n  role: 'Member'\n\n}, {\n\n  id: 9,\n\n  name: 'Emma Watson',\n\n  title: 'Front-end Developer',\n\n  email: '',\n\n  role: 'Member'\n\n}, {\n\n  id: 10,\n\n  name: 'John Doe',\n\n  title: 'Designer',\n\n  email: '',\n\n  role: 'Admin'\n\n}, {\n\n  id: 11,\n\n  name: 'Jane Doe',\n\n  title: 'Director of Product',\n\n  email: '',\n\n  role: 'Member'\n\n}, {\n\n  id: 12,\n\n  name: 'John Smith',\n\n  title: 'Copywriter',\n\n  email: '',\n\n  role: 'Admin'\n\n}, {\n\n  id: 13,\n\n  name: 'Jane Smith',\n\n  title: 'Senior Designer',\n\n  email: '',\n\n  role: 'Owner'\n\n}]\n\n\n\nconst page = ref(1)\n\nconst pageCount = 5\n\n\n\nconst rows = computed(() => {\n\n  return people.slice((page.value - 1) * pageCount, (page.value) * pageCount)\n\n})\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UTable :rows=\"rows\" />\n\n\n\n    <div class=\"flex justify-end px-3 py-3.5 border-t border-gray-200 dark:border-gray-700\">\n\n      <UPagination v-model=\"page\" :page-count=\"pageCount\" :total=\"people.length\" />\n\n    </div>\n\n  </div>\n\n</template>\n\nLoading\n\nUse the loading prop to display a loading state.\n\nUse the loading-state prop to customize the icon and label or change them globally in ui.table.default.loadingState.\n\nYou can also set it to null to hide the loading state.\n\nloading\nID\tName\tTitle\tEmail\tRole\n\n\nLoading...\n\n<UTable\n\n  loading\n\n  :loading-state=\"{ icon: 'i-heroicons-arrow-path-20-solid', label: 'Loading...' }\"\n\n  class=\"w-full\"\n\n  :columns=\"[{ key: 'id', label: 'ID' }, { key: 'name', label: 'Name' }, { key: 'title', label: 'Title' }, { key: 'email', label: 'Email' }, { key: 'role', label: 'Role' }]\"\n\n/>\n\n\nThis can be easily used with Nuxt useAsyncData composable.\n\n<script setup>\n\nconst columns = [...]\n\n\n\nconst { pending, data: people } = await useLazyAsyncData('people', () => $fetch('/api/people'))\n\n</script>\n\n\n\n<template>\n\n  <UTable :rows=\"people\" :columns=\"columns\" :loading=\"pending\" />\n\n</template>\n\nEmpty\n\nAn empty state will be displayed when there are no results.\n\nUse the empty-state prop to customize the icon and label or change them globally in ui.table.default.emptyState.\n\nYou can also set it to null to hide the empty state.\n\nID\tName\tTitle\tEmail\tRole\n\n\nNo items.\n\n<UTable\n\n  :empty-state=\"{ icon: 'i-heroicons-circle-stack-20-solid', label: 'No items.' }\"\n\n  class=\"w-full\"\n\n  :columns=\"[{ key: 'id', label: 'ID' }, { key: 'name', label: 'Name' }, { key: 'title', label: 'Title' }, { key: 'email', label: 'Email' }, { key: 'role', label: 'Role' }]\"\n\n/>\n\nStyling\n\nYou can apply styles to tr and td elements by passing a class to rows.\n\nAlso, you can apply styles to th elements by passing a class to columns.\n\n#\tQuantity\tName\n1\t100\tApple\n2\t0\tOrange\n3\t30\tBanana\n4\t5\tMango\n<script setup>\n\nconst columns = [{\n\n  key: 'id',\n\n  label: '#'\n\n}, {\n\n  key: 'quantity',\n\n  label: 'Quantity',\n\n  class: 'italic'\n\n}, {\n\n  key: 'name',\n\n  label: 'Name'\n\n}]\n\n\n\nconst items = [{\n\n  id: 1,\n\n  name: 'Apple',\n\n  quantity: { value: 100, class: 'bg-green-500/50 dark:bg-green-400/50' }\n\n}, {\n\n  id: 2,\n\n  name: 'Orange',\n\n  quantity: { value: 0 },\n\n  class: 'bg-red-500/50 dark:bg-red-400/50 animate-pulse'\n\n}, {\n\n  id: 3,\n\n  name: 'Banana',\n\n  quantity: { value: 30, class: 'bg-green-500/50 dark:bg-green-400/50' }\n\n}, {\n\n  id: 4,\n\n  name: 'Mango',\n\n  quantity: { value: 5, class: 'bg-green-500/50 dark:bg-green-400/50' }\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTable :rows=\"items\" :columns=\"columns\">\n\n    <template #quantity-data=\"{ row }\">\n\n      {{ row.quantity.value }}\n\n    </template>\n\n  </UTable>\n\n</template>\n\nSlots\n\nYou can use slots to customize the header and data cells of the table.\n\n<column>-header\n\nUse the #<column>-header slot to customize the header cell of a column. You will have access to the column, sort and on-sort properties in the slot scope.\n\nThe sort property is an object with the following properties:\n\nfield - The field to sort by.\ndirection - The direction to sort by. Can be asc or desc.\n\nThe on-sort property is a function that you can call to sort the table and accepts the column as parameter.\n\nEven though you can customize the sort button as mentioned in the Sortable section, you can use this slot to completely override its behavior, with a custom dropdown for example.\n<column>-data\n\nUse the #<column>-data slot to customize the data cell of a column. You will have access to the row, column and getRowData properties in the slot scope.\n\nYou can for example create an extra column for actions with a Dropdown component inside or change the color of the rows based on a selection.\n\n\tName\tTitle\tEmail\tRole\t\n\n\tLindsay Walton\tFront-end Developer\tlindsay.walton@example.com\tMember\t\n\n\n\tCourtney Henry\tDesigner\tcourtney.henry@example.com\tAdmin\t\n\n\n\tTom Cook\tDirector of Product\ttom.cook@example.com\tMember\t\n\n\n\tWhitney Francis\tCopywriter\twhitney.francis@example.com\tAdmin\t\n\n\n\tLeonard Krasner\tSenior Designer\tleonard.krasner@example.com\tOwner\t\n\n\n\tFloyd Miles\tPrincipal Designer\tfloyd.miles@example.com\tMember\t\n<script setup>\n\nconst columns = [{\n\n  key: 'name',\n\n  label: 'Name'\n\n}, {\n\n  key: 'title',\n\n  label: 'Title'\n\n}, {\n\n  key: 'email',\n\n  label: 'Email'\n\n}, {\n\n  key: 'role',\n\n  label: 'Role'\n\n}, {\n\n  key: 'actions'\n\n}]\n\n\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Lindsay Walton',\n\n  title: 'Front-end Developer',\n\n  email: 'lindsay.walton@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 2,\n\n  name: 'Courtney Henry',\n\n  title: 'Designer',\n\n  email: 'courtney.henry@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 3,\n\n  name: 'Tom Cook',\n\n  title: 'Director of Product',\n\n  email: 'tom.cook@example.com',\n\n  role: 'Member'\n\n}, {\n\n  id: 4,\n\n  name: 'Whitney Francis',\n\n  title: 'Copywriter',\n\n  email: 'whitney.francis@example.com',\n\n  role: 'Admin'\n\n}, {\n\n  id: 5,\n\n  name: 'Leonard Krasner',\n\n  title: 'Senior Designer',\n\n  email: 'leonard.krasner@example.com',\n\n  role: 'Owner'\n\n}, {\n\n  id: 6,\n\n  name: 'Floyd Miles',\n\n  title: 'Principal Designer',\n\n  email: 'floyd.miles@example.com',\n\n  role: 'Member'\n\n}]\n\n\n\nconst items = (row) => [\n\n  [{\n\n    label: 'Edit',\n\n    icon: 'i-heroicons-pencil-square-20-solid',\n\n    click: () => console.log('Edit', row.id)\n\n  }, {\n\n    label: 'Duplicate',\n\n    icon: 'i-heroicons-document-duplicate-20-solid'\n\n  }], [{\n\n    label: 'Archive',\n\n    icon: 'i-heroicons-archive-box-20-solid'\n\n  }, {\n\n    label: 'Move',\n\n    icon: 'i-heroicons-arrow-right-circle-20-solid'\n\n  }], [{\n\n    label: 'Delete',\n\n    icon: 'i-heroicons-trash-20-solid'\n\n  }]\n\n]\n\n\n\nconst selected = ref([people[1]])\n\n</script>\n\n\n\n<template>\n\n  <UTable v-model=\"selected\" :rows=\"people\" :columns=\"columns\">\n\n    <template #name-data=\"{ row }\">\n\n      <span :class=\"[selected.find(person => person.id === row.id) && 'text-primary-500 dark:text-primary-400']\">{{ row.name }}</span>\n\n    </template>\n\n\n\n    <template #actions-data=\"{ row }\">\n\n      <UDropdown :items=\"items(row)\">\n\n        <UButton color=\"gray\" variant=\"ghost\" icon=\"i-heroicons-ellipsis-horizontal-20-solid\" />\n\n      </UDropdown>\n\n    </template>\n\n  </UTable>\n\n</template>\n\nloading-state\n\nUse the #loading-state slot to customize the loading state.\n\nName\tTitle\tEmail\tRole\t\n\n<script setup>\n\nconst columns = [{\n\n  key: 'name',\n\n  label: 'Name'\n\n}, {\n\n  key: 'title',\n\n  label: 'Title'\n\n}, {\n\n  key: 'email',\n\n  label: 'Email'\n\n}, {\n\n  key: 'role',\n\n  label: 'Role'\n\n}, {\n\n  key: 'actions'\n\n}]\n\n\n\nconst people = []\n\n\n\nconst pending = ref(true)\n\n</script>\n\n\n\n<template>\n\n  <UTable :rows=\"people\" :columns=\"columns\" :loading=\"pending\">\n\n    <template #loading-state>\n\n      <div class=\"flex items-center justify-center h-32\">\n\n        <i class=\"loader --6\" />\n\n      </div>\n\n    </template>\n\n  </UTable>\n\n</template>\n\n\n\n<style scoped>\n\n/* https://codepen.io/jenning/pen/YzNmzaV */\n\n\n\n.loader {\n\n    --color: rgb(var(--color-primary-400));\n\n    --size-mid: 6vmin;\n\n    --size-dot: 1.5vmin;\n\n    --size-bar: 0.4vmin;\n\n    --size-square: 3vmin;\n\n\n\n    display: block;\n\n    position: relative;\n\n    width: 50%;\n\n    display: grid;\n\n    place-items: center;\n\n}\n\n\n\n.loader::before,\n\n.loader::after {\n\n    content: '';\n\n    box-sizing: border-box;\n\n    position: absolute;\n\n}\n\n\n\n/**\n\n    loader --6\n\n**/\n\n.loader.--6::before {\n\n    width: var(--size-square);\n\n    height: var(--size-square);\n\n    background-color: var(--color);\n\n    top: calc(50% - var(--size-square));\n\n    left: calc(50% - var(--size-square));\n\n    animation: loader-6 2.4s cubic-bezier(0, 0, 0.24, 1.21) infinite;\n\n}\n\n\n\n@keyframes loader-6 {\n\n    0%, 100% {\n\n        transform: none;\n\n    }\n\n\n\n    25% {\n\n        transform: translateX(100%);\n\n    }\n\n\n\n    50% {\n\n        transform: translateX(100%) translateY(100%);\n\n    }\n\n\n\n    75% {\n\n        transform: translateY(100%);\n\n    }\n\n}\n\n</style>\n\nempty-state\n\nUse the #empty-state slot to customize the empty state.\n\nName\tTitle\tEmail\tRole\t\n\nNo one here!\nAdd people\n<script setup>\n\nconst columns = [{\n\n  key: 'name',\n\n  label: 'Name'\n\n}, {\n\n  key: 'title',\n\n  label: 'Title'\n\n}, {\n\n  key: 'email',\n\n  label: 'Email'\n\n}, {\n\n  key: 'role',\n\n  label: 'Role'\n\n}, {\n\n  key: 'actions'\n\n}]\n\n\n\nconst people = []\n\n</script>\n\n\n\n<template>\n\n  <UTable :rows=\"people\" :columns=\"columns\">\n\n    <template #empty-state>\n\n      <div class=\"flex flex-col items-center justify-center py-6 gap-3\">\n\n        <span class=\"italic text-sm\">No one here!</span>\n\n        <UButton label=\"Add people\" />\n\n      </div>\n\n    </template>\n\n  </UTable>\n\n</template>\n\nProps\nsort\n{ column: string; direction: \"asc\" | \"desc\"; }\n{}\nShow properties\nui\nany\nundefined\nmodelValue\nunknown[]\nnull\nby\nstring | Function\ndefaultComparator\nrows\n{ [key: string]: any; click?: Function; }[]\n[]\nShow properties\nloadingState\n{ icon: string; label: string; }\nconfig.default.loadingState\nShow properties\nemptyState\n{ icon: string; label: string; }\nconfig.default.emptyState\nShow properties\ncolumns\n{ [key: string]: any; key: string; sortable?: boolean; direction?: \"asc\" | \"desc\"; class?: string; }[]\nnull\nShow properties\ncolumnAttribute\nstring\n\"label\"\nsortButton\nButton\nconfig.default.sortButton as Button\nShow properties\nsortAscIcon\nstring\nconfig.default.sortAscIcon\nsortDescIcon\nstring\nconfig.default.sortDescIcon\nloading\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative overflow-x-auto\",\n\n  \"base\": \"min-w-full table-fixed\",\n\n  \"divide\": \"divide-y divide-gray-300 dark:divide-gray-700\",\n\n  \"thead\": \"\",\n\n  \"tbody\": \"divide-y divide-gray-200 dark:divide-gray-800\",\n\n  \"tr\": {\n\n    \"base\": \"\",\n\n    \"selected\": \"bg-gray-50 dark:bg-gray-800/50\",\n\n    \"active\": \"hover:bg-gray-50 dark:hover:bg-gray-800/50 cursor-pointer\"\n\n  },\n\n  \"th\": {\n\n    \"base\": \"text-left rtl:text-right\",\n\n    \"padding\": \"px-3 py-3.5\",\n\n    \"color\": \"text-gray-900 dark:text-white\",\n\n    \"font\": \"font-semibold\",\n\n    \"size\": \"text-sm\"\n\n  },\n\n  \"td\": {\n\n    \"base\": \"whitespace-nowrap\",\n\n    \"padding\": \"px-3 py-4\",\n\n    \"color\": \"text-gray-500 dark:text-gray-400\",\n\n    \"font\": \"\",\n\n    \"size\": \"text-sm\"\n\n  },\n\n  \"checkbox\": {\n\n    \"padding\": \"ps-4\"\n\n  },\n\n  \"loadingState\": {\n\n    \"wrapper\": \"flex flex-col items-center justify-center flex-1 px-6 py-14 sm:px-14\",\n\n    \"label\": \"text-sm text-center text-gray-900 dark:text-white\",\n\n    \"icon\": \"w-6 h-6 mx-auto text-gray-400 dark:text-gray-500 mb-4 animate-spin\"\n\n  },\n\n  \"emptyState\": {\n\n    \"wrapper\": \"flex flex-col items-center justify-center flex-1 px-6 py-14 sm:px-14\",\n\n    \"label\": \"text-sm text-center text-gray-900 dark:text-white\",\n\n    \"icon\": \"w-6 h-6 mx-auto text-gray-400 dark:text-gray-500 mb-4\"\n\n  },\n\n  \"default\": {\n\n    \"sortAscIcon\": \"i-heroicons-bars-arrow-up-20-solid\",\n\n    \"sortDescIcon\": \"i-heroicons-bars-arrow-down-20-solid\",\n\n    \"sortButton\": {\n\n      \"icon\": \"i-heroicons-arrows-up-down-20-solid\",\n\n      \"trailing\": true,\n\n      \"square\": true,\n\n      \"color\": \"gray\",\n\n      \"variant\": \"ghost\",\n\n      \"class\": \"-m-1.5\"\n\n    },\n\n    \"loadingState\": {\n\n      \"icon\": \"i-heroicons-arrow-path-20-solid\",\n\n      \"label\": \"Loading...\"\n\n    },\n\n    \"emptyState\": {\n\n      \"icon\": \"i-heroicons-circle-stack-20-solid\",\n\n      \"label\": \"No items.\"\n\n    }\n\n  }\n\n}\n\n\nForm\n\nCollect and validate form data.\n\nVerticalNavigation\n\nDisplay a vertical navigation."
  },
  {
    "title": "SelectMenu - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/select-menu",
    "html": "Forms\nSelectMenu\nGitHub\nListbox\n\nDisplay a select menu with advanced features.\n\nUsage\n\nThe SelectMenu component renders by default a Select component and is based on the ui.select preset. You can use most of the Select props to configure the display if you don't want to override the default slot such as color, variant, size, placeholder, icon, disabled, etc.\n\nLike the Select component, you can use the options prop to pass an array of strings or objects.\n\nWade Cooper\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref(people[0])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" />\n\n</template>\n\nMultiple\n\nYou can use the multiple prop to select multiple values.\n\nSelect people\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref([])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" multiple placeholder=\"Select people\" />\n\n</template>\n\nObjects\n\nYou can pass an array of objects to options and either compare on the whole object or use the by prop to compare on a specific key. You can configure which field will be used to display the label through the option-attribute prop that defaults to label.\n\nbenjamincanac\n<script setup>\n\nconst people = [{\n\n  id: 'benjamincanac',\n\n  label: 'benjamincanac',\n\n  href: 'https://github.com/benjamincanac',\n\n  target: '_blank',\n\n  avatar: { src: 'https://avatars.githubusercontent.com/u/739984?v=4' }\n\n}, {\n\n  id: 'Atinux',\n\n  label: 'Atinux',\n\n  href: 'https://github.com/Atinux',\n\n  target: '_blank',\n\n  avatar: { src: 'https://avatars.githubusercontent.com/u/904724?v=4' }\n\n}, {\n\n  id: 'smarroufin',\n\n  label: 'smarroufin',\n\n  href: 'https://github.com/smarroufin',\n\n  target: '_blank',\n\n  avatar: { src: 'https://avatars.githubusercontent.com/u/7547335?v=4' }\n\n}, {\n\n  id: 'nobody',\n\n  label: 'Nobody',\n\n  icon: 'i-heroicons-user-circle'\n\n}]\n\n\n\nconst selected = ref(people[0])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\">\n\n    <template #label>\n\n      <UIcon v-if=\"selected.icon\" :name=\"selected.icon\" class=\"w-4 h-4\" />\n\n      <UAvatar v-else-if=\"selected.avatar\" v-bind=\"selected.avatar\" size=\"3xs\" />\n\n\n\n      {{ selected.label }}\n\n    </template>\n\n  </USelectMenu>\n\n</template>\n\n\nIf you only want to select a single object property rather than the whole object as value, you can set the value-attribute property. This prop defaults to null.\n\nWade Cooper\n<script setup>\n\nconst people = [{\n\n  id: 1,\n\n  name: 'Wade Cooper'\n\n}, {\n\n  id: 2,\n\n  name: 'Arlene Mccoy'\n\n}, {\n\n  id: 3,\n\n  name: 'Devon Webb'\n\n}, {\n\n  id: 4,\n\n  name: 'Tom Cook'\n\n}]\n\n\n\nconst selected = ref(people[0].id)\n\n\n\nconst current = computed(() => people.find(person => person.id === selected.value))\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu\n\n    v-model=\"selected\"\n\n    :options=\"people\"\n\n    placeholder=\"Select people\"\n\n    value-attribute=\"id\"\n\n    option-attribute=\"name\"\n\n  >\n\n    <template #label>\n\n      {{ current.name }}\n\n    </template>\n\n  </USelectMenu>\n\n</template>\n\nIcon\n\nUse the selected-icon prop to set a different icon or change it globally in ui.selectMenu.default.selectedIcon. Defaults to i-heroicons-check-20-solid.\n\nSelect a person\n<USelectMenu\n\n  selected-icon=\"i-heroicons-hand-thumb-up-solid\"\n\n  class=\"w-full lg:w-40\"\n\n  placeholder=\"Select a person\"\n\n  :options=\"['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\"\n\n/>\n\nLearn how to customize icons from the Select component.\nSearch\n\nUse the searchable prop to enable search.\n\nUse the searchable-placeholder prop to set a different placeholder.\n\nThis will use Headless UI Combobox component instead of Listbox.\n\nsearchable\nsearchablePlaceholder\nSelect a person\n<USelectMenu\n\n  searchable\n\n  searchable-placeholder=\"Search a person...\"\n\n  class=\"w-full lg:w-40\"\n\n  placeholder=\"Select a person\"\n\n  :options=\"['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\"\n\n/>\n\nSearch Attributes\n\nUse the search-attributes with an array of property names to search on each option object.\n\nNested attributes can be accessed using dot.notation. When the property value is an array or object, these are cast to string so these can be searched within.\n\nArlene Mccoy\n<script setup>\n\nconst options = [\n\n  { id: 1, name: 'Wade Cooper', favoriteColors: ['red', 'yellow'] },\n\n  { id: 2, name: 'Arlene Mccoy', favoriteColors: ['blue', 'yellow'] },\n\n  { id: 3, name: 'Devon Webb', favoriteColors: ['green', 'blue'] },\n\n  { id: 4, name: 'Tom Cook', favoriteColors: ['blue', 'red'] },\n\n  { id: 5, name: 'Tanya Fox', favoriteColors: ['green', 'red'] },\n\n  { id: 5, name: 'Hellen Schmidt', favoriteColors: ['green', 'yellow'] }\n\n]\n\n\n\nconst selected = ref(options[1])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu\n\n    v-model=\"selected\"\n\n    :options=\"options\"\n\n    class=\"w-full lg:w-96\"\n\n    placeholder=\"Select an user\"\n\n    searchable\n\n    searchable-placeholder=\"Search by name or favorite colors\"\n\n    option-attribute=\"name\"\n\n    by=\"id\"\n\n    :search-attributes=\"['name', 'favoriteColors']\"\n\n  >\n\n    <template #option=\"{ option: person }\">\n\n      <span v-for=\"color in person.favoriteColors\" :key=\"color.id\" class=\"h-2 w-2 rounded-full\" :class=\"`bg-${color}-500 dark:bg-${color}-400`\" />\n\n      <span class=\"truncate\">{{ person.name }}</span>\n\n    </template>\n\n  </USelectMenu>\n\n</template>\n\nClear on close New\n\nBy default, the search query will be kept after the menu is closed. To clear it on close, set the clear-search-on-close prop.\n\nclearSearchOnClose\nSelect a person\n<USelectMenu\n\n  clear-search-on-close\n\n  class=\"w-full lg:w-40\"\n\n  placeholder=\"Select a person\"\n\n  searchable\n\n  searchable-placeholder=\"Search a person...\"\n\n  :options=\"['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\"\n\n/>\n\nAsync search\n\nPass a function to the searchable prop to customize the search behavior and filter options according to your needs. The function will receive the query as its first argument and should return an array.\n\nUse the debounce prop to adjust the delay of the function.\n\nSearch for a user...\n<script setup>\n\nconst search = async (q) => {\n\n  const users = await $fetch('https://jsonplaceholder.typicode.com/users', { params: { q } })\n\n\n\n  return users.map(user => ({ id: user.id, label: user.name, suffix: user.email })).filter(Boolean)\n\n}\n\n\n\nconst selected = ref([])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu\n\n    v-model=\"selected\"\n\n    :searchable=\"search\"\n\n    placeholder=\"Search for a user...\"\n\n    multiple\n\n    by=\"id\"\n\n  />\n\n</template>\n\nCreate option\n\nUse the creatable prop to enable the creation of new options when the search doesn't return any results (only works with searchable).\n\nTry to search for something that doesn't exist in the example below.\n\nSelect labels\n<script setup>\n\nconst options = ref([\n\n  { id: 1, name: 'bug', color: 'd73a4a' },\n\n  { id: 2, name: 'documentation', color: '0075ca' },\n\n  { id: 3, name: 'duplicate', color: 'cfd3d7' },\n\n  { id: 4, name: 'enhancement', color: 'a2eeef' },\n\n  { id: 5, name: 'good first issue', color: '7057ff' },\n\n  { id: 6, name: 'help wanted', color: '008672' },\n\n  { id: 7, name: 'invalid', color: 'e4e669' },\n\n  { id: 8, name: 'question', color: 'd876e3' },\n\n  { id: 9, name: 'wontfix', color: 'ffffff' }\n\n])\n\n\n\nconst selected = ref([])\n\n\n\nconst labels = computed({\n\n  get: () => selected.value,\n\n  set: async (labels) => {\n\n    const promises = labels.map(async (label) => {\n\n      if (label.id) {\n\n        return label\n\n      }\n\n\n\n      // In a real app, you would make an API call to create the label\n\n      const response = {\n\n        name: label.name,\n\n        color: generateColorFromString(label.name)\n\n      }\n\n\n\n      options.value.push(response)\n\n\n\n      return response\n\n    })\n\n\n\n    selected.value = await Promise.all(promises)\n\n  }\n\n})\n\n\n\nfunction hashCode (str) {\n\n  let hash = 0\n\n  for (let i = 0; i < str.length; i++) {\n\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n\n  }\n\n  return hash\n\n}\n\n\n\nfunction intToRGB (i) {\n\n  const c = (i & 0x00FFFFFF)\n\n    .toString(16)\n\n    .toUpperCase()\n\n\n\n  return '00000'.substring(0, 6 - c.length) + c\n\n}\n\n\n\nfunction generateColorFromString (str) {\n\n  return intToRGB(hashCode(str))\n\n}\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu\n\n    v-model=\"labels\"\n\n    by=\"id\"\n\n    name=\"labels\"\n\n    :options=\"options\"\n\n    option-attribute=\"name\"\n\n    multiple\n\n    searchable\n\n    creatable\n\n  >\n\n    <template #label>\n\n      <template v-if=\"labels.length\">\n\n        <span class=\"flex items-center -space-x-1\">\n\n          <span v-for=\"label of labels\" :key=\"label.id\" class=\"flex-shrink-0 w-2 h-2 mt-px rounded-full\" :style=\"{ background: `#${label.color}` }\" />\n\n        </span>\n\n        <span>{{ labels.length }} label{{ labels.length > 1 ? 's' : '' }}</span>\n\n      </template>\n\n      <template v-else>\n\n        <span class=\"text-gray-500 dark:text-gray-400 truncate\">Select labels</span>\n\n      </template>\n\n    </template>\n\n\n\n    <template #option=\"{ option }\">\n\n      <span\n\n        class=\"flex-shrink-0 w-2 h-2 mt-px rounded-full\"\n\n        :style=\"{ background: `#${option.color}` }\"\n\n      />\n\n      <span class=\"truncate\">{{ option.name }}</span>\n\n    </template>\n\n\n\n    <template #option-create=\"{ option }\">\n\n      <span class=\"flex-shrink-0\">New label:</span>\n\n      <span\n\n        class=\"flex-shrink-0 w-2 h-2 mt-px rounded-full -mx-1\"\n\n        :style=\"{ background: `#${generateColorFromString(option.name)}` }\"\n\n      />\n\n      <span class=\"block truncate\">{{ option.name }}</span>\n\n    </template>\n\n  </USelectMenu>\n\n</template>\n\nPopper\n\nUse the popper prop to customize the popper instance.\n\nArrow\nWade Cooper\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref(people[0])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" :popper=\"{ arrow: true }\" />\n\n</template>\n\nPlacement\nWade Cooper\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref(people[0])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" :popper=\"{ placement: 'left-end' }\" />\n\n</template>\n\nOffset\nWade Cooper\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref(people[0])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" :popper=\"{ offsetDistance: 0 }\" />\n\n</template>\n\nSlots\nlabel\n\nYou can override the #label slot and handle the display yourself.\n\nSelect people\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref([])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" multiple>\n\n    <template #label>\n\n      <span v-if=\"selected.length\" class=\"truncate\">{{ selected.join(', ') }}</span>\n\n      <span v-else>Select people</span>\n\n    </template>\n\n  </USelectMenu>\n\n</template>\n\ndefault\n\nYou can also override the #default slot entirely.\n\nTom Cook\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref(people[3])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-slot=\"{ open }\" v-model=\"selected\" :options=\"people\">\n\n    <UButton color=\"gray\" class=\"flex-1 justify-between\">\n\n      {{ selected }}\n\n\n\n      <UIcon name=\"i-heroicons-chevron-right-20-solid\" class=\"w-5 h-5 transition-transform text-gray-400 dark:text-gray-500\" :class=\"[open && 'transform rotate-90']\" />\n\n    </UButton>\n\n  </USelectMenu>\n\n</template>\n\noption\n\nUse the #option slot to customize the option content. You will have access to the option, active and selected properties in the slot scope.\n\nTom Cook\n<script setup>\n\nconst people = [\n\n  { name: 'Wade Cooper', online: true },\n\n  { name: 'Arlene Mccoy', online: false },\n\n  { name: 'Devon Webb', online: false },\n\n  { name: 'Tom Cook', online: true },\n\n  { name: 'Tanya Fox', online: false },\n\n  { name: 'Hellen Schmidt', online: true },\n\n  { name: 'Caroline Schultz', online: true },\n\n  { name: 'Mason Heaney', online: false },\n\n  { name: 'Claudie Smitham', online: true },\n\n  { name: 'Emil Schaefer', online: false }\n\n]\n\n\n\nconst selected = ref(people[3])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" option-attribute=\"name\">\n\n    <template #label>\n\n      <span :class=\"[selected.online ? 'bg-green-400' : 'bg-gray-200', 'inline-block h-2 w-2 flex-shrink-0 rounded-full']\" aria-hidden=\"true\" />\n\n      <span class=\"truncate\">{{ selected.name }}</span>\n\n    </template>\n\n\n\n    <template #option=\"{ option: person }\">\n\n      <span :class=\"[person.online ? 'bg-green-400' : 'bg-gray-200', 'inline-block h-2 w-2 flex-shrink-0 rounded-full']\" aria-hidden=\"true\" />\n\n      <span class=\"truncate\">{{ person.name }}</span>\n\n    </template>\n\n  </USelectMenu>\n\n</template>\n\noption-empty\n\nUse the #option-empty slot to customize the content displayed when the searchable prop is true and there is no options. You will have access to the query property in the slot scope.\n\nWade Cooper\n<script setup>\n\nconst people = ['Wade Cooper', 'Arlene Mccoy', 'Devon Webb', 'Tom Cook', 'Tanya Fox', 'Hellen Schmidt', 'Caroline Schultz', 'Mason Heaney', 'Claudie Smitham', 'Emil Schaefer']\n\n\n\nconst selected = ref(people[0])\n\n</script>\n\n\n\n<template>\n\n  <USelectMenu v-model=\"selected\" :options=\"people\" searchable>\n\n    <template #option-empty=\"{ query }\">\n\n      <q>{{ query }}</q> not found\n\n    </template>\n\n  </USelectMenu>\n\n</template>\n\noption-create\n\nUse the #option-create slot to customize the content displayed when the creatable prop is true and there is no options. You will have access to the query property in the slot scope.\n\nAn example is available in the Create option section.\nProps\nname\nstring\nnull\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nsize\nSelectSize\nnull\n\"md\"\"2xs\"\"xs\"\"sm\"\"lg\"\"xl\"\nicon\nstring\nnull\nid\nstring\nnull\nmodelValue\nstring | number | Record<string, any> | unknown[]\n\"\"\noptions\nstring[] | { [key: string]: any; disabled?: boolean; }[]\n[]\nvariant\nSelectVariant\nconfig.default.variant\n\"outline\"\"none\"\nplaceholder\nstring\nnull\nloadingIcon\nstring\nconfig.default.loadingIcon\nleadingIcon\nstring\nnull\ntrailingIcon\nstring\nconfig.default.trailingIcon\noptionAttribute\nstring\n\"label\"\nvalueAttribute\nstring\nnull\nselectClass\nstring\nnull\nby\nstring\nundefined\npopper\n{}\n{}\nselectedIcon\nstring\nconfigMenu.default.selectedIcon\nsearchable\nboolean | ((query: string) => any[] | Promise<any[]>)\nfalse\nsearchablePlaceholder\nstring\n\"Search...\"\ndebounce\nnumber\n200\nsearchAttributes\nunknown[]\nnull\nuiMenu\nany\nundefined\nrequired\nboolean\nfalse\ndisabled\nboolean\nfalse\nleading\nboolean\nfalse\ntrailing\nboolean\nfalse\nloading\nboolean\nfalse\npadded\nboolean\ntrue\nmultiple\nboolean\nfalse\nclearSearchOnClose\nboolean\nconfigMenu.default.clearOnClose\ncreatable\nboolean\nfalse\nConfig\n{\n\n  \"container\": \"z-20 group\",\n\n  \"width\": \"w-full\",\n\n  \"height\": \"max-h-60\",\n\n  \"base\": \"relative focus:outline-none overflow-y-auto scroll-py-1\",\n\n  \"background\": \"bg-white dark:bg-gray-800\",\n\n  \"shadow\": \"shadow-lg\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"padding\": \"p-1\",\n\n  \"ring\": \"ring-1 ring-gray-200 dark:ring-gray-700\",\n\n  \"input\": \"block w-[calc(100%+0.5rem)] focus:ring-transparent text-sm px-3 py-1.5 text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 border-0 border-b border-gray-200 dark:border-gray-700 focus:border-inherit sticky -top-1 -mt-1 mb-1 -mx-1 z-10 placeholder-gray-400 dark:placeholder-gray-500 focus:outline-none\",\n\n  \"option\": {\n\n    \"base\": \"cursor-default select-none relative flex items-center justify-between gap-1\",\n\n    \"rounded\": \"rounded-md\",\n\n    \"padding\": \"px-2 py-1.5\",\n\n    \"size\": \"text-sm\",\n\n    \"color\": \"text-gray-900 dark:text-white\",\n\n    \"container\": \"flex items-center gap-2 min-w-0\",\n\n    \"active\": \"bg-gray-100 dark:bg-gray-900\",\n\n    \"inactive\": \"\",\n\n    \"selected\": \"pe-7\",\n\n    \"disabled\": \"cursor-not-allowed opacity-50\",\n\n    \"empty\": \"text-sm text-gray-400 dark:text-gray-500 px-2 py-1.5\",\n\n    \"icon\": {\n\n      \"base\": \"flex-shrink-0 h-4 w-4\",\n\n      \"active\": \"text-gray-900 dark:text-white\",\n\n      \"inactive\": \"text-gray-400 dark:text-gray-500\"\n\n    },\n\n    \"selectedIcon\": {\n\n      \"wrapper\": \"absolute inset-y-0 end-0 flex items-center\",\n\n      \"padding\": \"pe-2\",\n\n      \"base\": \"h-4 w-4 text-gray-900 dark:text-white flex-shrink-0\"\n\n    },\n\n    \"avatar\": {\n\n      \"base\": \"flex-shrink-0\",\n\n      \"size\": \"3xs\"\n\n    },\n\n    \"chip\": {\n\n      \"base\": \"flex-shrink-0 w-2 h-2 mx-1 rounded-full\"\n\n    }\n\n  },\n\n  \"transition\": {\n\n    \"leaveActiveClass\": \"transition ease-in duration-100\",\n\n    \"leaveFromClass\": \"opacity-100\",\n\n    \"leaveToClass\": \"opacity-0\"\n\n  },\n\n  \"popper\": {\n\n    \"placement\": \"bottom-end\"\n\n  },\n\n  \"default\": {\n\n    \"selectedIcon\": \"i-heroicons-check-20-solid\",\n\n    \"clearOnClose\": false\n\n  },\n\n  \"arrow\": {\n\n    \"base\": \"before:w-2 before:h-2\",\n\n    \"ring\": \"before:ring-1 before:ring-gray-200 dark:before:ring-gray-700\",\n\n    \"rounded\": \"before:rounded-sm\",\n\n    \"background\": \"before:bg-white dark:before:bg-gray-700\",\n\n    \"shadow\": \"before:shadow\",\n\n    \"placement\": \"group-data-[popper-placement*=\\\"right\\\"]:-left-1 group-data-[popper-placement*=\\\"left\\\"]:-right-1 group-data-[popper-placement*=\\\"top\\\"]:-bottom-1 group-data-[popper-placement*=\\\"bottom\\\"]:-top-1\"\n\n  }\n\n}\n\n\nSelect\n\nDisplay a select field.\n\nCheckbox\n\nDisplay a checkbox field."
  },
  {
    "title": "Textarea - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/textarea",
    "html": "Forms\nTextarea\nGitHub\n\nDisplay a textarea field.\n\nUsage\n\nUse a v-model to make the Textarea reactive.\n\n<script setup>\n\nconst value = ref('')\n\n</script>\n\n\n\n<template>\n\n  <UTextarea v-model=\"value\" />\n\n</template>\n\nStyle\n\nUse the color and variant props to change the visual style of the Textarea.\n\ncolor\nprimary\nvariant\noutline\n<UTextarea color=\"primary\" variant=\"outline\" placeholder=\"Search...\" />\n\n\nBesides all the colors from the ui.colors object, you can also use the white (default) and gray colors with their pre-defined variants.\n\nWhite\nvariant\noutline\n<UTextarea color=\"white\" variant=\"outline\" placeholder=\"Search...\" />\n\nGray\nvariant\noutline\n<UTextarea color=\"gray\" variant=\"outline\" placeholder=\"Search...\" />\n\nSize\n\nUse the size prop to change the size of the Textarea.\n\nsize\nsm\n<UTextarea size=\"sm\" />\n\nPlaceholder\n\nUse the placeholder prop to set a placeholder text.\n\nplaceholder\n<UTextarea placeholder=\"Search...\" />\n\nRows\n\nUse the rows prop to set the number of rows of the Textarea.\n\nrows\n<UTextarea :rows=\"1\" placeholder=\"Search...\" />\n\nDisabled\n\nUse the disabled prop to disable the Textarea.\n\ndisabled\n<UTextarea disabled placeholder=\"Search...\" />\n\nAutoresize\n\nUse the autoresize prop to enable the autoresize. Writing more lines than the rows prop will make the Textarea grow up.\n\nautoresize\n<UTextarea\n\n  autoresize\n\n  placeholder=\"Search...\"\n\n  model-value=\"Here is an autoresize Textarea, write new lines to make the Textarea grow up...\"\n\n/>\n\nResize\n\nUse the resize prop to enable the resize control.\n\nresize\n<UTextarea resize placeholder=\"Search...\" />\n\nProps\nname\nstring\nnull\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nsize\nTextareaSize\nnull\n\"md\"\"2xs\"\"xs\"\"sm\"\"lg\"\"xl\"\nid\nstring\nnull\nmodelValue\nstring | number\n\"\"\nvariant\nTextareaVariant\nconfig.default.variant\n\"outline\"\"none\"\nplaceholder\nstring\nnull\nautofocusDelay\nnumber\n100\nmodelModifiers\n{}\n{}\nrows\nnumber\n3\ntextareaClass\nstring\nnull\nrequired\nboolean\nfalse\ndisabled\nboolean\nfalse\nautofocus\nboolean\nfalse\npadded\nboolean\ntrue\nautoresize\nboolean\nfalse\nresize\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative\",\n\n  \"base\": \"relative block w-full disabled:cursor-not-allowed disabled:opacity-75 focus:outline-none border-0\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"placeholder\": \"placeholder-gray-400 dark:placeholder-gray-500\",\n\n  \"size\": {\n\n    \"2xs\": \"text-xs\",\n\n    \"xs\": \"text-xs\",\n\n    \"sm\": \"text-sm\",\n\n    \"md\": \"text-sm\",\n\n    \"lg\": \"text-sm\",\n\n    \"xl\": \"text-base\"\n\n  },\n\n  \"gap\": {\n\n    \"2xs\": \"gap-x-1\",\n\n    \"xs\": \"gap-x-1.5\",\n\n    \"sm\": \"gap-x-1.5\",\n\n    \"md\": \"gap-x-2\",\n\n    \"lg\": \"gap-x-2.5\",\n\n    \"xl\": \"gap-x-2.5\"\n\n  },\n\n  \"padding\": {\n\n    \"2xs\": \"px-2 py-1\",\n\n    \"xs\": \"px-2.5 py-1.5\",\n\n    \"sm\": \"px-2.5 py-1.5\",\n\n    \"md\": \"px-3 py-2\",\n\n    \"lg\": \"px-3.5 py-2.5\",\n\n    \"xl\": \"px-3.5 py-2.5\"\n\n  },\n\n  \"leading\": {\n\n    \"padding\": {\n\n      \"2xs\": \"ps-7\",\n\n      \"xs\": \"ps-8\",\n\n      \"sm\": \"ps-9\",\n\n      \"md\": \"ps-10\",\n\n      \"lg\": \"ps-11\",\n\n      \"xl\": \"ps-12\"\n\n    }\n\n  },\n\n  \"trailing\": {\n\n    \"padding\": {\n\n      \"2xs\": \"pe-7\",\n\n      \"xs\": \"pe-8\",\n\n      \"sm\": \"pe-9\",\n\n      \"md\": \"pe-10\",\n\n      \"lg\": \"pe-11\",\n\n      \"xl\": \"pe-12\"\n\n    }\n\n  },\n\n  \"color\": {\n\n    \"white\": {\n\n      \"outline\": \"shadow-sm bg-white dark:bg-gray-900 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n\n    },\n\n    \"gray\": {\n\n      \"outline\": \"shadow-sm bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n\n    }\n\n  },\n\n  \"variant\": {\n\n    \"outline\": \"shadow-sm bg-transparent text-gray-900 dark:text-white ring-1 ring-inset ring-{color}-500 dark:ring-{color}-400 focus:ring-2 focus:ring-{color}-500 dark:focus:ring-{color}-400\",\n\n    \"none\": \"bg-transparent focus:ring-0 focus:shadow-none\"\n\n  },\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 text-gray-400 dark:text-gray-500\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"size\": {\n\n      \"2xs\": \"h-4 w-4\",\n\n      \"xs\": \"h-4 w-4\",\n\n      \"sm\": \"h-5 w-5\",\n\n      \"md\": \"h-5 w-5\",\n\n      \"lg\": \"h-5 w-5\",\n\n      \"xl\": \"h-6 w-6\"\n\n    },\n\n    \"leading\": {\n\n      \"wrapper\": \"absolute inset-y-0 start-0 flex items-center\",\n\n      \"pointer\": \"pointer-events-none\",\n\n      \"padding\": {\n\n        \"2xs\": \"ps-2\",\n\n        \"xs\": \"ps-2.5\",\n\n        \"sm\": \"ps-2.5\",\n\n        \"md\": \"ps-3\",\n\n        \"lg\": \"ps-3.5\",\n\n        \"xl\": \"ps-3.5\"\n\n      }\n\n    },\n\n    \"trailing\": {\n\n      \"wrapper\": \"absolute inset-y-0 end-0 flex items-center\",\n\n      \"pointer\": \"pointer-events-none\",\n\n      \"padding\": {\n\n        \"2xs\": \"pe-2\",\n\n        \"xs\": \"pe-2.5\",\n\n        \"sm\": \"pe-2.5\",\n\n        \"md\": \"pe-3\",\n\n        \"lg\": \"pe-3.5\",\n\n        \"xl\": \"pe-3.5\"\n\n      }\n\n    }\n\n  },\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"color\": \"white\",\n\n    \"variant\": \"outline\"\n\n  }\n\n}\n\n\nInput\n\nDisplay an input field.\n\nSelect\n\nDisplay a select field."
  },
  {
    "title": "Divider - Nuxt UI",
    "url": "https://ui.nuxt.com/layout/divider",
    "html": "Layout\nDivider\nGitHub\n\nDisplay a separator between content.\n\nUsage\n\nYou can pass label, icon or avatar to the divider component.\n\nLabel\nlabel\nOR\n<UDivider label=\"OR\" />\n\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name}.\n\n<UDivider icon=\"i-simple-icons-github\" />\n\nAvatar\n\nUse the avatar prop as an object and configure it with any of its props.\n\n<UDivider\n\n  :avatar=\"{ src: 'https://avatars.githubusercontent.com/u/739984?v=4' }\"\n\n/>\n\nOrientation\n\nYou can change the orientation of the divider by setting the orientation prop to horizontal or vertical. Defaults to horizontal.\n\nEmail\nPassword\nLogin\nOR\nLogin with GitHub\nLogin with Google\nEmail\nPassword\nLogin\nOR\nLogin with GitHub\nLogin with Google\n<script setup>\n\nconst form = reactive({ email: 'mail@example.com', password: 'password' })\n\n</script>\n\n\n\n<template>\n\n  <div class=\"w-full flex flex-col gap-y-4\">\n\n    <UCard :ui=\"{ body: { base: 'grid grid-cols-3' } }\">\n\n      <div class=\"space-y-4\">\n\n        <UFormGroup label=\"Email\" name=\"email\">\n\n          <UInput v-model=\"form.email\" />\n\n        </UFormGroup>\n\n\n\n        <UFormGroup label=\"Password\" name=\"password\">\n\n          <UInput v-model=\"form.password\" type=\"password\" />\n\n        </UFormGroup>\n\n\n\n        <UButton label=\"Login\" color=\"gray\" block />\n\n      </div>\n\n\n\n      <UDivider label=\"OR\" color=\"gray\" orientation=\"vertical\" />\n\n\n\n      <div class=\"space-y-4 flex flex-col justify-center\">\n\n        <UButton color=\"black\" label=\"Login with GitHub\" icon=\"i-simple-icons-github\" block />\n\n        <UButton color=\"black\" label=\"Login with Google\" icon=\"i-simple-icons-google\" block />\n\n      </div>\n\n    </UCard>\n\n\n\n    <UCard>\n\n      <div class=\"space-y-4\">\n\n        <UFormGroup label=\"Email\" name=\"email\">\n\n          <UInput v-model=\"form.email\" />\n\n        </UFormGroup>\n\n\n\n        <UFormGroup label=\"Password\" name=\"password\">\n\n          <UInput v-model=\"form.password\" type=\"password\" />\n\n        </UFormGroup>\n\n\n\n        <UButton label=\"Login\" color=\"gray\" block />\n\n\n\n        <UDivider label=\"OR\" color=\"gray\" />\n\n\n\n        <UButton color=\"black\" label=\"Login with GitHub\" icon=\"i-simple-icons-github\" block />\n\n        <UButton color=\"black\" label=\"Login with Google\" icon=\"i-simple-icons-google\" block />\n\n      </div>\n\n    </UCard>\n\n  </div>\n\n</template>\n\nType\n\nYou can change the type of the divider by setting the type prop to solid, dotted or dashed. Defaults to solid.\n\ntype\ndashed\nNuxt UI\n<UDivider label=\"Nuxt UI\" type=\"dashed\" />\n\nSize\n\nYou can change the size of the divider by using the ui prop\n\nNuxt UI\n<UDivider\n\n  label=\"Nuxt UI\"\n\n  :ui=\"{ border: { size: { horizontal: 'border-t-2' } } }\"\n\n/>\n\nColor\n\nYou can change the color of the content by using the ui prop\n\nNuxt UI\n<UDivider\n\n  label=\"Nuxt UI\"\n\n  :ui=\"{ label: 'text-primary-500 dark:text-primary-400' }\"\n\n/>\n\nSlots\ndefault\n\nUse the default slot to add content to the divider.\n\n<template>\n\n  <UDivider>\n\n    <Logo class=\"w-28 h-6\" />\n\n  </UDivider>\n\n</template>\n\nProps\ntype\n\"solid\" | \"dotted\" | \"dashed\"\n\"solid\"\nui\nany\nundefined\nlabel\nstring\nnull\nicon\nstring\nnull\navatar\nany\nnull\norientation\n\"horizontal\" | \"vertical\"\n\"horizontal\"\nConfig\n{\n\n  \"wrapper\": {\n\n    \"base\": \"flex items-center align-center text-center w-full\",\n\n    \"horizontal\": \"flex-row\",\n\n    \"vertical\": \"flex-col\"\n\n  },\n\n  \"container\": {\n\n    \"base\": \"font-medium text-gray-700 dark:text-gray-200 flex\",\n\n    \"horizontal\": \"mx-3 whitespace-nowrap\",\n\n    \"vertical\": \"my-2\"\n\n  },\n\n  \"border\": {\n\n    \"base\": \"flex border-gray-200 dark:border-gray-800\",\n\n    \"horizontal\": \"w-full\",\n\n    \"vertical\": \"h-full\",\n\n    \"size\": {\n\n      \"horizontal\": \"border-t\",\n\n      \"vertical\": \"border-s\"\n\n    }\n\n  },\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 w-5 h-5\"\n\n  },\n\n  \"avatar\": {\n\n    \"base\": \"flex-shrink-0\",\n\n    \"size\": \"2xs\"\n\n  },\n\n  \"label\": \"text-sm\"\n\n}\n\n\nSkeleton\n\nDisplay a placeholder while content is loading.\n\nSetup\n\nLearn how to install Nuxt UI Pro in your Nuxt application."
  },
  {
    "title": "Container - Nuxt UI",
    "url": "https://ui.nuxt.com/layout/container",
    "html": "Layout\nContainer\nGitHub\n\nA container lets you center and constrain the width of your content.\n\nUsage\n<template>\n\n  <UContainer>\n\n    <Placeholder class=\"h-32\" />\n\n  </UContainer>\n\n</template>\n\nProps\nui\nany\nundefined\nas\nstring\n\"div\"\nConfig\n{\n\n  \"base\": \"mx-auto\",\n\n  \"padding\": \"px-4 sm:px-6 lg:px-8\",\n\n  \"constrained\": \"max-w-7xl\"\n\n}\n\n\nCard\n\nDisplay a card for content with a header, body and footer.\n\nSkeleton\n\nDisplay a placeholder while content is loading."
  },
  {
    "title": "Skeleton - Nuxt UI",
    "url": "https://ui.nuxt.com/layout/skeleton",
    "html": "Layout\nSkeleton\nGitHub\n\nDisplay a placeholder while content is loading.\n\nUsage\n\nUse to show a placeholder while content is loading.\n\n<template>\n\n  <div class=\"flex items-center space-x-4\">\n\n    <USkeleton class=\"h-12 w-12\" :ui=\"{ rounded: 'rounded-full' }\" />\n\n    <div class=\"space-y-2\">\n\n      <USkeleton class=\"h-4 w-[250px]\" />\n\n      <USkeleton class=\"h-4 w-[200px]\" />\n\n    </div>\n\n  </div>\n\n</template>\n\nProps\nui\nany\nundefined\nConfig\n{\n\n  \"base\": \"animate-pulse\",\n\n  \"background\": \"bg-gray-100 dark:bg-gray-800\",\n\n  \"rounded\": \"rounded-md\"\n\n}\n\n\nContainer\n\nA container lets you center and constrain the width of your content.\n\nDivider\n\nDisplay a separator between content."
  },
  {
    "title": "Card - Nuxt UI",
    "url": "https://ui.nuxt.com/layout/card",
    "html": "Layout\nCard\nGitHub\n\nDisplay a card for content with a header, body and footer.\n\nUsage\n<template>\n\n  <UCard>\n\n    <template #header>\n\n      <Placeholder class=\"h-8\" />\n\n    </template>\n\n\n\n    <Placeholder class=\"h-32\" />\n\n\n\n    <template #footer>\n\n      <Placeholder class=\"h-8\" />\n\n    </template>\n\n  </UCard>\n\n</template>\n\nSlots\nheader\n\nUse the #header slot to fill the header.\n\nfooter\n\nUse the #footer slot to fill the footer.\n\nProps\nui\nany\nundefined\nas\nstring\n\"div\"\nConfig\n{\n\n  \"base\": \"overflow-hidden\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"divide\": \"divide-y divide-gray-200 dark:divide-gray-800\",\n\n  \"ring\": \"ring-1 ring-gray-200 dark:ring-gray-800\",\n\n  \"rounded\": \"rounded-lg\",\n\n  \"shadow\": \"shadow\",\n\n  \"body\": {\n\n    \"base\": \"\",\n\n    \"background\": \"\",\n\n    \"padding\": \"px-4 py-5 sm:p-6\"\n\n  },\n\n  \"header\": {\n\n    \"base\": \"\",\n\n    \"background\": \"\",\n\n    \"padding\": \"px-4 py-5 sm:px-6\"\n\n  },\n\n  \"footer\": {\n\n    \"base\": \"\",\n\n    \"background\": \"\",\n\n    \"padding\": \"px-4 py-4 sm:px-6\"\n\n  }\n\n}\n\n\nNotification\n\nDisplay a toast notification in your app.\n\nContainer\n\nA container lets you center and constrain the width of your content."
  },
  {
    "title": "Notification - Nuxt UI",
    "url": "https://ui.nuxt.com/overlays/notification",
    "html": "Overlays\nNotification\nGitHub\n\nDisplay a toast notification in your app.\n\nUsage\n\nFirst of all, add the Notifications component to your app, preferably inside app.vue.\n\napp.vue\n<template>\n\n  <div>\n\n    <UContainer>\n\n      <NuxtPage />\n\n    </UContainer>\n\n\n\n    <UNotifications />\n\n  </div>\n\n</template>\n\n\nThis component will render the notifications at the bottom right of the screen by default. You can configure its behavior in the app.config.ts through ui.notifications:\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    notifications: {\n\n      // Show toasts at the top right of the screen\n\n      position: 'top-0 bottom-auto'\n\n    }\n\n  }\n\n})\n\n\nThen, you can use the useToast composable to add notifications to your app:\n\nShow toast\n<script setup>\n\nconst toast = useToast()\n\n</script>\n\n\n\n<template>\n\n  <UButton label=\"Show toast\" @click=\"toast.add({ title: 'Hello world!' })\" />\n\n</template>\n\n\nWhen using toast.add, this will push a new notification to the stack displayed in <UNotifications />. All the props of the Notification component can be passed to toast.add.\n\n<script setup>\n\nconst toast = useToast()\n\n\n\nonMounted(() => {\n\n  toast.add({\n\n    id: 'update_downloaded',\n\n    title: 'Update downloaded.',\n\n    description: 'It will be installed on restart. Restart now?',\n\n    icon: 'i-octicon-desktop-download-24',\n\n    timeout: 0,\n\n    actions: [{\n\n      label: 'Restart',\n\n      click: () => {\n\n\n\n      }\n\n    }]\n\n  })\n\n})\n\n</script>\n\n\nYou can also use the Notification component directly in your app as an alert for example.\n\nTitle\n\nPass a title to your Notification.\n\ntitle\n<UNotification title=\"Notification\" :id=\"1\" :timeout=\"0\" />\n\nDescription\n\nYou can add a description in addition of the title.\n\ndescription\n<UNotification\n\n  description=\"This is a notification.\"\n\n  :id=\"2\"\n\n  :timeout=\"0\"\n\n  title=\"Notification\"\n\n/>\n\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name} or change it globally in ui.notification.default.icon.\n\ndescription\n<UNotification\n\n  icon=\"i-heroicons-check-circle\"\n\n  description=\"This is a notification.\"\n\n  :id=\"3\"\n\n  :timeout=\"0\"\n\n  title=\"Notification\"\n\n/>\n\nAvatar\n\nUse the avatar prop as an object and configure it with any of its props.\n\ndescription\n<UNotification\n\n  description=\"This is a notification.\"\n\n  :avatar=\"{ src: 'https://avatars.githubusercontent.com/u/739984?v=4' }\"\n\n  :id=\"4\"\n\n  :timeout=\"0\"\n\n  title=\"Notification\"\n\n/>\n\nTimeout\n\nUse the timeout prop to configure how long the Notification will remain. Set it to 0 to disable the timeout.\n\nYou will see a progress bar at the bottom of the Notification which will indicate the remaining time. When hovering the Notification, the progress bar will be paused.\n\ntimeout\n<UNotification\n\n  :timeout=\"60000\"\n\n  :id=\"5\"\n\n  title=\"Notification\"\n\n  description=\"This is a notification.\"\n\n/>\n\nStyle\n\nUse the color prop to change the progress and icon color of the Notification.\n\ncolor\nprimary\n<UNotification\n\n  icon=\"i-heroicons-check-badge\"\n\n  color=\"primary\"\n\n  :id=\"6\"\n\n  title=\"Notification\"\n\n  description=\"This is a notification.\"\n\n  :timeout=\"600000\"\n\n/>\n\nClick\n\nUse the click prop to execute a function when the Notification is clicked.\n\nShow toast\n<script setup>\n\nconst toast = useToast()\n\n\n\nfunction onClick () {\n\n  alert('Clicked!')\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UButton label=\"Show toast\" @click=\"toast.add({ title: 'Click me', click: onClick })\" />\n\n</template>\n\nCallback\n\nUse the callback prop to execute a function when the Notification expires.\n\nShow toast\n<script setup>\n\nconst toast = useToast()\n\n\n\nfunction onCallback () {\n\n  alert('Notification expired!')\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UButton label=\"Show toast\" @click=\"toast.add({ title: 'Expires soon...', timeout: 1000, callback: onCallback })\" />\n\n</template>\n\nClose\n\nUse the close-button prop to hide or customize the close button on the Notification.\n\nYou can pass all the props of the Button component to customize it through the close-button prop or globally through ui.notification.default.closeButton.\n\n<UNotification\n\n  :close-button=\"{ icon: 'i-heroicons-archive-box-x-mark', color: 'primary', variant: 'outline', padded: true, size: '2xs', ui: { rounded: 'rounded-full' } }\"\n\n  :id=\"7\"\n\n  title=\"Notification\"\n\n  :timeout=\"0\"\n\n/>\n\nActions\n\nUse the actions prop to add actions to the Notification.\n\nShow toast\n<script setup>\n\nconst toast = useToast()\n\n\n\nconst actions = ref([{\n\n  label: 'Action 1',\n\n  click: () => alert('Action 1 clicked!')\n\n}, {\n\n  label: 'Action 2',\n\n  click: () => alert('Action 2 clicked!')\n\n}])\n\n</script>\n\n\n\n<template>\n\n  <UButton label=\"Show toast\" @click=\"toast.add({ title: 'With actions', actions })\" />\n\n</template>\n\n\nLike for closeButton, you can pass all the props of the Button component inside the action or globally through ui.notification.default.actionButton.\n\n<UNotification\n\n  :actions=\"[{ label: 'Action 1' }, { variant: 'solid', color: 'gray', label: 'Action 2' }]\"\n\n  :id=\"8\"\n\n  title=\"Notification\"\n\n  :timeout=\"0\"\n\n/>\n\n\nActions will render differently whether you have a description set.\n\n<UNotification\n\n  :actions=\"[{ variant: 'solid', color: 'primary', label: 'Action 1' }, { variant: 'outline', color: 'primary', label: 'Action 2' }]\"\n\n  :id=\"9\"\n\n  title=\"Notification\"\n\n  description=\"This is a notification.\"\n\n  :timeout=\"0\"\n\n/>\n\nSlots\ntitle / description\n\nUse the #title and #description slots to customize the Notification.\n\nThis can be handy when you want to display HTML content. To achieve this, you can define those slots in the top-level <UNotifications /> component in your app.vue and use the v-html directive.\n\napp.vue\n<template>\n\n  <UNotifications>\n\n    <template #title=\"{ title }\">\n\n      <span v-html=\"title\" />\n\n    </template>\n\n\n\n    <template #description=\"{ description }\">\n\n      <span v-html=\"description\" />\n\n    </template>\n\n  </UNotifications>\n\n</template>\n\n\nThis way, you can use HTML tags in the title and description props when using useToast.\n\nShow toast\n<script setup>\n\nconst toast = useToast()\n\n</script>\n\n\n\n<template>\n\n  <UButton label=\"Show toast\" @click=\"toast.add({ title: 'This is an <u>underlined</u> and <b>bold</b> notification.' })\" />\n\n</template>\n\nSlots defined in the <UNotifications /> component are automatically passed down to the Notification children.\nProps\nid\nrequired\nstring | number\ntitle\nrequired\nstring\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nicon\nstring\nconfig.default.icon\ndescription\nstring\nnull\navatar\nany\nnull\ncloseButton\nButton\nconfig.default.closeButton as Button\nShow properties\nactions\nNotificationAction[]\n[]\nShow properties\ntimeout\nnumber\nconfig.default.timeout\ncallback\nFunction\nnull\nConfig\n{\n\n  \"wrapper\": \"w-full pointer-events-auto\",\n\n  \"container\": \"relative overflow-hidden\",\n\n  \"title\": \"text-sm font-medium text-gray-900 dark:text-white\",\n\n  \"description\": \"mt-1 text-sm leading-4 text-gray-500 dark:text-gray-400\",\n\n  \"actions\": \"flex items-center gap-2 mt-3 flex-shrink-0\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"shadow\": \"shadow-lg\",\n\n  \"rounded\": \"rounded-lg\",\n\n  \"padding\": \"p-4\",\n\n  \"gap\": \"gap-3\",\n\n  \"ring\": \"ring-1 ring-gray-200 dark:ring-gray-800\",\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 w-5 h-5\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\"\n\n  },\n\n  \"avatar\": {\n\n    \"base\": \"flex-shrink-0 self-center\",\n\n    \"size\": \"md\"\n\n  },\n\n  \"progress\": {\n\n    \"base\": \"absolute bottom-0 end-0 start-0 h-1\",\n\n    \"background\": \"bg-{color}-500 dark:bg-{color}-400\"\n\n  },\n\n  \"transition\": {\n\n    \"enterActiveClass\": \"transform ease-out duration-300 transition\",\n\n    \"enterFromClass\": \"translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2\",\n\n    \"enterToClass\": \"translate-y-0 opacity-100 sm:translate-x-0\",\n\n    \"leaveActiveClass\": \"transition ease-in duration-100\",\n\n    \"leaveFromClass\": \"opacity-100\",\n\n    \"leaveToClass\": \"opacity-0\"\n\n  },\n\n  \"default\": {\n\n    \"color\": \"primary\",\n\n    \"icon\": null,\n\n    \"timeout\": 5000,\n\n    \"closeButton\": {\n\n      \"icon\": \"i-heroicons-x-mark-20-solid\",\n\n      \"color\": \"gray\",\n\n      \"variant\": \"link\",\n\n      \"padded\": false\n\n    },\n\n    \"actionButton\": {\n\n      \"size\": \"xs\",\n\n      \"color\": \"white\"\n\n    }\n\n  }\n\n}\n\n\nContextMenu\n\nDisplay a menu that appears on right click.\n\nCard\n\nDisplay a card for content with a header, body and footer."
  },
  {
    "title": "ContextMenu - Nuxt UI",
    "url": "https://ui.nuxt.com/overlays/context-menu",
    "html": "Overlays\nContextMenu\nGitHub\n\nDisplay a menu that appears on right click.\n\nUsage\nRight click here\n<script setup>\n\nconst { x, y } = useMouse()\n\nconst { y: windowY } = useWindowScroll()\n\n\n\nconst isOpen = ref(false)\n\nconst virtualElement = ref({ getBoundingClientRect: () => ({}) })\n\n\n\nfunction onContextMenu () {\n\n  const top = unref(y) - unref(windowY)\n\n  const left = unref(x)\n\n\n\n  virtualElement.value.getBoundingClientRect = () => ({\n\n    width: 0,\n\n    height: 0,\n\n    top,\n\n    left\n\n  })\n\n\n\n  isOpen.value = true\n\n}\n\n</script>\n\n\n\n<template>\n\n  <div class=\"w-full\" @contextmenu.prevent=\"onContextMenu\">\n\n    <Placeholder class=\"h-96 select-none w-full flex items-center justify-center\">\n\n      Right click here\n\n    </Placeholder>\n\n\n\n    <UContextMenu v-model=\"isOpen\" :virtual-element=\"virtualElement\">\n\n      <div class=\"p-4\">\n\n        Menu\n\n      </div>\n\n    </UContextMenu>\n\n  </div>\n\n</template>\n\nPopper\n\nUse the popper prop to customize the popper instance.\n\nArrow\nRight click here\n<script setup>\n\nconst { x, y } = useMouse()\n\nconst { y: windowY } = useWindowScroll()\n\n\n\nconst isOpen = ref(false)\n\nconst virtualElement = ref({ getBoundingClientRect: () => ({}) })\n\n\n\nfunction onContextMenu () {\n\n  const top = unref(y) - unref(windowY)\n\n  const left = unref(x)\n\n\n\n  virtualElement.value.getBoundingClientRect = () => ({\n\n    width: 0,\n\n    height: 0,\n\n    top,\n\n    left\n\n  })\n\n\n\n  isOpen.value = true\n\n}\n\n</script>\n\n\n\n<template>\n\n  <div class=\"w-full\" @contextmenu.prevent=\"onContextMenu\">\n\n    <Placeholder class=\"h-96 select-none w-full flex items-center justify-center\">\n\n      Right click here\n\n    </Placeholder>\n\n\n\n    <UContextMenu v-model=\"isOpen\" :virtual-element=\"virtualElement\" :popper=\"{ arrow: true, placement: 'right' }\">\n\n      <div class=\"p-4\">\n\n        Menu\n\n      </div>\n\n    </UContextMenu>\n\n  </div>\n\n</template>\n\nPlacement\nRight click here\n<script setup>\n\nconst { x, y } = useMouse()\n\nconst { y: windowY } = useWindowScroll()\n\n\n\nconst isOpen = ref(false)\n\nconst virtualElement = ref({ getBoundingClientRect: () => ({}) })\n\n\n\nfunction onContextMenu () {\n\n  const top = unref(y) - unref(windowY)\n\n  const left = unref(x)\n\n\n\n  virtualElement.value.getBoundingClientRect = () => ({\n\n    width: 0,\n\n    height: 0,\n\n    top,\n\n    left\n\n  })\n\n\n\n  isOpen.value = true\n\n}\n\n</script>\n\n\n\n<template>\n\n  <div class=\"w-full\" @contextmenu.prevent=\"onContextMenu\">\n\n    <Placeholder class=\"h-96 select-none w-full flex items-center justify-center\">\n\n      Right click here\n\n    </Placeholder>\n\n\n\n    <UContextMenu v-model=\"isOpen\" :virtual-element=\"virtualElement\" :popper=\"{ placement: 'right-start' }\">\n\n      <div class=\"p-4\">\n\n        Menu\n\n      </div>\n\n    </UContextMenu>\n\n  </div>\n\n</template>\n\nOffset\nRight click here\n<script setup>\n\nconst { x, y } = useMouse()\n\nconst { y: windowY } = useWindowScroll()\n\n\n\nconst isOpen = ref(false)\n\nconst virtualElement = ref({ getBoundingClientRect: () => ({}) })\n\n\n\nfunction onContextMenu () {\n\n  const top = unref(y) - unref(windowY)\n\n  const left = unref(x)\n\n\n\n  virtualElement.value.getBoundingClientRect = () => ({\n\n    width: 0,\n\n    height: 0,\n\n    top,\n\n    left\n\n  })\n\n\n\n  isOpen.value = true\n\n}\n\n</script>\n\n\n\n<template>\n\n  <div class=\"w-full\" @contextmenu.prevent=\"onContextMenu\">\n\n    <Placeholder class=\"h-96 select-none w-full flex items-center justify-center\">\n\n      Right click here\n\n    </Placeholder>\n\n\n\n    <UContextMenu v-model=\"isOpen\" :virtual-element=\"virtualElement\" :popper=\"{ offset: 0 }\">\n\n      <div class=\"p-4\">\n\n        Menu\n\n      </div>\n\n    </UContextMenu>\n\n  </div>\n\n</template>\n\nProps\nvirtualElement\nrequired\nRecord<string, any>\nui\nany\nundefined\npopper\n{}\n{}\nmodelValue\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative\",\n\n  \"container\": \"z-20 group\",\n\n  \"width\": \"\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"shadow\": \"shadow-lg\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"ring\": \"ring-1 ring-gray-200 dark:ring-gray-800\",\n\n  \"base\": \"overflow-hidden focus:outline-none relative\",\n\n  \"transition\": {\n\n    \"enterActiveClass\": \"transition ease-out duration-200\",\n\n    \"enterFromClass\": \"opacity-0 translate-y-1\",\n\n    \"enterToClass\": \"opacity-100 translate-y-0\",\n\n    \"leaveActiveClass\": \"transition ease-in duration-150\",\n\n    \"leaveFromClass\": \"opacity-100 translate-y-0\",\n\n    \"leaveToClass\": \"opacity-0 translate-y-1\"\n\n  },\n\n  \"popper\": {\n\n    \"placement\": \"bottom-start\",\n\n    \"scroll\": false\n\n  },\n\n  \"arrow\": {\n\n    \"base\": \"before:w-2 before:h-2\",\n\n    \"ring\": \"before:ring-1 before:ring-gray-200 dark:before:ring-gray-800\",\n\n    \"rounded\": \"before:rounded-sm\",\n\n    \"background\": \"before:bg-gray-200 dark:before:bg-gray-800\",\n\n    \"shadow\": \"before:shadow\",\n\n    \"placement\": \"group-data-[popper-placement*=\\\"right\\\"]:-left-1 group-data-[popper-placement*=\\\"left\\\"]:-right-1 group-data-[popper-placement*=\\\"top\\\"]:-bottom-1 group-data-[popper-placement*=\\\"bottom\\\"]:-top-1\"\n\n  }\n\n}\n\n\nTooltip\n\nDisplay content that appears on hover next to an element.\n\nNotification\n\nDisplay a toast notification in your app."
  },
  {
    "title": "Tooltip - Nuxt UI",
    "url": "https://ui.nuxt.com/overlays/tooltip",
    "html": "Overlays\nTooltip\nGitHub\n\nDisplay content that appears on hover next to an element.\n\nUsage\nHover me\n<template>\n\n  <UTooltip text=\"Tooltip example\" :shortcuts=\"['⌘', 'O']\">\n\n    <UButton color=\"gray\" label=\"Hover me\" />\n\n  </UTooltip>\n\n</template>\n\nPopper\n\nUse the popper prop to customize the popper instance.\n\nArrow\nHover me\n<template>\n\n  <UTooltip text=\"Tooltip example\" :shortcuts=\"['⌘', 'O']\" :popper=\"{ arrow: true }\">\n\n    <UButton color=\"gray\" label=\"Hover me\" />\n\n  </UTooltip>\n\n</template>\n\nPlacement\nHover me\n<template>\n\n  <UTooltip text=\"Tooltip example\" :shortcuts=\"['⌘', 'O']\" :popper=\"{ placement: 'right' }\">\n\n    <UButton color=\"gray\" label=\"Hover me\" />\n\n  </UTooltip>\n\n</template>\n\nOffset\nHover me\n<template>\n\n  <UTooltip text=\"Tooltip example\" :shortcuts=\"['⌘', 'O']\" :popper=\"{ offsetDistance: 16 }\">\n\n    <UButton color=\"gray\" label=\"Hover me\" />\n\n  </UTooltip>\n\n</template>\n\nSlots\ntext\n\nUse the #text slot to override the content of the text.\n\nHover\n<UTooltip>\n\n  <template #text>\n\n    <span class=\"italic\">Hello World!</span>\n\n  </template>\n\n</UTooltip>\n\nProps\nui\nany\nundefined\ntext\nstring\nnull\npopper\n{}\n{}\nopenDelay\nnumber\n0\ncloseDelay\nnumber\n0\nshortcuts\nstring[]\n[]\nprevent\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative inline-flex\",\n\n  \"container\": \"z-20 group\",\n\n  \"width\": \"max-w-xs\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"color\": \"text-gray-900 dark:text-white\",\n\n  \"shadow\": \"shadow\",\n\n  \"rounded\": \"rounded\",\n\n  \"ring\": \"ring-1 ring-gray-200 dark:ring-gray-800\",\n\n  \"base\": \"[@media(pointer:coarse)]:hidden h-6 px-2 py-1 text-xs font-normal truncate relative\",\n\n  \"shortcuts\": \"hidden md:inline-flex flex-shrink-0 gap-0.5\",\n\n  \"transition\": {\n\n    \"enterActiveClass\": \"transition ease-out duration-200\",\n\n    \"enterFromClass\": \"opacity-0 translate-y-1\",\n\n    \"enterToClass\": \"opacity-100 translate-y-0\",\n\n    \"leaveActiveClass\": \"transition ease-in duration-150\",\n\n    \"leaveFromClass\": \"opacity-100 translate-y-0\",\n\n    \"leaveToClass\": \"opacity-0 translate-y-1\"\n\n  },\n\n  \"popper\": {\n\n    \"strategy\": \"fixed\"\n\n  },\n\n  \"arrow\": {\n\n    \"base\": \"before:w-2 before:h-2\",\n\n    \"ring\": \"before:ring-1 before:ring-gray-200 dark:before:ring-gray-800\",\n\n    \"rounded\": \"before:rounded-sm\",\n\n    \"background\": \"before:bg-gray-200 dark:before:bg-gray-800\",\n\n    \"shadow\": \"before:shadow\",\n\n    \"placement\": \"group-data-[popper-placement*=\\\"right\\\"]:-left-1 group-data-[popper-placement*=\\\"left\\\"]:-right-1 group-data-[popper-placement*=\\\"top\\\"]:-bottom-1 group-data-[popper-placement*=\\\"bottom\\\"]:-top-1\"\n\n  }\n\n}\n\n\nPopover\n\nDisplay a non-modal dialog that floats around a trigger element.\n\nContextMenu\n\nDisplay a menu that appears on right click."
  },
  {
    "title": "Modal - Nuxt UI",
    "url": "https://ui.nuxt.com/overlays/modal",
    "html": "Overlays\nModal\nGitHub\nDialog\n\nDisplay a modal within your application.\n\nUsage\n\nUse a v-model to control the Modal state.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <UModal v-model=\"isOpen\">\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-48\" />\n\n      </div>\n\n    </UModal>\n\n  </div>\n\n</template>\n\n\nYou can put a Card component inside your Modal to handle forms and take advantage of header and footer slots:\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <UModal v-model=\"isOpen\">\n\n      <UCard :ui=\"{ ring: '', divide: 'divide-y divide-gray-100 dark:divide-gray-800' }\">\n\n        <template #header>\n\n          <Placeholder class=\"h-8\" />\n\n        </template>\n\n\n\n        <Placeholder class=\"h-32\" />\n\n\n\n        <template #footer>\n\n          <Placeholder class=\"h-8\" />\n\n        </template>\n\n      </UCard>\n\n    </UModal>\n\n  </div>\n\n</template>\n\nDisable overlay\n\nSet the overlay prop to false to disable it.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <UModal v-model=\"isOpen\" :overlay=\"false\">\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-48\" />\n\n      </div>\n\n    </UModal>\n\n  </div>\n\n</template>\n\nDisable transition\n\nSet the transition prop to false to disable it.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <UModal v-model=\"isOpen\" :transition=\"false\">\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-48\" />\n\n      </div>\n\n    </UModal>\n\n  </div>\n\n</template>\n\nPrevent close\n\nUse the prevent-close prop to disable the outside click alongside the esc keyboard shortcut.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <UModal v-model=\"isOpen\" prevent-close>\n\n      <UCard :ui=\"{ ring: '', divide: 'divide-y divide-gray-100 dark:divide-gray-800' }\">\n\n        <template #header>\n\n          <div class=\"flex items-center justify-between\">\n\n            <h3 class=\"text-base font-semibold leading-6 text-gray-900 dark:text-white\">\n\n              Modal\n\n            </h3>\n\n            <UButton color=\"gray\" variant=\"ghost\" icon=\"i-heroicons-x-mark-20-solid\" class=\"-my-1\" @click=\"isOpen = false\" />\n\n          </div>\n\n        </template>\n\n\n\n        <Placeholder class=\"h-32\" />\n\n      </UCard>\n\n    </UModal>\n\n  </div>\n\n</template>\n\n\nYou can still handle the esc shortcut yourself by using our defineShortcuts composable.\n\n<script setup>\n\nconst isOpen = ref(false)\n\n\n\ndefineShortcuts({\n\n  escape: {\n\n    usingInput: true,\n\n    whenever: [isOpen],\n\n    handler: () => { isOpen.value = false }\n\n  }\n\n})\n\n</script>\n\nFullscreen\n\nSet the fullscreen prop to true to enable it.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <UModal v-model=\"isOpen\" fullscreen>\n\n      <UCard\n\n        :ui=\"{\n\n          base: 'h-full flex flex-col',\n\n          rounded: '',\n\n          divide: 'divide-y divide-gray-100 dark:divide-gray-800',\n\n          body: {\n\n            base: 'grow'\n\n          }\n\n        }\"\n\n      >\n\n        <template #header>\n\n          <div class=\"flex items-center justify-between\">\n\n            <h3 class=\"text-base font-semibold leading-6 text-gray-900 dark:text-white\">\n\n              Modal\n\n            </h3>\n\n            <UButton color=\"gray\" variant=\"ghost\" icon=\"i-heroicons-x-mark-20-solid\" class=\"-my-1\" @click=\"isOpen = false\" />\n\n          </div>\n\n        </template>\n\n\n\n        <Placeholder class=\"h-full\" />\n\n      </UCard>\n\n    </UModal>\n\n  </div>\n\n</template>\n\nProps\nui\nany\nundefined\ntransition\nboolean\ntrue\nmodelValue\nboolean\nfalse\nappear\nboolean\nfalse\noverlay\nboolean\ntrue\npreventClose\nboolean\nfalse\nfullscreen\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative z-50\",\n\n  \"inner\": \"fixed inset-0 overflow-y-auto\",\n\n  \"container\": \"flex min-h-full items-end sm:items-center justify-center text-center\",\n\n  \"padding\": \"p-4 sm:p-0\",\n\n  \"margin\": \"sm:my-8\",\n\n  \"base\": \"relative text-left rtl:text-right overflow-hidden w-full flex flex-col\",\n\n  \"overlay\": {\n\n    \"base\": \"fixed inset-0 transition-opacity\",\n\n    \"background\": \"bg-gray-200/75 dark:bg-gray-800/75\",\n\n    \"transition\": {\n\n      \"enter\": \"ease-out duration-300\",\n\n      \"enterFrom\": \"opacity-0\",\n\n      \"enterTo\": \"opacity-100\",\n\n      \"leave\": \"ease-in duration-200\",\n\n      \"leaveFrom\": \"opacity-100\",\n\n      \"leaveTo\": \"opacity-0\"\n\n    }\n\n  },\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"ring\": \"\",\n\n  \"rounded\": \"rounded-lg\",\n\n  \"shadow\": \"shadow-xl\",\n\n  \"width\": \"sm:max-w-lg\",\n\n  \"height\": \"\",\n\n  \"transition\": {\n\n    \"enter\": \"ease-out duration-300\",\n\n    \"enterFrom\": \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\",\n\n    \"enterTo\": \"opacity-100 translate-y-0 sm:scale-100\",\n\n    \"leave\": \"ease-in duration-200\",\n\n    \"leaveFrom\": \"opacity-100 translate-y-0 sm:scale-100\",\n\n    \"leaveTo\": \"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n\n  }\n\n}\n\n\nBreadcrumb\n\nA list of links that indicate the current page's location within a navigational hierarchy.\n\nSlideover\n\nDisplay a dialog that slides in from the edge of the screen."
  },
  {
    "title": "Popover - Nuxt UI",
    "url": "https://ui.nuxt.com/overlays/popover",
    "html": "Overlays\nPopover\nGitHub\nPopover\n\nDisplay a non-modal dialog that floats around a trigger element.\n\nUsage\nOpen\n<template>\n\n  <UPopover>\n\n    <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n    <template #panel>\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-20 w-48\" />\n\n      </div>\n\n    </template>\n\n  </UPopover>\n\n</template>\n\nMode\n\nUse the mode prop to switch between click and hover modes.\n\nOpen\n<template>\n\n  <UPopover mode=\"hover\">\n\n    <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n    <template #panel>\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-20 w-48\" />\n\n      </div>\n\n    </template>\n\n  </UPopover>\n\n</template>\n\nManual\n\nUse the open prop to manually control showing the panel.\n\nOpen\n<script setup>\n\nconst open = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div class=\"flex gap-4 items-center\">\n\n    <UToggle v-model=\"open\" />\n\n    <UPopover :open=\"open\">\n\n      <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n      <template #panel>\n\n        <div class=\"p-4\">\n\n          <Placeholder class=\"h-20 w-48\" />\n\n        </div>\n\n      </template>\n\n    </UPopover>\n\n  </div>\n\n</template>\n\nOverlay New\nOpen\n<template>\n\n  <div class=\"flex gap-4 items-center\">\n\n    <UPopover overlay>\n\n      <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n      <template #panel>\n\n        <div class=\"p-4\">\n\n          <Placeholder class=\"h-20 w-48\" />\n\n        </div>\n\n      </template>\n\n    </UPopover>\n\n  </div>\n\n</template>\n\nClicking on the overlay emits update:open. If you are manually controlling the open prop, you will need to use a v-model argument (v-model:open).\nPopper\n\nUse the popper prop to customize the popper instance.\n\nArrow\nOpen\n<template>\n\n  <UPopover :popper=\"{ arrow: true }\">\n\n    <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n    <template #panel>\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-20 w-48\" />\n\n      </div>\n\n    </template>\n\n  </UPopover>\n\n</template>\n\nPlacement\nOpen\n<template>\n\n  <UPopover :popper=\"{ placement: 'top-end' }\">\n\n    <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n    <template #panel>\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-20 w-48\" />\n\n      </div>\n\n    </template>\n\n  </UPopover>\n\n</template>\n\nOffset\nOpen\n<template>\n\n  <UPopover :popper=\"{ offsetDistance: 0 }\">\n\n    <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n    <template #panel>\n\n      <div class=\"p-4\">\n\n        <Placeholder class=\"h-20 w-48\" />\n\n      </div>\n\n    </template>\n\n  </UPopover>\n\n</template>\n\nSlots\npanel\n\nUse the #panel slot to fill the content of the panel. You will have access to the open property and the close method in the slot scope.\n\nOpen\n<template>\n\n  <UPopover>\n\n    <UButton color=\"white\" label=\"Open\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n\n\n    <template #panel=\"{ close }\">\n\n      <div class=\"p-8\">\n\n        <UButton label=\"Close\" @click=\"close\" />\n\n      </div>\n\n    </template>\n\n  </UPopover>\n\n</template>\n\nProps\nui\nany\nundefined\npopper\n{}\n{}\nmode\n\"click\" | \"hover\"\n\"click\"\nopenDelay\nnumber\n0\ncloseDelay\nnumber\n0\ndisabled\nboolean\nfalse\nopen\nboolean\nundefined\noverlay\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative\",\n\n  \"container\": \"z-50 group\",\n\n  \"width\": \"\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"shadow\": \"shadow-lg\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"ring\": \"ring-1 ring-gray-200 dark:ring-gray-800\",\n\n  \"base\": \"overflow-hidden focus:outline-none relative\",\n\n  \"transition\": {\n\n    \"enterActiveClass\": \"transition ease-out duration-200\",\n\n    \"enterFromClass\": \"opacity-0 translate-y-1\",\n\n    \"enterToClass\": \"opacity-100 translate-y-0\",\n\n    \"leaveActiveClass\": \"transition ease-in duration-150\",\n\n    \"leaveFromClass\": \"opacity-100 translate-y-0\",\n\n    \"leaveToClass\": \"opacity-0 translate-y-1\"\n\n  },\n\n  \"overlay\": {\n\n    \"base\": \"fixed inset-0 transition-opacity z-50\",\n\n    \"background\": \"bg-gray-200/75 dark:bg-gray-800/75\",\n\n    \"transition\": {\n\n      \"enterActiveClass\": \"ease-out duration-200\",\n\n      \"enterFromClass\": \"opacity-0\",\n\n      \"enterToClass\": \"opacity-100\",\n\n      \"leaveActiveClass\": \"ease-in duration-150\",\n\n      \"leaveFromClass\": \"opacity-100\",\n\n      \"leaveToClass\": \"opacity-0\"\n\n    }\n\n  },\n\n  \"popper\": {\n\n    \"strategy\": \"fixed\"\n\n  },\n\n  \"arrow\": {\n\n    \"base\": \"before:w-2 before:h-2\",\n\n    \"ring\": \"before:ring-1 before:ring-gray-200 dark:before:ring-gray-800\",\n\n    \"rounded\": \"before:rounded-sm\",\n\n    \"background\": \"before:bg-gray-200 dark:before:bg-gray-800\",\n\n    \"shadow\": \"before:shadow\",\n\n    \"placement\": \"group-data-[popper-placement*=\\\"right\\\"]:-left-1 group-data-[popper-placement*=\\\"left\\\"]:-right-1 group-data-[popper-placement*=\\\"top\\\"]:-bottom-1 group-data-[popper-placement*=\\\"bottom\\\"]:-top-1\"\n\n  }\n\n}\n\n\nSlideover\n\nDisplay a dialog that slides in from the edge of the screen.\n\nTooltip\n\nDisplay content that appears on hover next to an element."
  },
  {
    "title": "Slideover - Nuxt UI",
    "url": "https://ui.nuxt.com/overlays/slideover",
    "html": "Overlays\nSlideover\nGitHub\nDialog\n\nDisplay a dialog that slides in from the edge of the screen.\n\nUsage\n\nUse a v-model to control the Slideover state.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <USlideover v-model=\"isOpen\">\n\n      <div class=\"p-4 flex-1\">\n\n        <Placeholder class=\"h-full\" />\n\n      </div>\n\n    </USlideover>\n\n  </div>\n\n</template>\n\n\nYou can put a Card component inside your Slideover to handle forms and take advantage of header and footer slots:\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <USlideover v-model=\"isOpen\">\n\n      <UCard class=\"flex flex-col flex-1\" :ui=\"{ body: { base: 'flex-1' }, ring: '', divide: 'divide-y divide-gray-100 dark:divide-gray-800' }\">\n\n        <template #header>\n\n          <Placeholder class=\"h-8\" />\n\n        </template>\n\n\n\n        <Placeholder class=\"h-full\" />\n\n\n\n        <template #footer>\n\n          <Placeholder class=\"h-8\" />\n\n        </template>\n\n      </UCard>\n\n    </USlideover>\n\n  </div>\n\n</template>\n\nDisable overlay\n\nSet the overlay prop to false to disable it.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <USlideover v-model=\"isOpen\" :overlay=\"false\">\n\n      <div class=\"p-4 flex-1\">\n\n        <Placeholder class=\"h-full\" />\n\n      </div>\n\n    </USlideover>\n\n  </div>\n\n</template>\n\nDisable transition\n\nSet the transition prop to false to disable it.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <USlideover v-model=\"isOpen\" :transition=\"false\">\n\n      <div class=\"p-4 flex-1\">\n\n        <Placeholder class=\"h-full\" />\n\n      </div>\n\n    </USlideover>\n\n  </div>\n\n</template>\n\nPrevent close\n\nUse the prevent-close prop to disable the outside click alongside the esc keyboard shortcut.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <USlideover v-model=\"isOpen\" prevent-close>\n\n      <UCard class=\"flex flex-col flex-1\" :ui=\"{ body: { base: 'flex-1' }, ring: '', divide: 'divide-y divide-gray-100 dark:divide-gray-800' }\">\n\n        <template #header>\n\n          <div class=\"flex items-center justify-between\">\n\n            <h3 class=\"text-base font-semibold leading-6 text-gray-900 dark:text-white\">\n\n              Slideover\n\n            </h3>\n\n            <UButton color=\"gray\" variant=\"ghost\" icon=\"i-heroicons-x-mark-20-solid\" class=\"-my-1\" @click=\"isOpen = false\" />\n\n          </div>\n\n        </template>\n\n\n\n        <Placeholder class=\"h-full\" />\n\n      </UCard>\n\n    </USlideover>\n\n  </div>\n\n</template>\n\n\nYou can still handle the esc shortcut yourself by using our defineShortcuts composable.\n\n<script setup>\n\nconst isOpen = ref(false)\n\n\n\ndefineShortcuts({\n\n  escape: {\n\n    usingInput: true,\n\n    whenever: [isOpen],\n\n    handler: () => { isOpen.value = false }\n\n  }\n\n})\n\n</script>\n\nProps\nui\nany\nundefined\nside\n\"left\" | \"right\"\n\"right\"\ntransition\nboolean\ntrue\nmodelValue\nboolean\nfalse\nappear\nboolean\nfalse\noverlay\nboolean\ntrue\npreventClose\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"fixed inset-0 flex z-50\",\n\n  \"overlay\": {\n\n    \"base\": \"fixed inset-0 transition-opacity\",\n\n    \"background\": \"bg-gray-200/75 dark:bg-gray-800/75\",\n\n    \"transition\": {\n\n      \"enter\": \"ease-in-out duration-500\",\n\n      \"enterFrom\": \"opacity-0\",\n\n      \"enterTo\": \"opacity-100\",\n\n      \"leave\": \"ease-in-out duration-500\",\n\n      \"leaveFrom\": \"opacity-100\",\n\n      \"leaveTo\": \"opacity-0\"\n\n    }\n\n  },\n\n  \"base\": \"relative flex-1 flex flex-col w-full focus:outline-none\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"ring\": \"\",\n\n  \"rounded\": \"\",\n\n  \"padding\": \"\",\n\n  \"shadow\": \"shadow-xl\",\n\n  \"width\": \"w-screen max-w-md\",\n\n  \"transition\": {\n\n    \"enter\": \"transform transition ease-in-out duration-300\",\n\n    \"leave\": \"transform transition ease-in-out duration-200\"\n\n  }\n\n}\n\n\nModal\n\nDisplay a modal within your application.\n\nPopover\n\nDisplay a non-modal dialog that floats around a trigger element."
  },
  {
    "title": "Tabs - Nuxt UI",
    "url": "https://ui.nuxt.com/navigation/tabs",
    "html": "Navigation\nTabs\nGitHub\n\nA set of tab panels that are displayed one at a time.\n\nUsage\n\nPass an array to the items prop of the Tabs component. Each item can have the following properties:\n\nlabel - The label of the item.\nslot - A key to customize the item with a slot.\ncontent - The content to display in the panel by default.\ndisabled - Determines whether the item is disabled or not.\nTab1\nTab2\nTab3\nThis is the content shown for Tab1\n<script setup>\n\nconst items = [{\n\n  label: 'Tab1',\n\n  content: 'This is the content shown for Tab1'\n\n}, {\n\n  label: 'Tab2',\n\n  disabled: true,\n\n  content: 'And, this is the content for Tab2'\n\n}, {\n\n  label: 'Tab3',\n\n  content: 'Finally, this is the content for Tab3'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTabs :items=\"items\" />\n\n</template>\n\nVertical\n\nYou can change the orientation of the tabs by setting the orientation prop to vertical.\n\nTab1\nTab2\nTab3\nThis is the content shown for Tab1\n<script setup>\n\nconst items = [{\n\n  label: 'Tab1',\n\n  content: 'This is the content shown for Tab1'\n\n}, {\n\n  label: 'Tab2',\n\n  content: 'And, this is the content for Tab2'\n\n}, {\n\n  label: 'Tab3',\n\n  content: 'Finally, this is the content for Tab3'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTabs :items=\"items\" orientation=\"vertical\" :ui=\"{ wrapper: 'flex items-center gap-4', list: { width: 'w-48' } }\" />\n\n</template>\n\nDefault index\n\nYou can set the default index of the tabs by setting the default-index prop.\n\nTab1\nTab2\nTab3\nFinally, this is the content for Tab3\n<script setup>\n\nconst items = [{\n\n  label: 'Tab1',\n\n  content: 'This is the content shown for Tab1'\n\n}, {\n\n  label: 'Tab2',\n\n  content: 'And, this is the content for Tab2'\n\n}, {\n\n  label: 'Tab3',\n\n  content: 'Finally, this is the content for Tab3'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTabs :items=\"items\" :default-index=\"2\" />\n\n</template>\n\nThis will have no effect if you are using a v-model to control the selected index.\nListen to changes\n\nYou can listen to changes by using the @change event. The event will emit the index of the selected item.\n\nTab1\nTab2\nTab3\nThis is the content shown for Tab1\n<script setup>\n\nconst items = [{\n\n  label: 'Tab1',\n\n  content: 'This is the content shown for Tab1'\n\n}, {\n\n  label: 'Tab2',\n\n  content: 'And, this is the content for Tab2'\n\n}, {\n\n  label: 'Tab3',\n\n  content: 'Finally, this is the content for Tab3'\n\n}]\n\n\n\nfunction onChange (index) {\n\n  const item = items[index]\n\n\n\n  alert(`${item.label} was clicked!`)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UTabs :items=\"items\" @change=\"onChange\" />\n\n</template>\n\nControl the selected index\n\nUse a v-model to control the selected index.\n\nTab1\nTab2\nTab3\nThis is the content shown for Tab1\n<script setup>\n\nconst items = [{\n\n  label: 'Tab1',\n\n  content: 'This is the content shown for Tab1'\n\n}, {\n\n  label: 'Tab2',\n\n  content: 'And, this is the content for Tab2'\n\n}, {\n\n  label: 'Tab3',\n\n  content: 'Finally, this is the content for Tab3'\n\n}]\n\n\n\nconst route = useRoute()\n\nconst router = useRouter()\n\n\n\nconst selected = computed({\n\n  get () {\n\n    const index = items.findIndex((item) => item.label === route.query.tab)\n\n    if (index === -1) {\n\n      return 0\n\n    }\n\n\n\n    return index\n\n  },\n\n  set (value) {\n\n    // Hash is specified here to prevent the page from scrolling to the top\n\n    router.replace({ query: { tab: items[value].label }, hash: '#control-the-selected-index' })\n\n  }\n\n})\n\n</script>\n\n\n\n<template>\n\n  <UTabs v-model=\"selected\" :items=\"items\" />\n\n</template>\n\nIn this example, we are binding tabs to the route query. Refresh the page to see the selected tab change.\nSlots\n\nYou can use slots to customize the buttons and items content of the Accordion.\n\ndefault\n\nUse the #default slot to customize the content of the trigger buttons. You will have access to the item, index, selected and disabled in the slot scope.\n\n1. Getting Started\n2. Installation\n3. Theming\nThis is the content shown for Tab1\n<script setup>\n\nconst items = [{\n\n  label: 'Getting Started',\n\n  icon: 'i-heroicons-information-circle',\n\n  content: 'This is the content shown for Tab1'\n\n}, {\n\n  label: 'Installation',\n\n  icon: 'i-heroicons-arrow-down-tray',\n\n  content: 'And, this is the content for Tab2'\n\n}, {\n\n  label: 'Theming',\n\n  icon: 'i-heroicons-eye-dropper',\n\n  content: 'Finally, this is the content for Tab3'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UTabs :items=\"items\" class=\"w-full\">\n\n    <template #default=\"{ item, index, selected }\">\n\n      <div class=\"flex items-center gap-2 relative truncate\">\n\n        <UIcon :name=\"item.icon\" class=\"w-4 h-4 flex-shrink-0\" />\n\n\n\n        <span class=\"truncate\">{{ index + 1 }}. {{ item.label }}</span>\n\n\n\n        <span v-if=\"selected\" class=\"absolute -right-4 w-2 h-2 rounded-full bg-primary-500 dark:bg-primary-400\" />\n\n      </div>\n\n    </template>\n\n  </UTabs>\n\n</template>\n\nitem\n\nUse the #item slot to customize the items content. You will have access to the item, index and selected properties in the slot scope.\n\nAccount\nPassword\n\nAccount\n\nMake changes to your account here. Click save when you're done.\n\nName\nUsername\nSave account\n<script setup>\n\nconst items = [{\n\n  key: 'account',\n\n  label: 'Account',\n\n  description: 'Make changes to your account here. Click save when you\\'re done.'\n\n}, {\n\n  key: 'password',\n\n  label: 'Password',\n\n  description: 'Change your password here. After saving, you\\'ll be logged out.'\n\n}]\n\n\n\nconst accountForm = reactive({ name: 'Benjamin', username: 'benjamincanac' })\n\nconst passwordForm = reactive({ currentPassword: '', newPassword: '' })\n\n\n\nfunction onSubmit (form) {\n\n  console.log('Submitted form:', form)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UTabs :items=\"items\" class=\"w-full\">\n\n    <template #item=\"{ item }\">\n\n      <UCard @submit.prevent=\"() => onSubmit(item.key === 'account' ? accountForm : passwordForm)\">\n\n        <template #header>\n\n          <p class=\"text-base font-semibold leading-6 text-gray-900 dark:text-white\">\n\n            {{ item.label }}\n\n          </p>\n\n          <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n\n            {{ item.description }}\n\n          </p>\n\n        </template>\n\n\n\n        <div v-if=\"item.key === 'account'\" class=\"space-y-3\">\n\n          <UFormGroup label=\"Name\" name=\"name\">\n\n            <UInput v-model=\"accountForm.name\" />\n\n          </UFormGroup>\n\n          <UFormGroup label=\"Username\" name=\"username\">\n\n            <UInput v-model=\"accountForm.username\" />\n\n          </UFormGroup>\n\n        </div>\n\n        <div v-else-if=\"item.key === 'password'\" class=\"space-y-3\">\n\n          <UFormGroup label=\"Current Password\" name=\"current\" required>\n\n            <UInput v-model=\"passwordForm.currentPassword\" type=\"password\" required />\n\n          </UFormGroup>\n\n          <UFormGroup label=\"New Password\" name=\"new\" required>\n\n            <UInput v-model=\"passwordForm.newPassword\" type=\"password\" required />\n\n          </UFormGroup>\n\n        </div>\n\n\n\n        <template #footer>\n\n          <UButton type=\"submit\" color=\"black\">\n\n            Save {{ item.key === 'account' ? 'account' : 'password' }}\n\n          </UButton>\n\n        </template>\n\n      </UCard>\n\n    </template>\n\n  </UTabs>\n\n</template>\n\n\nYou can also pass a slot property to customize a specific item.\n\nAccount\nPassword\n\nAccount\n\nMake changes to your account here. Click save when you're done.\n\nName\nUsername\nSave account\n<script setup>\n\nconst items = [{\n\n  slot: 'account',\n\n  label: 'Account'\n\n}, {\n\n  slot: 'password',\n\n  label: 'Password'\n\n}]\n\n\n\nconst accountForm = reactive({ name: 'Benjamin', username: 'benjamincanac' })\n\nconst passwordForm = reactive({ currentPassword: '', newPassword: '' })\n\n\n\nfunction onSubmitAccount () {\n\n  console.log('Submitted form:', accountForm)\n\n}\n\n\n\nfunction onSubmitPassword () {\n\n  console.log('Submitted form:', passwordForm)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UTabs :items=\"items\" class=\"w-full\">\n\n    <template #account=\"{ item }\">\n\n      <UCard @submit.prevent=\"onSubmitAccount\">\n\n        <template #header>\n\n          <p class=\"text-base font-semibold leading-6 text-gray-900 dark:text-white\">\n\n            {{ item.label }}\n\n          </p>\n\n          <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n\n            Make changes to your account here. Click save when you're done.\n\n          </p>\n\n        </template>\n\n\n\n        <UFormGroup label=\"Name\" name=\"name\" class=\"mb-3\">\n\n          <UInput v-model=\"accountForm.name\" />\n\n        </UFormGroup>\n\n        <UFormGroup label=\"Username\" name=\"username\">\n\n          <UInput v-model=\"accountForm.username\" />\n\n        </UFormGroup>\n\n\n\n        <template #footer>\n\n          <UButton type=\"submit\" color=\"black\">\n\n            Save account\n\n          </UButton>\n\n        </template>\n\n      </UCard>\n\n    </template>\n\n\n\n    <template #password=\"{ item }\">\n\n      <UCard @submit.prevent=\"onSubmitPassword\">\n\n        <template #header>\n\n          <h3 class=\"text-base font-semibold leading-6 text-gray-900 dark:text-white\">\n\n            {{ item.label }}\n\n          </h3>\n\n          <p class=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n\n            Change your password here. After saving, you'll be logged out.\n\n          </p>\n\n        </template>\n\n\n\n        <UFormGroup label=\"Current Password\" name=\"current\" required class=\"mb-3\">\n\n          <UInput v-model=\"passwordForm.currentPassword\" type=\"password\" required />\n\n        </UFormGroup>\n\n        <UFormGroup label=\"New Password\" name=\"new\" required>\n\n          <UInput v-model=\"passwordForm.newPassword\" type=\"password\" required />\n\n        </UFormGroup>\n\n\n\n        <template #footer>\n\n          <UButton type=\"submit\" color=\"black\">\n\n            Save password\n\n          </UButton>\n\n        </template>\n\n      </UCard>\n\n    </template>\n\n  </UTabs>\n\n</template>\n\nProps\nui\nany\nundefined\nmodelValue\nnumber\nundefined\norientation\n\"horizontal\" | \"vertical\"\n\"horizontal\"\ndefaultIndex\nnumber\n0\nitems\nTabItem[]\n[]\nShow properties\nConfig\n{\n\n  \"wrapper\": \"relative space-y-2\",\n\n  \"container\": \"relative w-full\",\n\n  \"base\": \"focus:outline-none\",\n\n  \"list\": {\n\n    \"base\": \"relative\",\n\n    \"background\": \"bg-gray-100 dark:bg-gray-800\",\n\n    \"rounded\": \"rounded-lg\",\n\n    \"shadow\": \"\",\n\n    \"padding\": \"p-1\",\n\n    \"height\": \"h-10\",\n\n    \"width\": \"w-full\",\n\n    \"marker\": {\n\n      \"wrapper\": \"absolute top-[4px] left-[4px] duration-200 ease-out focus:outline-none\",\n\n      \"base\": \"w-full h-full\",\n\n      \"background\": \"bg-white dark:bg-gray-900\",\n\n      \"rounded\": \"rounded-md\",\n\n      \"shadow\": \"shadow-sm\"\n\n    },\n\n    \"tab\": {\n\n      \"base\": \"relative inline-flex items-center justify-center flex-shrink-0 w-full ui-focus-visible:outline-0 ui-focus-visible:ring-2 ui-focus-visible:ring-primary-500 dark:ui-focus-visible:ring-primary-400 ui-not-focus-visible:outline-none focus:outline-none disabled:cursor-not-allowed disabled:opacity-75 transition-colors duration-200 ease-out\",\n\n      \"background\": \"\",\n\n      \"active\": \"text-gray-900 dark:text-white\",\n\n      \"inactive\": \"text-gray-500 dark:text-gray-400\",\n\n      \"height\": \"h-8\",\n\n      \"padding\": \"px-3\",\n\n      \"size\": \"text-sm\",\n\n      \"font\": \"font-medium\",\n\n      \"rounded\": \"rounded-md\",\n\n      \"shadow\": \"\"\n\n    }\n\n  }\n\n}\n\n\nPagination\n\nAdd a pagination to handle pages.\n\nBreadcrumb\n\nA list of links that indicate the current page's location within a navigational hierarchy."
  },
  {
    "title": "VerticalNavigation - Nuxt UI",
    "url": "https://ui.nuxt.com/navigation/vertical-navigation",
    "html": "Navigation\nVerticalNavigation\nGitHub\n\nDisplay a vertical navigation.\n\nUsage\n\nPass an array to the links prop of the VerticalNavigation component. Each link can have the following properties:\n\nlabel - The label of the link.\nicon - The icon of the link.\niconClass - The class of the icon link.\navatar - The avatar of the link. You can pass all the props of the Avatar component.\nbadge - A badge to display next to the label.\nclick - The click handler of the link.\n\nYou can also pass any property from the NuxtLink component such as to, exact, etc.\n\nProfile\n100\nInstallation\nVertical Navigation\nCommand Palette\n<script setup>\n\nconst links = [{\n\n  label: 'Profile',\n\n  avatar: {\n\n    src: 'https://avatars.githubusercontent.com/u/739984?v=4'\n\n  },\n\n  badge: 100\n\n}, {\n\n  label: 'Installation',\n\n  icon: 'i-heroicons-home',\n\n  to: '/getting-started/installation'\n\n}, {\n\n  label: 'Vertical Navigation',\n\n  icon: 'i-heroicons-chart-bar',\n\n  to: '/navigation/vertical-navigation'\n\n}, {\n\n  label: 'Command Palette',\n\n  icon: 'i-heroicons-command-line',\n\n  to: '/navigation/command-palette'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UVerticalNavigation :links=\"links\" />\n\n</template>\n\nLearn how to build a Tailwind like vertical navigation in the Examples page.\nSlots\n\nYou can use slots to customize links display.\n\ndefault\n\nUse the #default slot to customize the link label. You will have access to the link and isActive properties in the slot scope.\n\nVertical Navigation\nCommand Palette\nTable\n<script setup>\n\nconst links = [{\n\n  label: 'Vertical Navigation',\n\n  to: '/navigation/vertical-navigation'\n\n}, {\n\n  label: 'Command Palette',\n\n  to: '/navigation/command-palette'\n\n}, {\n\n  label: 'Table',\n\n  to: '/data/table'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UVerticalNavigation :links=\"links\">\n\n    <template #default=\"{ link }\">\n\n      <span class=\"group-hover:text-primary relative\">{{ link.label }}</span>\n\n    </template>\n\n  </UVerticalNavigation>\n\n</template>\n\navatar\n\nUse the #avatar slot to customize the link avatar. You will have access to the link and isActive properties in the slot scope.\n\nbenjamincanac\nAtinux\nsmarroufin\n<script setup>\n\nconst links = [{\n\n  avatar: {\n\n    src: 'https://ipx.nuxt.com/s_16x16/gh_avatar/benjamincanac',\n\n    srcset: 'https://ipx.nuxt.com/s_32x32/gh_avatar/benjamincanac 2x',\n\n    alt: ''\n\n  },\n\n  label: 'benjamincanac',\n\n  to: 'https://github.com/benjamincanac',\n\n  target: '_blank'\n\n}, {\n\n  avatar: {\n\n    src: 'https://ipx.nuxt.com/s_16x16/gh_avatar/Atinux',\n\n    srcset: 'https://ipx.nuxt.com/s_32x32/gh_avatar/Atinux 2x',\n\n    alt: ''\n\n  },\n\n  label: 'Atinux',\n\n  to: 'https://github.com/Atinux',\n\n  target: '_blank'\n\n}, {\n\n  avatar: {\n\n    src: 'https://ipx.nuxt.com/s_16x16/gh_avatar/smarroufin',\n\n    srcset: 'https://ipx.nuxt.com/s_32x32/gh_avatar/smarroufin 2x',\n\n    alt: ''\n\n  },\n\n  label: 'smarroufin',\n\n  to: 'https://github.com/smarroufin',\n\n  target: '_blank'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UVerticalNavigation :links=\"links\">\n\n    <template #avatar=\"{ link }\">\n\n      <UAvatar\n\n        v-if=\"link.avatar\"\n\n        v-bind=\"link.avatar\"\n\n        size=\"3xs\"\n\n        loading=\"lazy\"\n\n      />\n\n      <UIcon v-else name=\"i-heroicons-user-circle-20-solid\" class=\"text-lg\" />\n\n    </template>\n\n  </UVerticalNavigation>\n\n</template>\n\nicon\n\nUse the #icon slot to customize the link icon. You will have access to the link and isActive properties in the slot scope.\n\nUDropdown and UPopover dropdown menu, dropdown will be obscured\nUncaught (in promise) ReferenceError: ref is not defined\nFully styled and customizable components for Nuxt.\nCan I pass a tailwind color to UNotifications with `toast.add()` ?\n<script setup>\n\nconst types = {\n\n  bug: {\n\n    icon: 'i-heroicons-bug-ant-20-solid',\n\n    color: 'text-red-500'\n\n  },\n\n  docs: {\n\n    icon: 'i-heroicons-document-text-20-solid',\n\n    color: 'text-blue-500'\n\n  },\n\n  lock: {\n\n    icon: 'i-heroicons-lock-closed-20-solid',\n\n    color: 'text-gray dark:text-white'\n\n  },\n\n  default: {\n\n    icon: 'i-heroicons-question-mark-circle-20-solid',\n\n    color: 'text-green-500'\n\n  }\n\n}\n\nconst links = [{\n\n  label: 'UDropdown and UPopover dropdown menu, dropdown will be obscured',\n\n  type: 'bug'\n\n}, {\n\n  label: 'Uncaught (in promise) ReferenceError: ref is not defined',\n\n  type: 'lock'\n\n}, {\n\n  label: 'Fully styled and customizable components for Nuxt.',\n\n  type: 'docs'\n\n}, {\n\n  label: 'Can I pass a tailwind color to UNotifications with `toast.add()` ?'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UVerticalNavigation \n\n    :links=\"links\"\n\n    :ui=\"{ wrapper: 'truncate' }\"\n\n  >\n\n    <template #icon=\"{ link }\">\n\n      <UIcon v-if=\"link.type\" :name=\"types[link.type].icon\" :class=\"types[link.type].color\" class=\"text-base\" />\n\n      <UIcon v-else :name=\"types.default.icon\" :class=\"types.default.color\" class=\"text-base\" />\n\n    </template>\n\n  </UVerticalNavigation>\n\n</template>\n\nbadge\n\nUse the #badge slot to customize the link badge. You will have access to the link and isActive properties in the slot scope.\n\n.github\nchore(github): use pnpm 8\nlast month\n.editorconfig\nInitial commit\n2 years ago\n.package.json\nchore(deps): bump\n16 hours ago\n<script setup>\n\nconst links = [{\n\n  label: '.github',\n\n  icon: 'i-heroicons-folder-20-solid',\n\n  badge: 'chore(github): use pnpm 8',\n\n  time: 'last month'\n\n}, {\n\n  label: '.editorconfig',\n\n  icon: 'i-heroicons-document-solid',\n\n  badge: 'Initial commit',\n\n  time: '2 years ago'\n\n}, {\n\n  label: '.package.json',\n\n  icon: 'i-heroicons-document-solid',\n\n  badge: 'chore(deps): bump',\n\n  time: '16 hours ago'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UVerticalNavigation\n\n    :links=\"links\"\n\n    class=\"w-full\"\n\n    :ui=\"{\n\n      label: 'truncate relative text-gray-900 dark:text-white flex-initial w-32 text-left'\n\n    }\"\n\n  >\n\n    <template #badge=\"{ link }\">\n\n      <div class=\"flex-1 flex justify-between relative truncate\">\n\n        <div>{{ link.badge }}</div>\n\n        <div>{{ link.time }}</div>\n\n      </div>\n\n    </template>\n\n  </UVerticalNavigation>\n\n</template>\n\nProps\nui\nany\nundefined\nlinks\nVerticalNavigationLink[]\n[]\nShow properties\nConfig\n{\n\n  \"wrapper\": \"relative\",\n\n  \"base\": \"group relative flex items-center gap-2 focus:outline-none focus-visible:outline-none dark:focus-visible:outline-none focus-visible:before:ring-inset focus-visible:before:ring-1 focus-visible:before:ring-primary-500 dark:focus-visible:before:ring-primary-400 before:absolute before:inset-px before:rounded-md disabled:cursor-not-allowed disabled:opacity-75\",\n\n  \"ring\": \"focus-visible:ring-inset focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\",\n\n  \"padding\": \"px-3 py-1.5\",\n\n  \"width\": \"w-full\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"font\": \"font-medium\",\n\n  \"size\": \"text-sm\",\n\n  \"active\": \"text-gray-900 dark:text-white before:bg-gray-100 dark:before:bg-gray-800\",\n\n  \"inactive\": \"text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:before:bg-gray-50 dark:hover:before:bg-gray-800/50\",\n\n  \"label\": \"truncate relative\",\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 w-4 h-4\",\n\n    \"active\": \"text-gray-700 dark:text-gray-200\",\n\n    \"inactive\": \"text-gray-400 dark:text-gray-500 group-hover:text-gray-700 dark:group-hover:text-gray-200\"\n\n  },\n\n  \"avatar\": {\n\n    \"base\": \"flex-shrink-0\",\n\n    \"size\": \"3xs\"\n\n  },\n\n  \"badge\": {\n\n    \"base\": \"relative ms-auto inline-block py-0.5 px-2 text-xs rounded-md -me-1 -my-0.5\",\n\n    \"active\": \"bg-white dark:bg-gray-900\",\n\n    \"inactive\": \"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white group-hover:bg-white dark:group-hover:bg-gray-900\"\n\n  }\n\n}\n\n\nTable\n\nDisplay data in a table.\n\nCommandPalette\n\nAdd a customizable command palette to your app."
  },
  {
    "title": "Breadcrumb - Nuxt UI",
    "url": "https://ui.nuxt.com/navigation/breadcrumb",
    "html": "Navigation\nBreadcrumb\n\nA list of links that indicate the current page's location within a navigational hierarchy.\n\nUsage\n\nPass an array to the links prop of the Breadcrumb component. Each link can have the following properties:\n\nlabel - The label of the link.\nicon - The icon of the link.\niconClass - The class of the icon link.\n\nYou can also pass any property from the NuxtLink component such as to, exact, etc.\n\nHome\nNavigation\nBreadcrumb\n<script setup>\n\nconst links = [{\n\n  label: 'Home',\n\n  icon: 'i-heroicons-home',\n\n  to: '/'\n\n}, {\n\n  label: 'Navigation',\n\n  icon: 'i-heroicons-square-3-stack-3d'\n\n}, {\n\n  label: 'Breadcrumb',\n\n  icon: 'i-heroicons-link'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UBreadcrumb :links=\"links\" />\n\n</template>\n\nA span will be rendered instead of a link when the to property is not defined.\nDivider\n\nUse the divider prop to customize the divider between each link, it can be an icon or a string. You can change it globally in ui.breadcrumb.default.divider. Defaults to i-heroicons-chevron-right-20-solid.\n\nYou can set the prop to null to hide the divider. Additionally, you can customize it using the divider slot.\n\ndivider\nHome\n/\nNavigation\n/\nBreadcrumb\n<UBreadcrumb\n\n  divider=\"/\"\n\n  :links=\"[{ label: 'Home', to: '/' }, { label: 'Navigation' }, { label: 'Breadcrumb' }]\"\n\n/>\n\nSlots\ndefault\n\nUse the #default slot to customize the link label. You will have access to the link, index and isActive properties in the slot scope.\n\n1. Home\n2. Navigation\n3. Breadcrumb\n<script setup>\n\nconst links = [{\n\n  label: 'Home',\n\n  to: '/'\n\n}, {\n\n  label: 'Navigation'\n\n}, {\n\n  label: 'Breadcrumb'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UBreadcrumb :links=\"links\">\n\n    <template #default=\"{ link, isActive, index }\">\n\n      <UBadge :color=\"isActive ? 'primary' : 'gray'\" class=\"rounded-full\">\n\n        {{ index + 1 }}. {{ link.label }}\n\n      </UBadge>\n\n    </template>\n\n  </UBreadcrumb>\n\n</template>\n\nicon\n\nUse the #icon slot to customize the link icon. You will have access to the link, index and isActive properties in the slot scope.\n\n1\nHome\n2\nNavigation\n3\nBreadcrumb\n<script setup>\n\nconst links = [{\n\n  label: 'Home',\n\n  to: '/'\n\n}, {\n\n  label: 'Navigation'\n\n}, {\n\n  label: 'Breadcrumb'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UBreadcrumb :links=\"links\" :divider=\"null\" :ui=\"{ ol: 'gap-x-3' }\">\n\n    <template #icon=\"{ link, index, isActive }\">\n\n      <UAvatar\n\n        :alt=\"(index + 1 ).toString()\"\n\n        :ui=\"{\n\n          background: isActive ? 'bg-primary-500 dark:bg-primary-400' : undefined,\n\n          placeholder: isActive ? 'text-white dark:text-gray-900' : !!link.to ? 'group-hover:text-gray-700 dark:group-hover:text-gray-200' : ''\n\n        }\"\n\n        size=\"xs\"\n\n      />\n\n    </template>\n\n  </UBreadcrumb>\n\n</template>\n\ndivider\n\nUse the divider slot to customize the divider of the Breadcrumb.\n\nHome\nNavigation\nBreadcrumb\n<script setup>\n\nconst links = [{\n\n  label: 'Home',\n\n  icon: 'i-heroicons-home',\n\n  to: '/'\n\n}, {\n\n  label: 'Navigation',\n\n  icon: 'i-heroicons-square-3-stack-3d'\n\n}, {\n\n  label: 'Breadcrumb',\n\n  icon: 'i-heroicons-link'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UBreadcrumb :links=\"links\" :ui=\"{ ol: 'gap-x-3', li: 'gap-x-3' }\">\n\n    <template #divider>\n\n      <span class=\"w-8 h-1 rounded-full bg-gray-300 dark:bg-gray-700\" />\n\n    </template>\n\n  </UBreadcrumb>\n\n</template>\n\nProps\nui\nany\nundefined\ndivider\nstring\nconfig.default.divider\nlinks\nBreadcrumbLink[]\n[]\nShow properties\nConfig\n{\n\n  \"wrapper\": \"relative\",\n\n  \"ol\": \"flex items-center gap-x-1.5\",\n\n  \"li\": \"flex items-center gap-x-1.5 text-gray-500 dark:text-gray-400 text-sm\",\n\n  \"base\": \"flex items-center gap-x-1.5 group font-semibold\",\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 w-4 h-4\",\n\n    \"active\": \"\",\n\n    \"inactive\": \"\"\n\n  },\n\n  \"divider\": {\n\n    \"base\": \"flex-shrink-0 w-5 h-5\"\n\n  },\n\n  \"active\": \"text-primary-500 dark:text-primary-400\",\n\n  \"inactive\": \" hover:text-gray-700 dark:hover:text-gray-200\",\n\n  \"default\": {\n\n    \"divider\": \"i-heroicons-chevron-right-20-solid\"\n\n  }\n\n}\n\n\nTabs\n\nA set of tab panels that are displayed one at a time.\n\nModal\n\nDisplay a modal within your application."
  },
  {
    "title": "Pagination - Nuxt UI",
    "url": "https://ui.nuxt.com/navigation/pagination",
    "html": "Navigation\nPagination\nGitHub\n\nAdd a pagination to handle pages.\n\nUsage\n\nUse a v-model to get a reactive page alongside a total which represents the total of items. You can also use the page-count prop to define the number of items per page which defaults to 10.\n\n1\n2\n3\n4\n5\n…\n11\n<script setup>\n\nconst page = ref(1)\n\nconst items = ref(Array(55))\n\n</script>\n\n\n\n<template>\n\n  <UPagination v-model=\"page\" :page-count=\"5\" :total=\"items.length\" />\n\n</template>\n\nMax\n\nUse the max prop to set a maximum of displayed pages. Defaults to 7, being the minimum.\n\nmax\n1\n2\n3\n…\n20\n<UPagination :max=\"5\" :page-count=\"5\" :total=\"100\" :model-value=\"1\" />\n\nSize\n\nUse the size prop to change the size of the buttons.\n\nsize\nsm\n1\n2\n3\n4\n5\n…\n10\n<UPagination size=\"sm\" :model-value=\"1\" :total=\"100\" show-last show-first />\n\nActive / Inactive\n\nUse the active-button and inactive-button props to customize the active and inactive buttons of the Pagination.\n\n1\n2\n3\n4\n5\n…\n10\n<UPagination\n\n  :active-button=\"{ variant: 'outline' }\"\n\n  :inactive-button=\"{ color: 'gray' }\"\n\n  :model-value=\"1\"\n\n  :total=\"100\"\n\n/>\n\nPrev / Next\n\nUse the prev-button and next-button props to customize the prev and next buttons of the Pagination.\n\nPrev\n1\n2\n3\n4\n5\n…\n10\nNext\n<UPagination\n\n  :prev-button=\"{ icon: 'i-heroicons-arrow-small-left-20-solid', label: 'Prev', color: 'gray' }\"\n\n  :next-button=\"{ icon: 'i-heroicons-arrow-small-right-20-solid', trailing: true, label: 'Next', color: 'gray' }\"\n\n  :model-value=\"1\"\n\n  :total=\"100\"\n\n/>\n\nFirst / Last\n\nUse the first-button and last-button props to customize the first and last buttons of the Pagination.\n\nFirst\n1\n2\n3\n4\n5\n…\n10\nLast\n<UPagination\n\n  :first-button=\"{ icon: 'i-heroicons-arrow-small-left-20-solid', label: 'First', color: 'gray' }\"\n\n  :last-button=\"{ icon: 'i-heroicons-arrow-small-right-20-solid', trailing: true, label: 'Last', color: 'gray' }\"\n\n  :model-value=\"1\"\n\n  :total=\"100\"\n\n  show-first\n\n  show-last\n\n/>\n\nSlots\nprev / next\n\nUse the #prev and #next slots to set the content of the previous and next buttons.\n\n1\n2\n3\n4\n5\n6\n<script setup>\n\nconst page = ref(1)\n\nconst items = ref(Array(55))\n\n</script>\n\n\n\n<template>\n\n  <UPagination v-model=\"page\" :total=\"items.length\" :ui=\"{ rounded: 'first-of-type:rounded-s-md last-of-type:rounded-e-md' }\">\n\n    <template #prev=\"{ onClick }\">\n\n      <UTooltip text=\"Previous page\">\n\n        <UButton icon=\"i-heroicons-arrow-small-left-20-solid\" color=\"primary\" :ui=\"{ rounded: 'rounded-full' }\" class=\"rtl:[&_span:first-child]:rotate-180 me-2\" @click=\"onClick\" />\n\n      </UTooltip>\n\n    </template>\n\n\n\n    <template #next=\"{ onClick }\">\n\n      <UTooltip text=\"Next page\">\n\n        <UButton icon=\"i-heroicons-arrow-small-right-20-solid\" color=\"primary\" :ui=\"{ rounded: 'rounded-full' }\" class=\"rtl:[&_span:last-child]:rotate-180 ms-2\" @click=\"onClick\" />\n\n      </UTooltip>\n\n    </template>\n\n  </UPagination>\n\n</template>\n\nfirst / last\n\nUse the #first and #last slots to set the content of the first and last buttons.\n\n1\n2\n3\n4\n5\n6\n<script setup>\n\nconst page = ref(1)\n\nconst items = ref(Array(55))\n\n</script>\n\n\n\n<template>\n\n  <UPagination v-model=\"page\" :total=\"items.length\" :ui=\"{ rounded: 'first-of-type:rounded-s-md last-of-type:rounded-e-md' }\">\n\n    <template #first=\"{ onClick }\">\n\n      <UTooltip text=\"First page\">\n\n        <UButton icon=\"i-heroicons-arrow-uturn-left\" color=\"primary\" :ui=\"{ rounded: 'rounded-full' }\" class=\"rtl:[&_span:first-child]:rotate-180 me-2\" @click=\"onClick\" />\n\n      </UTooltip>\n\n    </template>\n\n\n\n    <template #last=\"{ onClick }\">\n\n      <UTooltip text=\"Last page\">\n\n        <UButton icon=\"i-heroicons-arrow-uturn-right-20-solid\" color=\"primary\" :ui=\"{ rounded: 'rounded-full' }\" class=\"rtl:[&_span:last-child]:rotate-180 ms-2\" @click=\"onClick\" />\n\n      </UTooltip>\n\n    </template>\n\n  </UPagination>\n\n</template>\n\nProps\nmodelValue\nrequired\nnumber\ntotal\nrequired\nnumber\nui\nany\nundefined\nmax\nnumber\n7\nsize\nButtonSize\nconfig.default.size\n\"2xs\"\"xs\"\"sm\"\"md\"\"lg\"\"xl\"\ndivider\nstring\n\"\\u2026\"\npageCount\nnumber\n10\nactiveButton\nButton\nconfig.default.activeButton as Button\nShow properties\ninactiveButton\nButton\nconfig.default.inactiveButton as Button\nShow properties\nfirstButton\nButton\nconfig.default.firstButton as Button\nShow properties\nlastButton\nButton\nconfig.default.lastButton as Button\nShow properties\nprevButton\nButton\nconfig.default.prevButton as Button\nShow properties\nnextButton\nButton\nconfig.default.nextButton as Button\nShow properties\nshowFirst\nboolean\nfalse\nshowLast\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"flex items-center -space-x-px\",\n\n  \"base\": \"\",\n\n  \"rounded\": \"first:rounded-s-md last:rounded-e-md\",\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"activeButton\": {\n\n      \"color\": \"primary\"\n\n    },\n\n    \"inactiveButton\": {\n\n      \"color\": \"white\"\n\n    },\n\n    \"firstButton\": {\n\n      \"color\": \"white\",\n\n      \"class\": \"rtl:[&_span:first-child]:rotate-180\",\n\n      \"icon\": \"i-heroicons-chevron-double-left-20-solid\"\n\n    },\n\n    \"lastButton\": {\n\n      \"color\": \"white\",\n\n      \"class\": \"rtl:[&_span:last-child]:rotate-180\",\n\n      \"icon\": \"i-heroicons-chevron-double-right-20-solid\"\n\n    },\n\n    \"prevButton\": {\n\n      \"color\": \"white\",\n\n      \"class\": \"rtl:[&_span:first-child]:rotate-180\",\n\n      \"icon\": \"i-heroicons-chevron-left-20-solid\"\n\n    },\n\n    \"nextButton\": {\n\n      \"color\": \"white\",\n\n      \"class\": \"rtl:[&_span:last-child]:rotate-180\",\n\n      \"icon\": \"i-heroicons-chevron-right-20-solid\"\n\n    }\n\n  }\n\n}\n\n\nCommandPalette\n\nAdd a customizable command palette to your app.\n\nTabs\n\nA set of tab panels that are displayed one at a time."
  },
  {
    "title": "CommandPalette - Nuxt UI",
    "url": "https://ui.nuxt.com/navigation/command-palette",
    "html": "Navigation\nCommandPalette\nGitHub\nCombobox\n\nAdd a customizable command palette to your app.\n\nUsage\n\nUse a v-model to display a searchable and selectable list of commands.\n\nWade Cooper\nArlene Mccoy\nDevon Webb\nTom Cook\nTanya Fox\nHellen Schmidt\n<script setup>\n\nconst people = [\n\n  { id: 1, label: 'Wade Cooper' },\n\n  { id: 2, label: 'Arlene Mccoy' },\n\n  { id: 3, label: 'Devon Webb' },\n\n  { id: 4, label: 'Tom Cook' },\n\n  { id: 5, label: 'Tanya Fox' },\n\n  { id: 6, label: 'Hellen Schmidt' },\n\n  { id: 7, label: 'Caroline Schultz' },\n\n  { id: 8, label: 'Mason Heaney' },\n\n  { id: 9, label: 'Claudie Smitham' },\n\n  { id: 10, label: 'Emil Schaefer' }\n\n]\n\n\n\nconst selected = ref([people[3]])\n\n</script>\n\n\n\n<template>\n\n  <UCommandPalette\n\n    v-model=\"selected\"\n\n    multiple\n\n    nullable\n\n    :autoselect=\"false\"\n\n    :groups=\"[{ key: 'people', commands: people }]\"\n\n    :fuse=\"{ resultLimit: 6, fuseOptions: { threshold: 0.1 } }\"\n\n  />\n\n</template>\n\n\nYou can put a CommandPalette anywhere you want but it's most commonly used inside of a modal.\n\nOpen\n<script setup>\n\nconst isOpen = ref(false)\n\n\n\nconst people = [\n\n  { id: 1, label: 'Wade Cooper' },\n\n  { id: 2, label: 'Arlene Mccoy' },\n\n  { id: 3, label: 'Devon Webb' },\n\n  { id: 4, label: 'Tom Cook' },\n\n  { id: 5, label: 'Tanya Fox' },\n\n  { id: 6, label: 'Hellen Schmidt' },\n\n  { id: 7, label: 'Caroline Schultz' },\n\n  { id: 8, label: 'Mason Heaney' },\n\n  { id: 9, label: 'Claudie Smitham' },\n\n  { id: 10, label: 'Emil Schaefer' }\n\n]\n\n\n\nconst selected = ref([])\n\n</script>\n\n\n\n<template>\n\n  <div>\n\n    <UButton label=\"Open\" @click=\"isOpen = true\" />\n\n\n\n    <UModal v-model=\"isOpen\">\n\n      <UCommandPalette\n\n        v-model=\"selected\"\n\n        multiple\n\n        nullable\n\n        :groups=\"[{ key: 'people', commands: people }]\"\n\n      />\n\n    </UModal>\n\n  </div>\n\n</template>\n\n\nYou can pass multiple groups of commands to the component. Each group will be separated by a divider and will display a label.\n\nWithout a v-model, you can also listen on @update:model-value to navigate to a link or do something else when a command is clicked.\n\nRecent searches\nbenjamincanac\nAdd new file\n⌘\nN\nAdd new folder\n⌘\nF\nAdd hashtag\n⌘\nH\nAdd label\n⌘\nL\n<script setup>\n\nconst router = useRouter()\n\nconst toast = useToast()\n\n\n\nconst commandPaletteRef = ref()\n\n\n\nconst users = [\n\n  { id: 'benjamincanac', label: 'benjamincanac', href: 'https://github.com/benjamincanac', target: '_blank', avatar: { src: 'https://ipx.nuxt.com/s_16x16/gh_avatar/benjamincanac', srcset: 'https://ipx.nuxt.com/s_32x32/gh_avatar/benjamincanac 2x', loading: 'lazy' } },\n\n  { id: 'Atinux', label: 'Atinux', href: 'https://github.com/Atinux', target: '_blank', avatar: { src: 'https://ipx.nuxt.com/s_16x16/gh_avatar/Atinux', srcset: 'https://ipx.nuxt.com/s_32x32/gh_avatar/Atinux 2x', loading: 'lazy' } },\n\n  { id: 'smarroufin', label: 'smarroufin', href: 'https://github.com/smarroufin', target: '_blank', avatar: { src: 'https://ipx.nuxt.com/s_16x16/gh_avatar/smarroufin', srcset: 'https://ipx.nuxt.com/s_32x32/gh_avatar/smarroufin 2x', loading: 'lazy' } }\n\n]\n\n\n\nconst actions = [\n\n  { id: 'new-file', label: 'Add new file', icon: 'i-heroicons-document-plus', click: () => toast.add({ title: 'New file added!' }), shortcuts: ['⌘', 'N'] },\n\n  { id: 'new-folder', label: 'Add new folder', icon: 'i-heroicons-folder-plus', click: () => toast.add({ title: 'New folder added!' }), shortcuts: ['⌘', 'F'] },\n\n  { id: 'hashtag', label: 'Add hashtag', icon: 'i-heroicons-hashtag', click: () => toast.add({ title: 'Hashtag added!' }), shortcuts: ['⌘', 'H'] },\n\n  { id: 'label', label: 'Add label', icon: 'i-heroicons-tag', click: () => toast.add({ title: 'Label added!' }), shortcuts: ['⌘', 'L'] }\n\n]\n\n\n\nconst groups = computed(() =>\n\n  [commandPaletteRef.value?.query ? {\n\n    key: 'users',\n\n    commands: users\n\n  } : {\n\n    key: 'recent',\n\n    label: 'Recent searches',\n\n    commands: users.slice(0, 1)\n\n  }, {\n\n    key: 'actions',\n\n    commands: actions\n\n  }].filter(Boolean))\n\n\n\nfunction onSelect (option) {\n\n  if (option.click) {\n\n    option.click()\n\n  } else if (option.to) {\n\n    router.push(option.to)\n\n  } else if (option.href) {\n\n    window.open(option.href, '_blank')\n\n  }\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UCommandPalette ref=\"commandPaletteRef\" :groups=\"groups\" :autoselect=\"false\" @update:model-value=\"onSelect\" />\n\n</template>\n\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name}.\n\nUse the selected-icon prop to set a different icon or change it globally in ui.commandPalette.default.selectedIcon. Defaults to i-heroicons-check-20-solid.\n\nWe couldn't find any items.\n\n<UCommandPalette icon=\"i-heroicons-command-line\" />\n\nLoading\n\nUse the loading prop to show a loading icon.\n\nUse the loading-icon prop to set a different icon or change it globally in ui.commandPalette.default.loadingIcon. Defaults to i-heroicons-arrow-path-20-solid.\n\nloading\n\nWe couldn't find any items.\n\n<UCommandPalette loading />\n\nPlaceholder\n\nUse the placeholder prop to change the input placeholder\n\nplaceholder\n\nWe couldn't find any items.\n\n<UCommandPalette placeholder=\"Type a command...\" />\n\nClose\n\nUse the close-button prop to display a close button on the right side of the input.\n\nYou can pass all the props of the Button component to customize it through the close-button prop or globally through ui.commandPalette.default.closeButton.\n\nWe couldn't find any items.\n\n<UCommandPalette\n\n  :close-button=\"{ icon: 'i-heroicons-x-mark-20-solid', color: 'gray', variant: 'link', padded: false }\"\n\n/>\n\nEmpty\n\nAn empty state will be displayed when there are no results.\n\nUse the empty-state prop to customize the icon and label or change them globally in ui.commandPalette.default.emptyState.\n\nYou can also set it to null to hide the empty state.\n\nWe couldn't find any items.\n\n<UCommandPalette\n\n  :empty-state=\"{ icon: 'i-heroicons-magnifying-glass-20-solid', label: 'We couldn't find any items.', queryLabel: 'We couldn't find any items with that term. Please try again.' }\"\n\n  placeholder=\"Type something to see the empty label change\"\n\n/>\n\nFull-text search\n\nThe CommandPalette component takes care of the full-text search for you with Fuse.js. You can pass all the options of Fuse.js through the fuse prop.\n\nWhen searching for a command, the component will look for a label property on the command by default. You can customize this behavior by overriding the command-attribute prop. This will also affect the display of the command.\n\nYou can also highlight the matches in the command by setting the fuse.fuseOptions.includeMatches to true. The CommandPalette component automatically takes care of the highlighting for you.\n\n<template>\n\n  <UCommandPalette\n\n    command-attribute=\"title\"\n\n    :fuse=\"{\n\n      fuseOptions: {\n\n        ignoreLocation: true,\n\n        includeMatches: true,\n\n        threshold: 0,\n\n        keys: ['title', 'description', 'children.children.value', 'children.children.children.value']\n\n      },\n\n      resultLimit: 10\n\n    }\"\n\n  />\n\n</template>\n\nTry it yourself in this documentation's search by pressing ⌘K.\nAsync search\n\nYou can also pass an async function to the search property of a group to perform an async search. The function will receive the query as its first argument and should return an array of commands.\n\nWe couldn't find any items.\n\n<script setup>\n\nconst groups = [{\n\n  key: 'users',\n\n  label: q => q && `Users matching “${q}”...`,\n\n  search: async (q) => {\n\n    if (!q) {\n\n      return []\n\n    }\n\n\n\n    const users = await $fetch('https://jsonplaceholder.typicode.com/users', { params: { q } })\n\n\n\n    return users.map(user => ({ id: user.id, label: user.name, suffix: user.email }))\n\n  }\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UCommandPalette :groups=\"groups\" :autoselect=\"false\" />\n\n</template>\n\nThe loading state will automatically be enabled when a search function is loading. You can disable this behavior by setting the loading-icon prop to null or globally in ui.commandPalette.default.loadingIcon.\nFilter search\n\nYou can also pass a function to the filter property of a group to filter displayed commands after the search happened. The function will receive the query as its first argument, the array of commands as second argument and should return an array of commands.\n\nArlene Mccoy\nTom Cook\nHellen Schmidt\nMason Heaney\nEmil Schaefer\n<script setup>\n\nconst people = [\n\n  { id: 1, label: 'Wade Cooper', child: true },\n\n  { id: 2, label: 'Arlene Mccoy' },\n\n  { id: 3, label: 'Devon Webb', child: true },\n\n  { id: 4, label: 'Tom Cook' },\n\n  { id: 5, label: 'Tanya Fox', child: true },\n\n  { id: 6, label: 'Hellen Schmidt' },\n\n  { id: 7, label: 'Caroline Schultz', child: true },\n\n  { id: 8, label: 'Mason Heaney' },\n\n  { id: 9, label: 'Claudie Smitham', child: true },\n\n  { id: 10, label: 'Emil Schaefer' }\n\n]\n\n\n\nconst groups = [{\n\n  key: 'users',\n\n  commands: people,\n\n  filter: (q, commands) => {\n\n    if (!q) {\n\n      return commands?.filter(command => !command.child)\n\n    }\n\n\n\n    return commands\n\n  }\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UCommandPalette :groups=\"groups\" :autoselect=\"false\" />\n\n</template>\n\nSlots\n<group>-icon\n\nUse the #<group>-icon slot to override the left command content which display by default the icon, avatar and chip.\n\n<group>-command\n\nUse the #<group>-command slot to override the command content which display by default the prefix, suffix and label (customizable through the command-attribute prop).\n\n<group>-active\n\nUse the #<group>-active slot to override the right command content (when hovered) which display by default the active field of the group if provided.\n\n<group>-inactive\n\nUse the #<group>-inactive slot to override the right command content (when not hovered) which display by default the inactive field of the group if provided or the shortcuts of the command.\n\nThe 4 slots above will have access to the group, command, active and selected properties in the slot scope.\nempty-state\n\nUse the #empty-state slot to customize the empty state.\n\nNothing here!\nAdd item\n<template>\n\n  <UCommandPalette>\n\n    <template #empty-state>\n\n      <div class=\"flex flex-col items-center justify-center py-6 gap-3\">\n\n        <span class=\"italic text-sm\">Nothing here!</span>\n\n        <UButton label=\"Add item\" />\n\n      </div>\n\n    </template>\n\n  </UCommandPalette>\n\n</template>\n\nProps\nui\nany\nundefined\nicon\nstring\nconfig.default.icon\nmodelValue\nstring | number | Record<string, any> | unknown[]\nnull\nplaceholder\nstring\n\"Search...\"\nloadingIcon\nstring\nconfig.default.loadingIcon\nby\nstring\n\"id\"\nselectedIcon\nstring\nconfig.default.selectedIcon\ndebounce\nnumber\n200\nemptyState\n{ icon: string; label: string; queryLabel: string; }\nconfig.default.emptyState\nShow properties\ngroupAttribute\nstring\n\"label\"\ncommandAttribute\nstring\n\"label\"\ngroups\nGroup[]\n[]\nShow properties\ncloseButton\nButton\nconfig.default.closeButton as Button\nShow properties\nfuse\n{}\n{}\nnullable\nboolean\nfalse\nloading\nboolean\nfalse\nmultiple\nboolean\nfalse\nsearchable\nboolean\ntrue\nautoselect\nboolean\ntrue\nautoclear\nboolean\ntrue\nConfig\n{\n\n  \"wrapper\": \"flex flex-col flex-1 min-h-0 divide-y divide-gray-100 dark:divide-gray-800\",\n\n  \"container\": \"relative flex-1 overflow-y-auto divide-y divide-gray-100 dark:divide-gray-800 scroll-py-2\",\n\n  \"input\": {\n\n    \"wrapper\": \"relative flex items-center\",\n\n    \"base\": \"w-full placeholder-gray-400 dark:placeholder-gray-500 bg-transparent border-0 text-gray-900 dark:text-white focus:ring-0 focus:outline-none\",\n\n    \"padding\": \"px-4\",\n\n    \"height\": \"h-12\",\n\n    \"size\": \"sm:text-sm\",\n\n    \"icon\": {\n\n      \"base\": \"pointer-events-none absolute start-4 text-gray-400 dark:text-gray-500\",\n\n      \"size\": \"h-4 w-4\",\n\n      \"padding\": \"ps-10\"\n\n    },\n\n    \"closeButton\": \"absolute end-4\"\n\n  },\n\n  \"emptyState\": {\n\n    \"wrapper\": \"flex flex-col items-center justify-center flex-1 px-6 py-14 sm:px-14\",\n\n    \"label\": \"text-sm text-center text-gray-900 dark:text-white\",\n\n    \"queryLabel\": \"text-sm text-center text-gray-900 dark:text-white\",\n\n    \"icon\": \"w-6 h-6 mx-auto text-gray-400 dark:text-gray-500 mb-4\"\n\n  },\n\n  \"group\": {\n\n    \"wrapper\": \"p-2\",\n\n    \"label\": \"px-2 my-2 text-xs font-semibold text-gray-900 dark:text-white\",\n\n    \"container\": \"text-sm text-gray-700 dark:text-gray-200\",\n\n    \"command\": {\n\n      \"base\": \"flex justify-between select-none items-center rounded-md px-2 py-1.5 gap-2 relative\",\n\n      \"active\": \"bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white\",\n\n      \"inactive\": \"\",\n\n      \"label\": \"flex items-center gap-1.5 min-w-0\",\n\n      \"prefix\": \"text-gray-400 dark:text-gray-500\",\n\n      \"suffix\": \"text-gray-400 dark:text-gray-500\",\n\n      \"container\": \"flex items-center gap-2 min-w-0\",\n\n      \"icon\": {\n\n        \"base\": \"flex-shrink-0 w-4 h-4\",\n\n        \"active\": \"text-gray-900 dark:text-white\",\n\n        \"inactive\": \"text-gray-400 dark:text-gray-500\"\n\n      },\n\n      \"selectedIcon\": {\n\n        \"base\": \"h-4 w-4 text-gray-900 dark:text-white flex-shrink-0\"\n\n      },\n\n      \"avatar\": {\n\n        \"base\": \"flex-shrink-0\",\n\n        \"size\": \"3xs\"\n\n      },\n\n      \"chip\": {\n\n        \"base\": \"flex-shrink-0 w-2 h-2 mx-1 rounded-full\"\n\n      },\n\n      \"disabled\": \"opacity-50\",\n\n      \"shortcuts\": \"hidden md:inline-flex flex-shrink-0 gap-0.5\"\n\n    },\n\n    \"active\": \"flex-shrink-0 text-gray-500 dark:text-gray-400\",\n\n    \"inactive\": \"flex-shrink-0 text-gray-500 dark:text-gray-400\"\n\n  },\n\n  \"default\": {\n\n    \"icon\": \"i-heroicons-magnifying-glass-20-solid\",\n\n    \"loadingIcon\": \"i-heroicons-arrow-path-20-solid\",\n\n    \"emptyState\": {\n\n      \"icon\": \"i-heroicons-magnifying-glass-20-solid\",\n\n      \"label\": \"We couldn't find any items.\",\n\n      \"queryLabel\": \"We couldn't find any items with that term. Please try again.\"\n\n    },\n\n    \"closeButton\": null,\n\n    \"selectedIcon\": \"i-heroicons-check-20-solid\"\n\n  }\n\n}\n\n\nVerticalNavigation\n\nDisplay a vertical navigation.\n\nPagination\n\nAdd a pagination to handle pages."
  },
  {
    "title": "Range - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/range",
    "html": "Forms\nRange\nGitHub\n\nDisplay a range field\n\nUsage\n\nUse a v-model to make the Range reactive.\n\n<script setup>\n\nconst value = ref(50)\n\n</script>\n\n\n\n<template>\n\n  <URange v-model=\"value\" name=\"range\" />\n\n</template>\n\nStyle\n\nUse the color prop to change the visual style of the Range.\n\ncolor\nprimary\n<URange color=\"primary\" placeholder=\"Search...\" />\n\nSize\n\nUse the size prop to change the size of the Range.\n\nsize\nmd\n<URange size=\"md\" />\n\nDisabled\n\nUse the disabled prop to disable the Range.\n\ndisabled\n<URange disabled />\n\nMin and Max\n\nUse the min and max prop to configure the Range.\n\nmin\nmax\n<URange :min=\"0\" :max=\"100\" />\n\nStep\n\nUse the step prop to change the step increment.\n\nstep\n<URange :step=\"20\" />\n\nProps\nname\nstring\nnull\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nmin\nnumber\n0\nmax\nnumber\n100\nsize\nRangeSize\nnull\n\"2xs\"\"xs\"\"sm\"\"md\"\"lg\"\"xl\"\"2xl\"\nstep\nnumber\n1\nid\nstring\nnull\nmodelValue\nnumber\n0\ninputClass\nstring\nnull\ndisabled\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative w-full flex items-center\",\n\n  \"base\": \"w-full absolute appearance-none cursor-pointer disabled:cursor-not-allowed disabled:bg-opacity-50 focus:outline-none peer group\",\n\n  \"rounded\": \"rounded-lg\",\n\n  \"background\": \"bg-transparent\",\n\n  \"ring\": \"focus-visible:ring-2 focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-gray-900\",\n\n  \"progress\": {\n\n    \"base\": \"absolute pointer-events-none peer-disabled:bg-opacity-50\",\n\n    \"rounded\": \"rounded-s-lg\",\n\n    \"background\": \"bg-{color}-500 dark:bg-{color}-400\",\n\n    \"size\": {\n\n      \"2xs\": \"h-px\",\n\n      \"xs\": \"h-0.5\",\n\n      \"sm\": \"h-1\",\n\n      \"md\": \"h-2\",\n\n      \"lg\": \"h-3\",\n\n      \"xl\": \"h-4\",\n\n      \"2xl\": \"h-5\"\n\n    }\n\n  },\n\n  \"thumb\": {\n\n    \"base\": \"[&::-webkit-slider-thumb]:relative [&::-moz-range-thumb]:relative [&::-webkit-slider-thumb]:z-[1] [&::-moz-range-thumb]:z-[1] [&::-webkit-slider-thumb]:appearance-none [&::-moz-range-thumb]:appearance-none [&::-webkit-slider-thumb]:rounded-full [&::-moz-range-thumb]:rounded-full [&::-moz-range-thumb]:border-0\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"background\": \"[&::-webkit-slider-thumb]:bg-white [&::-webkit-slider-thumb]:dark:bg-gray-900 [&::-moz-range-thumb]:bg-current\",\n\n    \"ring\": \"[&::-webkit-slider-thumb]:ring-2 [&::-webkit-slider-thumb]:ring-current\",\n\n    \"size\": {\n\n      \"2xs\": \"[&::-webkit-slider-thumb]:h-1.5 [&::-moz-range-thumb]:h-1.5 [&::-webkit-slider-thumb]:w-1.5 [&::-moz-range-thumb]:w-1.5 [&::-webkit-slider-thumb]:mt-[-2.5px] [&::-moz-range-thumb]:mt-[-2.5px]\",\n\n      \"xs\": \"[&::-webkit-slider-thumb]:h-2 [&::-moz-range-thumb]:h-2 [&::-webkit-slider-thumb]:w-2 [&::-moz-range-thumb]:w-2 [&::-webkit-slider-thumb]:mt-[-3px] [&::-moz-range-thumb]:mt-[-3px]\",\n\n      \"sm\": \"[&::-webkit-slider-thumb]:h-3 [&::-moz-range-thumb]:h-3 [&::-webkit-slider-thumb]:w-3 [&::-moz-range-thumb]:w-3 [&::-webkit-slider-thumb]:-mt-1 [&::-moz-range-thumb]:-mt-1\",\n\n      \"md\": \"[&::-webkit-slider-thumb]:h-4 [&::-moz-range-thumb]:h-4 [&::-webkit-slider-thumb]:w-4 [&::-moz-range-thumb]:w-4 [&::-webkit-slider-thumb]:-mt-1 [&::-moz-range-thumb]:-mt-1\",\n\n      \"lg\": \"[&::-webkit-slider-thumb]:h-5 [&::-moz-range-thumb]:h-5 [&::-webkit-slider-thumb]:w-5 [&::-moz-range-thumb]:w-5 [&::-webkit-slider-thumb]:-mt-1 [&::-moz-range-thumb]:-mt-1\",\n\n      \"xl\": \"[&::-webkit-slider-thumb]:h-6 [&::-moz-range-thumb]:h-6 [&::-webkit-slider-thumb]:w-6 [&::-moz-range-thumb]:w-6 [&::-webkit-slider-thumb]:-mt-1 [&::-moz-range-thumb]:-mt-1\",\n\n      \"2xl\": \"[&::-webkit-slider-thumb]:h-7 [&::-moz-range-thumb]:h-7 [&::-webkit-slider-thumb]:w-7 [&::-moz-range-thumb]:w-7 [&::-webkit-slider-thumb]:-mt-1 [&::-moz-range-thumb]:-mt-1\"\n\n    }\n\n  },\n\n  \"track\": {\n\n    \"base\": \"[&::-webkit-slider-runnable-track]:group-disabled:bg-opacity-50 [&::-moz-range-track]:group-disabled:bg-opacity-50\",\n\n    \"background\": \"[&::-webkit-slider-runnable-track]:bg-gray-200 [&::-moz-range-track]:bg-gray-200 [&::-webkit-slider-runnable-track]:dark:bg-gray-700 [&::-moz-range-track]:dark:bg-gray-700\",\n\n    \"rounded\": \"[&::-webkit-slider-runnable-track]:rounded-lg [&::-moz-range-track]:rounded-lg\",\n\n    \"size\": {\n\n      \"2xs\": \"[&::-webkit-slider-runnable-track]:h-px [&::-moz-range-track]:h-px\",\n\n      \"xs\": \"[&::-webkit-slider-runnable-track]:h-0.5 [&::-moz-range-track]:h-0.5\",\n\n      \"sm\": \"[&::-webkit-slider-runnable-track]:h-1 [&::-moz-range-track]:h-1\",\n\n      \"md\": \"[&::-webkit-slider-runnable-track]:h-2 [&::-moz-range-track]:h-2\",\n\n      \"lg\": \"[&::-webkit-slider-runnable-track]:h-3 [&::-moz-range-track]:h-3\",\n\n      \"xl\": \"[&::-webkit-slider-runnable-track]:h-4 [&::-moz-range-track]:h-4\",\n\n      \"2xl\": \"[&::-webkit-slider-runnable-track]:h-5 [&::-moz-range-track]:h-5\"\n\n    }\n\n  },\n\n  \"size\": {\n\n    \"2xs\": \"h-1.5\",\n\n    \"xs\": \"h-2\",\n\n    \"sm\": \"h-3\",\n\n    \"md\": \"h-4\",\n\n    \"lg\": \"h-5\",\n\n    \"xl\": \"h-6\",\n\n    \"2xl\": \"h-7\"\n\n  },\n\n  \"default\": {\n\n    \"size\": \"md\",\n\n    \"color\": \"primary\"\n\n  }\n\n}\n\n\nToggle\n\nDisplay a toggle field.\n\nFormGroup\n\nDisplay a label and additional informations around a form element."
  },
  {
    "title": "Form - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/form",
    "html": "Forms\nForm\nGitHub\n\nCollect and validate form data.\n\nUsage\n\nUse the Form component to validate form data using schema libraries such as Yup, Zod, Joi, Valibot or your own validation logic. It works seamlessly with the FormGroup component to automatically display error messages around form elements.\n\nThe Form component requires the validate and state props for form validation.\n\nstate - a reactive object that holds the current state of the form.\nvalidate - a function that takes the form's state as input and returns an array of FormError objects with the following fields:\nmessage - the error message to display.\npath - the path to the form element matching the name.\nEmail\nPassword\nSubmit\n<script setup lang=\"ts\">\n\nimport type { FormError, FormSubmitEvent } from '#ui/types'\n\n\n\nconst state = reactive({\n\n  email: undefined,\n\n  password: undefined\n\n})\n\n\n\nconst validate = (state: any): FormError[] => {\n\n  const errors = []\n\n  if (!state.email) errors.push({ path: 'email', message: 'Required' })\n\n  if (!state.password) errors.push({ path: 'password', message: 'Required' })\n\n  return errors\n\n}\n\n\n\nasync function onSubmit (event: FormSubmitEvent<any>) {\n\n  // Do something with data\n\n  console.log(event.data)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UForm :validate=\"validate\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\n\n    <UFormGroup label=\"Email\" name=\"email\">\n\n      <UInput v-model=\"state.email\" />\n\n    </UFormGroup>\n\n\n\n    <UFormGroup label=\"Password\" name=\"password\">\n\n      <UInput v-model=\"state.password\" type=\"password\" />\n\n    </UFormGroup>\n\n\n\n    <UButton type=\"submit\">\n\n      Submit\n\n    </UButton>\n\n  </UForm>\n\n</template>\n\nSchema\n\nYou can provide a schema from Yup, Zod or Joi, Valibot through the schema prop to validate the state. It's important to note that none of these libraries are included by default, so make sure to install the one you need.\n\nYup\nEmail\nPassword\nSubmit\n<script setup lang=\"ts\">\n\nimport { object, string, type InferType } from 'yup'\n\nimport type { FormSubmitEvent } from '#ui/types'\n\n\n\nconst schema = object({\n\n  email: string().email('Invalid email').required('Required'),\n\n  password: string()\n\n    .min(8, 'Must be at least 8 characters')\n\n    .required('Required')\n\n})\n\n\n\ntype Schema = InferType<typeof schema>\n\n\n\nconst state = reactive({\n\n  email: undefined,\n\n  password: undefined\n\n})\n\n\n\nasync function onSubmit (event: FormSubmitEvent<Schema>) {\n\n  // Do something with event.data\n\n  console.log(event.data)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\n\n    <UFormGroup label=\"Email\" name=\"email\">\n\n      <UInput v-model=\"state.email\" />\n\n    </UFormGroup>\n\n\n\n    <UFormGroup label=\"Password\" name=\"password\">\n\n      <UInput v-model=\"state.password\" type=\"password\" />\n\n    </UFormGroup>\n\n\n\n    <UButton type=\"submit\">\n\n      Submit\n\n    </UButton>\n\n  </UForm>\n\n</template>\n\nZod\nEmail\nPassword\nSubmit\n<script setup lang=\"ts\">\n\nimport { z } from 'zod'\n\nimport type { FormSubmitEvent } from '#ui/types'\n\n\n\nconst schema = z.object({\n\n  email: z.string().email('Invalid email'),\n\n  password: z.string().min(8, 'Must be at least 8 characters')\n\n})\n\n\n\ntype Schema = z.output<typeof schema>\n\n\n\nconst state = reactive({\n\n  email: undefined,\n\n  password: undefined\n\n})\n\n\n\nasync function onSubmit (event: FormSubmitEvent<Schema>) {\n\n  // Do something with data\n\n  console.log(event.data)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\n\n    <UFormGroup label=\"Email\" name=\"email\">\n\n      <UInput v-model=\"state.email\" />\n\n    </UFormGroup>\n\n\n\n    <UFormGroup label=\"Password\" name=\"password\">\n\n      <UInput v-model=\"state.password\" type=\"password\" />\n\n    </UFormGroup>\n\n\n\n    <UButton type=\"submit\">\n\n      Submit\n\n    </UButton>\n\n  </UForm>\n\n</template>\n\nJoi\nEmail\nPassword\nSubmit\n<script setup lang=\"ts\">\n\nimport Joi from 'joi'\n\nimport type { FormSubmitEvent } from '#ui/types'\n\n\n\nconst schema = Joi.object({\n\n  email: Joi.string().required(),\n\n  password: Joi.string()\n\n    .min(8)\n\n    .required()\n\n})\n\n\n\nconst state = reactive({\n\n  email: undefined,\n\n  password: undefined\n\n})\n\n\n\nasync function onSubmit (event: FormSubmitEvent<any>) {\n\n  // Do something with event.data\n\n  console.log(event.data)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\n\n    <UFormGroup label=\"Email\" name=\"email\">\n\n      <UInput v-model=\"state.email\" />\n\n    </UFormGroup>\n\n\n\n    <UFormGroup label=\"Password\" name=\"password\">\n\n      <UInput v-model=\"state.password\" type=\"password\" />\n\n    </UFormGroup>\n\n\n\n    <UButton type=\"submit\">\n\n      Submit\n\n    </UButton>\n\n  </UForm>\n\n</template>\n\nValibot\nEmail\nPassword\nSubmit\n<script setup lang=\"ts\">\n\nimport { string, objectAsync, email, minLength, type Input } from 'valibot'\n\nimport type { FormSubmitEvent } from '#ui/types'\n\n\n\nconst schema = objectAsync({\n\n  email: string([email('Invalid email')]),\n\n  password: string([minLength(8, 'Must be at least 8 characters')])\n\n})\n\n\n\ntype Schema = Input<typeof schema>\n\n\n\nconst state = reactive({\n\n  email: undefined,\n\n  password: undefined\n\n})\n\n\n\nasync function onSubmit (event: FormSubmitEvent<Schema>) {\n\n  // Do something with event.data\n\n  console.log(event.data)\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\">\n\n    <UFormGroup label=\"Email\" name=\"email\">\n\n      <UInput v-model=\"state.email\" />\n\n    </UFormGroup>\n\n\n\n    <UFormGroup label=\"Password\" name=\"password\">\n\n      <UInput v-model=\"state.password\" type=\"password\" />\n\n    </UFormGroup>\n\n\n\n    <UButton type=\"submit\">\n\n      Submit\n\n    </UButton>\n\n  </UForm>\n\n</template>\n\nOther libraries\n\nFor other validation libraries, you can define your own component with custom validation logic.\n\nHere is an example with Vuelidate:\n\n<script setup lang=\"ts\">\n\nimport useVuelidate from '@vuelidate/core'\n\n\n\nconst props = defineProps({\n\n  rules: { type: Object, required: true },\n\n  model: { type: Object, required: true }\n\n})\n\n\n\nconst form = ref();\n\nconst v = useVuelidate(props.rules, props.model)\n\n\n\nasync function validateWithVuelidate() {\n\n  v.value.$touch()\n\n  await v.value.$validate()\n\n  return v.value.$errors.map((error) => ({\n\n    message: error.$message,\n\n    path: error.$propertyPath,\n\n  }))\n\n}\n\n\n\ndefineExpose({\n\n  validate: async () => {\n\n    await form.value.validate()\n\n  }\n\n})\n\n</script>\n\n\n\n<template>\n\n  <UForm ref=\"form\" :model=\"model\" :validate=\"validateWithVuelidate\">\n\n    <slot />\n\n  </UForm>\n\n</template>\n\nBackend validation\n\nYou can manually set errors after form submission if required. To do this, simply use the form.setErrors function to set the errors as needed.\n\n<script setup lang=\"ts\">\n\nimport type { FormError, FormSubmitEvent } from '#ui/types'\n\n\n\nconst state = reactive({\n\n  email: undefined,\n\n  password: undefined\n\n})\n\n\n\nconst form = ref()\n\n\n\nasync function onSubmit (event: FormSubmitEvent<any>) {\n\n  form.value.clear()\n\n  try {\n\n    const response = await $fetch('...')\n\n    // ...\n\n  } catch (err) {\n\n    if (err.statusCode === 422) {\n\n      form.value.setErrors(err.data.errors.map((err) => {\n\n        // Map validation errors to { path: string, message: string }\n\n      }))\n\n    }\n\n  }\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UForm ref=\"form\" :state=\"state\" @submit=\"onSubmit\">\n\n    <UFormGroup label=\"Email\" name=\"email\">\n\n      <UInput v-model=\"state.email\" />\n\n    </UFormGroup>\n\n\n\n    <UFormGroup label=\"Password\" name=\"password\">\n\n      <UInput v-model=\"state.password\" type=\"password\" />\n\n    </UFormGroup>\n\n\n\n    <UButton type=\"submit\">\n\n      Submit\n\n    </UButton>\n\n  </UForm>\n\n</template>\n\nInput events\n\nThe Form component automatically triggers validation upon submit, input, blur or change events. This ensures that any errors are displayed as soon as the user interacts with the form elements. You can control when validation happens this using the validate-on prop.\n\nNote that the input event is not triggered until after the initial blur event. This is to prevent the form from being validated as the user is typing. You can override this behavior by setting the eager-validation prop on FormGroup to true.\nInput\nTextarea\nSelect\nSelect...\nOption 1\nOption 2\nOption 3\nSelect Menu\nSelect...\nToggle\nCheckbox\nCheck me\nRadio Group\nOption 1\nOption 2\nOption 3\nRadio\nOption 1\nOption 2\nOption 3\nRange\nSubmitClear\nTake a look at the component!\nError event\n\nYou can listen to the @error event to handle errors. This event is triggered when the form is validated and contains an array of FormError objects with the following fields:\n\nid - the identifier of the form element.\npath - the path to the form element matching the name.\nmessage - the error message to display.\n\nHere is an example of how to focus the first form element with an error:\n\nEmail\nPassword\nSubmit\n<script setup lang=\"ts\">\n\nimport type { FormError, FormErrorEvent, FormSubmitEvent } from '#ui/types'\n\n\n\nconst state = reactive({\n\n  email: undefined,\n\n  password: undefined\n\n})\n\n\n\nconst validate = (state: any): FormError[] => {\n\n  const errors = []\n\n  if (!state.email) errors.push({ path: 'email', message: 'Required' })\n\n  if (!state.password) errors.push({ path: 'password', message: 'Required' })\n\n  return errors\n\n}\n\n\n\nasync function onSubmit (event: FormSubmitEvent<any>) {\n\n  // Do something with data\n\n  console.log(event.data)\n\n}\n\n\n\nasync function onError (event: FormErrorEvent) {\n\n  const element = document.getElementById(event.errors[0].id)\n\n  element?.focus()\n\n  element?.scrollIntoView({ behavior: 'smooth', block: 'center' })\n\n}\n\n</script>\n\n\n\n<template>\n\n  <UForm :validate=\"validate\" :state=\"state\" class=\"space-y-4\" @submit=\"onSubmit\" @error=\"onError\">\n\n    <UFormGroup label=\"Email\" name=\"email\">\n\n      <UInput v-model=\"state.email\" />\n\n    </UFormGroup>\n\n\n\n    <UFormGroup label=\"Password\" name=\"password\">\n\n      <UInput v-model=\"state.password\" type=\"password\" />\n\n    </UFormGroup>\n\n\n\n    <UButton type=\"submit\">\n\n      Submit\n\n    </UButton>\n\n  </UForm>\n\n</template>\n\nProps\nstate\nrequired\nRecord<string, any>\nschema\nZodType<any, ZodTypeDef, any> | ObjectSchema<any, AnyObject, any, \"\"> | AnySchema<any> | ObjectSchemaAsync<any>\nundefined\nvalidate\n((state: any) => Promise<FormError<string>[]>) | ((state: any) => FormError<string>[])\n[]\nvalidateOn\nFormEventType[]\n[\"blur\", \"input\", \"change\", \"submit\"]\nAPI\nvalidate (path?: string, opts: { silent?: boolean })\nPromise<T>\n\nTriggers form validation. Will raise any errors unless opts.silent is set to true.\n\nclear (path?: string)\nvoid\n\nClears form errors associated with a specific path. If no path is provided, clears all form errors.\n\ngetErrors (path?: string)\nFormError[]\n\nRetrieves form errors associated with a specific path. If no path is provided, returns all form errors.\n\nsetErrors (errors: FormError[], path?: string)\nvoid\n\nSets form errors for a given path. If no path is provided, overrides all errors.\n\nerrors\nRef<FormError[]>\n\nA reference to the array containing validation errors. Use this to access or manipulate the error information.\n\nFormGroup\n\nDisplay a label and additional informations around a form element.\n\nTable\n\nDisplay data in a table."
  },
  {
    "title": "FormGroup - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/form-group",
    "html": "Forms\nFormGroup\nGitHub\n\nDisplay a label and additional informations around a form element.\n\nUsage\n\nUse the FormGroup component around an Input, Textarea, Select or a SelectMenu with a label. The <label> will automatically be associated with the form element so it gets focused on click.\n\nlabel\nEmail\n<UFormGroup label=\"Email\">\n\n  <UInput placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\" />\n\n</UFormGroup>\n\nRequired\n\nUse the required prop to indicate that the form element is required.\n\nlabel\nrequired\nEmail\n<UFormGroup label=\"Email\" required>\n\n  <UInput placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\" />\n\n</UFormGroup>\n\nDescription\n\nUse the description prop to display a description below the label.\n\nlabel\ndescription\nEmail\n\nWe'll only use this for spam.\n\n<UFormGroup label=\"Email\" description=\"We'll only use this for spam.\">\n\n  <UInput placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\" />\n\n</UFormGroup>\n\nHint\n\nUse the hint prop to display a hint above the form element.\n\nlabel\nhint\nEmail\nOptional\n<UFormGroup label=\"Email\" hint=\"Optional\">\n\n  <UInput placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\" />\n\n</UFormGroup>\n\nHelp\n\nUse the help prop to display an help message below the form element.\n\nlabel\nhelp\nEmail\n\nWe will never share your email with anyone else.\n\n<UFormGroup\n\n  label=\"Email\"\n\n  help=\"We will never share your email with anyone else.\"\n\n>\n\n  <UInput placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\" />\n\n</UFormGroup>\n\nError\n\nUse the error prop to display an error message below the form element.\n\nWhen used together with the help prop, the error prop will take precedence.\n\nEmail\n\nYou must enter an email\n\n<template>\n\n  <UFormGroup v-slot=\"{ error }\" label=\"Email\" :error=\"!email && 'You must enter an email'\" help=\"This is a nice email!\">\n\n    <UInput v-model=\"email\" type=\"email\" placeholder=\"Enter email\" :trailing-icon=\"error ? 'i-heroicons-exclamation-triangle-20-solid' : undefined\" />\n\n  </UFormGroup>\n\n</template>\n\n\n\n<script setup lang=\"ts\">\n\nconst email = ref('')\n\n</script>\n\nThe error prop will automatically set the color prop of the form element to red.\n\nYou can also use the error prop as a boolean to mark the form element as invalid.\n\nEmail\n<UFormGroup label=\"Email\" error>\n\n  <UInput placeholder=\"you@example.com\" />\n\n</UFormGroup>\n\nLearn more about form validation in the Form component.\nSize\n\nUse the size prop to change the size of the label and the form element.\n\nsize\nxl\nEmail\nOptional\n\nWe'll only use this for spam.\n\nWe will never share your email with anyone else.\n\n<UFormGroup\n\n  size=\"xl\"\n\n  label=\"Email\"\n\n  hint=\"Optional\"\n\n  description=\"We'll only use this for spam.\"\n\n  help=\"We will never share your email with anyone else.\"\n\n>\n\n  <UInput placeholder=\"you@example.com\" icon=\"i-heroicons-envelope\" />\n\n</UFormGroup>\n\nThis will only work with form elements that support the size prop.\nEager Validation New\n\nBy default, validation is only triggered after the initial blur event. This is to prevent the form from being validated as the user is typing. You can override this behavior by setting the eager-validation prop to true\n\nUsername\n<template>\n\n  <UForm :schema=\"schema\" :state=\"state\" class=\"space-y-4\">\n\n    <UFormGroup label=\"Username\" name=\"username\" eager-validation>\n\n      <UInput v-model=\"state.username\" placeholder=\"Choose Username\" />\n\n    </UFormGroup>\n\n  </UForm>\n\n</template>\n\n\n\n<script setup>\n\nimport { z } from 'zod'\n\n\n\nconst schema = z.object({\n\n  username: z.string().min(10, 'Must be at least 10 characters')\n\n})\n\n\n\nconst state = reactive({\n\n  username: undefined\n\n})\n\n</script>\n\nSlots\nlabel\n\nUse the #label slot to set the custom content for label.\n\n<UFormGroup>\n\n  <template #label>\n\n    <UAvatar\n\n      src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n      size=\"3xs\"\n\n    />\n\n  </template>\n\n  <template #default>\n\n    <UInput model-value=\"benjamincanac\" placeholder=\"you@example.com\" />\n\n  </template>\n\n</UFormGroup>\n\ndescription\n\nUse the #description slot to set the custom content for description.\n\nlabel\nEmail\n\nWrite only valid email address \n\n<UFormGroup label=\"Email\">\n\n  <template #description>\n\n    Write only valid email address\n\n    <UIcon name=\"i-heroicons-arrow-right-20-solid\" />\n\n  </template>\n\n  <template #default>\n\n    <UInput model-value=\"benjamincanac\" placeholder=\"you@example.com\" />\n\n  </template>\n\n</UFormGroup>\n\nhint\n\nUse the #hint slot to set the custom content for hint.\n\nlabel\nStep 1\n<UFormGroup label=\"Step 1\">\n\n  <template #hint>\n\n    <UIcon name=\"i-heroicons-arrow-right-20-solid\" />\n\n  </template>\n\n  <template #default>\n\n    <UInput model-value=\"benjamincanac\" placeholder=\"you@example.com\" />\n\n  </template>\n\n</UFormGroup>\n\nhelp\n\nUse the #help slot to set the custom content for help.\n\nlabel\nEmail\n\nHere are some examples \n\n<UFormGroup label=\"Email\">\n\n  <template #help>\n\n    Here are some examples <UIcon name=\"i-heroicons-arrow-right-20-solid\" />\n\n  </template>\n\n  <template #default>\n\n    <UInput model-value=\"benjamincanac\" placeholder=\"you@example.com\" />\n\n  </template>\n\n</UFormGroup>\n\nerror\n\nUse the #error slot to set the custom content for error.\n\nEmail\n\nYou must enter an email\n\n<template>\n\n  <UFormGroup label=\"Email\" :error=\"!email && 'You must enter an email'\" help=\"This is a nice email!\">\n\n    <template #default=\"{ error }\">\n\n      <UInput v-model=\"email\" type=\"email\" placeholder=\"Enter email\" :trailing-icon=\"error ? 'i-heroicons-exclamation-triangle-20-solid' : undefined\" />\n\n    </template>\n\n\n\n    <template #error=\"{ error }\">\n\n      <span :class=\"[error ? 'text-red-500 dark:text-red-400' : 'text-primary-500 dark:text-primary-400']\">\n\n        {{ error ? error : 'Your email is valid' }}\n\n      </span>\n\n    </template>\n\n  </UFormGroup>\n\n</template>\n\n\n\n<script setup lang=\"ts\">\n\nconst email = ref('')\n\n</script>\n\nProps\nname\nstring\nnull\nui\nany\nundefined\nlabel\nstring\nnull\nsize\nFormGroupSize\nnull\n\"md\"\"2xs\"\"xs\"\"sm\"\"lg\"\"xl\"\nhelp\nstring\nnull\nerror\nstring | boolean\nnull\ndescription\nstring\nnull\nhint\nstring\nnull\nrequired\nboolean\nfalse\neagerValidation\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"\",\n\n  \"label\": {\n\n    \"wrapper\": \"flex content-center items-center justify-between\",\n\n    \"base\": \"block font-medium text-gray-700 dark:text-gray-200\",\n\n    \"required\": \"after:content-['*'] after:ms-0.5 after:text-red-500 dark:after:text-red-400\"\n\n  },\n\n  \"size\": {\n\n    \"2xs\": \"text-xs\",\n\n    \"xs\": \"text-xs\",\n\n    \"sm\": \"text-sm\",\n\n    \"md\": \"text-sm\",\n\n    \"lg\": \"text-sm\",\n\n    \"xl\": \"text-base\"\n\n  },\n\n  \"container\": \"mt-1 relative\",\n\n  \"description\": \"text-gray-500 dark:text-gray-400\",\n\n  \"hint\": \"text-gray-500 dark:text-gray-400\",\n\n  \"help\": \"mt-2 text-gray-500 dark:text-gray-400\",\n\n  \"error\": \"mt-2 text-red-500 dark:text-red-400\",\n\n  \"default\": {\n\n    \"size\": \"sm\"\n\n  }\n\n}\n\n\nRange\n\nDisplay a range field\n\nForm\n\nCollect and validate form data."
  },
  {
    "title": "Checkbox - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/checkbox",
    "html": "Forms\nCheckbox\nGitHub\n\nDisplay a checkbox field.\n\nUsage\n\nUse a v-model to make the Checkbox reactive.\n\nNotifications\n<script setup>\n\nconst selected = ref(true)\n\n</script>\n\n\n\n<template>\n\n  <UCheckbox v-model=\"selected\" name=\"notifications\" label=\"Notifications\" />\n\n</template>\n\nLabel\n\nUse the label prop to display a label on the right.\n\nlabel\nLabel\n<UCheckbox label=\"Label\" />\n\nStyle\n\nUse the color prop to change the style of the Checkbox.\n\ncolor\nprimary\nLabel\n<UCheckbox color=\"primary\" label=\"Label\" />\n\nRequired\n\nUse the required prop to display a red star next to the label of the Checkbox.\n\nlabel\nrequired\nLabel*\n<UCheckbox label=\"Label\" required />\n\nHelp\n\nUse the help prop to display some text under the Checkbox.\n\nlabel\nhelp\nLabel\n\nPlease check this box\n\n<UCheckbox label=\"Label\" help=\"Please check this box\" />\n\nDisabled\n\nUse the disabled prop to disable the Checkbox.\n\ndisabled\n<UCheckbox disabled />\n\nSlots\nlabel\n\nUse the #label slot to override the content of the label.\n\nLabel\n<UCheckbox>\n\n  <template #label>\n\n    <span class=\"italic\">Label</span>\n\n  </template>\n\n</UCheckbox>\n\nProps\nvalue\nstring | number | boolean | Record<string, any>\nnull\nname\nstring\nnull\nui\nany\nundefined\nlabel\nstring\nnull\ncolor\nstring\nconfig.default.color\nhelp\nstring\nnull\nid\nstring\nnull\nmodelValue\nboolean | unknown[]\nnull\ninputClass\nstring\n\"\"\nrequired\nboolean\nfalse\ndisabled\nboolean\nfalse\nchecked\nboolean\nfalse\nindeterminate\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative flex items-start\",\n\n  \"base\": \"h-4 w-4 dark:checked:bg-current dark:checked:border-transparent dark:indeterminate:bg-current dark:indeterminate:border-transparent disabled:opacity-50 disabled:cursor-not-allowed focus:ring-0 focus:ring-transparent focus:ring-offset-transparent\",\n\n  \"rounded\": \"rounded\",\n\n  \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"border\": \"border border-gray-300 dark:border-gray-700\",\n\n  \"ring\": \"focus-visible:ring-2 focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-gray-900\",\n\n  \"label\": \"text-sm font-medium text-gray-700 dark:text-gray-200\",\n\n  \"required\": \"text-sm text-red-500 dark:text-red-400\",\n\n  \"help\": \"text-sm text-gray-500 dark:text-gray-400\",\n\n  \"default\": {\n\n    \"color\": \"primary\"\n\n  }\n\n}\n\n\nSelectMenu\n\nDisplay a select menu with advanced features.\n\nRadioGroup\n\nDisplay a set of radio buttons."
  },
  {
    "title": "RadioGroup - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/radio-group",
    "html": "Forms\nRadioGroup\nGitHub\n\nDisplay a set of radio buttons.\n\nUsage\n\nUse a v-model to make the RadioGroup reactive.\n\nChoose something\nEmail\nPhone (SMS)\nPush notification\n<script setup>\n\nconst options = [{\n\n  value: 'email',\n\n  label: 'Email'\n\n}, {\n\n  value: 'sms',\n\n  label: 'Phone (SMS)'\n\n}, {\n\n  value: 'push',\n\n  label: 'Push notification'\n\n}]\n\n\n\nconst selected = ref('sms')\n\n</script>\n\n\n\n<template>\n\n  <URadioGroup v-model=\"selected\" legend=\"Choose something\" :options=\"options\" />\n\n</template>\n\n\nAlternatively, you can use individual Radio components:\n\nEmail\nPhone (SMS)\nPush notification\n<script setup>\n\nconst methods = [\n\n  { value: 'email', label: 'Email' },\n\n  { value: 'sms', label: 'Phone (SMS)' },\n\n  { value: 'push', label: 'Push notification' }\n\n]\n\n\n\nconst selected = ref('sms')\n\n</script>\n\n\n\n<template>\n\n  <div class=\"space-y-1\">\n\n    <URadio v-for=\"method of methods\" :key=\"method.value\" v-model=\"selected\" v-bind=\"method\" />\n\n  </div>\n\n</template>\n\nIf using the RadioGroup component, you can customize the Radio options by using the uiRadio prop.\nLegend\n\nUse the legend prop to add a legend to the RadioGroup.\n\nlegend\nLegend\nEmail\nPhone (SMS)\nPush notification\n<URadioGroup\n\n  legend=\"Legend\"\n\n  :options=\"[{ value: 'email', label: 'Email' }, { value: 'sms', label: 'Phone (SMS)' }, { value: 'push', label: 'Push notification' }]\"\n\n  model-value=\"sms\"\n\n/>\n\nStyle\n\nUse the color prop to change the style of the RadioGroup.\n\ncolor\nprimary\nEmail\nPhone (SMS)\nPush notification\n<URadioGroup\n\n  color=\"primary\"\n\n  :options=\"[{ value: 'email', label: 'Email' }, { value: 'sms', label: 'Phone (SMS)' }, { value: 'push', label: 'Push notification' }]\"\n\n  model-value=\"sms\"\n\n/>\n\nThis prop also work on the Radio component.\nDisabled\n\nUse the disabled prop to disable the RadioGroup.\n\ndisabled\nEmail\nPhone (SMS)\nPush notification\n<URadioGroup\n\n  disabled\n\n  :options=\"[{ value: 'email', label: 'Email' }, { value: 'sms', label: 'Phone (SMS)' }, { value: 'push', label: 'Push notification' }]\"\n\n  model-value=\"sms\"\n\n/>\n\nThis prop also work on the Radio component.\nLabel\n\nUse the label prop to display a label on the right of the Radio.\n\nlabel\nLabel\n<URadio label=\"Label\" />\n\nRequired\n\nUse the required prop to display a red star next to the label of the Radio.\n\nlabel\nrequired\nLabel*\n<URadio label=\"Label\" required />\n\nHelp\n\nUse the help prop to display some text under the Radio.\n\nlabel\nhelp\nLabel\n\nPlease choose one\n\n<URadio label=\"Label\" help=\"Please choose one\" />\n\nSlots\nlabel\n\nUse the #label slot to override the label of each option.\n\n Email\n\n Phone (SMS)\n\n Push notification\n\n<script setup>\n\nconst options = [\n\n  { value: 'email', label: 'Email', icon: 'i-heroicons-at-symbol' },\n\n  { value: 'sms', label: 'Phone (SMS)', icon: 'i-heroicons-phone' },\n\n  { value: 'push', label: 'Push notification', icon: 'i-heroicons-bell' }\n\n]\n\n\n\nconst selected = ref('sms')\n\n</script>\n\n\n\n<template>\n\n  <URadioGroup v-model=\"selected\" :options=\"options\">\n\n    <template #label=\"{ option }\">\n\n      <p class=\"italic\">\n\n        <UIcon :name=\"option.icon\" />\n\n        {{ option.label }}\n\n      </p>\n\n    </template>\n\n  </URadioGroup>\n\n</template>\n\n\nAlternatively, you can do the same with individual Radio:\n\nLabel\n<URadio>\n\n  <template #label>\n\n    <span class=\"italic\">Label</span>\n\n  </template>\n\n</URadio>\n\nlegend\n\nUse the #legend slot to override the content of the legend.\n\nLegend\nEmail\nPhone (SMS)\nPush notification\n<URadioGroup\n\n  :options=\"[{ value: 'email', label: 'Email' }, { value: 'sms', label: 'Phone (SMS)' }, { value: 'push', label: 'Push notification' }]\"\n\n  model-value=\"sms\"\n\n>\n\n  <template #legend>\n\n    <span class=\"italic\">Legend</span>\n\n  </template>\n\n</URadioGroup>\n\nProps\nRadio\nRadioGroup\nvalue\nstring | number | boolean\nnull\nname\nstring\nnull\nui\nany\nundefined\nlabel\nstring\nnull\ncolor\nstring\nconfig.default.color\nhelp\nstring\nnull\nid\nstring\nnull\nmodelValue\nstring | number | boolean | Record<string, any>\nnull\ninputClass\nstring\nnull\nrequired\nboolean\nfalse\ndisabled\nboolean\nfalse\nConfig\nRadio\nRadioGroup\n{\n\n  \"wrapper\": \"relative flex items-start\",\n\n  \"base\": \"h-4 w-4 dark:checked:bg-current dark:checked:border-transparent disabled:opacity-50 disabled:cursor-not-allowed focus:ring-0 focus:ring-transparent focus:ring-offset-transparent\",\n\n  \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n  \"background\": \"bg-white dark:bg-gray-900\",\n\n  \"border\": \"border border-gray-300 dark:border-gray-700\",\n\n  \"ring\": \"focus-visible:ring-2 focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-gray-900\",\n\n  \"label\": \"text-sm font-medium text-gray-700 dark:text-gray-200\",\n\n  \"required\": \"text-sm text-red-500 dark:text-red-400\",\n\n  \"help\": \"text-sm text-gray-500 dark:text-gray-400\",\n\n  \"default\": {\n\n    \"color\": \"primary\"\n\n  }\n\n}\n\n\nCheckbox\n\nDisplay a checkbox field.\n\nToggle\n\nDisplay a toggle field."
  },
  {
    "title": "Meter - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/meter",
    "html": "Elements\nMeter\nGitHub\n\nDisplay a gauge meter that fills or depletes.\n\nUsage\n\nUse the value prop from 0 to 100 to set a value for the meter bar.\n\nvalue\n<UMeter :value=\"25\" />\n\nCheck out the Range component for inputs\nMin & Max\n\nBy default, min is 0 and max is 100. You can change either of these using their respective props, even for negative numbers.\n\nvalue\nmin\nmax\n<UMeter :value=\"-25\" :min=\"-50\" :max=\"50\" />\n\nIndicator\n\nYou may show a percentage indicator on top of the meter using the indicator prop.\n\nvalue\nindicator\n35%\n<UMeter :value=\"35\" indicator />\n\nLabel\n\nAdd a label below the meter using the label prop.\n\nlabel\nDisk usage\n<UMeter label=\"Disk usage\" :value=\"86\" />\n\nIcon\n\nYou may also add an icon to the start label using the icon prop.\n\nDisk usage\n<UMeter icon=\"i-heroicons-server\" :value=\"86\" label=\"Disk usage\" />\n\nSize\n\nChange the size of the meter bar using the size prop.\n\nsize\nmd\nindicator\nlabel\n75%\nCPU Load\n<UMeter size=\"md\" indicator label=\"CPU Load\" :value=\"75.4\" />\n\nStyle\n\nThe color prop changes the visual style of the meter bar. The color can be any color from the ui.colors object.\n\ncolor\nprimary\n80%\nMemory usage\n<UMeter color=\"primary\" :value=\"80\" indicator label=\"Memory usage\" />\n\nGroup\n\nTo group multiple meters into a group, adding all values, use the MeterGroup component.\n\nTo change the overall minimum and maximum value, pass the min and max props respectively.\nTo change size of all meters, use the size prop.\nTo show an indicator for the overall amount, set the indicator prop or slot.\nTo change the color of each meter, use the color prop.\nTo show a label for each meter, use the label prop on each meter.\nTo change the icon for each meter, use the icon prop.\nmin\nmax\nsize\nmd\nindicator\n67%\nSystem (19%)\nApps (6%)\nDocuments (9%)\nMultimedia (33%)\n<UMeterGroup :min=\"0\" :max=\"128\" size=\"md\" indicator icon=\"i-heroicons-minus\">\n\n  <UMeter :value=\"24\" color=\"gray\" label=\"System\" />\n\n  <UMeter :value=\"8\" color=\"red\" label=\"Apps\" />\n\n  <UMeter :value=\"12\" color=\"yellow\" label=\"Documents\" />\n\n  <UMeter :value=\"42\" color=\"green\" label=\"Multimedia\" />\n\n  <!-- Total: 86 -->\n\n</UMeterGroup>\n\nWhen the Meters are grouped, their individual indicators and label slots are stripped away.\n\nA Meter group can also be used with an indicator slot, and even individual meter icons.\n\n86GB used\n\n42GB remaining\n\nSystem (19%)\nApps (6%)\nDocuments (9%)\nMultimedia (33%)\n<template>\n\n  <UMeterGroup :max=\"128\">\n\n    <template #indicator>\n\n      <div class=\"flex gap-1.5 justify-between text-sm\">\n\n        <p>86GB used</p>\n\n        <p class=\"text-gray-500 dark:text-gray-400\">\n\n          42GB remaining\n\n        </p>\n\n      </div>\n\n    </template>\n\n\n\n    <UMeter :value=\"24\" color=\"gray\" label=\"System\" icon=\"i-heroicons-cog-6-tooth\" />\n\n    <UMeter :value=\"8\" color=\"red\" label=\"Apps\" icon=\"i-heroicons-window\" />\n\n    <UMeter :value=\"12\" color=\"yellow\" label=\"Documents\" icon=\"i-heroicons-document\" />\n\n    <UMeter :value=\"42\" color=\"green\" label=\"Multimedia\" icon=\"i-heroicons-film\" />\n\n  </UMeterGroup>\n\n</template>\n\nSlots\nindicator\n\nUse the #indicator slot to change the indicator shown at the top of the bar. It receives the current meter percent.\n\n84.2GB used (35%)\n<script setup>\n\nconst used = ref(84.2)\n\n\n\nconst total = 238.42\n\n</script>\n\n\n\n<template>\n\n  <UMeter :value=\"used\" :max=\"total\">\n\n    <template #indicator=\"{ percent }\">\n\n      <div class=\"text-sm text-right\">\n\n        {{ used }}GB used ({{ Math.round(percent) }}%)\n\n      </div>\n\n    </template>\n\n  </UMeter>\n\n</template>\n\nlabel\n\nThe label slot can be used to change how the label below the meter bar is shown. It receives the current meter percent.\n\nYou are using 84GB (65%) of space\n\n<script setup>\n\nconst used = ref(84.2)\n\n\n\nconst total = 238.42\n\n</script>\n\n\n\n<template>\n\n  <UMeter :value=\"used\" :max=\"total\">\n\n    <template #label=\"{ percent }\">\n\n      <p class=\"text-sm\">\n\n        You are using {{ Math.round(used) }}GB ({{ Math.round(100 - percent) }}%) of space\n\n      </p>\n\n    </template>\n\n  </UMeter>\n\n</template>\n\nProps\nMeter\nMeterGroup\nui\nany\nundefined\nsize\n\"sm\" | \"2xs\" | \"xs\" | \"md\" | \"lg\" | \"xl\" | \"2xl\"\nconfig.default.size\nvalue\nnumber\n0\ncolor\nstring\nconfig.default.color\nicon\nstring\nnull\nlabel\nstring\nnull\nmin\nnumber\n0\nmax\nnumber\n100\nindicator\nboolean\nfalse\nConfig\nMeter\nMeterGroup\n{\n\n  \"wrapper\": \"w-full flex flex-col gap-2\",\n\n  \"indicator\": {\n\n    \"container\": \"min-w-fit transition-all\",\n\n    \"text\": \"text-gray-400 dark:text-gray-500 text-end\",\n\n    \"size\": {\n\n      \"2xs\": \"text-xs\",\n\n      \"xs\": \"text-xs\",\n\n      \"sm\": \"text-sm\",\n\n      \"md\": \"text-sm\",\n\n      \"lg\": \"text-sm\",\n\n      \"xl\": \"text-base\",\n\n      \"2xl\": \"text-base\"\n\n    }\n\n  },\n\n  \"meter\": {\n\n    \"base\": \"appearance-none block w-full bg-none overflow-y-hidden\",\n\n    \"background\": \"bg-gray-200 dark:bg-gray-700\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"ring\": \"\",\n\n    \"rounded\": \"rounded-full\",\n\n    \"shadow\": \"\",\n\n    \"size\": {\n\n      \"2xs\": \"h-px\",\n\n      \"xs\": \"h-0.5\",\n\n      \"sm\": \"h-1\",\n\n      \"md\": \"h-2\",\n\n      \"lg\": \"h-3\",\n\n      \"xl\": \"h-4\",\n\n      \"2xl\": \"h-5\"\n\n    },\n\n    \"appearance\": {\n\n      \"inner\": \"[&::-webkit-meter-inner-element]:block [&::-webkit-meter-inner-element]:relative [&::-webkit-meter-inner-element]:border-none [&::-webkit-meter-inner-element]:bg-none [&::-webkit-meter-inner-element]:bg-transparent\",\n\n      \"meter\": \"[&::-webkit-meter-bar]:border-none [&::-webkit-meter-bar]:bg-none [&::-webkit-meter-bar]:bg-transparent\",\n\n      \"bar\": \"[&::-webkit-meter-optimum-value]:border-none [&::-webkit-meter-optimum-value]:bg-none [&::-webkit-meter-optimum-value]:bg-current\",\n\n      \"value\": \"[&::-moz-meter-bar]:border-none [&::-moz-meter-bar]:bg-none [&::-moz-meter-bar]:bg-current\"\n\n    },\n\n    \"bar\": {\n\n      \"transition\": \"[&::-webkit-meter-optimum-value]:transition-all [&::-moz-meter-bar]:transition-all\",\n\n      \"ring\": \"\",\n\n      \"rounded\": \"[&::-webkit-meter-optimum-value]:rounded-full [&::-moz-meter-bar]:rounded-full\",\n\n      \"size\": {\n\n        \"2xs\": \"[&::-webkit-meter-optimum-value]:h-px [&::-moz-meter-bar]:h-px\",\n\n        \"xs\": \"[&::-webkit-meter-optimum-value]:h-0.5 [&::-moz-meter-bar]:h-0.5\",\n\n        \"sm\": \"[&::-webkit-meter-optimum-value]:h-1 [&::-moz-meter-bar]:h-1\",\n\n        \"md\": \"[&::-webkit-meter-optimum-value]:h-2 [&::-moz-meter-bar]:h-2\",\n\n        \"lg\": \"[&::-webkit-meter-optimum-value]:h-3 [&::-moz-meter-bar]:h-3\",\n\n        \"xl\": \"[&::-webkit-meter-optimum-value]:h-4 [&::-moz-meter-bar]:h-4\",\n\n        \"2xl\": \"[&::-webkit-meter-optimum-value]:h-5 [&::-moz-meter-bar]:h-5\"\n\n      }\n\n    }\n\n  },\n\n  \"label\": {\n\n    \"base\": \"flex gap-2 items-center\",\n\n    \"text\": \"truncate\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"size\": {\n\n      \"2xs\": \"text-xs\",\n\n      \"xs\": \"text-xs\",\n\n      \"sm\": \"text-sm\",\n\n      \"md\": \"text-sm\",\n\n      \"lg\": \"text-sm\",\n\n      \"xl\": \"text-base\",\n\n      \"2xl\": \"text-base\"\n\n    }\n\n  },\n\n  \"color\": {\n\n    \"white\": \"text-white dark:text-black\",\n\n    \"black\": \"text-black dark:text-white\",\n\n    \"gray\": \"text-gray-500 dark:text-gray-400\"\n\n  },\n\n  \"default\": {\n\n    \"size\": \"md\",\n\n    \"color\": \"primary\"\n\n  }\n\n}\n\n\nProgress\n\nShow a horizontal bar to indicate task progression.\n\nChip\n\nDisplay a chip indicator on any component."
  },
  {
    "title": "Input - Nuxt UI",
    "url": "https://ui.nuxt.com/forms/input",
    "html": "Forms\nInput\nGitHub\n\nDisplay an input field.\n\nUsage\n\nUse a v-model to make the Input reactive.\n\n<script setup>\n\nconst value = ref('')\n\n</script>\n\n\n\n<template>\n\n  <UInput v-model=\"value\" />\n\n</template>\n\nStyle\n\nUse the color and variant props to change the visual style of the Input.\n\ncolor\nprimary\nvariant\noutline\n<UInput color=\"primary\" variant=\"outline\" placeholder=\"Search...\" />\n\n\nBesides all the colors from the ui.colors object, you can also use the white (default) and gray colors with their pre-defined variants.\n\nWhite\nvariant\noutline\n<UInput color=\"white\" variant=\"outline\" placeholder=\"Search...\" />\n\nGray\nvariant\noutline\n<UInput color=\"gray\" variant=\"outline\" placeholder=\"Search...\" />\n\nSize\n\nUse the size prop to change the size of the Input.\n\nsize\nsm\n<UInput size=\"sm\" />\n\nType\n\nUse the type prop to change the input type, the default type is set to text, you can check all the available types at MDN.\n\nWe have improved the implementation of certain types such as Checkbox, Radio, etc.\n\ntype\n<UInput type=\"password\" />\n\nPlaceholder\n\nUse the placeholder prop to set a placeholder text.\n\nplaceholder\n<UInput placeholder=\"Search...\" />\n\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name}.\n\nUse the leading and trailing props to set the icon position or the leading-icon and trailing-icon props to set a different icon for each position.\n\nsize\nsm\ncolor\nwhite\ntrailing\n<UInput\n\n  icon=\"i-heroicons-magnifying-glass-20-solid\"\n\n  size=\"sm\"\n\n  color=\"white\"\n\n  :trailing=\"false\"\n\n  placeholder=\"Search...\"\n\n/>\n\nDisabled\n\nUse the disabled prop to disable the Input.\n\ndisabled\n<UInput disabled placeholder=\"Search...\" />\n\nLoading\n\nUse the loading prop to show a loading icon and disable the Input.\n\nUse the loading-icon prop to set a different icon or change it globally in ui.input.default.loadingIcon. Defaults to i-heroicons-arrow-path-20-solid.\n\nloading\n<UInput\n\n  loading\n\n  icon=\"i-heroicons-magnifying-glass-20-solid\"\n\n  placeholder=\"Searching...\"\n\n/>\n\nSlots\nleading\n\nUse the #leading slot to set the content of the leading icon.\n\n<UInput placeholder=\"Search...\">\n\n  <template #leading>\n\n    <UAvatar\n\n      src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n      size=\"3xs\"\n\n    />\n\n  </template>\n\n</UInput>\n\ntrailing\n\nUse the #trailing slot to set the content of the trailing icon.\n\nEUR\n<UInput placeholder=\"Search...\">\n\n  <template #trailing>\n\n    <span class=\"text-gray-500 dark:text-gray-400 text-xs\">EUR</span>\n\n  </template>\n\n</UInput>\n\n\nYou can for example create a clearable Input by injecting a Button in the trailing slot that displays when some text is entered.\n\n<template>\n\n  <UInput\n\n    v-model=\"q\"\n\n    name=\"q\"\n\n    placeholder=\"Search...\"\n\n    icon=\"i-heroicons-magnifying-glass-20-solid\"\n\n    autocomplete=\"off\"\n\n    :ui=\"{ icon: { trailing: { pointer: '' } } }\"\n\n  >\n\n    <template #trailing>\n\n      <UButton\n\n        v-show=\"q !== ''\"\n\n        color=\"gray\"\n\n        variant=\"link\"\n\n        icon=\"i-heroicons-x-mark-20-solid\"\n\n        :padded=\"false\"\n\n        @click=\"q = ''\"\n\n      />\n\n    </template>\n\n  </UInput>\n\n</template>\n\n\n\n<script setup lang=\"ts\">\n\nconst q = ref('')\n\n</script>\n\nAs leading and trailing icons are wrapped around a pointer-events-none class, if you inject a clickable element in the slot, you need to remove this class to make it clickable by adding :ui=\"{ icon: { trailing: { pointer: '' } } }\" to the Input.\nProps\nname\nstring\nnull\ntype\nstring\n\"text\"\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nsize\nInputSize\nnull\n\"md\"\"2xs\"\"xs\"\"sm\"\"lg\"\"xl\"\nicon\nstring\nnull\nid\nstring\nnull\nmodelValue\nstring | number\n\"\"\ninputClass\nstring\nnull\nvariant\nInputVariant\nconfig.default.variant\n\"outline\"\"none\"\nplaceholder\nstring\nnull\nautofocusDelay\nnumber\n100\nloadingIcon\nstring\nconfig.default.loadingIcon\nleadingIcon\nstring\nnull\ntrailingIcon\nstring\nnull\nmodelModifiers\n{}\n{}\nrequired\nboolean\nfalse\ndisabled\nboolean\nfalse\nleading\nboolean\nfalse\ntrailing\nboolean\nfalse\nautofocus\nboolean\nfalse\nloading\nboolean\nfalse\npadded\nboolean\ntrue\nConfig\n{\n\n  \"wrapper\": \"relative\",\n\n  \"base\": \"relative block w-full disabled:cursor-not-allowed disabled:opacity-75 focus:outline-none border-0\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"placeholder\": \"placeholder-gray-400 dark:placeholder-gray-500\",\n\n  \"size\": {\n\n    \"2xs\": \"text-xs\",\n\n    \"xs\": \"text-xs\",\n\n    \"sm\": \"text-sm\",\n\n    \"md\": \"text-sm\",\n\n    \"lg\": \"text-sm\",\n\n    \"xl\": \"text-base\"\n\n  },\n\n  \"gap\": {\n\n    \"2xs\": \"gap-x-1\",\n\n    \"xs\": \"gap-x-1.5\",\n\n    \"sm\": \"gap-x-1.5\",\n\n    \"md\": \"gap-x-2\",\n\n    \"lg\": \"gap-x-2.5\",\n\n    \"xl\": \"gap-x-2.5\"\n\n  },\n\n  \"padding\": {\n\n    \"2xs\": \"px-2 py-1\",\n\n    \"xs\": \"px-2.5 py-1.5\",\n\n    \"sm\": \"px-2.5 py-1.5\",\n\n    \"md\": \"px-3 py-2\",\n\n    \"lg\": \"px-3.5 py-2.5\",\n\n    \"xl\": \"px-3.5 py-2.5\"\n\n  },\n\n  \"leading\": {\n\n    \"padding\": {\n\n      \"2xs\": \"ps-7\",\n\n      \"xs\": \"ps-8\",\n\n      \"sm\": \"ps-9\",\n\n      \"md\": \"ps-10\",\n\n      \"lg\": \"ps-11\",\n\n      \"xl\": \"ps-12\"\n\n    }\n\n  },\n\n  \"trailing\": {\n\n    \"padding\": {\n\n      \"2xs\": \"pe-7\",\n\n      \"xs\": \"pe-8\",\n\n      \"sm\": \"pe-9\",\n\n      \"md\": \"pe-10\",\n\n      \"lg\": \"pe-11\",\n\n      \"xl\": \"pe-12\"\n\n    }\n\n  },\n\n  \"color\": {\n\n    \"white\": {\n\n      \"outline\": \"shadow-sm bg-white dark:bg-gray-900 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n\n    },\n\n    \"gray\": {\n\n      \"outline\": \"shadow-sm bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-white ring-1 ring-inset ring-gray-300 dark:ring-gray-700 focus:ring-2 focus:ring-primary-500 dark:focus:ring-primary-400\"\n\n    }\n\n  },\n\n  \"variant\": {\n\n    \"outline\": \"shadow-sm bg-transparent text-gray-900 dark:text-white ring-1 ring-inset ring-{color}-500 dark:ring-{color}-400 focus:ring-2 focus:ring-{color}-500 dark:focus:ring-{color}-400\",\n\n    \"none\": \"bg-transparent focus:ring-0 focus:shadow-none\"\n\n  },\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 text-gray-400 dark:text-gray-500\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"size\": {\n\n      \"2xs\": \"h-4 w-4\",\n\n      \"xs\": \"h-4 w-4\",\n\n      \"sm\": \"h-5 w-5\",\n\n      \"md\": \"h-5 w-5\",\n\n      \"lg\": \"h-5 w-5\",\n\n      \"xl\": \"h-6 w-6\"\n\n    },\n\n    \"leading\": {\n\n      \"wrapper\": \"absolute inset-y-0 start-0 flex items-center\",\n\n      \"pointer\": \"pointer-events-none\",\n\n      \"padding\": {\n\n        \"2xs\": \"ps-2\",\n\n        \"xs\": \"ps-2.5\",\n\n        \"sm\": \"ps-2.5\",\n\n        \"md\": \"ps-3\",\n\n        \"lg\": \"ps-3.5\",\n\n        \"xl\": \"ps-3.5\"\n\n      }\n\n    },\n\n    \"trailing\": {\n\n      \"wrapper\": \"absolute inset-y-0 end-0 flex items-center\",\n\n      \"pointer\": \"pointer-events-none\",\n\n      \"padding\": {\n\n        \"2xs\": \"pe-2\",\n\n        \"xs\": \"pe-2.5\",\n\n        \"sm\": \"pe-2.5\",\n\n        \"md\": \"pe-3\",\n\n        \"lg\": \"pe-3.5\",\n\n        \"xl\": \"pe-3.5\"\n\n      }\n\n    }\n\n  },\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"color\": \"white\",\n\n    \"variant\": \"outline\",\n\n    \"loadingIcon\": \"i-heroicons-arrow-path-20-solid\"\n\n  }\n\n}\n\n\nChip\n\nDisplay a chip indicator on any component.\n\nTextarea\n\nDisplay a textarea field."
  },
  {
    "title": "Chip - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/chip",
    "html": "Elements\nChip\nGitHub\n\nDisplay a chip indicator on any component.\n\nUsage\n\nWrap any component with the Chip component to display a chip indicator.\n\n<UChip>\n\n  <UButton icon=\"i-heroicons-inbox\" color=\"gray\" />\n\n</UChip>\n\nSize\n\nUse the size prop to change the size of the chip.\n\nsize\n2xl\n<UChip size=\"2xl\">\n\n  <UButton icon=\"i-heroicons-inbox\" color=\"gray\" />\n\n</UChip>\n\nColor\n\nUse the color prop to change the color of the chip.\n\ncolor\nred\n<UChip color=\"red\">\n\n  <UButton icon=\"i-heroicons-inbox\" color=\"gray\" />\n\n</UChip>\n\nPosition\n\nUse the position prop to change the position of the chip.\n\nposition\nbottom-right\n<UChip position=\"bottom-right\">\n\n  <UButton icon=\"i-heroicons-inbox\" color=\"gray\" />\n\n</UChip>\n\nText\n\nUse the text prop to display text in the chip.\n\ntext\n3\n<UChip text=\"3\" size=\"2xl\">\n\n  <UButton icon=\"i-heroicons-inbox\" color=\"gray\" />\n\n</UChip>\n\nShow\n\nUse the show prop to conditionally display the chip.\n\n<script setup>\n\nconst items = [{\n\n  name: 'messages',\n\n  icon: 'i-heroicons-chat-bubble-oval-left',\n\n  count: 3\n\n}, {\n\n  name: 'notifications',\n\n  icon: 'i-heroicons-bell',\n\n  count: 0\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <div class=\"flex gap-3\">\n\n    <UChip v-for=\"{ name, icon, count } in items\" :key=\"name\" :show=\"count > 0\">\n\n      <UButton :icon=\"icon\" color=\"gray\" />\n\n    </UChip>\n\n  </div>\n\n</template>\n\nInset\n\nUse the inset prop to display the chip inside the component. This is useful when dealing with rounded components.\n\ninset\n<UChip inset>\n\n  <UAvatar\n\n    src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n    alt=\"Avatar\"\n\n  />\n\n</UChip>\n\nSlots\ncontent\n\nUse the #content slot to fully customize the chip.\n\n<template>\n\n  <UChip size=\"md\" position=\"bottom-right\" inset :ui=\"{ base: '-mx-2 rounded-none ring-0', background: '' }\">\n\n    <UAvatar\n\n      src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n      alt=\"Avatar\"\n\n      size=\"lg\"\n\n    />\n\n\n\n    <template #content>\n\n      <UAvatar\n\n        src=\"https://avatars.githubusercontent.com/in/80442?v=4\"\n\n        alt=\"Avatar\"\n\n        size=\"xs\"\n\n        :ui=\"{ rounded: 'rounded-md' }\"\n\n        class=\"shadow-md\"\n\n      />\n\n    </template>\n\n  </UChip>\n\n</template>\n\nProps\nui\nany\nundefined\nsize\n\"sm\" | \"2xs\" | \"xs\" | \"md\" | \"lg\" | \"xl\" | \"3xs\" | \"2xl\" | \"3xl\"\nconfig.default.size\nposition\n\"top-right\" | \"bottom-right\" | \"top-left\" | \"bottom-left\"\nconfig.default.position\ncolor\nstring\nconfig.default.color\ntext\nstring | number\nnull\ninset\nboolean\nconfig.default.inset\nshow\nboolean\ntrue\nConfig\n{\n\n  \"wrapper\": \"relative inline-flex items-center justify-center flex-shrink-0\",\n\n  \"base\": \"absolute rounded-full ring-1 ring-white dark:ring-gray-900 flex items-center justify-center text-white dark:text-gray-900 font-medium whitespace-nowrap\",\n\n  \"background\": \"bg-{color}-500 dark:bg-{color}-400\",\n\n  \"position\": {\n\n    \"top-right\": \"top-0 right-0\",\n\n    \"bottom-right\": \"bottom-0 right-0\",\n\n    \"top-left\": \"top-0 left-0\",\n\n    \"bottom-left\": \"bottom-0 left-0\"\n\n  },\n\n  \"translate\": {\n\n    \"top-right\": \"-translate-y-1/2 translate-x-1/2 transform\",\n\n    \"bottom-right\": \"translate-y-1/2 translate-x-1/2 transform\",\n\n    \"top-left\": \"-translate-y-1/2 -translate-x-1/2 transform\",\n\n    \"bottom-left\": \"translate-y-1/2 -translate-x-1/2 transform\"\n\n  },\n\n  \"size\": {\n\n    \"3xs\": \"h-[4px] min-w-[4px] text-[4px] p-px\",\n\n    \"2xs\": \"h-[5px] min-w-[5px] text-[5px] p-px\",\n\n    \"xs\": \"h-1.5 min-w-[0.375rem] text-[6px] p-px\",\n\n    \"sm\": \"h-2 min-w-[0.5rem] text-[7px] p-0.5\",\n\n    \"md\": \"h-2.5 min-w-[0.625rem] text-[8px] p-0.5\",\n\n    \"lg\": \"h-3 min-w-[0.75rem] text-[10px] p-0.5\",\n\n    \"xl\": \"h-3.5 min-w-[0.875rem] text-[11px] p-1\",\n\n    \"2xl\": \"h-4 min-w-[1rem] text-[12px] p-1\",\n\n    \"3xl\": \"h-5 min-w-[1.25rem] text-[14px] p-1\"\n\n  },\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"color\": \"primary\",\n\n    \"position\": \"top-right\",\n\n    \"inset\": false\n\n  }\n\n}\n\n\nMeter\n\nDisplay a gauge meter that fills or depletes.\n\nInput\n\nDisplay an input field."
  },
  {
    "title": "Link - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/link",
    "html": "Elements\nLink\nGitHub\n\nRender a NuxtLink but with superpowers.\n\nUsage\n\nThe Link component is a wrapper around <NuxtLink> through the custom prop that provides a few extra props:\n\ninactive-class prop to set a class when the link is inactive, active-class is used when active.\nexact prop to style with active-class when the link is active and the route is exactly the same as the current route.\nexact-query and exact-hash props to style with active-class when the link is active and the query or hash is exactly the same as the current query or hash.\n\nThe incentive behind this is to provide the same API as NuxtLink back in Nuxt 2 / Vue 2. You can read more about it in the Vue Router migration from Vue 2 guide.\n\nto\nactiveClass\ninactiveClass\n\nLink\n\n<ULink\n\n  to=\"/elements/link\"\n\n  active-class=\"text-primary\"\n\n  inactive-class=\"text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200\"\n\n>\n\n  Link\n\n</ULink>\n\n\nIt also renders an <a> tag when a to prop is provided, otherwise it defaults to rendering a <button> tag. The default behavior can be customized using the as prop.\n\nIt is used underneath by the Button, Dropdown and VerticalNavigation components.\n\nKeyboard Key\n\nDisplay a keyboard key in a text block.\n\nProgress\n\nShow a horizontal bar to indicate task progression."
  },
  {
    "title": "Keyboard Key - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/kbd",
    "html": "Elements\nKeyboard Key\nGitHub\n\nDisplay a keyboard key in a text block.\n\nUsage\n\nUse the default slot to set the text of the Kbd.\n\nK\n\n<UKbd>K</UKbd>\n\n\nYou can also use the value prop:\n\nvalue\nK\n<UKbd value=\"K\" />\n\n\nAs explained in the Shortcuts page, you can use the metaSymbol property of the useShortcuts composable to display the meta key according to the user's OS.\n\n⌘\nK\n<script setup>\n\nconst { metaSymbol } = useShortcuts()\n\n</script>\n\n\n\n<template>\n\n  <div class=\"flex items-center gap-0.5\">\n\n    <UKbd>{{ metaSymbol }}</UKbd>\n\n    <UKbd>K</UKbd>\n\n  </div>\n\n</template>\n\nSize\n\nUse the size prop to change the size of the Kbd.\n\nsize\nsm\n\nU\n\n<UKbd size=\"sm\">U</UKbd>\n\nProps\nui\nany\nundefined\nsize\nKbdSize\nconfig.default.size\n\"xs\"\"sm\"\"md\"\nvalue\nstring\nnull\nConfig\n{\n\n  \"base\": \"inline-flex items-center justify-center text-gray-900 dark:text-white\",\n\n  \"padding\": \"px-1\",\n\n  \"size\": {\n\n    \"xs\": \"h-4 min-w-[16px] text-[10px]\",\n\n    \"sm\": \"h-5 min-w-[20px] text-[11px]\",\n\n    \"md\": \"h-6 min-w-[24px] text-[12px]\"\n\n  },\n\n  \"rounded\": \"rounded\",\n\n  \"font\": \"font-medium font-sans\",\n\n  \"background\": \"bg-gray-100 dark:bg-gray-800\",\n\n  \"ring\": \"ring-1 ring-gray-300 dark:ring-gray-700 ring-inset\",\n\n  \"default\": {\n\n    \"size\": \"sm\"\n\n  }\n\n}\n\n\nIcon\n\nDisplay any icon (100,000+) from Iconify.\n\nLink\n\nRender a NuxtLink but with superpowers."
  },
  {
    "title": "Progress - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/progress",
    "html": "Elements\nProgress\nGitHub\n\nShow a horizontal bar to indicate task progression.\n\nUsage\n\nPass an integer as the value from 0 to 100 to the Progress bar component.\n\nvalue\n<UProgress :value=\"70\" />\n\nCheck out the Range component for forms.\nMax\n\nYou may also set the max number to set the maximum progress value, which will be relative to 100% percent.\n\nvalue\nmax\n5\n<UProgress :value=\"2\" :max=\"5\" />\n\nSteps\n\nYou can set an array of named steps in the max prop to show the active step, at the same time it sets the maximum value.\n\nThe first step is always shown at 0%, making the last 100%.\n\nvalue\nWaiting to start\nCloning...\nMigrating...\nDeployed!\n<UProgress\n\n  :value=\"0\"\n\n  :max=\"['Waiting to start', 'Cloning...', 'Migrating...', 'Deployed!']\"\n\n/>\n\nProgress indicator\n\nYou can add a numeric indicator, which will show the percent on top the progress track.\n\nvalue\nindicator\n20%\n<UProgress :value=\"20\" indicator />\n\nIndeterminate\n\nBy not setting a value, or setting it as null, the progress bar becomes indeterminate. The bar will be animated as a carousel, but you can change it using the animation prop for an inverse carousel, a swinging bar or an elastic bar.\n\nanimation\ncarousel\n<UProgress animation=\"carousel\" />\n\nSize\n\nUse the size prop to change the size of the progress bar.\n\nsize\nmd\nindicator\n<UProgress size=\"md\" :indicator=\"false\" :value=\"70\" />\n\nStyle\n\nUse the color prop to change the visual style of the Progress bar. The color can be any color from the ui.colors object.\n\ncolor\nprimary\nindicator\n<UProgress color=\"primary\" :indicator=\"false\" :value=\"70\" />\n\nSlots\nindicator\n\nYou can use the #indicator slot to show a custom indicator above the progress bar. It receives the current percent of progress.\n\n🔥 Too hot!\n<script setup>\n\nconst temp = ref(35)\n\n\n\nconst color = computed(() => {\n\n  switch (true) {\n\n  case temp.value < 10: return 'blue'\n\n  case temp.value < 20: return 'amber'\n\n  case temp.value < 30: return 'orange'\n\n  default: return 'red'\n\n  }\n\n})\n\n</script>\n\n\n\n<template>\n\n  <UProgress :value=\"temp\" :max=\"40\" :color=\"color\">\n\n    <template #indicator=\"{ percent }\">\n\n      <div class=\"text-right\" :style=\"{ width: `${percent}%` }\">\n\n        <span v-if=\"temp < 10\" class=\"text-blue-500\">Too cold!</span>\n\n        <span v-else-if=\"temp < 20\" class=\"text-amber-500\">Warm</span>\n\n        <span v-else-if=\"temp < 30\" class=\"text-orange-500\">Hot</span>\n\n        <span v-else class=\"text-red-500 font-bold\">🔥 Too hot!</span>\n\n      </div>\n\n    </template>\n\n  </UProgress>\n\n</template>\n\nstep-<index>\n\nUse the #step-<index> to alter the HTML being shown for each step.\n\n Cloning...\n Migrating...\n Deploying...\n<script setup>\n\nconst task = ref(1)\n\n\n\nconst steps = [\n\n  'Cloning...',\n\n  'Migrating...',\n\n  'Deploying...'\n\n]\n\n</script>\n\n\n\n<template>\n\n  <UProgress :value=\"task\" :max=\"steps\" indicator>\n\n    <template #step-0=\"{ step }\">\n\n      <span class=\"text-lime-500\">\n\n        <UIcon name=\"i-heroicons-arrow-down-circle\" /> {{ step }}\n\n      </span>\n\n    </template>\n\n\n\n    <template #step-1=\"{ step }\">\n\n      <span class=\"text-amber-500\">\n\n        <UIcon name=\"i-heroicons-circle-stack\" /> {{ step }}\n\n      </span>\n\n    </template>\n\n\n\n    <template #step-2=\"{ step }\">\n\n      <span class=\"text-blue-500\">\n\n        <UIcon name=\"i-heroicons-hand-thumb-up\" /> {{ step }}\n\n      </span>\n\n    </template>\n\n  </UProgress>\n\n</template>\n\nProps\nvalue\nnumber\nnull\nui\nany\nundefined\ncolor\nstring\nconfig.default.color\nmax\nnumber | any[]\n100\nsize\n\"md\" | \"2xs\" | \"xs\" | \"sm\" | \"lg\" | \"xl\" | \"2xl\"\nconfig.default.size\nanimation\n\"carousel\" | \"carousel-inverse\" | \"swing\" | \"elastic\"\nconfig.default.animation\nindicator\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"w-full flex flex-col gap-2\",\n\n  \"indicator\": {\n\n    \"container\": {\n\n      \"base\": \"flex flex-row justify-end\",\n\n      \"width\": \"min-w-fit\",\n\n      \"transition\": \"transition-all\"\n\n    },\n\n    \"align\": \"text-end\",\n\n    \"width\": \"w-fit\",\n\n    \"color\": \"text-gray-400 dark:text-gray-500\",\n\n    \"size\": {\n\n      \"2xs\": \"text-xs\",\n\n      \"xs\": \"text-xs\",\n\n      \"sm\": \"text-sm\",\n\n      \"md\": \"text-sm\",\n\n      \"lg\": \"text-sm\",\n\n      \"xl\": \"text-base\",\n\n      \"2xl\": \"text-base\"\n\n    }\n\n  },\n\n  \"progress\": {\n\n    \"base\": \"block appearance-none border-none overflow-hidden\",\n\n    \"width\": \"w-full [&::-webkit-progress-bar]:w-full\",\n\n    \"size\": {\n\n      \"2xs\": \"h-px\",\n\n      \"xs\": \"h-0.5\",\n\n      \"sm\": \"h-1\",\n\n      \"md\": \"h-2\",\n\n      \"lg\": \"h-3\",\n\n      \"xl\": \"h-4\",\n\n      \"2xl\": \"h-5\"\n\n    },\n\n    \"rounded\": \"rounded-full [&::-webkit-progress-bar]:rounded-full\",\n\n    \"track\": \"[&::-webkit-progress-bar]:bg-gray-200 [&::-webkit-progress-bar]:dark:bg-gray-700 [@supports(selector(&::-moz-progress-bar))]:bg-gray-200 [@supports(selector(&::-moz-progress-bar))]:dark:bg-gray-700\",\n\n    \"bar\": \"[&::-webkit-progress-value]:rounded-full [&::-webkit-progress-value]:transition-all [&::-webkit-progress-value]:ease-in-out [&::-moz-progress-bar]:rounded-full\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"background\": \"[&::-webkit-progress-value]:bg-current [&::-moz-progress-bar]:bg-current\",\n\n    \"indeterminate\": {\n\n      \"base\": \"indeterminate:relative\",\n\n      \"rounded\": \"indeterminate:after:rounded-full [&:indeterminate::-webkit-progress-value]:rounded-full [&:indeterminate::-moz-progress-bar]:rounded-full\"\n\n    }\n\n  },\n\n  \"steps\": {\n\n    \"base\": \"grid grid-cols-1\",\n\n    \"color\": \"text-{color}-500 dark:text-{color}-400\",\n\n    \"size\": {\n\n      \"2xs\": \"text-xs\",\n\n      \"xs\": \"text-xs\",\n\n      \"sm\": \"text-sm\",\n\n      \"md\": \"text-sm\",\n\n      \"lg\": \"text-sm\",\n\n      \"xl\": \"text-base\",\n\n      \"2xl\": \"text-base\"\n\n    }\n\n  },\n\n  \"step\": {\n\n    \"base\": \"transition-all opacity-0 truncate row-start-1 col-start-1\",\n\n    \"align\": \"text-end\",\n\n    \"active\": \"opacity-100\",\n\n    \"first\": \"text-gray-500 dark:text-gray-400\"\n\n  },\n\n  \"animation\": {\n\n    \"carousel\": \"bar-animation-carousel\",\n\n    \"carousel-inverse\": \"bar-animation-carousel-inverse\",\n\n    \"swing\": \"bar-animation-swing\",\n\n    \"elastic\": \"bar-animation-elastic\"\n\n  },\n\n  \"default\": {\n\n    \"color\": \"primary\",\n\n    \"size\": \"md\",\n\n    \"animation\": \"carousel\"\n\n  }\n\n}\n\n\nLink\n\nRender a NuxtLink but with superpowers.\n\nMeter\n\nDisplay a gauge meter that fills or depletes."
  },
  {
    "title": "Icon - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/icon",
    "html": "Elements\nIcon\nGitHub\n\nDisplay any icon (100,000+) from Iconify.\n\nUsage\n\nUse the name prop by following this pattern: i-{collection_name}-{icon_name}. You can search any icon from Iconify using https://icones.js.org.\n\nname\n<UIcon name=\"i-heroicons-light-bulb\" />\n\nYou won't be able to use any icon in the name prop here as icons are bundled using egoist/tailwindcss-icons, read more about this in Theming.\nDynamic New\n\nYou can use the dynamic prop to enable dynamic icon loading. This will use nuxt-icon instead and allow you to use any icon from Iconify as well as the {collection_name}:{icon_name} pattern.\n\nThis can be quite useful when using dynamic class names or for icons that are not bundled by default (fetched from a database for example).\n\nname\ndynamic\n<UIcon name=\"i-ph-rocket-launch\" dynamic />\n\n\nYou can also change the default behavior of the dynamic prop by setting the ui.icons.dynamic option in your app.config.ts.\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    icons: {\n\n      dynamic: true\n\n    }\n\n  }\n\n})\n\nProps\nname\nrequired\nstring\ndynamic\nboolean\nfalse\n\nDropdown\n\nDisplay a list of actions in a dropdown menu.\n\nKeyboard Key\n\nDisplay a keyboard key in a text block."
  },
  {
    "title": "Dropdown - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/dropdown",
    "html": "Elements\nDropdown\nGitHub\nMenu\n\nDisplay a list of actions in a dropdown menu.\n\nUsage\n\nPass an array of arrays to the items prop of the Dropdown component. Each array represents a group of items. Each item can have the following properties:\n\nlabel - The label of the item.\nicon - The icon of the item.\niconClass - The class of the icon of the item.\navatar - The avatar of the item. You can pass all the props of the Avatar component.\nshortcuts - The shortcuts of the item.\nslot - The slot of the item.\ndisabled - Whether the item is disabled.\nclick - The click handler of the item.\n\nYou can also pass any property from the NuxtLink component such as to, exact, etc.\n\nOptions\n<script setup>\n\nconst items = [\n\n  [{\n\n    label: 'Profile',\n\n    avatar: {\n\n      src: 'https://avatars.githubusercontent.com/u/739984?v=4'\n\n    }\n\n  }], [{\n\n    label: 'Edit',\n\n    icon: 'i-heroicons-pencil-square-20-solid',\n\n    shortcuts: ['E'],\n\n    click: () => {\n\n      console.log('Edit')\n\n    }\n\n  }, {\n\n    label: 'Duplicate',\n\n    icon: 'i-heroicons-document-duplicate-20-solid',\n\n    shortcuts: ['D'],\n\n    disabled: true\n\n  }], [{\n\n    label: 'Archive',\n\n    icon: 'i-heroicons-archive-box-20-solid'\n\n  }, {\n\n    label: 'Move',\n\n    icon: 'i-heroicons-arrow-right-circle-20-solid'\n\n  }], [{\n\n    label: 'Delete',\n\n    icon: 'i-heroicons-trash-20-solid',\n\n    shortcuts: ['⌘', 'D']\n\n  }]\n\n]\n\n</script>\n\n\n\n<template>\n\n  <UDropdown :items=\"items\" :popper=\"{ placement: 'bottom-start' }\">\n\n    <UButton color=\"white\" label=\"Options\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n  </UDropdown>\n\n</template>\n\nMode\n\nUse the mode prop to switch between click and hover modes.\n\nOptions\n<script setup>\n\nconst items = [\n\n  [{\n\n    label: 'Profile',\n\n    avatar: {\n\n      src: 'https://avatars.githubusercontent.com/u/739984?v=4'\n\n    }\n\n  }]\n\n]\n\n</script>\n\n\n\n<template>\n\n  <UDropdown :items=\"items\" mode=\"hover\" :popper=\"{ placement: 'bottom-start' }\">\n\n    <UButton color=\"white\" label=\"Options\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n  </UDropdown>\n\n</template>\n\nPopper\n\nUse the popper prop to customize the popper instance.\n\nArrow\nOptions\n<script setup>\n\nconst items = [\n\n  [{\n\n    label: 'Profile',\n\n    avatar: {\n\n      src: 'https://avatars.githubusercontent.com/u/739984?v=4'\n\n    }\n\n  }]\n\n]\n\n</script>\n\n\n\n<template>\n\n  <UDropdown :items=\"items\" :popper=\"{ arrow: true }\">\n\n    <UButton color=\"white\" label=\"Options\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n  </UDropdown>\n\n</template>\n\nPlacement\nOptions\n<script setup>\n\nconst items = [\n\n  [{\n\n    label: 'Profile',\n\n    avatar: {\n\n      src: 'https://avatars.githubusercontent.com/u/739984?v=4'\n\n    }\n\n  }]\n\n]\n\n</script>\n\n\n\n<template>\n\n  <UDropdown :items=\"items\" :popper=\"{ placement: 'right-start' }\">\n\n    <UButton color=\"white\" label=\"Options\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n  </UDropdown>\n\n</template>\n\nOffset\nOptions\n<script setup>\n\nconst items = [\n\n  [{\n\n    label: 'Profile',\n\n    avatar: {\n\n      src: 'https://avatars.githubusercontent.com/u/739984?v=4'\n\n    }\n\n  }]\n\n]\n\n</script>\n\n\n\n<template>\n\n  <UDropdown :items=\"items\" :popper=\"{ offsetDistance: 0, placement: 'right-start' }\">\n\n    <UButton color=\"white\" label=\"Options\" trailing-icon=\"i-heroicons-chevron-down-20-solid\" />\n\n  </UDropdown>\n\n</template>\n\nSlots\nitem\n\nUse the #item slot to customize the items content or pass a slot property to customize a specific item. You will have access to the item property in the slot scope.\n\n<script setup>\n\nconst items = [\n\n  [{\n\n    label: 'ben@example.com',\n\n    slot: 'account',\n\n    disabled: true\n\n  }], [{\n\n    label: 'Settings',\n\n    icon: 'i-heroicons-cog-8-tooth'\n\n  }], [{\n\n    label: 'Documentation',\n\n    icon: 'i-heroicons-book-open'\n\n  }, {\n\n    label: 'Changelog',\n\n    icon: 'i-heroicons-megaphone'\n\n  }, {\n\n    label: 'Status',\n\n    icon: 'i-heroicons-signal'\n\n  }], [{\n\n    label: 'Sign out',\n\n    icon: 'i-heroicons-arrow-left-on-rectangle'\n\n  }]\n\n]\n\n</script>\n\n\n\n<template>\n\n  <UDropdown :items=\"items\" :ui=\"{ item: { disabled: 'cursor-text select-text' } }\" :popper=\"{ placement: 'bottom-start' }\">\n\n    <UAvatar src=\"https://avatars.githubusercontent.com/u/739984?v=4\" />\n\n\n\n    <template #account=\"{ item }\">\n\n      <div class=\"text-left\">\n\n        <p>\n\n          Signed in as\n\n        </p>\n\n        <p class=\"truncate font-medium text-gray-900 dark:text-white\">\n\n          {{ item.label }}\n\n        </p>\n\n      </div>\n\n    </template>\n\n\n\n    <template #item=\"{ item }\">\n\n      <span class=\"truncate\">{{ item.label }}</span>\n\n\n\n      <UIcon :name=\"item.icon\" class=\"flex-shrink-0 h-4 w-4 text-gray-400 dark:text-gray-500 ms-auto\" />\n\n    </template>\n\n  </UDropdown>\n\n</template>\n\nProps\nui\nany\nundefined\nmode\n\"click\" | \"hover\"\n\"click\"\npopper\n{}\n{}\nitems\nDropdownItem[][]\n[]\nShow properties\nopenDelay\nnumber\n0\ncloseDelay\nnumber\n0\ndisabled\nboolean\nfalse\nConfig\n{\n\n  \"wrapper\": \"relative inline-flex text-left rtl:text-right\",\n\n  \"container\": \"z-20 group\",\n\n  \"width\": \"w-48\",\n\n  \"height\": \"\",\n\n  \"background\": \"bg-white dark:bg-gray-800\",\n\n  \"shadow\": \"shadow-lg\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"ring\": \"ring-1 ring-gray-200 dark:ring-gray-700\",\n\n  \"base\": \"relative focus:outline-none overflow-y-auto scroll-py-1\",\n\n  \"divide\": \"divide-y divide-gray-200 dark:divide-gray-700\",\n\n  \"padding\": \"p-1\",\n\n  \"item\": {\n\n    \"base\": \"group flex items-center gap-2 w-full\",\n\n    \"rounded\": \"rounded-md\",\n\n    \"padding\": \"px-2 py-1.5\",\n\n    \"size\": \"text-sm\",\n\n    \"active\": \"bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-white\",\n\n    \"inactive\": \"text-gray-700 dark:text-gray-200\",\n\n    \"disabled\": \"cursor-not-allowed opacity-50\",\n\n    \"icon\": {\n\n      \"base\": \"flex-shrink-0 h-4 w-4\",\n\n      \"active\": \"text-gray-500 dark:text-gray-400\",\n\n      \"inactive\": \"text-gray-400 dark:text-gray-500\"\n\n    },\n\n    \"avatar\": {\n\n      \"base\": \"flex-shrink-0\",\n\n      \"size\": \"3xs\"\n\n    },\n\n    \"shortcuts\": \"hidden md:inline-flex flex-shrink-0 gap-0.5 ms-auto\"\n\n  },\n\n  \"transition\": {\n\n    \"enterActiveClass\": \"transition duration-100 ease-out\",\n\n    \"enterFromClass\": \"transform scale-95 opacity-0\",\n\n    \"enterToClass\": \"transform scale-100 opacity-100\",\n\n    \"leaveActiveClass\": \"transition duration-75 ease-in\",\n\n    \"leaveFromClass\": \"transform scale-100 opacity-100\",\n\n    \"leaveToClass\": \"transform scale-95 opacity-0\"\n\n  },\n\n  \"popper\": {\n\n    \"placement\": \"bottom-end\",\n\n    \"strategy\": \"fixed\"\n\n  },\n\n  \"arrow\": {\n\n    \"base\": \"before:w-2 before:h-2\",\n\n    \"ring\": \"before:ring-1 before:ring-gray-200 dark:before:ring-gray-700\",\n\n    \"rounded\": \"before:rounded-sm\",\n\n    \"background\": \"before:bg-white dark:before:bg-gray-700\",\n\n    \"shadow\": \"before:shadow\",\n\n    \"placement\": \"group-data-[popper-placement*=\\\"right\\\"]:-left-1 group-data-[popper-placement*=\\\"left\\\"]:-right-1 group-data-[popper-placement*=\\\"top\\\"]:-bottom-1 group-data-[popper-placement*=\\\"bottom\\\"]:-top-1\"\n\n  }\n\n}\n\n\nButton\n\nCreate a button with icon or link capabilities.\n\nIcon\n\nDisplay any icon (100,000+) from Iconify."
  },
  {
    "title": "Button - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/button",
    "html": "Elements\nButton\nGitHub\n\nCreate a button with icon or link capabilities.\n\nUsage\n\nUse the default slot to set the text of the Button.\n\nButton\n\n<UButton>Button</UButton>\n\n\nYou can also use the label prop.\n\nlabel\nButton\n<UButton label=\"Button\" />\n\nStyle\n\nUse the color and variant props to change the visual style of the Button.\n\ncolor\nprimary\nvariant\nsolid\n\nButton\n\n<UButton color=\"primary\" variant=\"solid\">Button</UButton>\n\n\nBesides all the colors from the ui.colors object, you can also use the white, gray and black colors with their pre-defined variants.\n\nWhite\nvariant\nsolid\n\nButton\n\n<UButton color=\"white\" variant=\"solid\">Button</UButton>\n\nGray\nvariant\nsolid\n\nButton\n\n<UButton color=\"gray\" variant=\"solid\">Button</UButton>\n\nBlack\nvariant\nsolid\n\nButton\n\n<UButton color=\"black\" variant=\"solid\">Button</UButton>\n\nSize\n\nUse the size prop to change the size of the Button.\n\nsize\nsm\n\nButton\n\n<UButton size=\"sm\">Button</UButton>\n\nRounded\n\nTo customize the border radius of the Button, you can use the ui prop.\n\nButton\n\n<UButton :ui=\"{ rounded: 'rounded-full' }\">Button</UButton>\n\nYou can customize the whole preset by using the ui prop.\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name}.\n\nUse the leading and trailing props to set the icon position or the leading-icon and trailing-icon props to set a different icon for each position.\n\nsize\nsm\ncolor\nprimary\nvariant\nsolid\ntrailing\nButton\n<UButton\n\n  icon=\"i-heroicons-pencil-square\"\n\n  size=\"sm\"\n\n  color=\"primary\"\n\n  variant=\"solid\"\n\n  label=\"Button\"\n\n  :trailing=\"false\"\n\n/>\n\n\nThe label as prop or slot is optional so you can use the Button as an icon-only button.\n\nsize\nsm\ncolor\nprimary\nvariant\nsolid\n<UButton\n\n  icon=\"i-heroicons-pencil-square\"\n\n  size=\"sm\"\n\n  color=\"primary\"\n\n  square\n\n  variant=\"solid\"\n\n/>\n\nDisabled\n\nUse the disabled prop to disable the Button.\n\ndisabled\n\nButton\n\n<UButton disabled>Button</UButton>\n\nLoading\n\nUse the loading prop to show a loading icon and disable the Button.\n\nUse the loading-icon prop to set a different icon or change it globally in ui.button.default.loadingIcon. Defaults to i-heroicons-arrow-path-20-solid.\n\nloading\n\nButton\n\n<UButton loading>Button</UButton>\n\nBlock\n\nUse the block prop to make the Button fill the width of its container.\n\nblock\n\nButton\n\n<UButton block>Button</UButton>\n\nLink\n\nUse the to prop to make the Button a link.\n\nto\ntarget\n\nButton\n\n<UButton to=\"https://volta.net\" target=\"_blank\">Button</UButton>\n\n\nYou can also pass any property from the NuxtLink component such as target, exact, etc.\n\nPadded\n\nUse the padded prop to remove the padding of the Button.\n\npadded\n<UButton\n\n  :padded=\"false\"\n\n  color=\"gray\"\n\n  variant=\"link\"\n\n  icon=\"i-heroicons-x-mark-20-solid\"\n\n/>\n\nSquare\n\nUse the square prop to force the Button to have the same padding horizontally and vertically.\n\nsquare\nButton\n<UButton square label=\"Button\" color=\"gray\" variant=\"solid\" />\n\nTruncate\n\nUse the truncate prop to truncate the label of the Button.\n\ntruncate\nlabel\nButton with a long text\n<UButton truncate class=\"w-20\" label=\"Button with a long text\" />\n\nGroup\n\nTo stack buttons as a group, use the ButtonGroup component.\n\nTo size all the buttons equally, pass the size prop\nTo change the orientation of the buttons, set the orientation prop to vertical\nTo adjust the rounded or the shadow around buttons, customize with ui.buttonGroup.rounded or ui.buttonGroup.shadow\nsize\nsm\norientation\nhorizontal\nAction\n<UButtonGroup size=\"sm\" orientation=\"horizontal\">\n\n  <UButton label=\"Action\" color=\"white\" />\n\n  <UButton icon=\"i-heroicons-chevron-down-20-solid\" color=\"gray\" />\n\n</UButtonGroup>\n\n\nThis can also work with an Input component for example:\n\nsize\nsm\norientation\nhorizontal\n<UButtonGroup size=\"sm\" orientation=\"horizontal\">\n\n  <UInput />\n\n  <UButton icon=\"i-heroicons-clipboard-document\" color=\"gray\" />\n\n</UButtonGroup>\n\nSlots\nleading\n\nUse the #leading slot to set the content of the leading icon.\n\nlabel\nButton\n<UButton label=\"Button\" color=\"gray\">\n\n  <template #leading>\n\n    <UAvatar\n\n      src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n      size=\"3xs\"\n\n    />\n\n  </template>\n\n</UButton>\n\ntrailing\n\nUse the #trailing slot to set the content of the trailing icon.\n\nlabel\nButton\n<UButton label=\"Button\" color=\"gray\">\n\n  <template #trailing>\n\n    <UIcon name=\"i-heroicons-arrow-right-20-solid\" />\n\n  </template>\n\n</UButton>\n\nProps\nButton\nButtonGroup\nui\nany\nundefined\nsize\nButtonSize\nconfig.default.size\n\"2xs\"\"xs\"\"sm\"\"md\"\"lg\"\"xl\"\ntype\nstring\n\"button\"\ncolor\nstring\nconfig.default.color\nvariant\nButtonVariant\nconfig.default.variant\n\"link\"\"solid\"\"outline\"\"soft\"\"ghost\"\nlabel\nstring\nnull\nicon\nstring\nnull\nloadingIcon\nstring\nconfig.default.loadingIcon\nleadingIcon\nstring\nnull\ntrailingIcon\nstring\nnull\ndisabled\nboolean\nfalse\nsquare\nboolean\nfalse\nblock\nboolean\nfalse\nloading\nboolean\nfalse\npadded\nboolean\ntrue\ntrailing\nboolean\nfalse\nleading\nboolean\nfalse\ntruncate\nboolean\nfalse\nConfig\nButton\nButtonGroup\n{\n\n  \"base\": \"focus:outline-none focus-visible:outline-0 disabled:cursor-not-allowed disabled:opacity-75 flex-shrink-0\",\n\n  \"font\": \"font-medium\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"size\": {\n\n    \"2xs\": \"text-xs\",\n\n    \"xs\": \"text-xs\",\n\n    \"sm\": \"text-sm\",\n\n    \"md\": \"text-sm\",\n\n    \"lg\": \"text-sm\",\n\n    \"xl\": \"text-base\"\n\n  },\n\n  \"gap\": {\n\n    \"2xs\": \"gap-x-1\",\n\n    \"xs\": \"gap-x-1.5\",\n\n    \"sm\": \"gap-x-1.5\",\n\n    \"md\": \"gap-x-2\",\n\n    \"lg\": \"gap-x-2.5\",\n\n    \"xl\": \"gap-x-2.5\"\n\n  },\n\n  \"padding\": {\n\n    \"2xs\": \"px-2 py-1\",\n\n    \"xs\": \"px-2.5 py-1.5\",\n\n    \"sm\": \"px-2.5 py-1.5\",\n\n    \"md\": \"px-3 py-2\",\n\n    \"lg\": \"px-3.5 py-2.5\",\n\n    \"xl\": \"px-3.5 py-2.5\"\n\n  },\n\n  \"square\": {\n\n    \"2xs\": \"p-1\",\n\n    \"xs\": \"p-1.5\",\n\n    \"sm\": \"p-1.5\",\n\n    \"md\": \"p-2\",\n\n    \"lg\": \"p-2.5\",\n\n    \"xl\": \"p-2.5\"\n\n  },\n\n  \"color\": {\n\n    \"white\": {\n\n      \"solid\": \"shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 text-gray-900 dark:text-white bg-white hover:bg-gray-50 disabled:bg-white dark:bg-gray-900 dark:hover:bg-gray-800/50 dark:disabled:bg-gray-900 focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\",\n\n      \"ghost\": \"text-gray-900 dark:text-white hover:bg-white dark:hover:bg-gray-900 focus-visible:ring-inset focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\"\n\n    },\n\n    \"gray\": {\n\n      \"solid\": \"shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-700 text-gray-700 dark:text-gray-200 bg-gray-50 hover:bg-gray-100 disabled:bg-gray-50 dark:bg-gray-800 dark:hover:bg-gray-700/50 dark:disabled:bg-gray-800 focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\",\n\n      \"ghost\": \"text-gray-700 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-50 dark:hover:bg-gray-800 focus-visible:ring-inset focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\",\n\n      \"link\": \"text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 underline-offset-4 hover:underline focus-visible:ring-inset focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\"\n\n    },\n\n    \"black\": {\n\n      \"solid\": \"shadow-sm text-white dark:text-gray-900 bg-gray-900 hover:bg-gray-800 disabled:bg-gray-900 dark:bg-white dark:hover:bg-gray-100 dark:disabled:bg-white focus-visible:ring-inset focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\",\n\n      \"link\": \"text-gray-900 dark:text-white underline-offset-4 hover:underline focus-visible:ring-inset focus-visible:ring-2 focus-visible:ring-primary-500 dark:focus-visible:ring-primary-400\"\n\n    }\n\n  },\n\n  \"variant\": {\n\n    \"solid\": \"shadow-sm text-white dark:text-gray-900 bg-{color}-500 hover:bg-{color}-600 disabled:bg-{color}-500 dark:bg-{color}-400 dark:hover:bg-{color}-500 dark:disabled:bg-{color}-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-{color}-500 dark:focus-visible:outline-{color}-400\",\n\n    \"outline\": \"ring-1 ring-inset ring-current text-{color}-500 dark:text-{color}-400 hover:bg-{color}-50 disabled:bg-transparent dark:hover:bg-{color}-950 dark:disabled:bg-transparent focus-visible:ring-2 focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400\",\n\n    \"soft\": \"text-{color}-500 dark:text-{color}-400 bg-{color}-50 hover:bg-{color}-100 disabled:bg-{color}-50 dark:bg-{color}-950 dark:hover:bg-{color}-900 dark:disabled:bg-{color}-950 focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400\",\n\n    \"ghost\": \"text-{color}-500 dark:text-{color}-400 hover:bg-{color}-50 disabled:bg-transparent dark:hover:bg-{color}-950 dark:disabled:bg-transparent focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400\",\n\n    \"link\": \"text-{color}-500 hover:text-{color}-600 disabled:text-{color}-500 dark:text-{color}-400 dark:hover:text-{color}-500 dark:disabled:text-{color}-400 underline-offset-4 hover:underline focus-visible:ring-2 focus-visible:ring-inset focus-visible:ring-{color}-500 dark:focus-visible:ring-{color}-400\"\n\n  },\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0\",\n\n    \"size\": {\n\n      \"2xs\": \"h-4 w-4\",\n\n      \"xs\": \"h-4 w-4\",\n\n      \"sm\": \"h-5 w-5\",\n\n      \"md\": \"h-5 w-5\",\n\n      \"lg\": \"h-5 w-5\",\n\n      \"xl\": \"h-6 w-6\"\n\n    }\n\n  },\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"variant\": \"solid\",\n\n    \"color\": \"primary\",\n\n    \"loadingIcon\": \"i-heroicons-arrow-path-20-solid\"\n\n  }\n\n}\n\n\nBadge\n\nDisplay a short text to represent a status or a category.\n\nDropdown\n\nDisplay a list of actions in a dropdown menu."
  },
  {
    "title": "Badge - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/badge",
    "html": "Elements\nBadge\nGitHub\n\nDisplay a short text to represent a status or a category.\n\nUsage\n\nUse the default slot to set the text of the Badge.\n\nBadge\n\n<UBadge>Badge</UBadge>\n\n\nYou can also use the label prop:\n\nlabel\nBadge\n<UBadge label=\"Badge\" />\n\nStyle\n\nUse the color and variant props to change the visual style of the Badge.\n\nvariant can be solid (default), outline, soft or subtle.\ncolor\nprimary\nvariant\nsolid\n\nBadge\n\n<UBadge color=\"primary\" variant=\"solid\">Badge</UBadge>\n\n\nBesides all the colors from the ui.colors object, you can also use the white and black colors with their pre-defined variants.\n\nWhite\nvariant\nsolid\n\nBadge\n\n<UBadge color=\"white\" variant=\"solid\">Badge</UBadge>\n\nGray\nvariant\nsolid\n\nBadge\n\n<UBadge color=\"gray\" variant=\"solid\">Badge</UBadge>\n\nBlack\nvariant\nsolid\n\nBadge\n\n<UBadge color=\"black\" variant=\"solid\">Badge</UBadge>\n\nSize\n\nUse the size prop to change the size of the Badge.\n\nsize\nsm\n\nBadge\n\n<UBadge size=\"sm\">Badge</UBadge>\n\nRounded\n\nTo customize the border radius of the Badge, you can use the ui prop.\n\nBadge\n\n<UBadge :ui=\"{ rounded: 'rounded-full' }\">Badge</UBadge>\n\nYou can customize the whole preset by using the ui prop.\nProps\nui\nany\nundefined\nsize\nBadgeSize\nconfig.default.size\n\"xs\"\"sm\"\"md\"\"lg\"\ncolor\nstring\nconfig.default.color\nvariant\nBadgeVariant\nconfig.default.variant\n\"solid\"\"outline\"\"soft\"\"subtle\"\nlabel\nstring | number\nnull\nConfig\n{\n\n  \"base\": \"inline-flex items-center\",\n\n  \"rounded\": \"rounded-md\",\n\n  \"font\": \"font-medium\",\n\n  \"size\": {\n\n    \"xs\": \"text-xs px-1.5 py-0.5\",\n\n    \"sm\": \"text-xs px-2 py-1\",\n\n    \"md\": \"text-sm px-2 py-1\",\n\n    \"lg\": \"text-sm px-2.5 py-1.5\"\n\n  },\n\n  \"color\": {\n\n    \"white\": {\n\n      \"solid\": \"ring-1 ring-inset ring-gray-300 dark:ring-gray-700 text-gray-900 dark:text-white bg-white dark:bg-gray-900\"\n\n    },\n\n    \"gray\": {\n\n      \"solid\": \"ring-1 ring-inset ring-gray-300 dark:ring-gray-700 text-gray-700 dark:text-gray-200 bg-gray-50 dark:bg-gray-800\"\n\n    },\n\n    \"black\": {\n\n      \"solid\": \"text-white dark:text-gray-900 bg-gray-900 dark:bg-white\"\n\n    }\n\n  },\n\n  \"variant\": {\n\n    \"solid\": \"bg-{color}-500 dark:bg-{color}-400 text-white dark:text-gray-900\",\n\n    \"outline\": \"text-{color}-500 dark:text-{color}-400 ring-1 ring-inset ring-{color}-500 dark:ring-{color}-400\",\n\n    \"soft\": \"bg-{color}-50 dark:bg-{color}-400 dark:bg-opacity-10 text-{color}-500 dark:text-{color}-400\",\n\n    \"subtle\": \"bg-{color}-50 dark:bg-{color}-400 dark:bg-opacity-10 text-{color}-500 dark:text-{color}-400 ring-1 ring-inset ring-{color}-500 dark:ring-{color}-400 ring-opacity-25 dark:ring-opacity-25\"\n\n  },\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"variant\": \"solid\",\n\n    \"color\": \"primary\"\n\n  }\n\n}\n\n\nAvatar\n\nDisplay an image that represents a resource or a group of resources.\n\nButton\n\nCreate a button with icon or link capabilities."
  },
  {
    "title": "Avatar - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/avatar",
    "html": "Elements\nAvatar\nGitHub\n\nDisplay an image that represents a resource or a group of resources.\n\nUsage\nsrc\nalt\n<UAvatar\n\n  src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n  alt=\"Avatar\"\n\n/>\n\nSize\n\nUse the size prop to change the size of the Avatar.\n\nsize\nsm\n<UAvatar\n\n  size=\"sm\"\n\n  src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n  alt=\"Avatar\"\n\n/>\n\nChip\n\nUse the chip-color, chip-text and chip-position props to display a chip on the Avatar.\n\nchipColor\nprimary\nchipText\nchipPosition\ntop-right\nsize\nsm\n<UAvatar\n\n  chip-color=\"primary\"\n\n  chip-text=\"\"\n\n  chip-position=\"top-right\"\n\n  size=\"sm\"\n\n  src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n  alt=\"Avatar\"\n\n/>\n\nPlaceholder\n\nIf there is an error loading the src of the avatar or src is null / false a background placeholder will be displayed, customizable in ui.avatar.background.\n\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name} or change it globally in ui.avatar.default.icon to display an icon on top of the background.\n\nsize\nsm\n<UAvatar icon=\"i-heroicons-photo\" size=\"sm\" />\n\nAlt\n\nOtherwise, a placeholder will be displayed with the initials of the alt prop, customizable in ui.avatar.placeholder.\n\nalt\nsize\nsm\nBC\n<UAvatar alt=\"Benjamin Canac\" size=\"sm\" />\n\nGroup\n\nTo stack avatars as a group, use the AvatarGroup component.\n\nTo limit the amount of avatars to show, use the max prop. It'll truncate the avatars and show a \"+X\" label (where X is the remaining avatars)\nTo size all the avatars equally, pass the size prop\nTo adjust the spacing or the ring between avatars, customize with ui.avatarGroup.margin or ui.avatarGroup.ring\nsize\nsm\nmax\n+1\n<UAvatarGroup size=\"sm\" :max=\"2\">\n\n  <UAvatar\n\n    src=\"https://avatars.githubusercontent.com/u/739984?v=4\"\n\n    alt=\"benjamincanac\"\n\n  />\n\n  <UAvatar\n\n    src=\"https://avatars.githubusercontent.com/u/904724?v=4\"\n\n    alt=\"Atinux\"\n\n  />\n\n  <UAvatar\n\n    src=\"https://avatars.githubusercontent.com/u/7547335?v=4\"\n\n    alt=\"smarroufin\"\n\n  />\n\n</UAvatarGroup>\n\nProps\nAvatar\nAvatarGroup\nui\nany\nundefined\nsize\nAvatarSize\nconfig.default.size\n\"3xs\"\"2xs\"\"xs\"\"sm\"\"md\"\"lg\"\"xl\"\"2xl\"\"3xl\"\ntext\nstring\nnull\nicon\nstring\nconfig.default.icon\nsrc\nstring | boolean\nnull\nalt\nstring\nnull\nchipColor\nstring\nconfig.default.chipColor\nchipPosition\n\"top-right\" | \"bottom-right\" | \"top-left\" | \"bottom-left\"\nconfig.default.chipPosition\nchipText\nstring | number\nnull\nimgClass\nstring\n\"\"\nConfig\nAvatar\nAvatarGroup\n{\n\n  \"wrapper\": \"relative inline-flex items-center justify-center flex-shrink-0\",\n\n  \"background\": \"bg-gray-100 dark:bg-gray-800\",\n\n  \"rounded\": \"rounded-full\",\n\n  \"text\": \"font-medium leading-none text-gray-900 dark:text-white truncate\",\n\n  \"placeholder\": \"font-medium leading-none text-gray-500 dark:text-gray-400 truncate\",\n\n  \"size\": {\n\n    \"3xs\": \"h-4 w-4 text-[8px]\",\n\n    \"2xs\": \"h-5 w-5 text-[10px]\",\n\n    \"xs\": \"h-6 w-6 text-xs\",\n\n    \"sm\": \"h-8 w-8 text-sm\",\n\n    \"md\": \"h-10 w-10 text-base\",\n\n    \"lg\": \"h-12 w-12 text-lg\",\n\n    \"xl\": \"h-14 w-14 text-xl\",\n\n    \"2xl\": \"h-16 w-16 text-2xl\",\n\n    \"3xl\": \"h-20 w-20 text-3xl\"\n\n  },\n\n  \"chip\": {\n\n    \"base\": \"absolute rounded-full ring-1 ring-white dark:ring-gray-900 flex items-center justify-center text-white dark:text-gray-900 font-medium\",\n\n    \"background\": \"bg-{color}-500 dark:bg-{color}-400\",\n\n    \"position\": {\n\n      \"top-right\": \"top-0 right-0\",\n\n      \"bottom-right\": \"bottom-0 right-0\",\n\n      \"top-left\": \"top-0 left-0\",\n\n      \"bottom-left\": \"bottom-0 left-0\"\n\n    },\n\n    \"size\": {\n\n      \"3xs\": \"h-[4px] min-w-[4px] text-[4px] p-px\",\n\n      \"2xs\": \"h-[5px] min-w-[5px] text-[5px] p-px\",\n\n      \"xs\": \"h-1.5 min-w-[0.375rem] text-[6px] p-px\",\n\n      \"sm\": \"h-2 min-w-[0.5rem] text-[7px] p-0.5\",\n\n      \"md\": \"h-2.5 min-w-[0.625rem] text-[8px] p-0.5\",\n\n      \"lg\": \"h-3 min-w-[0.75rem] text-[10px] p-0.5\",\n\n      \"xl\": \"h-3.5 min-w-[0.875rem] text-[11px] p-1\",\n\n      \"2xl\": \"h-4 min-w-[1rem] text-[12px] p-1\",\n\n      \"3xl\": \"h-5 min-w-[1.25rem] text-[14px] p-1\"\n\n    }\n\n  },\n\n  \"icon\": {\n\n    \"base\": \"text-gray-500 dark:text-gray-400 flex-shrink-0\",\n\n    \"size\": {\n\n      \"3xs\": \"h-2 w-2\",\n\n      \"2xs\": \"h-2.5 w-2.5\",\n\n      \"xs\": \"h-3 w-3\",\n\n      \"sm\": \"h-4 w-4\",\n\n      \"md\": \"h-5 w-5\",\n\n      \"lg\": \"h-6 w-6\",\n\n      \"xl\": \"h-7 w-7\",\n\n      \"2xl\": \"h-8 w-8\",\n\n      \"3xl\": \"h-10 w-10\"\n\n    }\n\n  },\n\n  \"default\": {\n\n    \"size\": \"sm\",\n\n    \"icon\": null,\n\n    \"chipColor\": null,\n\n    \"chipPosition\": \"top-right\"\n\n  }\n\n}\n\n\nAlert\n\nDisplay an alert element to draw attention.\n\nBadge\n\nDisplay a short text to represent a status or a category."
  },
  {
    "title": "Alert - Nuxt UI",
    "url": "https://ui.nuxt.com/elements/alert",
    "html": "Elements\nAlert\nGitHub\n\nDisplay an alert element to draw attention.\n\nUsage\n\nPass a title to your Alert.\n\ntitle\n\nHeads up!\n\n<UAlert title=\"Heads up!\" />\n\nDescription\n\nYou can add a description in addition of the title.\n\ndescription\n\nHeads up!\n\nYou can add components to your app using the cli.\n\n<UAlert\n\n  description=\"You can add components to your app using the cli.\"\n\n  title=\"Heads up!\"\n\n/>\n\nIcon\n\nUse any icon from Iconify by setting the icon prop by using this pattern: i-{collection_name}-{icon_name} or change it globally in ui.alert.default.icon.\n\ndescription\n\nHeads up!\n\nYou can add components to your app using the cli.\n\n<UAlert\n\n  icon=\"i-heroicons-command-line\"\n\n  description=\"You can add components to your app using the cli.\"\n\n  title=\"Heads up!\"\n\n/>\n\nAvatar\n\nUse the avatar prop as an object and configure it with any of its props.\n\ndescription\n\nHeads up!\n\nYou can add components to your app using the cli.\n\n<UAlert\n\n  description=\"You can add components to your app using the cli.\"\n\n  :avatar=\"{ src: 'https://avatars.githubusercontent.com/u/739984?v=4' }\"\n\n  title=\"Heads up!\"\n\n/>\n\nStyle\n\nUse the color and variant props to change the visual style of the Alert.\n\ncolor can be any color from the ui.colors object or white (default).\nvariant can be solid (default), outline, soft or subtle.\ncolor\nprimary\nvariant\nsolid\n\nHeads up!\n\nYou can add components to your app using the cli.\n\n<UAlert\n\n  icon=\"i-heroicons-command-line\"\n\n  color=\"primary\"\n\n  variant=\"solid\"\n\n  title=\"Heads up!\"\n\n  description=\"You can add components to your app using the cli.\"\n\n/>\n\nClose\n\nUse the close-button prop to hide or customize the close button on the Alert.\n\nYou can pass all the props of the Button component to customize it through the close-button prop or globally through ui.alert.default.closeButton.\n\nIt defaults to null which means no close button will be displayed. A close event will be emitted when the close button is clicked.\n\nHeads up!\n\n<UAlert\n\n  :close-button=\"{ icon: 'i-heroicons-x-mark-20-solid', color: 'gray', variant: 'link', padded: false }\"\n\n  title=\"Heads up!\"\n\n/>\n\nActions\n\nUse the actions prop to add actions to the Alert.\n\nLike for closeButton, you can pass all the props of the Button component plus a click function in the action but also customize the default style for the actions globally through ui.alert.default.actionButton.\n\nHeads up!\n\nAction 1\nAction 2\n<UAlert\n\n  :actions=\"[{ label: 'Action 1' }, { variant: 'ghost', color: 'gray', label: 'Action 2' }]\"\n\n  title=\"Heads up!\"\n\n/>\n\n\nActions will render differently whether you have a description set.\n\nHeads up!\n\nYou can add components to your app using the cli.\n\nAction 1\nAction 2\n<UAlert\n\n  :actions=\"[{ variant: 'solid', color: 'primary', label: 'Action 1' }, { variant: 'outline', color: 'primary', label: 'Action 2' }]\"\n\n  title=\"Heads up!\"\n\n  description=\"You can add components to your app using the cli.\"\n\n/>\n\nSlots\ntitle / description\n\nUse the #title and #description slots to customize the Alert.\n\nThis can be handy when you want to display HTML content. To achieve this, you can define those slots and use the v-html directive.\n\nHeads up!\n\nYou can add components to your app using the cli.\n\n<template>\n\n  <UAlert title=\"Heads <i>up</i>!\" icon=\"i-heroicons-command-line\">\n\n    <template #title=\"{ title }\">\n\n      <!-- eslint-disable-next-line vue/no-v-html -->\n\n      <span v-html=\"title\" />\n\n    </template>\n\n\n\n    <template #description>\n\n      You can add <b>components</b> to your app using the <u>cli</u>.\n\n    </template>\n\n  </UAlert>\n\n</template>\n\nProps\ntitle\nrequired\nstring\nui\nany\nundefined\navatar\nany\nnull\nicon\nstring\nconfig.default.icon\ncolor\nstring\nconfig.default.color\nvariant\nAlertVariant\nconfig.default.variant\n\"solid\"\"outline\"\"soft\"\"subtle\"\ndescription\nstring\nnull\nactions\n(Button & { click?: Function; })[]\n[]\nShow properties\ncloseButton\nButton\nconfig.default.closeButton as Button\nShow properties\nConfig\n{\n\n  \"wrapper\": \"w-full relative overflow-hidden\",\n\n  \"title\": \"text-sm font-medium\",\n\n  \"description\": \"mt-1 text-sm leading-4 opacity-90\",\n\n  \"actions\": \"flex items-center gap-2 mt-3 flex-shrink-0\",\n\n  \"shadow\": \"\",\n\n  \"rounded\": \"rounded-lg\",\n\n  \"padding\": \"p-4\",\n\n  \"gap\": \"gap-3\",\n\n  \"icon\": {\n\n    \"base\": \"flex-shrink-0 w-5 h-5\"\n\n  },\n\n  \"avatar\": {\n\n    \"base\": \"flex-shrink-0 self-center\",\n\n    \"size\": \"md\"\n\n  },\n\n  \"color\": {\n\n    \"white\": {\n\n      \"solid\": \"text-gray-900 dark:text-white bg-white dark:bg-gray-900 ring-1 ring-gray-200 dark:ring-gray-800\"\n\n    }\n\n  },\n\n  \"variant\": {\n\n    \"solid\": \"bg-{color}-500 dark:bg-{color}-400 text-white dark:text-gray-900\",\n\n    \"outline\": \"text-{color}-500 dark:text-{color}-400 ring-1 ring-inset ring-{color}-500 dark:ring-{color}-400\",\n\n    \"soft\": \"bg-{color}-50 dark:bg-{color}-400 dark:bg-opacity-10 text-{color}-500 dark:text-{color}-400\",\n\n    \"subtle\": \"bg-{color}-50 dark:bg-{color}-400 dark:bg-opacity-10 text-{color}-500 dark:text-{color}-400 ring-1 ring-inset ring-{color}-500 dark:ring-{color}-400 ring-opacity-25 dark:ring-opacity-25\"\n\n  },\n\n  \"default\": {\n\n    \"color\": \"white\",\n\n    \"variant\": \"solid\",\n\n    \"icon\": null,\n\n    \"closeButton\": null,\n\n    \"actionButton\": {\n\n      \"size\": \"xs\",\n\n      \"color\": \"primary\",\n\n      \"variant\": \"link\"\n\n    }\n\n  }\n\n}\n\n\nAccordion\n\nDisplay togglable accordion panels.\n\nAvatar\n\nDisplay an image that represents a resource or a group of resources."
  },
  {
    "title": "Contributing - Nuxt UI",
    "url": "https://ui.nuxt.com/getting-started/contributing",
    "html": "Getting Started\nContributing\n\nLearn how to contribute to Nuxt UI.\n\nOverview\n\nNuxt UI thrives thanks to its fantastic community ❤️, which contributes by submitting issues, creating pull requests, and offering valuable feedback.\n\nBefore reporting a bug or reporting a feature, please make sure that you have read through our documentation and existing issues.\n\nSubmitting a Pull Request (PR)\n1. Before You Start\n\nCheck if there's an existing issue describing the problem or feature request you're working on. If there is, please leave a comment on the issue to let us know you're working on it.\n\nIf there isn't, open a new issue to discuss the problem or feature.\n\n2. Local Development Setup\n\nTo begin local development, follow these steps:\n\nClone the nuxt/ui repository to your local machine:\ngit clone https://github.com/nuxt/ui.git\n\nEnable Corepack:\ncorepack enable\n\nInstall dependencies:\npnpm install\n\nGenerate type stubs:\npnpm run dev:prepare\n\nConfigure your local development environment:\nTo work on the documentation located in the docs folder, run:\npnpm run dev\n\nTo test the components using playground, run:\npnpm run play\n\nIDE Setup\n\nWe recommend using VS Code along with the ESLint extension. You can enable auto-fix and formatting when saving your code. Here's how:\n\n{\n\n  \"editor.codeActionsOnSave\": {\n\n    \"source.fixAll\": false,\n\n    \"source.fixAll.eslint\": true\n\n  }\n\n}\n\n\nYou can also use the lint command:\n\npnpm run lint # check for linting errors\n\npnpm run lint:fix # fix linting errors\n\nNo Prettier\n\nSince ESLint is already configured to format the code, there's no need for duplicating functionality with Prettier.\n\nIf you have Prettier installed in your editor, we recommend disabling it to avoid conflicts.\n\nType Checking\n\nWe use TypeScript for type checking. You can use the typecheck command to check for type errors:\n\npnpm run typecheck\n\n3. Commit Conventions\n\nWe use Conventional Commits for commit messages, which allows a changelog to be auto-generated based on the commits. Please read the guide through if you aren't familiar with it already.\n\nNote\nfix and feat are for actual code changes (that might affect logic). For typo or document changes, use docs or chore instead:\n\nfix: typo -> docs: fix typo\n\nIf you are working on a specific component, ensure that you specify the main scope of your commit in brackets. e.g.\nfeat(Alert): new component\nchore(Table): improve accessibility\n\n4. Making a Pull Request\nFollow along the instructions provided when creating a PR\nEnsure your PR's title adheres to the Conventional Commits since it will be used once the code is merged.\nMultiple commits are fine; no need to rebase or force push. We'll use Squash and Merge when merging.\nEnsure linting and make tests manually before submitting the PR. Avoid making unrelated changes.\n5. After You've Made a Pull Request\n\nWe'll review it promptly. If assigned to a maintainer, they'll review it carefully. Ignore the red text; it's for tracking purposes.\n\nProject Structure\n\nIn this project, you'll find a variety of folders and files that serve different purposes. Here's an overview of the main ones:\n\nDocumentation - docs :\n\nThe documentation is located in the docs folder. It's a Nuxt app that uses the @nuxt/content module to generate the documentation pages from Markdown files. Here's a breakdown of its structure:\n\ndocs/\n├── components/\n│   ├── examples/     # Components used in documentation as examples\n│   └── themes/       # Components used in the examples page in the theming section\n├── content/          # Documentation, separated into categories according to component types\n│   ├── 1.getting-started/\n│   │   ├── 1.index.md\n│   │   ├── 2.installation.md\n│   │   ├── ... etc\n│   ├── 2.elements/         # The category of components, which are elements\n│   │   ├── 1.accordion.md  # Docs for a single component (i.e., accordion)\n│   │   ├── 2.alert.md\n│   │   ├── ... etc\n└── ... etc\n\nComponents - src :\n\nThe components are located in the src folder. It's separated into categories according to component types. Here's a breakdown of its structure:\n\nsrc/\n├── runtime/\n│   ├── composables/            # Composable functions used in components\n│   ├── components/             # Components folder, separated into categories according to component types\n│   │   ├── data/               # The category of components, which are data related\n│   │   │   ├── table.vue/      # Table component\n│   │   │   ├── elements/       # Elements category\n│   │   │   │   ├── ...etc/\n│   │   │   └── ... etc/\n│   │   ├── plugins/            # Plugins used in components\n│   │   ├── utils/              # Utility functions used on the components page (e.g., lodash)\n│   │   ├── types/              # Types used in components\n│   │   │   ├── accordion.d.ts/ # [componentName].d.ts type used for single component\n│   │   │   ├── avatar.d.ts/\n│   │   │   └── ... etc/\n│   │   ├── ui.config.ts/       # Configuration file used to apply styles to every component\n├── colors.ts/                  # Everything related to color functions (e.g., safelistByComponent, generateSafelist)\n└── ... etc/                    # Other files and folders\n\nThanks\n\nThank you again for being interested in this project! You are awesome! ❤️\n\nExamples\n\nDiscover some real-life examples of components you can build.\n\nAccordion\n\nDisplay togglable accordion panels."
  },
  {
    "title": "Examples - Nuxt UI",
    "url": "https://ui.nuxt.com/getting-started/examples",
    "html": "Getting Started\nExamples\n\nDiscover some real-life examples of components you can build.\n\nIf you have any ideas of examples you'd like to see, please comment on this issue.\nComponents\n\nYou can mix and match components to build your own UI.\n\nColorModeButton\n\nYou can easily build a color mode button by using the useColorMode composable from @nuxtjs/color-mode.\n\n<script setup>\n\nconst colorMode = useColorMode()\n\n\n\nconst isDark = computed({\n\n  get () {\n\n    return colorMode.value === 'dark'\n\n  },\n\n  set () {\n\n    colorMode.preference = colorMode.value === 'dark' ? 'light' : 'dark'\n\n  }\n\n})\n\n</script>\n\n\n\n<template>\n\n  <ClientOnly>\n\n    <UButton\n\n      :icon=\"isDark ? 'i-heroicons-moon-20-solid' : 'i-heroicons-sun-20-solid'\"\n\n      color=\"gray\"\n\n      variant=\"ghost\"\n\n      aria-label=\"Theme\"\n\n      @click=\"isDark = !isDark\"\n\n    />\n\n\n\n    <template #fallback>\n\n      <div class=\"w-8 h-8\" />\n\n    </template>\n\n  </ClientOnly>\n\n</template>\n\nDatePicker\n\nHere is an example of a date picker component built with v-calendar.\n\ncomponents/DatePicker.vue\n<script setup lang=\"ts\">\n\nimport { DatePicker as VCalendarDatePicker } from 'v-calendar'\n\nimport 'v-calendar/dist/style.css'\n\n\n\nconst props = defineProps({\n\n  modelValue: {\n\n    type: Date,\n\n    default: null\n\n  }\n\n})\n\n\n\nconst emit = defineEmits(['update:model-value', 'close'])\n\n\n\nconst colorMode = useColorMode()\n\n\n\nconst isDark = computed(() => colorMode.value === 'dark')\n\n\n\nconst date = computed({\n\n  get: () => props.modelValue,\n\n  set: (value) => {\n\n    emit('update:model-value', value)\n\n    emit('close')\n\n  }\n\n})\n\n\n\nconst attrs = [{\n\n  key: 'today',\n\n  highlight: {\n\n    color: 'blue',\n\n    fillMode: 'outline',\n\n    class: '!bg-gray-100 dark:!bg-gray-800'\n\n  },\n\n  dates: new Date()\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <VCalendarDatePicker\n\n    v-model=\"date\"\n\n    transparent\n\n    borderless\n\n    :attributes=\"attrs\"\n\n    :is-dark=\"isDark\"\n\n    title-position=\"left\"\n\n    trim-weeks\n\n    :first-day-of-week=\"2\"\n\n  />\n\n</template>\n\n\nYou can use it inside a Popover component to display it when clicking on a Button.\n\nWednesday, Nov 29, 2023\n<script setup>\n\nconst date = ref(new Date())\n\n\n\nconst label = computed(() => date.value.toLocaleDateString('en-us', { weekday: 'long', year: 'numeric', month: 'short', day: 'numeric' })\n\n)\n\n</script>\n\n\n\n<template>\n\n  <UPopover :popper=\"{ placement: 'bottom-start' }\">\n\n    <UButton icon=\"i-heroicons-calendar-days-20-solid\" :label=\"label\" />\n\n\n\n    <template #panel=\"{ close }\">\n\n      <LazyDatePicker v-model=\"date\" @close=\"close\" />\n\n    </template>\n\n  </UPopover>\n\n</template>\n\nTable\n\nHere is an example of a Table component with all its features implemented.\n\nTodos\nStatus\nRows per page:\n3\n5\n10\n20\n30\n40\nColumns\nReset\n\t\n#\n\t\nTitle\n\t\nStatus\n\tActions\n\n\t1\tdelectus aut autem\tIn Progress\t\n\n\n\t2\tquis ut nam facilis et officia qui\tIn Progress\t\n\n\n\t3\tfugiat veniam minus\tIn Progress\t\n\n\n\t4\tet porro tempora\tCompleted\t\n\n\n\t5\tlaboriosam mollitia et enim quasi adipisci quia provident illum\tIn Progress\t\n\n\n\t6\tqui ullam ratione quibusdam voluptatem quia omnis\tIn Progress\t\n\n\n\t7\tillo expedita consequatur quia in\tIn Progress\t\n\n\n\t8\tquo adipisci enim quam ut ab\tCompleted\t\n\n\n\t9\tmolestiae perspiciatis ipsa\tIn Progress\t\n\n\n\t10\tillo est ratione doloremque quia maiores aut\tCompleted\t\nShowing 1 to 10 of 200 results\n1\n2\n3\n4\n5\n…\n20\nTake a look at the component!\nTheming\n\nOur theming system provides a lot of flexibility to customize the components.\n\nCommandPalette\n\nHere is some examples of what you can do with the CommandPalette.\n\nAlgolia\nIntroduction\nInstallation\nTheming\nShortcuts\nExamples\nContributing\nAccordion\nAlert\nAvatar\nBadge\nButton\nDropdown\nIcon\nKbd\nLink\nProgress\nMeter\nChip\nInput\nTextarea\nSelect\nSelectMenu\nCheckbox\nRadioGroup\nToggle\nRange\nFormGroup\nForm\nTable\nVerticalNavigation\nCommandPalette\nPagination\nTabs\nBreadcrumb\nModal\nSlideover\nPopover\nTooltip\nContextMenu\nNotification\nCard\nContainer\nSkeleton\nDivider\nSetup\nUsage\nContent\nHeader\nHeaderLinks\nMain\nFooter\nFooterLinks\nFooterColumns\nLandingHero\nLandingSection\nLandingGrid\nTake a look at the component!\nRaycast\nSuggestions\nLinear\nApplication\nFigma\nApplication\nSlack\nApplication\nYouTube\nApplication\nGitHub\nApplication\nCommands\nClipboard History\nCommand\nImport Extension\nCommand\nManage Extensions\nCommand\nTake a look at the component!\nVerticalNavigation\nIntroduction\nInstallation\nTheming\nShortcuts\nExamples\n<script setup>\n\nconst links = [{\n\n  label: 'Introduction',\n\n  to: '/getting-started'\n\n}, {\n\n  label: 'Installation',\n\n  to: '/getting-started/installation'\n\n}, {\n\n  label: 'Theming',\n\n  to: '/getting-started/theming'\n\n}, {\n\n  label: 'Shortcuts',\n\n  to: '/getting-started/shortcuts'\n\n}, {\n\n  label: 'Examples',\n\n  to: '/getting-started/examples'\n\n}]\n\n</script>\n\n\n\n<template>\n\n  <UVerticalNavigation\n\n    :links=\"links\"\n\n    :ui=\"{\n\n      wrapper: 'border-s border-gray-200 dark:border-gray-800 space-y-2',\n\n      base: 'group block border-s -ms-px lg:leading-6 before:hidden',\n\n      padding: 'p-0 ps-4',\n\n      rounded: '',\n\n      font: '',\n\n      ring: '',\n\n      active: 'text-primary-500 dark:text-primary-400 border-current font-semibold',\n\n      inactive: 'border-transparent hover:border-gray-400 dark:hover:border-gray-500 text-gray-700 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-300'\n\n    }\"\n\n  />\n\n</template>\n\nPagination\n1\n2\n3\n4\n5\n6\n<script setup>\n\nconst page = ref(1)\n\nconst items = ref(Array(55))\n\n</script>\n\n\n\n<template>\n\n  <UPagination\n\n    v-model=\"page\"\n\n    :total=\"items.length\"\n\n    :ui=\"{\n\n      wrapper: 'flex items-center gap-1',\n\n      rounded: '!rounded-full min-w-[32px] justify-center'\n\n    }\"\n\n    :prev-button=\"null\"\n\n    :next-button=\"{\n\n      icon: 'i-heroicons-arrow-small-right-20-solid',\n\n      color: 'primary',\n\n      variant: 'outline'\n\n    }\"\n\n  />\n\n</template>\n\nRTL Support\n\nHere are some examples of how components look like in RTL mode.\n\nPagination\nTake a look at the component!\n\nShortcuts\n\nLearn how to display and define keyboard shortcuts in your app.\n\nContributing\n\nLearn how to contribute to Nuxt UI."
  },
  {
    "title": "Shortcuts - Nuxt UI",
    "url": "https://ui.nuxt.com/getting-started/shortcuts",
    "html": "Getting Started\nShortcuts\n\nLearn how to display and define keyboard shortcuts in your app.\n\nOverview\n\nSome components like Dropdown, Command Palette and Tooltip support the display of keyboard shortcuts.\n\n<UDropdown :items=\"[[{ label: 'Edit', shortcuts: ['E'] }]]\" />\n\n\nShortcuts are displayed and styled through the Kbd component.\n\n<template>\n\n  <div class=\"flex items-center gap-0.5\">\n\n    <UKbd>⌘</UKbd>\n\n    <UKbd>K</UKbd>\n\n  </div>\n\n</template>\n\nYou will have a preview of how shortcuts are rendered in each component page.\ndefineShortcuts\n\nThis module provides a defineShortcuts composable that allows you to define keyboard shortcuts in your app really easily.\n\n<template>\n\n  <UModal v-model=\"isOpen\" />\n\n</template>\n\n\n\n<script setup lang=\"ts\">\n\nconst isOpen = ref(false)\n\n\n\ndefineShortcuts({\n\n  meta_k: {\n\n    usingInput: true,\n\n    handler: () => {\n\n      isOpen.value = !isOpen.value\n\n    }\n\n  }\n\n})\n\n</script>\n\n\nShortcuts keys are written as the literal keyboard key value. Combinations are made with _ separator. Chained shortcuts are made with - separator.\n\nModifiers are also available:\n\nmeta: acts as Command for MacOS and Control for others\nctrl: acts as Control\nshift: acts as Shift and is only necessary for alphabetic keys\n\nExamples of keys:\n\nescape: will trigger by hitting Esc\nmeta_k: will trigger by hitting ⌘ and K at the same time on MacOS, and Ctrl and K on Windows and Linux\nctrl_k: will trigger by hitting Ctrl and K at the same time on MacOS, Windows and Linux\nshift_e: will trigger by hitting Shift and E at the same time on MacOS, Windows and Linux\n?: will trigger by hitting ? on some keyboard layouts, or for example Shift and /, which results in ? on US Mac keyboards\ng-d: will trigger by hitting g then d with a maximum delay of 800ms by default\narrowleft: will trigger by hitting ← (also: arrowright, arrowup, arrowdown)\nFor a complete list of available shortcut keys, refer to the KeyboardEvent API docs. Note the KeyboardEvent.key has to be written in lowercase.\nusingInput\n\nProp: usingInput?: string | boolean\n\nBy default, usingInput is false, meaning it will only trigger when no input is focused. When set to true, the shortcut will also trigger when any input is focused.\n\nFor a more advanced behavior, usingInput can be set to the name of an input, so it only triggers when focusing this specific input.\n\n<template>\n\n  <UInput v-model=\"query\" name=\"queryInput\" />\n\n</template>\n\n\n\n<script setup lang=\"ts\">\n\nconst query = ref('')\n\n\n\ndefineShortcuts({\n\n  enter: {\n\n    usingInput: 'queryInput',\n\n    handler: () => {\n\n      // TODO\n\n    }\n\n  }\n\n})\n\n</script>\n\n\nenter shortcut will only trigger when queryInput is focused.\n\nwhenever\n\nProp: whenever?: WatchSource<boolean>[]\n\nwhenever allows to add constraints on the shortcut triggering behavior. This array can contain Ref<boolean>, ComputedRef<boolean> or () => boolean.\n\ndefineShortcuts({\n\n  meta_k: {\n\n    usingInput: true,\n\n    handler: () => { isOpen.value = !isOpen.value }\n\n  },\n\n  escape: {\n\n    usingInput: true,\n\n    whenever: [isOpen],\n\n    handler: () => { isOpen.value = false }\n\n  }\n\n})\n\n\nescape shortcut will only trigger when isOpen is true.\n\nSimple shortcut\n\nIn case the shortcut does not need any config, it can be written as a function.\n\ndefineShortcuts({\n\n  '?': () => openHelpModal()\n\n})\n\nuseShortcuts\n\nTo display shortcuts in your app according to the user's OS, you can use the useShortcuts composable.\n\n<script setup>\n\nconst { metaSymbol } = useShortcuts()\n\n</script>\n\n\n\n<template>\n\n  <UKbd>{{ metaSymbol }}</UKbd>\n\n</template>\n\n\nmetaSymbol will display either ⌘ on MacOS or Ctrl on any other OS\n\nTheming\n\nLearn how to customize the look and feel of the components.\n\nExamples\n\nDiscover some real-life examples of components you can build."
  },
  {
    "title": "Theming - Nuxt UI",
    "url": "https://ui.nuxt.com/getting-started/theming",
    "html": "Getting Started\nTheming\n\nLearn how to customize the look and feel of the components.\n\nOverview\n\nThis module relies on Nuxt App Config file to customize the look and feel of the components at runtime with HMR (hot-module-replacement).\n\nColors\nConfiguration\n\nComponents are based on a primary and a gray color. You can change them in your app.config.ts.\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    primary: 'green',\n\n    gray: 'cool'\n\n  }\n\n})\n\nTry to change the primary and gray colors by clicking on the  button in the header.\n\nAs this module uses Tailwind CSS under the hood, you can use any of the Tailwind CSS colors or your own custom colors. By default, the primary color is green and the gray color is cool.\n\nWhen using custom colors or adding additional colors through the extend key in your tailwind.config.ts, you'll need to make sure to define all the shades from 50 to 950 as most of them are used in the components config defined in ui.config.ts. You can generate your colors using tools such as https://uicolors.app/ for example.\n\ntailwind.config.ts\nimport type { Config } from 'tailwindcss'\n\nimport defaultTheme from 'tailwindcss/defaultTheme'\n\n\n\nexport default <Partial<Config>>{\n\n  theme: {\n\n    extend: {\n\n      colors: {\n\n        green: {\n\n          50: '#EFFDF5',\n\n          100: '#D9FBE8',\n\n          200: '#B3F5D1',\n\n          300: '#75EDAE',\n\n          400: '#00DC82',\n\n          500: '#00C16A',\n\n          600: '#00A155',\n\n          700: '#007F45',\n\n          800: '#016538',\n\n          900: '#0A5331',\n\n          950: '#052e16'\n\n        }\n\n      }\n\n    }\n\n  }\n\n}\n\nCSS Variables\n\nTo provide dynamic colors that can be changed at runtime, this module uses CSS variables. As Tailwind CSS already has a gray color, the module automatically renames it to cool to avoid conflicts (coolGray was renamed to gray when Tailwind CSS v3.0 was released).\n\nLikewise, you can't define a primary color in your tailwind.config.ts as it would conflict with the primary color defined by the module.\n\nWe'd advise you to use those colors in your components and pages, e.g. text-primary-500 dark:text-primary-400, bg-gray-100 dark:bg-gray-900, etc. so your app automatically adapts when changing your app.config.ts.\n\nThe primary color also has a DEFAULT shade that changes based on the theme. It is 500 in light mode and 400 in dark mode. You can use as a shortcut in your components and pages, e.g. text-primary, bg-primary, focus-visible:ring-primary, etc.\n\nSmart Safelisting\n\nComponents having a color prop like Avatar, Badge, Button, Input (inherited in Select and SelectMenu), RadioGroup, Checkbox, Toggle, Range and Notification will use the primary color by default but will handle all the colors defined in your tailwind.config.ts or the default Tailwind CSS colors.\n\nVariant classes of those components are defined with a syntax like bg-{color}-500 dark:bg-{color}-400 so they can be used with any color. However, this means that Tailwind will not find those classes and therefore will not generate the corresponding CSS.\n\nThe module uses the Tailwind CSS safelist feature to force the generation of all the classes for the primary color only as it is the default color for all the components.\n\nThen, the module will automatically detect when you use one of those components with a color and will safelist it for you. This means that if you use a red color for a Button component, the red color classes will be safelisted for the Button component only. This will allow to keep the CSS bundle size as small as possible.\n\nThere is one case where you would want to force the safelisting of a color. For example, if you've set the default color of the Button component to orange in your app.config.ts.\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    button: {\n\n      default: {\n\n        color: 'orange'\n\n      }\n\n    }\n\n  }\n\n})\n\n\nThis will apply the orange color when using a default <UButton />. You'll need to safelist this color manually in your nuxt.config.ts ui options as we won't be able to detect it automatically. You can do so through the safelistColors option which defaults to ['primary'].\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  ui: {\n\n    safelistColors: ['orange']\n\n  }\n\n})\n\n\nThis can also happen when you bind a dynamic color to a component: <UBadge :color=\"color\" />, <UAvatar :chip-color=\"statuses[user.status]\" />, etc. In this case, you'll need to safelist the possible color values manually as well.\n\nComponents\napp.config.ts\n\nComponents are styled with Tailwind CSS but classes are all defined in the default ui.config.ts file. You can override those in your own app.config.ts.\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    container: {\n\n      constrained: 'max-w-5xl'\n\n    }\n\n  }\n\n})\n\n\nThanks to tailwind-merge, the app.config.ts is smartly merged with the default config. This means you don't have to rewrite everything.\n\nYou can change this behaviour by setting strategy to override in your app.config.ts:\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    strategy: 'override',\n\n    button: {\n\n      color: {\n\n        white: {\n\n          solid: 'bg-white dark:bg-gray-900'\n\n        }\n\n      }\n\n    }\n\n  }\n\n})\n\nui prop\n\nEach component has a ui prop that allows you to customize everything specifically.\n\n<template>\n\n  <UContainer :ui=\"{ constrained: 'max-w-2xl' }\">\n\n    <slot />\n\n  </UContainer>\n\n</template>\n\nYou can find the default classes for each component under the Config section.\n\nThanks to tailwind-merge, the ui prop is smartly merged with the config. This means you don't have to rewrite everything.\n\nFor example, the default preset of the FormGroup component looks like this:\n\n{\n\n  \"label\": {\n\n    \"base\": \"block font-medium text-gray-700 dark:text-gray-200\"\n\n  }\n\n}\n\n\nTo change the font of the label, you only need to write:\n\n<UFormGroup name=\"email\" label=\"Email\" :ui=\"{ label: { base: 'font-semibold' } }\" />\n\n\nThis will smartly replace the font-medium by font-semibold and prevent any class duplication and any class priority issue.\n\nYou can change this behaviour by setting strategy to override inside the ui prop:\n\n<UButton\n\n  to=\"https://github.com/nuxt/ui\"\n\n  :ui=\"{\n\n    strategy: 'override',\n\n    color: {\n\n      white: {\n\n        solid: 'bg-white dark:bg-gray-900'\n\n      }\n\n    }\n\n  }\"\n\n/>\n\nclass attribute\n\nYou can also use the class attribute to add classes to the component.\n\n<template>\n\n  <UButton label=\"Button\" class=\"rounded-full\" />\n\n</template>\n\n\nAgain, with tailwind-merge, this will smartly merge the classes with the ui prop and the config.\n\nDefault values\n\nSome component props like size, color, variant, etc. have a default value that you can override in your app.config.ts.\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    button: {\n\n      default: {\n\n        size: 'md',\n\n        color: 'gray',\n\n        variant: 'ghost'\n\n      }\n\n    }\n\n  }\n\n})\n\nDark mode\n\nAll the components are styled with dark mode in mind.\n\nThanks to Tailwind CSS dark mode class strategy and the @nuxtjs/color-mode module, you literally have nothing to do.\n\nLearn how to build a color mode button in the Examples page.\n\nYou can disable dark mode by setting the preference to light instead of system in your nuxt.config.ts.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  colorMode: {\n\n    preference: 'light'\n\n  }\n\n})\n\nIf you're stuck in dark mode even after changing this setting, you might need to remove the nuxt-color-mode entry from your browser's local storage.\nIcons\n\nYou can use any icon (100,000+) from Iconify.\n\nSome components have an icon prop that allows you to add an icon to the component.\n\n<template>\n\n  <UButton icon=\"i-heroicons-magnifying-glass\" />\n\n</template>\n\n\nYou can also use the Icon component to add an icon anywhere in your app by following this pattern: i-{collection_name}-{icon_name}.\n\n<template>\n\n  <UIcon name=\"i-heroicons-moon\" />\n\n</template>\n\nCollections\n\nBy default, the module uses Heroicons but you can change it from the module options in your nuxt.config.ts.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  ui: {\n\n    icons: ['mdi', 'simple-icons']\n\n  }\n\n})\n\nSearch the icon you want to use on https://icones.js.org built by @antfu.\n\nUnlike the official nuxt-icon module, this module will not fetch any icon from the web and will only bundle the icons you use in your app thanks to egoist/tailwindcss-icons.\n\nHowever, you will need to install either @iconify/json (full icon collections, 50MB) or the individual icon packages you want to use in your app.\n\nyarn\nnpm\npnpm\nyarn add @iconify-json/{collection_name}\n\n\nWhen using @iconify/json, you can specifiy icons: 'all' in your nuxt.config.ts to use any icon in your app.\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  ui: {\n\n    icons: 'all'\n\n  }\n\n})\n\nCustom config New\n\nIf you have specific needs, like using a custom icon collection, you can use the icons option in your nuxt.config.ts as an object to override the config of the egoist/tailwindcss-icons plugin.\n\nnuxt.config.ts\nimport { getIconCollections } from '@egoist/tailwindcss-icons'\n\n\n\nexport default defineNuxtConfig({\n\n  ui: {\n\n    icons: {\n\n      // might solve stretch bug on generate, see https://github.com/egoist/tailwindcss-icons/issues/23\n\n      extraProperties: {\n\n        '-webkit-mask-size': 'contain',\n\n        '-webkit-mask-position': 'center'\n\n      },\n\n      collections: {\n\n        foo: {\n\n          icons: {\n\n            'arrow-left': {\n\n              // svg body\n\n              body: '<path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"1.5\" d=\"M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18\" />',\n\n              // svg width and height, optional\n\n              width: 24,\n\n              height: 24\n\n            }\n\n          }\n\n        },\n\n        ...getIconCollections(['heroicons', 'simple-icons'])\n\n      }\n\n    }\n\n  }\n\n})\n\n\nYou can easily replace all the default icons of the components in your app.config.ts.\n\napp.config.ts\nexport default defineAppConfig({\n\n  ui: {\n\n    button: {\n\n      default: {\n\n        loadingIcon: 'i-octicon-sync-24'\n\n      }\n\n    },\n\n    input: {\n\n      default: {\n\n        loadingIcon: 'i-octicon-sync-24'\n\n      }\n\n    },\n\n    select: {\n\n      default: {\n\n        loadingIcon: 'i-octicon-sync-24',\n\n        trailingIcon: 'i-octicon-chevron-down-24'\n\n      }\n\n    },\n\n    selectMenu: {\n\n      default: {\n\n        selectedIcon: 'i-octicon-check-24'\n\n      }\n\n    },\n\n    notification: {\n\n      default: {\n\n        closeButton: {\n\n          icon: 'i-octicon-x-24'\n\n        }\n\n      }\n\n    },\n\n    commandPalette: {\n\n      default: {\n\n        icon: 'i-octicon-search-24',\n\n        loadingIcon: 'i-octicon-sync-24',\n\n        selectedIcon: 'i-octicon-check-24',\n\n        emptyState: {\n\n          icon: 'i-octicon-search-24'\n\n        }\n\n      }\n\n    },\n\n    table: {\n\n      default: {\n\n        sortAscIcon: 'i-octicon-sort-asc-24',\n\n        sortDescIcon: 'i-octicon-sort-desc-24',\n\n        sortButton: {\n\n          icon: 'i-octicon-arrow-switch-24'\n\n        },\n\n        loadingState: {\n\n          icon: 'i-octicon-sync-24'\n\n        },\n\n        emptyState: {\n\n          icon: 'i-octicon-database-24'\n\n        }\n\n      }\n\n    },\n\n    pagination: {\n\n      default: {\n\n        firstButton: {\n\n          icon: 'i-octicon-chevron-left-24'\n\n        },\n\n        prevButton: {\n\n          icon: 'i-octicon-arrow-left-24'\n\n        },\n\n        nextButton: {\n\n          icon: 'i-octicon-arrow-right-24'\n\n        },\n\n        lastButton: {\n\n          icon: 'i-octicon-chevron-right-24'\n\n        }\n\n      }\n\n    },\n\n    accordion: {\n\n      default: {\n\n        openIcon: 'i-octicon-chevron-down-24'\n\n      }\n\n    },\n\n    breadcrumb: {\n\n      default: {\n\n        divider: 'i-octicon-chevron-right-24'\n\n      }\n\n    }\n\n  }\n\n})\n\n\nInstallation\n\nLearn how to install and configure the module in your Nuxt app.\n\nShortcuts\n\nLearn how to display and define keyboard shortcuts in your app."
  },
  {
    "title": "Installation - Nuxt UI",
    "url": "https://ui.nuxt.com/getting-started/installation",
    "html": "Getting Started\nInstallation\n\nLearn how to install and configure the module in your Nuxt app.\n\nQuick Start\nInstall @nuxt/ui dependency to your project:\npnpm\nyarn\nnpm\npnpm add @nuxt/ui\n\nAdd it to your modules section in your nuxt.config:\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  modules: ['@nuxt/ui']\n\n})\n\n\nThat's it! You can now use all the components and composables in your Nuxt app ✨\n\nAs this module installs @nuxtjs/tailwindcss and @nuxtjs/color-mode for you, you should remove them from your modules and dependencies if you've previously installed them manually.\nIntelliSense\n\nIf you're using VSCode, you can install the Tailwind CSS IntelliSense extension to get autocompletion for the classes.\n\nYou can read more on how to set it up on the @nuxtjs/tailwindcss module documentation, but to summarize, you'll need to add the following to your .vscode/settings.json:\n\n.vscode/settings.json\n{\n\n  \"files.associations\": {\n\n      \"*.css\": \"tailwindcss\"\n\n  },\n\n  \"editor.quickSuggestions\": {\n\n      \"strings\": true\n\n  }\n\n}\n\n\nYou can write your tailwind.config in TypeScript as such:\n\ntailwind.config.ts\nimport type { Config } from 'tailwindcss'\n\n\n\nexport default <Partial<Config>> {\n\n  content: [\n\n    'docs/content/**/*.md'\n\n  ]\n\n}\n\n\nIf you do so, you'll need to add the following to your .vscode/settings.json:\n\n.vscode/settings.json\n{\n\n  \"tailwindCSS.experimental.configFile\": \"tailwind.config.ts\"\n\n}\n\n\nNote, the extension won't work when writing classes in your app.config.ts by default.\n\nAlso, you might want IntelliSense on objects in your SFC by prefixing with /*ui*/.\n\nTo enable these two features, you can add the following to your .vscode/settings.json:\n\n.vscode/settings.json\n{\n\n  \"tailwindCSS.experimental.classRegex\": [\n\n    [\"ui:\\\\s*{([^)]*)\\\\s*}\", \"[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"],\n\n    [\"/\\\\*ui\\\\*/\\\\s*{([^;]*)}\", \":\\\\s*[\\\"'`]([^\\\"'`]*).*?[\\\"'`]\"]\n\n  ]\n\n}\n\n\nAn example SFC using IntelliSense (note the /*ui*/ prefix, also works with ref()):\n\nexample.vue\n<template>\n\n  <UCard :ui=\"ui\" />\n\n</template>\n\n\n\n<script setup>\n\nconst ui = /*ui*/ {\n\n  background: 'bg-white dark:bg-slate-900'\n\n}\n\n</script>\n\n\nYou can also add the following to your .vscode/settings.json to enable IntelliSense when using the ui prop:\n\n.vscode/settings.json\n{\n\n  \"tailwindCSS.classAttributes\": [\n\n    \"class\",\n\n    \"className\",\n\n    \"ngClass\",\n\n    \"ui\"\n\n  ]\n\n}\n\nOptions\nKey\tDefault\tDescription\nprefix\tu\tDefine the prefix of the imported components.\nglobal\tfalse\tExpose components globally.\nicons\t['heroicons']\tIcon collections to load.\nsafelistColors\t['primary']\tForce safelisting of colors to need be purged.\n\nConfigure options in your nuxt.config.ts as such:\n\nnuxt.config.ts\nexport default defineNuxtConfig({\n\n  modules: ['@nuxt/ui'],\n\n  ui: {\n\n    global: true,\n\n    icons: ['mdi', 'simple-icons']\n\n  }\n\n})\n\nEdge\n\nTo use the latest updates pushed on the dev branch, you can use @nuxt/ui-edge.\n\nUpdate your package.json to the following:\n\npackage.json\n{\n\n  \"devDependencies\": {\n\n    \"@nuxt/ui\": \"npm:@nuxt/ui-edge@latest\"\n\n  }\n\n}\n\npackage.json\n{\n\n  \"devDependencies\": {\n\n-   \"@nuxt/ui\": \"^2.9.0\"\n\n+   \"@nuxt/ui\": \"npm:@nuxt/ui-edge@latest\"\n\n  }\n\n}\n\n\nThen run pnpm install, yarn install or npm install.\n\nIntroduction\n\nFully styled and customizable components for Nuxt.\n\nTheming\n\nLearn how to customize the look and feel of the components."
  },
  {
    "title": "Introduction - Nuxt UI",
    "url": "https://ui.nuxt.com/getting-started",
    "html": "Getting Started\nIntroduction\n\nFully styled and customizable components for Nuxt.\n\nThis module has been developed by the NuxtLabs team for Volta and Nuxt Studio, its goal is to provide everything related to UI when building a Nuxt app. This includes components, icons, colors, dark mode but also keyboard shortcuts.\n\nVolta entire UI is built with this module alongside the 50+ keyboard shortcuts defined.\nFeatures\nBuilt with Headless UI and Tailwind CSS\nHMR support through Nuxt App Config\nDark mode support\nSupport for LTR and RTL languages\nKeyboard shortcuts\nBundled icons\nFully typed\nFigma Kit\nCredits\nnuxt/nuxt\nnuxt-modules/color-mode\nnuxt-modules/tailwindcss\ntailwindlabs/tailwindcss\ntailwindlabs/headlessui\nvueuse/vueuse\negoist/tailwindcss-icons\n \n\nInstallation\n\nLearn how to install and configure the module in your Nuxt app."
  }
]