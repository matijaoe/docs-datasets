[
  {
    "title": "Navigation Menu | Radix Vue",
    "url": "https://www.radix-vue.com/components/navigation-menu#VPContent",
    "html": "Navigation Menu\n​\nA collection of links for navigating websites.\nLearn\nOverview\nGithub\nindex.vue\nNavigationMenuListItem.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\nimport NavigationMenuListItem from './NavigationMenuListItem.vue'\n\nconst currentTrigger = ref('')\n</script>\n\n<template>\n  <NavigationMenuRoot v-model=\"currentTrigger\" class=\"relative z-[1] flex w-full justify-center\">\n    <NavigationMenuList class=\"center shadow-blackA7 m-0 flex list-none rounded-[6px] bg-white p-1 shadow-[0_2px_10px]\">\n      <NavigationMenuItem>\n        <NavigationMenuTrigger\n          class=\"text-grass11 hover:bg-green3 focus:shadow-green7 group flex select-none items-center justify-between gap-[2px] rounded-[4px] px-3 py-2 text-[15px] font-medium leading-none outline-none focus:shadow-[0_0_0_2px]\"\n        >\n          Learn\n          <Icon\n            icon=\"radix-icons:caret-down\"\n            class=\"text-green10 relative top-[1px] transition-transform duration-[250] ease-in group-data-[state=open]:-rotate-180\"\n            aria-hidden\n          />\n        </NavigationMenuTrigger>\n        <NavigationMenuContent\n          class=\"data-[motion=from-start]:animate-enterFromLeft data-[motion=from-end]:animate-enterFromRight data-[motion=to-start]:animate-exitToLeft data-[motion=to-end]:animate-exitToRight absolute top-0 left-0 w-full sm:w-auto\"\n        >\n          <ul class=\"one m-0 grid list-none gap-x-[10px] p-[22px] sm:w-[500px] sm:grid-cols-[0.75fr_1fr]\">\n            <li class=\"row-span-3 grid\">\n              <NavigationMenuLink as-child>\n                <a\n                  class=\"focus:shadow-green7 from-green9 to-teal9 flex h-full w-full select-none flex-col justify-end rounded-[6px] bg-gradient-to-b p-[25px] no-underline outline-none focus:shadow-[0_0_0_2px]\"\n                  href=\"/\"\n                >\n                  <img class=\"w-16\" src=\"https://www.radix-vue.com/logo.svg\">\n                  <div class=\"mt-4 mb-[7px] text-[18px] font-medium leading-[1.2] text-white\">Radix Primitives</div>\n                  <p class=\"text-mauve4 text-[14px] leading-[1.3]\">Unstyled, accessible components for Vue.</p>\n                </a>\n              </NavigationMenuLink>\n            </li>\n\n            <NavigationMenuListItem href=\"https://stitches.dev/\" title=\"Stitches\">\n              CSS-in-JS with best-in-class developer experience.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem href=\"/colors\" title=\"Colors\">\n              Beautiful, thought-out palettes with auto dark mode.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem href=\"https://icons.radix-ui.com/\" title=\"Icons\">\n              A crisp set of 15x15 icons, balanced and consistent.\n            </NavigationMenuListItem>\n          </ul>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuTrigger\n          class=\"text-grass11 hover:bg-green3 focus:shadow-green7 group flex select-none items-center justify-between gap-[2px] rounded-[4px] px-3 py-2 text-[15px] font-medium leading-none outline-none focus:shadow-[0_0_0_2px]\"\n        >\n          Overview\n          <Icon\n            icon=\"radix-icons:caret-down\"\n            class=\"text-green10 relative top-[1px] transition-transform duration-[250] ease-in group-data-[state=open]:-rotate-180\"\n            aria-hidden\n          />\n        </NavigationMenuTrigger>\n        <NavigationMenuContent class=\"data-[motion=from-start]:animate-enterFromLeft data-[motion=from-end]:animate-enterFromRight data-[motion=to-start]:animate-exitToLeft data-[motion=to-end]:animate-exitToRight absolute top-0 left-0 w-full sm:w-auto\">\n          <ul class=\"m-0 grid list-none gap-x-[10px] p-[22px] sm:w-[600px] sm:grid-flow-col sm:grid-rows-3\">\n            <NavigationMenuListItem title=\"Introduction\" href=\"/docs/primitives/overview/introduction\">\n              Build high-quality, accessible design systems and web apps.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Getting started\" href=\"/docs/primitives/overview/getting-started\">\n              A quick tutorial to get you up and running with Radix Primitives.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Styling\" href=\"/docs/primitives/guides/styling\">\n              Unstyled and compatible with any styling solution.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Animation\" href=\"/docs/primitives/guides/animation\">\n              Use CSS keyframes or any animation library of your choice.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Accessibility\" href=\"/docs/primitives/overview/accessibility\">\n              Tested in a range of browsers and assistive technologies.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Releases\" href=\"/docs/primitives/overview/releases\">\n              Radix Primitives releases and their changelogs.\n            </NavigationMenuListItem>\n          </ul>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuLink\n          class=\"text-grass11 hover:bg-green3 focus:shadow-green7 block select-none rounded-[4px] px-3 py-2 text-[15px] font-medium leading-none no-underline outline-none focus:shadow-[0_0_0_2px]\"\n          href=\"https://github.com/radix-vue\"\n        >\n          Github\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator\n        class=\"data-[state=hidden]:opacity-0 duration-200 data-[state=visible]:animate-fadeIn data-[state=hidden]:animate-fadeOut top-full z-[1] flex h-[10px] items-end justify-center overflow-hidden transition-[all,transform_250ms_ease]\"\n      >\n        <div class=\"relative top-[70%] h-[10px] w-[10px] rotate-[45deg] rounded-tl-[2px] bg-white\" />\n      </NavigationMenuIndicator>\n    </NavigationMenuList>\n\n    <div class=\"perspective-[2000px] absolute top-full left-0 flex w-full justify-center\">\n      <NavigationMenuViewport\n        class=\"data-[state=open]:animate-scaleIn data-[state=closed]:animate-scaleOut relative mt-[10px] h-[var(--radix-navigation-menu-viewport-height)] w-full origin-[top_center] overflow-hidden rounded-[10px] bg-white transition-[width,_height] duration-300 sm:w-[var(--radix-navigation-menu-viewport-width)]\"\n      />\n    </div>\n  </NavigationMenuRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nFlexible layout structure with managed tab focus.\nSupports submenus.\nOptional active item indicator.\nFull keyboard navigation.\nExposes CSS variables for advanced animation.\nSupports custom timings.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger />\n        <NavigationMenuContent>\n          <NavigationMenuLink />\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuLink />\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuTrigger />\n        <NavigationMenuContent>\n          <NavigationMenuSub>\n            <NavigationMenuList />\n            <NavigationMenuViewport />\n          </NavigationMenuSub>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator />\n    </NavigationMenuList>\n\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a navigation menu.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nstring\n\t\n\n\ndefaultValue\n\t\nstring\n\t\n\n\ndelayDuration\n\t\nnumber\n\t\n200\n\n\nskipDelayDuration\n\t\nnumber\n\t\n300\n\n\ndir\n\t\nenum\n\t\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\nEmit\tType\n\n@update:modelValue\n\t(payload: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nSub\n​\n\nSignifies a submenu. Use it in place of the root part when nested to create a submenu.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nstring\n\t\n\n\ndefaultValue\n\t\nstring\n\t\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\nEmit\tType\n\n@update:modelValue\n\t(payload: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nList\n​\n\nContains the top level menu items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nul\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nItem\n​\n\nA top level menu item, contains a link or trigger with content combination.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nli\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue\n\t\nstring\n\t\nTrigger\n​\n\nThe button that toggles the content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nContent\n​\n\nContains the content associated with each trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisableOutsidePointerEvents\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@escapeKeyDown\n\tfunction\n\n\n@pointerDownOutside\n\tfunction\n\n\n@focusOutside\n\tfunction\n\n\n@interactOutside\n\tfunction\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-motion]\t\"to-start\" | \"to-end\" | \"from-start\" | \"from-end\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nLink\n​\n\nA navigational link.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\na\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nactive\n\t\nboolean\n\t\nfalse\n\n\nonSelect\n\t\nfunction\n\t\nData Attribute\tValue\n[data-active]\tPresent when active\nIndicator\n​\n\nAn optional indicator element that renders below the list, is used to highlight the currently active trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nViewport\n​\n\nAn optional viewport element that is used to render active content outside of the list.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-navigation-menu-viewport-width\t\nThe width of the viewport when visible/hidden, computed from the active content\n\n--radix-navigation-menu-viewport-height\t\nThe height of the viewport when visible/hidden, computed from the active content\nExamples\n​\nVertical\n​\n\nYou can create a vertical menu by using the orientation prop.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot orientation=\"vertical\">\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item Two content</NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\nFlexible layouts\n​\n\nUse the Viewport part when you need extra control over where Content is rendered. This can be helpful when your design requires an adjusted DOM structure or if you need flexibility to achieve advanced animation. Tab focus will be maintained automatically.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item two content</NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n\n    <!-- NavigationMenuContent will be rendered here when active  -->\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\nWith indicator\n​\n\nYou can use the optional Indicator part to highlight the currently active Trigger, this is useful when you want to provide an animated visual cue such as an arrow or highlight to accompany the Viewport.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item two content</NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator class=\"NavigationMenuIndicator\" />\n    </NavigationMenuList>\n\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\ncss\n/* styles.css */\n.NavigationMenuIndicator {\n  background-color: grey;\n}\n.NavigationMenuIndicator[data-orientation=\"horizontal\"] {\n  height: 3px;\n  transition: width, transform, 250ms ease;\n}\nWith submenus\n​\n\nCreate a submenu by nesting your NavigationMenu and using the Sub part in place of its Root. Submenus work differently to Root navigation menus and are similar to Tabs in that one item should always be active, so be sure to assign and set a defaultValue.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>\n          <NavigationMenuSub default-value=\"sub1\">\n            <NavigationMenuList>\n              <NavigationMenuItem value=\"sub1\">\n                <NavigationMenuTrigger>Sub item one</NavigationMenuTrigger>\n                <NavigationMenuContent> Sub item one content </NavigationMenuContent>\n              </NavigationMenuItem>\n              <NavigationMenuItem value=\"sub2\">\n                <NavigationMenuTrigger>Sub item two</NavigationMenuTrigger>\n                <NavigationMenuContent> Sub item two content </NavigationMenuContent>\n              </NavigationMenuItem>\n            </NavigationMenuList>\n          </NavigationMenuSub>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\nWith client side routing\n​\n\nIf you need to use the RouterLink component provided by your routing package then we recommend adding asChild=\"true\" to NavigationMenuLink, or setting as=\"RouterLink\". This will ensure accessibility and consistent keyboard control is maintained:\n\nvue\n<script setup lang=\"ts\">\nimport { NavigationMenuItem, NavigationMenuList, NavigationMenuRoot } from 'radix-vue'\n\n// RouterLink should be injected by default if using `vue-router`\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuLink as-child>\n          <RouterLink to=\"/\">\n            Home\n          </RouterLink>\n          <NavigationMenuLink />\n        </navigationmenulink>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuLink :as=\"RouterLink\" to=\"/about\">\n          About\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\nAdvanced animation\n​\n\nWe expose --radix-navigation-menu-viewport-[width|height] and data-motion['from-start'|'to-start'|'from-end'|'to-end'] attributes to allow you to animate Viewport size and Content position based on the enter/exit direction.\n\nCombining these with position: absolute; allows you to create smooth overlapping animation effects when moving between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent class=\"NavigationMenuContent\">\n          Item one content\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent class=\"NavigationMenuContent\">\n          Item two content\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n\n    <NavigationMenuViewport class=\"NavigationMenuViewport\" />\n  </NavigationMenuRoot>\n</template>\ncss\n/* styles.css */\n.NavigationMenuContent {\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation-duration: 250ms;\n  animation-timing-function: ease;\n}\n.NavigationMenuContent[data-motion=\"from-start\"] {\n  animation-name: enterFromLeft;\n}\n.NavigationMenuContent[data-motion=\"from-end\"] {\n  animation-name: enterFromRight;\n}\n.NavigationMenuContent[data-motion=\"to-start\"] {\n  animation-name: exitToLeft;\n}\n.NavigationMenuContent[data-motion=\"to-end\"] {\n  animation-name: exitToRight;\n}\n\n.NavigationMenuViewport {\n  position: relative;\n  width: var(--radix-navigation-menu-viewport-width);\n  height: var(--radix-navigation-menu-viewport-height);\n  transition: width, height, 250ms ease;\n}\n\n@keyframes enterFromRight {\n  from {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes enterFromLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes exitToRight {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n}\n\n@keyframes exitToLeft {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n}\nAccessibility\n​\n\nAdheres to the navigation role requirements.\n\nDifferences to menubar\n​\n\nNavigationMenu should not be confused with menubar, although this primitive shares the name menu in the colloquial sense to refer to a set of navigation links, it does not use the WAI-ARIA menu role. This is because menu and menubars behave like native operating system menus most commonly found in desktop application windows, as such they feature complex functionality like composite focus management and first-character navigation.\n\nThese features are often considered unnecessary for website navigation and at worst can confuse users who are familiar with established website patterns.\n\nSee the W3C Disclosure Navigation Menu example for more information.\n\nLink usage and aria-current\n​\n\nIt's important to use NavigationMenuLink for all navigational links within a menu, this not only applies to the main list but also within any content rendered via NavigationMenuContent. This will ensure consistent keyboard interactions and accessibility while also giving access to the active prop for setting aria-current and the active styles. See this example for more information on usage with third party routing components.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\nEnter\n\t\nWhen focus is on NavigationMenuTrigger, opens the content.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nArrowDown\n\t\nWhen horizontal and focus is on an open NavigationMenuTrigger, moves focus into NavigationMenuContent.\nMoves focus to the next NavigationMenuTrigger or NavigationMenuLink.\n\n\nArrowUp\n\t\nMoves focus to the previous NavigationMenuTrigger or NavigationMenuLink.\n\n\nArrowRight\nArrowLeft\n\t\nWhen vertical and focus is on an open NavigationMenuTrigger, moves focus into its NavigationMenuContent.\nMoves focus to the next / previous NavigationMenuTrigger or NavigationMenuLink.\n\n\nHome\nEnd\n\t\nMoves focus to the first/last NavigationMenu.Trigger or NavigationMenu.Link.\n\n\nEsc\n\t\nCloses open NavigationMenu.Content and moves focus to its NavigationMenu.Trigger."
  },
  {
    "title": "Toggle | Radix Vue",
    "url": "https://www.radix-vue.com/components/toggle#VPContent",
    "html": "Toggle\n​\nA two-state button that can be either on or off.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Toggle } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\n\nconst toggleState = ref(false)\n</script>\n\n<template>\n  <Toggle\n    v-model:pressed=\"toggleState\" aria-label=\"Toggle italic\"\n    class=\"hover:bg-green3 text-mauve11 data-[state=on]:bg-green6 data-[state=on]:text-violet12 shadow-blackA7 flex h-[35px] w-[35px] items-center justify-center rounded bg-white text-base leading-4 shadow-[0_2px_10px] focus-within:shadow-[0_0_0_2px] focus-within:shadow-black\"\n  >\n    <Icon icon=\"radix-icons:font-italic\" class=\"w-[15px] h-[15px]\" />\n  </Toggle>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { Toggle } from 'radix-vue'\n</script>\n\n<template>\n  <Toggle />\n</template>\nAPI Reference\n​\nRoot\n​\n\nThe toggle.\n\nProp\tType\tDefault\n\ndefaultPressed\n\t\nboolean\n\t\n\n\npressed\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:pressed\n\t(value: string) => void\nData Attribute\tValue\n[data-state]\t\"on\" | \"off\"\n[data-disabled]\tPresent when disabled\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nActivates/deactivates the toggle.\n\n\nEnter\n\t\nActivates/deactivates the toggle."
  },
  {
    "title": "Toggle | Radix Vue",
    "url": "https://www.radix-vue.com/components/toggle",
    "html": "Toggle\n​\nA two-state button that can be either on or off.\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { Toggle } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\n\nconst toggleState = ref(false)\n</script>\n\n<template>\n  <Toggle\n    v-model:pressed=\"toggleState\" aria-label=\"Toggle italic\"\n    class=\"hover:bg-green3 text-mauve11 data-[state=on]:bg-green6 data-[state=on]:text-violet12 shadow-blackA7 flex h-[35px] w-[35px] items-center justify-center rounded bg-white text-base leading-4 shadow-[0_2px_10px] focus-within:shadow-[0_0_0_2px] focus-within:shadow-black\"\n  >\n    <Icon icon=\"radix-icons:font-italic\" class=\"w-[15px] h-[15px]\" />\n  </Toggle>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { Toggle } from 'radix-vue'\n</script>\n\n<template>\n  <Toggle />\n</template>\nAPI Reference\n​\nRoot\n​\n\nThe toggle.\n\nProp\tType\tDefault\n\ndefaultPressed\n\t\nboolean\n\t\n\n\npressed\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:pressed\n\t(value: string) => void\nData Attribute\tValue\n[data-state]\t\"on\" | \"off\"\n[data-disabled]\tPresent when disabled\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nActivates/deactivates the toggle.\n\n\nEnter\n\t\nActivates/deactivates the toggle."
  },
  {
    "title": "useForwardPropsEmits | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-forward-props-emits#VPContent",
    "html": "useForwardPropsEmits\n​\nCombinations for useForwardProps & useEmitAsProps\n\nThis composable is just a wrapper for useForwardProps & useEmitAsProps composables. Doing so it returns only 1 object that is designed to be use with v-bind directly.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { useForwardPropsEmits } from 'radix-vue'\n\nconst emits = defineProps<CompEmitEmits>()\nconst props = defineEmits<CompEmitProps>()\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <Comp v-bind=\"forwarded\">\n    ...\n  </Comp>\n</template>"
  },
  {
    "title": "useForwardProps | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-forward-props#VPContent",
    "html": "useForwardProps\n​\nForward component's props without boolean casting\n\nWhen you are building a wrapper for a component, in some cases you want to ignore Vue Props Boolean Casting.\n\nYou can either set default value as undefined for all the boolean field, or you can use this composable.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { useForwardProps } from 'radix-vue'\n\nconst props = defineProps<CompEmitProps>()\nconst forwarded = useForwardProps(props)\n</script>\n\n<template>\n  <Comp v-bind=\"forwarded\">\n    ...\n  </Comp>\n</template>"
  },
  {
    "title": "useId | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-id#VPContent",
    "html": "useId\n​\nGenerate random id\nUsage\n​\nts\nimport { useId } from 'radix-vue'\n\nconst buttonId = useId() // radix-1\nts\nimport { useId } from 'radix-vue'\n\nconst buttonId = useId('test-id') // test-id"
  },
  {
    "title": "useEmitAsProps | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-emit-as-props#VPContent",
    "html": "useEmitAsProps\n​\nConvert emits into object similar to props\n\nWhen you are building a wrapper for a component, one of the biggest painpoint is to forward all the emitted events from components.\n\nBy using this composables, it will convert the emits you've declared into an object of handlers that is acceptable by Vue component.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { useEmitAsProps } from 'radix-vue'\n\nconst emits = defineEmits<CompEmitType>()\nconst emitsAsProps = useEmitAsProps(emits)\n</script>\n\n<template>\n  <Comp v-bind=\"emitsAsProps\">\n    ...\n  </Comp>\n</template>"
  },
  {
    "title": "Tooltip | Radix Vue",
    "url": "https://www.radix-vue.com/components/tooltip#VPContent",
    "html": "Tooltip\n​\nA popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { TooltipArrow, TooltipContent, TooltipPortal, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n</script>\n\n<template>\n  <TooltipProvider>\n    <TooltipRoot>\n      <TooltipTrigger\n        class=\"text-grass11 shadow-blackA7 hover:bg-green3 inline-flex h-[35px] w-[35px] items-center justify-center rounded-full bg-white shadow-[0_2px_10px] outline-none focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      >\n        <Icon icon=\"radix-icons:plus\" />\n      </TooltipTrigger>\n      <TooltipPortal>\n        <TooltipContent\n          as-child\n          class=\"data-[state=delayed-open]:data-[side=top]:animate-slideDownAndFade data-[state=delayed-open]:data-[side=right]:animate-slideLeftAndFade data-[state=delayed-open]:data-[side=left]:animate-slideRightAndFade data-[state=delayed-open]:data-[side=bottom]:animate-slideUpAndFade text-grass11 select-none rounded-[4px] bg-white px-[15px] py-[10px] text-[15px] leading-none shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] will-change-[transform,opacity]\"\n          :side-offset=\"5\"\n        >\n          <ul>\n            Add to library\n            <TooltipArrow class=\"fill-white\" size=\"8\" />\n          </ul>\n        </TooltipContent>\n      </TooltipPortal>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\nExpand code\nFeatures\n​\nProvider to control display delay globally.\nOpens when the trigger is focused or hovered.\nCloses when the trigger is activated or when pressing escape.\nSupports custom timings.\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport { TooltipArrow, TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipProvider>\n    <TooltipRoot>\n      <TooltipTrigger />\n      <Tooltip>\n        <TooltipContent>\n          <TooltipArrow />\n        </TooltipContent>\n      </Tooltip>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\nAPI Reference\n​\nProvider\n​\n\nWraps your app to provide global functionality to your tooltips.\n\nProp\tType\tDefault\n\ndelayDuration\n\t\nnumber\n\t\n700\n\n\nskipDelayDuration\n\t\nnumber\n\t\n300\n\n\ndisableHoverableContent\n\t\nboolean\n\t\n\n\ndisableClosingTrigger\n\t\nboolean\n\t\nRoot\n​\n\nContains all the parts of a tooltip.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\ndelayDuration\n\t\nnumber\n\t\n700\n\n\ndisableHoverableContent\n\t\nboolean\n\t\n\n\ndisableClosingTrigger\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\nTrigger\n​\n\nThe button that toggles the tooltip. By default, the TooltipContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"closed\" | \"delayed-open\" | \"instant-open\"\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the tooltip is open.\n\nProp\tType\tDefault\n\nariaLabel\n\t\nstring\n\t\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"top\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escape-key-down\n\t(event: KeyboardEvent) => void\n\n@pointer-down-outside\n\t(event: KeyboardEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-tooltip-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-tooltip-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-tooltip-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-tooltip-trigger-width\t\nThe width of the trigger\n\n--radix-tooltip-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the tooltip. This can be used to help visually link the trigger with the TooltipContent. Must be rendered inside TooltipContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nConfigure globally\n​\n\nUse the Provider to control delayDuration and skipDelayDuration globally.\n\nvue\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipProvider :delay-duration=\"800\" :skip-delay-duration=\"500\">\n    <TooltipRoot>\n      <TooltipTrigger>…</TooltipTrigger>\n      <TooltipContent>…</TooltipContent>\n    </TooltipRoot>\n    <TooltipRoot>\n      <TooltipTrigger>…</TooltipTrigger>\n      <TooltipContent>…</TooltipContent>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\nShow instantly\n​\n\nUse the delayDuration prop to control the time it takes for the tooltip to open.\n\nvue\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot :delay-duration=\"0\">\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent>…</TooltipContent>\n  </TooltipRoot>\n</template>\nDisplaying a tooltip from a disabled button\n​\n\nSince disabled buttons don't fire events, you need to:\n\nRender the Trigger as span.\nEnsure the button has no pointerEvents.\nvue\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger as-child>\n      <span tabindex=\"0\">\n        <button disabled style=\"{ pointerEvents: 'none' }\">…</button>\n      </span>\n    </TooltipTrigger>\n    <TooltipContent>…</TooltipContent>\n  </TooltipRoot>\n</template>\nConstrain the content size\n​\n\nYou may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-tooltip-trigger-width and --radix-tooltip-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n <!-- index.vue -->\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipPortal>\n      <TooltipContent class=\"TooltipContent\" :side-offset=\"5\">\n        …\n      </TooltipContent>\n    </TooltipPortal>\n  </TooltipRoot>\n</template>\ncss\n/* styles.css */\n.TooltipContent {\n  width: var(--radix-tooltip-trigger-width);\n  max-height: var(--radix-tooltip-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-tooltip-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n <!-- index.vue -->\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent class=\"TooltipContent\">\n      …\n    </TooltipContent>\n  </TooltipRoot>\n</template>\ncss\n/* styles.css */\n.TooltipContent {\n  transform-origin: var(--radix-tooltip-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n <!-- index.vue -->\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent class=\"TooltipContent\">\n      …\n    </TooltipContent>\n  </TooltipRoot>\n</template>\ncss\n/* styles.css */\n.TooltipContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.TooltipContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.TooltipContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nOpens/closes the tooltip without delay.\n\n\nSpace\n\t\nIf open, closes the tooltip without delay.\n\n\nEnter\n\t\nIf open, closes the tooltip without delay.\n\n\nEscape\n\t\nIf open, closes the tooltip without delay.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract parts and introduce a content prop\n​\n\nThis example abstracts all of the Tooltip parts and introduces a new content prop.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Tooltip } from './your-tooltip'\n</script>\n\n<template>\n  <Tooltip content=\"Tooltip content\">\n    <button>Tooltip trigger</button>\n  </Tooltip>\n</template>\nImplementation\n​\n\nUse the asChild prop to convert the trigger part into a slottable area. It will replace the trigger with the child that gets passed to it.\n\nvue\n<!-- your-tooltip.vue  -->\n<script setup lang=\"ts\">\nimport { TooltipArrow, TooltipContent, TooltipRoot, type TooltipRootEmits, type TooltipRootProps, TooltipTrigger, useForwardPropsEmits } from 'radix-vue'\n\nconst props = defineProps<TooltipRootProps & { content?: string }>()\nconst emits = defineEmits<TooltipRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <TooltipRoot v-bind=\"forward\">\n    <TooltipTrigger as-child>\n      <slot />\n    </TooltipTrigger>\n    <TooltipContent side=\"top\" align=\"center\">\n      {{ content }}\n      <TooltipArrow :width=\"11\" :height=\"5\" />\n    </TooltipContent>\n  </TooltipRoot>\n</template>"
  },
  {
    "title": "Slot | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/slot#VPContent",
    "html": "Slot\n​\nMerges its props onto its immediate child.\n\nQuestion\n\nHow is this component different from Vue native slot?\n\nA: The biggest different is how it handles the attributes assigned to it.\n\nNative slot treat any binded value as Scoped Slots, where the values will be exposed to the parent template and be consumed.\n\nBut Radix Vue's slot behave differently, it would merge all the assigned attributes onto it's immediate child.\n\nExample\n​\n\nSay we want to assign an id attribute to whatever component/element that was rendered, but Native slot will convert it into a scoped slot, and you will need to assign that id manually.\n\nvue\n<!-- Native Slot -->\n<!-- Comp.vue -->\n<template>\n  <slot id=\"radix-01\">\n    ...\n  </slot>\n</template>\n\n<!-- parent template -->\n<template>\n  <Comp v-slot=\"slotProps\">\n    <button :id=\"slotProps.id\">...<button>\n  <Comp>\n<template>\n\n(You can check out Vue SFC Playground and see that the id wasn't being inheritted.)\n\nThis would be troublesome if you want to ensure some attributes are being passed onto certain element, maybe for accessibility reason.\n\nAlternatively, If you use Slot from Radix Vue, the attributes assigned to the Slot component will be inheritted by the immediate child element, but you will no longer have access to the Scoped Slot,\n\nvue\n<!-- Radix Vue Slot -->\n<script setup lang=\"ts\">\nimport { Slot } from 'radix-vue'\n</script>\n\n<!-- Comp.vue -->\n<template>\n  <Slot id=\"radix-01\">\n    ...\n  </Slot>\n</template>\n\n<!-- parent template -->\n<template>\n  <Comp>\n    <!-- id will be inherrited -->\n    <button>...<button>\n  <Comp>\n<template>"
  },
  {
    "title": "Primitive | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/primitive#VPContent",
    "html": "Primitive\n​\nCompose Radix's functionality onto alternative element types or your own Vue components.\n\nWhen you are building a component, in some cases you might want to allow user to compose some functionalities onto the underlying element, or alternative element. This is where Primitive comes in handy as it expose this capability to the user.\n\nAPI Reference\n​\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nUsage\n​\nChanging as value\n​\n\nIf you want to change the default element or component being render, you can set the default as when defining the props.\n\nvue\n<script setup lang=\"ts\">\nimport { Primitive, type PrimitiveProps } from 'radix-vue'\n\nconst props = withDefaults(defineProps<PrimitiveProps>(), {\n  as: 'span'\n})\n</script>\n\n<template>\n  <!-- Now this element will be rendered as `span` by default -->\n  <Primitive v-bind=\"props\">\n    ...\n  </Primitive>\n</template>\nRender asChild\n​\n\nChange the default rendered element for the one passed as a child, merging their props and behavior.\n\nRead our Composition guide for more details."
  },
  {
    "title": "Visually Hidden | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/visually-hidden#VPContent",
    "html": "Visually Hidden\n​\nHides content from the screen in an accessible way.\nVisually hides content while preserving it for assistive technology.\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport { VisuallyHidden } from 'radix-vue'\n</script>\n\n<template>\n  <VisuallyHidden>\n    <slot />\n  </VisuallyHidden>\n</template>\nBasic example\n​\n\nUse the visually hidden primitive.\n\nvue\n<script setup lang=\"ts\">\nimport { VisuallyHidden } from 'radix-vue'\nimport { GearIcon } from '@radix-icons/vue'\n</script>\n\n<template>\n  <button>\n    <GearIcon />\n    <VisuallyHidden>Settings</VisuallyHidden>\n  </button>\n</template>\nAPI Reference\n​\nRoot\n​\n\nAnything you put inside this component will be hidden from the screen but will be announced by screen readers.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAccessibility\n​\n\nThis is useful in certain scenarios as an alternative to traditional labelling with aria-label or aria-labelledby."
  },
  {
    "title": "Config Provider | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/config-provider#VPContent",
    "html": "Config Provider\n​\nWraps your app to provide global configurations.\nEnables all primitives to inherit global reading direction.\nEnables changing the behavior of scroll body when setting body lock.\nMuch more controls to prevent layout shifts.\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport { ConfigProvider } from 'radix-vue'\n</script>\n\n<template>\n  <ConfigProvider>\n    <slot />\n  </ConfigProvider>\n</template>\nAPI Reference\n​\nConfig Provider\n​\n\nWhen creating localized apps that require right-to-left (RTL) reading direction, you need to wrap your application with the ConfigProvider component to ensure all of the primitives adjust their behavior based on the dir prop.\n\nYou can also change the global behavior of bodylock for components such as Alert, DropdownMenu and etc to fit your layout to prevent any content shifts.\n\nProp\tType\tDefault\n\ndir\n\t\n\"ltr\" | \"rtl\"\n\t\n\"ltr\"\n\n\nscrollBody\n\t\nboolean | ScrollBodyOption\n\t\ntrue\nExample\n​\n\nUse the config provider.\n\nSet global direction to rtl, and scroll body behavior to false (will not set any padding/margin).\n\nvue\n<script setup lang=\"ts\">\nimport { ConfigProvider } from 'radix-vue'\n</script>\n\n<template>\n  <ConfigProvider dir=\"rtl\" :scroll-body=\"false\">\n    <slot />\n  </ConfigProvider>\n</template>"
  },
  {
    "title": "Toggle Group | Radix Vue",
    "url": "https://www.radix-vue.com/components/toggle-group#VPContent",
    "html": "ToggleGroup\n​\nA set of two-state buttons that can be toggled on or off.\n\n\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { ToggleGroupItem, ToggleGroupRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\n\nconst toggleStateSingle = ref('left')\nconst toggleStateMultiple = ref(['italic'])\n\nconst toggleGroupItemClasses\n  = 'hover:bg-green3 text-mauve11 data-[state=on]:bg-green6 data-[state=on]:text-violet12 flex h-[35px] w-[35px] items-center justify-center bg-white text-base leading-4 first:rounded-l last:rounded-r focus:z-10 focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none'\n</script>\n\n<template>\n  <div>\n    <ToggleGroupRoot v-model=\"toggleStateSingle\" class=\"flex\">\n      <ToggleGroupItem value=\"left\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:text-align-left\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"center\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:text-align-center\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"right\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:text-align-right\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n    </ToggleGroupRoot>\n    <br>\n    <ToggleGroupRoot v-model=\"toggleStateMultiple\" type=\"multiple\" class=\"flex\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:font-bold\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:font-italic\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:strikethrough\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n    </ToggleGroupRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nSupports horizontal/vertical orientation.\nSupport single and multiple pressed buttons.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { ToggleGroupItem, ToggleGroupRoot } from 'radix-vue'\n</script>\n\n<template>\n  <ToggleGroupRoot>\n    <ToggleGroupItem />\n  </ToggleGroupRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a toggle group.\n\nProp\tType\tDefault\n\ntype*\n\t\nenum\n\t\n\n\nmodelValue\n\t\nstring | string[]\n\t\n\n\ndefaultValue\n\t\nstring | string[]\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nrovingFocus\n\t\nboolean\n\t\ntrue\n\n\norientation\n\t\nenum\n\t\nundefined\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\ntrue\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(payload: string | string[]) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nItem\n​\n\nAn item in the group.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"on\" | \"off\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nEnsuring there is always a value\n​\n\nYou can control the component to ensure a value.\n\nvue\n<script setup>\nimport { ref } from 'vue'\nimport { ToggleGroupItem, ToggleGroupRoot } from 'radix-vue'\n\nconst value = ref('left')\n</script>\n\n<template>\n  <ToggleGroupRoot v-model=\"value\" type=\"single\">\n    <ToggleGroupItem value=\"left\">\n      <TextAlignLeftIcon />\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"center\">\n      <TextAlignCenterIcon />\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"right\">\n      <TextAlignRightIcon />\n    </ToggleGroupItem>\n  </ToggleGroupRoot>\n</template>\nAccessibility\n​\n\nUses roving tabindex to manage focus movement among items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to either the pressed item or the first item in the group.\n\n\nSpace\n\t\nActivates/deactivates the item.\n\n\nEnter\n\t\nActivates/deactivates the item.\n\n\nArrowDown\n\t\nMoves focus to the next item in the group.\n\n\nArrowRight\n\t\nMoves focus to the next item in the group.\n\n\nArrowUp\n\t\nMoves focus to the previous item in the group.\n\n\nArrowLeft\n\t\nMoves focus to the previous item in the group.\n\n\nHome\n\t\nMoves focus to the first item.\n\n\nEnd\n\t\nMoves focus to the last item."
  },
  {
    "title": "Toolbar | Radix Vue",
    "url": "https://www.radix-vue.com/components/toolbar#VPContent",
    "html": "Toolbar\n​\nA container for grouping a set of controls, such as buttons, Toolbar groups or dropdown menus.\nEdited 2 hours ago\nShare\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport {\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\n\nconst toggleStateSingle = ref('center')\nconst toggleStateMultiple = ref([])\n</script>\n\n<template>\n  <ToolbarRoot\n    class=\"flex p-[10px] w-full max-w-[610px] !min-w-max rounded-md bg-white shadow-[0_2px_10px] shadow-blackA7\"\n    aria-label=\"Formatting options\"\n  >\n    <ToolbarToggleGroup v-model=\"toggleStateMultiple\" type=\"multiple\" aria-label=\"Text formatting\">\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"bold\"\n        aria-label=\"Bold\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:font-bold\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"italic\"\n        aria-label=\"Italic\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:font-italic\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"strikethrough\"\n        aria-label=\"Strike through\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:strikethrough\" />\n      </ToolbarToggleItem>\n    </ToolbarToggleGroup>\n    <ToolbarSeparator class=\"w-[1px] bg-mauve6 mx-[10px]\" />\n    <ToolbarToggleGroup v-model=\"toggleStateSingle\" type=\"single\" aria-label=\"Text Alignment\">\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"left\"\n        aria-label=\"Left Aligned\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:text-align-left\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"center\"\n        aria-label=\"Center Aligned\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:text-align-center\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"right\"\n        aria-label=\"Right Aligned\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:text-align-right\" />\n      </ToolbarToggleItem>\n    </ToolbarToggleGroup>\n    <ToolbarSeparator class=\"w-[1px] bg-mauve6 mx-[10px]\" />\n    <ToolbarLink\n      class=\"bg-transparent !font-normal !text-mauve11 inline-flex justify-center items-center hover:bg-transparent hover:cursor-pointer flex-shrink-0 flex-grow-0 basis-auto h-[25px] px-[5px] rounded text-[13px] leading-none bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n      href=\"#\"\n      target=\"_blank\"\n      style=\"margin-right: 10\"\n    >\n      Edited 2 hours ago\n    </ToolbarLink>\n    <ToolbarButton\n      class=\"px-[10px] text-white bg-green9 flex-shrink-0 flex-grow-0 basis-auto h-[25px] rounded inline-flex text-[13px] leading-none items-center justify-center outline-none hover:bg-green10 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7\"\n      style=\"margin-left: auto\"\n    >\n      Share\n    </ToolbarButton>\n  </ToolbarRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ToolbarRoot>\n    <ToolbarButton />\n    <ToolbarSeparator />\n    <ToolbarLink />\n    <ToolbarToggleGroup>\n      <ToolbarToggleItem />\n    </ToolbarToggleGroup>\n  </ToolbarRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the toolbar component parts.\n\nProp\tType\tDefault\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\ntrue\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nButton\n​\n\nA button item.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nLink\n​\n\nA link item.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\na\n\n\nasChild\n\t\nboolean\n\t\nfalse\nToggleGroup\n​\n\nA set of two-state buttons that can be toggled on or off.\n\nProp\tType\tDefault\n\ntype*\n\t\nenum\n\t\n\n\nmodelValue\n\t\nstring | string[]\n\t\n\n\ndefaultValue\n\t\nstring | string[]\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(payload: string | string[]) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nToggleItem\n​\n\nAn item in the group.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"on\" | \"off\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nSeparator\n​\n\nUsed to visually separate items in the toolbar\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nUse with other primitives\n​\n\nAll our primitives which expose a Trigger part, such as Dialog, AlertDialog, Popover, DropdownMenu can be composed within a toolbar by using the asChild prop.\n\nHere is an example using our DropdownMenu primitive.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ToolbarRoot>\n    <ToolbarButton>Action 1</ToolbarButton>\n    <ToolbarSeparator />\n    <DropdownMenuRoot>\n      <ToolbarButton as-child>\n        <DropdownMenuTrigger>Trigger</DropdownMenuTrigger>\n      </ToolbarButton>\n      <DropdownMenuContent>…</DropdownMenuContent>\n    </DropdownMenuRoot>\n  </ToolbarRoot>\n</template>\nAccessibility\n​\n\nUses roving tabindex to manage focus movement among items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to the first item in the group.\n\n\nSpace\n\t\nActivates/deactivates the item.\n\n\nEnter\n\t\nActivates/deactivates the item.\n\n\nArrowDown\n\t\nMoves focus to the next item depending on orientation.\n\n\nArrowRight\n\t\nMoves focus to the next item depending on orientation.\n\n\nArrowUp\n\t\nMoves focus to the previous item depending on orientation .\n\n\nArrowLeft\n\t\nMoves focus to the previous item depending on orientation .\n\n\nHome\n\t\nMoves focus to the first item.\n\n\nEnd\n\t\nMoves focus to the last item."
  },
  {
    "title": "Toast | Radix Vue",
    "url": "https://www.radix-vue.com/components/toast#VPContent",
    "html": "Toast\n​\nA succinct message that is displayed temporarily.\nAdd to calendar\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ToastAction, ToastDescription, ToastProvider, ToastRoot, ToastTitle, ToastViewport } from 'radix-vue'\n\nconst open = ref(false)\nconst eventDateRef = ref(new Date())\nconst timerRef = ref(0)\n\nfunction oneWeekAway() {\n  const now = new Date()\n  const inOneWeek = now.setDate(now.getDate() + 7)\n  return new Date(inOneWeek)\n}\n\nfunction prettyDate(date: Date) {\n  return new Intl.DateTimeFormat('en-US', { dateStyle: 'full', timeStyle: 'short' }).format(date)\n}\n\nfunction handleClick() {\n  open.value = false\n  window.clearTimeout(timerRef.value)\n  timerRef.value = window.setTimeout(() => {\n    eventDateRef.value = oneWeekAway()\n    open.value = true\n  }, 100)\n}\n</script>\n\n<template>\n  <ToastProvider>\n    <button\n      class=\"inline-flex items-center justify-center rounded font-medium text-[15px] px-[15px] leading-[35px] h-[35px] bg-white text-grass11 shadow-[0_2px_10px] shadow-blackA7 outline-none hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      @click=\"handleClick\"\n    >\n      Add to calendar\n    </button>\n\n    <ToastRoot\n      v-model:open=\"open\"\n      class=\"bg-white rounded-md shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] p-[15px] grid [grid-template-areas:_'title_action'_'description_action'] grid-cols-[auto_max-content] gap-x-[15px] items-center data-[state=open]:animate-slideIn data-[state=closed]:animate-hide data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=cancel]:translate-x-0 data-[swipe=cancel]:transition-[transform_200ms_ease-out] data-[swipe=end]:animate-swipeOut\"\n    >\n      <ToastTitle class=\"[grid-area:_title] mb-[5px] font-medium text-slate12 text-[15px]\">\n        Scheduled: Catch up\n      </ToastTitle>\n      <ToastDescription as-child>\n        <time\n          class=\"[grid-area:_description] m-0 text-slate11 text-[13px] leading-[1.3]\"\n          :dateTime=\"eventDateRef.toISOString()\"\n        >\n          {{ prettyDate(eventDateRef) }}\n        </time>\n      </ToastDescription>\n      <ToastAction class=\"[grid-area:_action]\" as-child alt-text=\"Goto schedule to undo\">\n        <button class=\"inline-flex items-center justify-center rounded font-medium text-xs px-[10px] leading-[25px] h-[25px] bg-green2 text-green11 shadow-[inset_0_0_0_1px] shadow-green7 hover:shadow-[inset_0_0_0_1px] hover:shadow-green8 focus:shadow-[0_0_0_2px] focus:shadow-green8\">\n          Undo\n        </button>\n      </ToastAction>\n    </ToastRoot>\n    <ToastViewport class=\"[--viewport-padding:_25px] fixed bottom-0 right-0 flex flex-col p-[var(--viewport-padding)] gap-[10px] w-[390px] max-w-[100vw] m-0 list-none z-[2147483647] outline-none\" />\n  </ToastProvider>\n</template>\nExpand code\nAutomatically closes.\nPauses closing on hover, focus and window blur.\nSupports hotkey to jump to toast viewport.\nSupports closing via swipe gesture.\nExposes CSS variables for swipe gesture animations.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport { ToastAction, ToastClose, ToastDescription, ToastProvider, ToastRoot, ToastTitle, ToastViewport } from 'radix-vue'\n</script>\n\n<template>\n  <ToastProvider>\n    <ToastRoot>\n      <ToastTitle />\n      <ToastDescription />\n      <ToastAction />\n      <ToastClose />\n    </ToastRoot>\n\n    <ToastViewport />\n  </ToastProvider>\n</template>\nAPI Reference\n​\nProvider\n​\n\nThe provider that wraps your toasts and toast viewport. It usually wraps the application.\n\nProp\tType\tDefault\n\nduration\n\t\nnumber\n\t\n5000\n\n\nlabel*\n\t\nstring\n\t\n\"Notification\"\n\n\nswipeDirection\n\t\n\"right\" | \"left\" | \"up\" | \"down\"\n\t\n\"right\"\n\n\nswipeThreshold\n\t\nnumber\n\t\n50\nViewport\n​\n\nThe fixed area where toasts appear. Users can jump to the viewport by pressing a hotkey. It is up to you to ensure the discoverability of the hotkey for keyboard users.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nol\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nhotkey\n\t\nstring[]\n\t\n[\"F8\"]\n\n\nlabel\n\t\nstring\n\t\n\"Notifications ({hotkey})\"\nRoot\n​\n\nThe toast that automatically closes. It should not be held open to acquire a user response.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nli\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ntype\n\t\n\"foreground\" | \"background\"\n\t\n\"foreground\"\n\n\nduration\n\t\nnumber\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\ntrue\n\n\nopen\n\t\nboolean\n\t\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pause\n\t() => void\n\n@resume\n\t() => void\n\n@swipeStart\n\t(event: SwipeEvent) => void\n\n@swipeMove\n\t(event: SwipeEvent) => void\n\n@swipeEnd\n\t(event: SwipeEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-swipe]\t\"start\" | \"move\" | \"cancel\" | \"end\"\n[data-swipe-direction]\t\"up\" | \"down\" | \"left\" | \"right\"\nCSS Variable\tDescription\n--radix-toast-swipe-move-x\t\nThe offset position of the toast when horizontally swiping\n\n--radix-toast-swipe-move-y\t\nThe offset position of the toast when vertically swiping\n\n--radix-toast-swipe-end-x\t\nThe offset end position of the toast after horizontally swiping\n\n--radix-toast-swipe-end-y\t\nThe offset end position of the toast after vertically swiping\nTitle\n​\n\nAn optional title for the toast\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nDescription\n​\n\nThe toast message.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAction\n​\n\nAn action that is safe to ignore to ensure users are not expected to complete tasks with unexpected side effects as a result of a time limit.\n\nWhen obtaining a user response is necessary, portal an \"AlertDialog\" styled as a toast into the viewport instead.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\naltText*\n\t\nstring\n\t\nClose\n​\n\nA button that allows users to dismiss the toast before its duration has elapsed.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nCustom hotkey\n​\n\nOverride the default hotkey using the event.code value for each key from keycode.info.\n\nhtml\n<ToastProvider>\n  ...\n  <ToastViewport :hotkey=\"['altKey', 'KeyT']\" />\n</ToastProvider>\nCustom duration\n​\n\nCustomise the duration of a toast to override the provider value.\n\nvue\n<ToastRoot :duration=\"3000\">\n  <ToastDescription>Saved!</ToastDescription>\n</ToastRoot>\nDuplicate toasts\n​\n\nWhen a toast must appear every time a user clicks a button, use state to render multiple instances of the same toast (see below). Alternatively, you can abstract the parts to create your own imperative API.\n\nhtml\n<div>\n  <form  @submit=\"count++\">\n    ...\n    <button>save</button>\n  </form>\n\n  <ToastRoot v-for=\"(_, index) in count\" :key=\"index\">\n    <ToastDescription>Saved!</ToastDescription>\n  </ToastRoot>\n</div>\nAnimating swipe gesture\n​\n\nCombine --radix-toast-swipe-move-[x|y] and --radix-toast-swipe-end-[x|y] CSS variables with data-swipe=\"[start|move|cancel|end]\" attributes to animate a swipe to close gesture. Here's an example:\n\nhtml\n<ToastProvider swipeDirection=\"right\">\n  <ToastRoot class=\"ToastRoot\">...</ToastRoot>\n  <ToastViewport />\n</ToastProvider>\ncss\n/* styles.css */\n.ToastRoot[data-swipe='move'] {\n  transform: translateX(var(--radix-toast-swipe-move-x));\n}\n.ToastRoot[data-swipe='cancel'] {\n  transform: translateX(0);\n  transition: transform 200ms ease-out;\n}\n.ToastRoot[data-swipe='end'] {\n  animation: slideRight 100ms ease-out;\n}\n\n@keyframes slideRight {\n  from {\n    transform: translateX(var(--radix-toast-swipe-end-x));\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\nAccessibility\n​\n\nAdheres to the aria-live requirements.\n\nSensitivity\n​\n\nControl the sensitivity of the toast for screen readers using the type prop.\n\nFor toasts that are the result of a user action, choose foreground. Toasts generated from background tasks should use background.\n\nForeground\n​\n\nForeground toasts are announced immediately. Assistive technologies may choose to clear previously queued messages when a foreground toast appears. Try to avoid stacking distinct foreground toasts at the same time.\n\nBackground\n​\n\nBackground toasts are announced at the next graceful opportunity, for example, when the screen reader has finished reading its current sentence. They do not clear queued messages so overusing them can be perceived as a laggy user experience for screen reader users when used in response to a user interaction.\n\nhtml\n<ToastRoot type=\"foreground\">\n  <ToastDescription>File removed successfully.</ToastDescription>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\n\n<ToastRoot type=\"background\">\n  <ToastDescription>We've just released Radix 1.0.</ToastDescription>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\nAlternative action\n​\n\nUse the altText prop on the Action to instruct an alternative way of actioning the toast to screen reader users.\n\nYou can direct the user to a permanent place in your application where they can action it or implement your own custom hotkey logic. If implementing the latter, use foreground type to announce immediately and increase the duration to give the user ample time.\n\nhtml\n<ToastRoot type=\"background\">\n  <ToastTitle>Upgrade Available!</ToastTitle>\n  <ToastDescription>We've just released Radix 1.0.</ToastDescription>\n  <ToastAction altText=\"Goto account settings to upgrade\">\n    Upgrade\n  </ToastAction>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\n\n<ToastRoot type=\"foreground\" :duration=\"10000\">\n  <ToastDescription>File removed successfully.</ToastDescription>\n  <ToastAction altText=\"Undo (Alt+U)\">\n    Undo <kbd>Alt</kbd>+<kbd>U</kbd>\n  </ToastAction>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\nClose icon button\n​\n\nWhen providing an icon (or font icon), remember to label it correctly for screen reader users.\n\nhtml\n<ToastRoot type=\"foreground\">\n  <ToastDescription>Saved!</ToastDescription>\n  <ToastClose aria-label=\"Close\">\n    <span aria-hidden>×</span>\n  </ToastClose>\n</ToastRoot>\nKeyboard Interactions\n​\nKey\tDescription\n\nF8\n\t\nFocuses toasts viewport.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nSpace\n\t\nWhen focus is on a ToastAction or ToastClose, closes the toast\n\n\nEnter\n\t\nWhen focus is on a ToastAction or ToastClose, closes the toast\n\n\nEsc\n\t\nWhen focus is on a Toast, closes the toast\nCustom APIs\n​\nAbstract parts\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport Toast from './your-toast.vue'\n</script>\n\n<template>\n  <Toast title=\"Upgrade available\" content=\"We've just released Radix 3.0!\">\n    <button @click=\"handleUpgrade\">\n      Upgrade\n    </button>\n  </Toast>\n</template>\nImplementation\n​\nvue\n// your-toast.vue\n<script setup lang=\"ts\">\nimport { ToastAction, ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'radix-vue'\n\ndefineProps<{\n  title: string\n  content: string\n}>()\n</script>\n\n<template>\n  <ToastRoot>\n    <ToastTitle v-if=\"title\">\n      {{ title }}\n    </ToastTitle>\n    <ToastDescription>{{ content }}</ToastDescription>\n    <ToastAction as-child>\n      <slot />\n    </ToastAction>\n    <ToastClose aria-label=\"Close\">\n      <span aria-hidden>×</span>\n    </ToastClose>\n  </ToastRoot>\n</template>\nImperative API\n​\n\nCreate your own imperative API to allow toast duplication if preferred.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport Toast from './your-toast.vue'\nimport type { InstanceType } from 'vue'\n\nconst savedRef = ref<InstanceType<typeof Toast>>()\n</script>\n\n<template>\n  <div>\n    <form @submit=\"savedRef.publish()\">\n      ...\n    </form>\n    <Toast ref=\"savedRef\">\n      Saved successfully!\n    </Toast>\n  </div>\n</template>\nImplementation\n​\nvue\n// your-toast.vue\n<script setup lang=\"ts\">\nimport { ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'radix-vue'\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction publish() {\n  count.value++\n}\n\ndefineExpose({\n  publish\n})\n</script>\n\n<template>\n  <ToastRoot v-for=\"index in count\" :key=\"index\">\n    <ToastDescription>\n      <slot />\n    </ToastDescription>\n    <ToastClose>Dismiss</ToastClose>\n  </ToastRoot>\n</template>"
  },
  {
    "title": "Tags Input | Radix Vue",
    "url": "https://www.radix-vue.com/components/tags-input#VPContent",
    "html": "Tags Input\n​\nAlpha\nTag inputs render tags inside an input, followed by an actual text input.\nApple\nBanana\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst modelValue = ref(['Apple', 'Banana'])\n</script>\n\n<template>\n  <TagsInputRoot\n    v-model=\"modelValue\"\n    class=\"flex gap-2 items-center border p-2 rounded-lg w-full max-w-[480px] flex-wrap border-blackA7 bg-white\"\n  >\n    <TagsInputItem v-for=\"item in modelValue\" :key=\"item\" :value=\"item\" class=\"text-white flex shadow-md items-center justify-center gap-2 bg-green8 aria-[current=true]:bg-green9 rounded p-1\">\n      <TagsInputItemText class=\"text-sm pl-1\" />\n      <TagsInputItemDelete class=\"p-0.5 rounded bg-transparent hover:bg-blackA4\">\n        <Icon icon=\"lucide:x\" />\n      </TagsInputItemDelete>\n    </TagsInputItem>\n\n    <TagsInputInput placeholder=\"Fruits...\" class=\"text-sm focus:outline-none flex-1 rounded text-green9 bg-transparent placeholder:text-mauve9 px-1\" />\n  </TagsInputRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nFull keyboard navigation.\nLimit the number of tags.\nAccept value from clipboard.\nClear button to reset all tags values.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { TagsInputClear, TagsInputDelete, TagsInputInput, TagsInputItem, TagsInputRoot, TagsInputText } from 'radix-vue'\n</script>\n\n<template>\n  <TagsInputRoot>\n    <TagsInputItem>\n      <TagsInputItemText />\n      <TagsInputItemDelete />\n    </TagsInputItem>\n\n    <TagsInputInput />\n    <TagsInputClear />\n  </TagsInputRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the tags input component parts.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\naddOnPaste\n\t\nboolean\n\t\n\n\ndelimiter\n\t\nstring\n\t\n, (comma)\n\n\nduplicate\n\t\nboolean\n\t\nfalse\n\n\ndir\n\t\nenum\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nmax\n\t\nnumber\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\n\n@invalid\n\t(value: string) => void\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-focused]\tPresent when focus on input\n[data-invalid]\tPresent when input value is invalid\nItem\n​\n\nThe component that contains the tag.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nvalue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-disabled]\tPresent when disabled\nItemText\n​\n\nThe textual part of the tag. Important for accessibility.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItemDelete\n​\n\nThe button that delete the associate tag.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-disabled]\tPresent when disabled\nInput\n​\n\nThe input element for the tags input.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ninput\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nplaceholder\n\t\nstring\n\t\n\n\nautoFocus\n\t\nboolean\n\t\n\n\nmaxLength\n\t\nnumber\n\t\nData Attribute\tValue\n[data-invalid]\tPresent when input value is invalid\nClear\n​\n\nThe button that remove all tags.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\nExamples\n​\nWith Combobox\n​\n\nYou can compose Tags input together with Combobox.\n\nApple\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\nimport { ComboboxAnchor, ComboboxContent, ComboboxEmpty, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxRoot, ComboboxTrigger, ComboboxViewport, TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst searchTerm = ref('')\nconst values = ref(['Apple'])\nconst options = ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple']\n\nwatch(values, () => {\n  searchTerm.value = ''\n}, { deep: true })\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"values\"\n    v-model:search-term=\"searchTerm\"\n    multiple\n    class=\"my-4 mx-auto relative\"\n  >\n    <ComboboxAnchor class=\"w-[400px] inline-flex items-center justify-between rounded-lg p-2 text-[13px] leading-none  gap-[5px] bg-white text-grass11 shadow-[0_2px_10px] shadow-black/10 hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black data-[placeholder]:text-grass9 outline-none\">\n      <TagsInputRoot\n        v-slot=\"{ values: tags }\"\n        :model-value=\"values\"\n        delimiter=\"\"\n        class=\"flex gap-2 items-center rounded-lg flex-wrap\"\n      >\n        <TagsInputItem\n          v-for=\"item in tags\" :key=\"item\"\n          :value=\"item\"\n          class=\"flex items-center justify-center gap-2 text-white bg-grass8 aria-[current=true]:bg-grass9 rounded px-2 py-1\"\n        >\n          <TagsInputItemText class=\"text-sm\" />\n          <TagsInputItemDelete>\n            <Icon icon=\"lucide:x\" />\n          </TagsInputItemDelete>\n        </TagsInputItem>\n\n        <ComboboxInput as-child>\n          <TagsInputInput\n            placeholder=\"Fruits...\"\n            class=\"focus:outline-none flex-1 rounded !bg-transparent  placeholder:text-mauve10 px-1\"\n            @keydown.enter.prevent\n          />\n        </ComboboxInput>\n      </TagsInputRoot>\n\n      <ComboboxTrigger>\n        <Icon icon=\"radix-icons:chevron-down\" class=\"h-4 w-4 text-grass11\" />\n      </ComboboxTrigger>\n    </ComboboxAnchor>\n    <ComboboxContent class=\"absolute z-10 w-full mt-2 bg-white overflow-hidden rounded shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\">\n      <ComboboxViewport class=\"p-[5px]\">\n        <ComboboxEmpty class=\"text-gray-400  text-xs font-medium text-center py-2\" />\n\n        <ComboboxGroup>\n          <ComboboxLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Fruits\n          </ComboboxLabel>\n\n          <ComboboxItem\n            v-for=\"(option, index) in options\" :key=\"index\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-grass8 data-[highlighted]:text-grass1\"\n            :value=\"option\"\n          >\n            <ComboboxItemIndicator\n              class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\"\n            >\n              <Icon icon=\"radix-icons:check\" />\n            </ComboboxItemIndicator>\n            <span>\n              {{ option }}\n            </span>\n          </ComboboxItem>\n        </ComboboxGroup>\n      </ComboboxViewport>\n    </ComboboxContent>\n  </ComboboxRoot>\n</template>\nExpand code\nPaste behavior\n​\n\nYou can automatically add tags on paste by passing the add-on-paste prop.\n\nvue\n<script setup lang=\"ts\">\nimport { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'radix-vue'\n</script>\n\n<template>\n  <TagsInputRoot v-model=\"modelValue\" add-on-paste>\n    …\n  </TagsInputRoot>\n</template>\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nDelete\n\t\nWhen tag is active, remove it and set the tag on right active.\n\n\nBackspace\n\t\nWhen tag is active, remove it and set the tag on left active. If there are no tags to the left, either the next tags gets focus, or the input.\n\n\nArrowRight\n\t\nSet the next tag active.\n\n\nArrowLeft\n\t\nSet the previous tag active.\n\n\nHome\n\t\nSet the first tag active\n\n\nEnd\n\t\nSet the last tag active"
  },
  {
    "title": "Tabs | Radix Vue",
    "url": "https://www.radix-vue.com/components/tabs#VPContent",
    "html": "Tabs\n​\nA set of layered sections of content—known as tab panels—that are displayed one at a time.\nAccount\nPassword\n\nMake changes to your account here. Click save when you're done.\n\nName\nUsername\nSave changes\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { TabsContent, TabsIndicator, TabsList, TabsRoot, TabsTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TabsRoot class=\"flex flex-col w-full sm:w-[300px] shadow-[0_2px_10px] shadow-blackA4\" default-value=\"tab1\">\n    <TabsList class=\"relative shrink-0 flex border-b border-mauve6\" aria-label=\"Manage your account\">\n      <TabsIndicator class=\"absolute px-8 left-0 h-[2px] bottom-0 w-[--radix-tabs-indicator-size] translate-x-[--radix-tabs-indicator-position] rounded-full transition-[width,transform] duration-300\">\n        <div class=\"bg-grass8 w-full h-full\" />\n      </TabsIndicator>\n      <TabsTrigger\n        class=\"bg-white px-5 h-[45px] flex-1 flex items-center justify-center text-[15px] leading-none text-mauve11 select-none  rounded-tl-md  hover:text-grass11 data-[state=active]:text-grass11 outline-none cursor-default\"\n        value=\"tab1\"\n      >\n        Account\n      </TabsTrigger>\n      <TabsTrigger\n        class=\"bg-white px-5 h-[45px] flex-1 flex items-center justify-center text-[15px] leading-none text-mauve11 select-none  rounded-tr-md hover:text-grass11 data-[state=active]:text-grass11 outline-none cursor-default\"\n        value=\"tab2\"\n      >\n        Password\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent\n      class=\"grow p-5 bg-white rounded-b-md outline-none focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      value=\"tab1\"\n    >\n      <p class=\"mb-5 !mt-0 text-mauve11 text-[15px] !leading-normal\">\n        Make changes to your account here. Click save when you're done.\n      </p>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"name\"> Name </label>\n        <input\n          id=\"name\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          value=\"Pedro Duarte\"\n        >\n      </fieldset>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"username\"> Username </label>\n        <input\n          id=\"username\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          value=\"@peduarte\"\n        >\n      </fieldset>\n      <div class=\"flex justify-end mt-5\">\n        <button\n          class=\"inline-flex items-center justify-center rounded px-[15px] text-[15px] leading-none font-medium h-[35px] bg-green4 text-green11 hover:bg-green5 focus:shadow-[0_0_0_2px] focus:shadow-green7 outline-none cursor-default\"\n        >\n          Save changes\n        </button>\n      </div>\n    </TabsContent>\n    <TabsContent\n      class=\"grow p-5 bg-white rounded-b-md outline-none focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      value=\"tab2\"\n    >\n      <p class=\"mb-5 !mt-0 text-mauve11 text-[15px] !leading-normal\">\n        Change your password here. After saving, you'll be logged out.\n      </p>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"currentPassword\">\n          Current password\n        </label>\n        <input\n          id=\"currentPassword\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          type=\"password\"\n        >\n      </fieldset>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"newPassword\"> New password </label>\n        <input\n          id=\"newPassword\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          type=\"password\"\n        >\n      </fieldset>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"confirmPassword\">\n          Confirm password\n        </label>\n        <input\n          id=\"confirmPassword\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          type=\"password\"\n        >\n      </fieldset>\n      <div class=\"flex justify-end mt-5\">\n        <button\n          class=\"inline-flex items-center justify-center rounded px-[15px] text-[15px] leading-none font-medium h-[35px] bg-green4 text-green11 hover:bg-green5 focus:shadow-[0_0_0_2px] focus:shadow-green7 outline-none cursor-default\"\n        >\n          Change password\n        </button>\n      </div>\n    </TabsContent>\n  </TabsRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports horizontal/vertical orientation.\nSupports automatic/manual activation.\nFull keyboard navigation.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { TabsContent, TabsIndicator, TabsList, TabsRoot, TabsTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TabsRoot>\n    <TabsList>\n      <TabsIndicator />\n      <TabsTrigger />\n    </TabsList>\n    <TabsContent />\n  </TabsRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the tabs component parts.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndir\n\t\nenum\n\t\n\n\nactivationMode\n\t\nenum\n\t\n\"automatic\"\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nList\n​\n\nContains the triggers that are aligned along the edge of the active content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nloop\n\t\nboolean\n\t\ntrue\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nTrigger\n​\n\nThe button that activates its associated content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nIndicator\n​\n\nThe indicator that highlights the current active tab.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCSS Variable\tDescription\n--radix-tabs-indicator-size\t\nThe size of the indicator.\n\n--radix-tabs-indicator-position\t\nThe position of the indicator\nContent\n​\n\nContains the content associated with each trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nVertical\n​\n\nYou can create vertical tabs by using the orientation prop.\n\nvue\n<script setup>\nimport { TabsContent, TabsList, TabsRoot, TabsTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TabsRoot default-value=\"tab1\" orientation=\"vertical\">\n    <TabsList aria-label=\"tabs example\">\n      <TabsTrigger value=\"tab1\">\n        One\n      </TabsTrigger>\n      <TabsTrigger value=\"tab2\">\n        Two\n      </TabsTrigger>\n      <TabsTrigger value=\"tab3\">\n        Three\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent value=\"tab1\">\n      Tab one content\n    </TabsContent>\n    <TabsContent value=\"tab2\">\n      Tab two content\n    </TabsContent>\n    <TabsContent value=\"tab3\">\n      Tab three content\n    </TabsContent>\n  </TabsRoot>\n</template>\nAccessibility\n​\n\nAdheres to the Tabs WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nWhen focus moves onto the tabs, focuses the active trigger. When a trigger is focused, moves focus to the active content.\n\n\nArrowDown\n\t\nMoves focus to the next trigger depending on orientation and activates its associated content.\n\n\nArrowRight\n\t\nMoves focus to the next trigger depending on orientation and activates its associated content.\n\n\nArrowUp\n\t\nMoves focus to the previous trigger depending on orientation and activates its associated content.\n\n\nArrowLeft\n\t\nMoves focus to the previous trigger depending on orientation and activates its associated content.\n\n\nHome\n\t\nMoves focus to the first trigger and activates its associated content.\n\n\nEnd\n\t\nMoves focus to the last trigger and activates its associated content."
  },
  {
    "title": "Slider | Radix Vue",
    "url": "https://www.radix-vue.com/components/slider#VPContent",
    "html": "Slider\n​\nAn input where the user selects a value from within a given range.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n\nconst sliderValue = ref([50])\n</script>\n\n<template>\n  <SliderRoot\n    v-model=\"sliderValue\" class=\"relative flex items-center select-none touch-none w-[200px] h-5\" :max=\"100\"\n    :step=\"1\"\n  >\n    <SliderTrack class=\"bg-blackA10 relative grow rounded-full h-[3px]\">\n      <SliderRange class=\"absolute bg-white rounded-full h-full\" />\n    </SliderTrack>\n    <SliderThumb\n      class=\"block w-5 h-5 bg-white shadow-[0_2px_10px] shadow-blackA7 rounded-[10px] hover:bg-violet3 focus:outline-none focus:shadow-[0_0_0_5px] focus:shadow-blackA8\"\n      aria-label=\"Volume\"\n    />\n  </SliderRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports multiple thumbs.\nSupports a minimum value between thumbs.\nSupports touch or click on track to update value.\nSupports Right to Left direction.\nFull keyboard navigation.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot>\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n  </SliderRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a slider. It will render an input for each thumb when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nnumber[]\n\t\n\n\nmodelValue\n\t\nnumber[]\n\t\n\n\nname\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndir\n\t\nenum\n\t\n\n\ninverted\n\t\nboolean\n\t\nfalse\n\n\nmin\n\t\nnumber\n\t\n0\n\n\nmax\n\t\nnumber\n\t\n100\n\n\nstep\n\t\nnumber\n\t\n1\n\n\nminStepsBetweenThumbs\n\t\nnumber\n\t\n0\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: number) => void\n\n@valueCommit\n\t(value: number[]): void\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nTrack\n​\n\nThe track that contains the SliderRange.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nRange\n​\n\nThe range part. Must live inside SliderTrack.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nThumb\n​\n\nA draggable thumb. You can render multiple thumbs.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nVertical orientation\n​\n\nUse the orientation prop to create a vertical slider.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot class=\"SliderRoot\" :default-value=\"[50]\" orientation=\"vertical\">\n    <SliderTrack class=\"SliderTrack\">\n      <SliderRange class=\"SliderRange\" />\n    </SliderTrack>\n    <SliderThumb class=\"SliderThumb\" />\n  </SliderRoot>\n</template>\ncss\n/* styles.css */\n.SliderRoot {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n.SliderRoot[data-orientation=\"vertical\"] {\n  flex-direction: column;\n  width: 20px;\n  height: 100px;\n}\n\n.SliderTrack {\n  position: relative;\n  flex-grow: 1;\n  background-color: grey;\n}\n.SliderTrack[data-orientation=\"vertical\"] {\n  width: 3px;\n}\n\n.SliderRange {\n  position: absolute;\n  background-color: black;\n}\n.SliderRange[data-orientation=\"vertical\"] {\n  width: 100%;\n}\n\n.SliderThumb {\n  display: block;\n  width: 20px;\n  height: 20px;\n  background-color: black;\n}\nCreate a range\n​\n\nAdd multiple thumbs and values to create a range slider.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot :default-value=\"[25, 75]\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n    <SliderThumb />\n  </SliderRoot>\n</template>\nDefine step size\n​\n\nUse the step prop to increase the stepping interval.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot :default-value=\"[50]\" :step=\"10\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n  </SliderRoot>\n</template>\nPrevent thumb overlap\n​\n\nUse minStepsBetweenThumbs to avoid thumbs with equal values.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot\n    :default-value=\"[25, 75]\"\n    :step=\"10\"\n    :min-steps-between-thumbs=\"1\"\n  >\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n    <SliderThumb />\n  </SliderRoot>\n</template>\nAccessibility\n​\n\nAdheres to the Slider WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nArrowRight\n\t\nIncrements/decrements by the step value depending on orientation.\n\n\nArrowLeft\n\t\nIncrements/decrements by the step value depending on orientation.\n\n\nArrowUp\n\t\nIncreases the value by the step amount.\n\n\nArrowDown\n\t\nDecreases the value by the step amount.\n\n\nPageUp\n\t\nIncreases the value by a larger step.\n\n\nPageDown\n\t\nDecreases the value by a larger step.\n\n\nShift + ArrowUp\n\t\nIncreases the value by a larger step.\n\n\nShift + ArrowDown\n\t\nDecreases the value by a larger step.\n\n\nHome\n\t\nSets the value to its minimum.\n\n\nEnd\n\t\nSets the value to its maximum.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract all parts\n​\n\nThis example abstracts all of the Slider parts so it can be used as a self closing element.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Slider } from './your-slider'\n</script>\n\n<template>\n  <Slider :default-value=\"[25]\" />\n</template>\nImplementation\n​\nts\n// your-slider.ts\nexport { default as Slider } from 'Slider.vue'\nvue\n <!-- Slider.vue -->\n<script setup lang=\"ts\">\nimport { SlideRoot, SliderRange, type SliderRootEmits, type SliderRootProps, SliderThumb, SliderTrack, useForwardPropsEmits } from 'radix-vue'\n\nconst props = defineProps<SliderRootProps>()\nconst emits = defineEmits<SliderRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <SliderRoot v-bind=\"forward\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n\n    <SliderThumb v-for=\"(_, i) in value\" :key=\"i\" />\n  </SliderRoot>\n</template>\nCaveats\n​\nMouse events are not fired\n​\n\nBecause of a limitation we faced during implementation, the following example won't work as expected and the @mousedown and @mousedown event handlers won't be fired:\n\nvue\n<SliderRoot\n  @mousedown=\"() => { console.log('onMouseDown')  }\"\n  @mouseup=\"() => { console.log('onMouseUp')  }\"\n>\n  …\n</SliderRoot>\n\nWe recommend using pointer events instead (eg. @pointerdown, @pointerup). Regardless of the above limitation, these events are better suited for cross-platform/device handling as they are fired for all pointer input types (mouse, touch, pen, etc.)."
  },
  {
    "title": "Select | Radix Vue",
    "url": "https://www.radix-vue.com/components/select#VPContent",
    "html": "Select\n​\nDisplays a list of options for the user to pick from—triggered by a button.\nSelect a fruit...\nApple\nBanana\nBlueberry\nGrapes\nPineapple\nAubergine\nBroccoli\nCarrot\nCourgette\nLeek\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n} from 'radix-vue'\n\nconst fruit = ref()\n\nfunction handleClick() {\n  alert('hello!')\n}\n\nconst options = ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple']\nconst vegetables = ['Aubergine', 'Broccoli', 'Carrot', 'Courgette', 'Leek']\n</script>\n\n<template>\n  <SelectRoot v-model=\"fruit\">\n    <SelectTrigger\n      class=\"inline-flex min-w-[160px] items-center justify-between rounded px-[15px] text-[13px] leading-none h-[35px] gap-[5px] bg-white text-grass11 shadow-[0_2px_10px] shadow-black/10 hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black data-[placeholder]:text-green9 outline-none\"\n      aria-label=\"Customise options\"\n    >\n      <SelectValue placeholder=\"Select a fruit...\" />\n      <Icon icon=\"radix-icons:chevron-down\" class=\"h-3.5 w-3.5\" />\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent\n        class=\"min-w-[160px] bg-white rounded shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade z-[100]\"\n        :side-offset=\"5\"\n      >\n        <SelectScrollUpButton class=\"flex items-center justify-center h-[25px] bg-white text-violet11 cursor-default\">\n          <Icon icon=\"radix-icons:chevron-up\" />\n        </SelectScrollUpButton>\n\n        <SelectViewport class=\"p-[5px]\">\n          <SelectLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Fruits\n          </SelectLabel>\n          <SelectGroup>\n            <SelectItem\n              v-for=\"(option, index) in options\"\n              :key=\"index\"\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              :value=\"option\"\n            >\n              <SelectItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:check\" />\n              </SelectItemIndicator>\n              <SelectItemText>\n                {{ option }}\n              </SelectItemText>\n            </SelectItem>\n          </SelectGroup>\n          <SelectSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <SelectLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Vegetables\n          </SelectLabel>\n          <SelectGroup>\n            <SelectItem\n              v-for=\"(option, index) in vegetables\"\n              :key=\"index\"\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              :value=\"option\"\n              :disabled=\"option === 'Courgette'\"\n            >\n              <SelectItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:check\" />\n              </SelectItemIndicator>\n              <SelectItemText>\n                {{ option }}\n              </SelectItemText>\n            </SelectItem>\n          </SelectGroup>\n        </SelectViewport>\n\n        <SelectScrollDownButton class=\"flex items-center justify-center h-[25px] bg-white text-violet11 cursor-default\">\n          <Icon icon=\"radix-icons:chevron-down\" />\n        </SelectScrollDownButton>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nOffers 2 positioning modes.\nSupports items, labels, groups of items.\nFocus is fully managed.\nFull keyboard navigation.\nSupports custom placeholder.\nTypeahead support.\nSupports Right to Left direction.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>\n      <SelectValue />\n      <SelectIcon />\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent>\n        <SelectScrollUpButton />\n        <SelectViewport>\n          <SelectItem>\n            <SelectItemText />\n            <SelectItemIndicator />\n          </SelectItem>\n          <SelectGroup>\n            <SelectLabel />\n            <SelectItem>\n              <SelectItemText />\n              <SelectItemIndicator />\n            </SelectItem>\n          </SelectGroup>\n          <SelectSeparator />\n        </SelectViewport>\n        <SelectScrollDownButton />\n        <SelectArrow />\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a Select\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\ndir\n\t\nenum\n\t\n\n\nname\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that toggles the Select The SelectContent will position itself by aligning over the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-placeholder]\tPresent when has placeholder\nValue\n​\n\nThe part that reflects the selected value. By default the selected item's text will be rendered. if you require more control, you can instead control the select and pass your own children. It should not be styled to ensure correct positioning. An optional placeholder prop is also available for when the select has no value.\n\nProp\tType\tDefault\n\nplaceholder\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nIcon\n​\n\nA small icon often displayed next to the value as a visual affordance for the fact it can be open. By default renders ▼ but you can use your own icon via asChild or use children.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the select is open.\n\nProp\tType\tDefault\n\nposition\n\t\nenum\n\t\n\"item-aligned\"\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"start\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n10\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-select-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets. Only present when position=\"popper\".\n\n--radix-select-content-available-width\t\nThe remaining width between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-select-content-available-height\t\nThe remaining height between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-select-trigger-width\t\nThe width of the trigger. Only present when position=\"popper\".\n\n--radix-select-trigger-height\t\nThe height of the trigger. Only present when position=\"popper\".\nViewport\n​\n\nThe scrolling viewport that contains all of the items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nThe component that contains the select items.\n\nProp\tType\tDefault\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemText\n​\n\nThe textual part of the item. It should only contain the text you want to see in the trigger when that item is selected. It should not be styled to ensure correct positioning.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItemIndicator\n​\n\nRenders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nScrollUpButton\n​\n\nAn optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling upwards.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nScrollDownButton\n​\n\nAn optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling downwards.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nGroup\n​\n\nUsed to group multiple items. use in conjunction with SelectLabel to ensure good accessibility via automatic labelling.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render the label of a group. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSeparator\n​\n\nUsed to visually separate items in the Select\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nArrow\n​\n\nAn optional arrow element to render alongside the content. This can be used to help visually link the trigger with the SelectContent. Must be rendered inside SelectContent. Only available when position is set to popper.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nChange the positioning mode\n​\n\nBy default, Select will behave similarly to a native MacOS menu by positioning SelectContent relative to the active item. If you would prefer an alternative positioning approach similar to Popover or DropdownMenu then you can set position to popper and make use of additional alignment options such as side, sideOffset and more.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent position=\"popper\" :side-offset=\"5\">\n        …\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nConstrain the content size\n​\n\nWhen using position=\"popper\" on SelectContent, you may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-select-trigger-width and --radix-select-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent class=\"SelectContent\" position=\"popper\" :side-offset=\"5\">\n        …\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.SelectContent {\n  width: var(--radix-select-trigger-width);\n  max-height: var(--radix-select-content-available-height);\n}\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem class=\"SelectItem\" disabled>\n            …\n          </SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.SelectItem[data-disabled] {\n  color: \"gainsboro\";\n}\nWith a placeholder\n​\n\nYou can use the placeholder prop on Value for when the select has no value. There's also a data-placeholder attribute on Trigger to help with styling.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger class=\"SelectTrigger\">\n      <SelectValue placeholder=\"Pick an option\" />\n      <SelectIcon />\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>…</SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.SelectTrigger[data-placeholder] {\n  color: \"gainsboro\";\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectSeparator />\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nWith grouped items\n​\n\nUse the Group and Label parts to group items in a section.\n\nvue\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectGroup>\n            <SelectLabel>Label</SelectLabel>\n            <SelectItem>…</SelectItem>\n            <SelectItem>…</SelectItem>\n            <SelectItem>…</SelectItem>\n          </SelectGroup>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nWith complex items\n​\n\nYou can use custom content in your items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem>\n            <SelectItemText>\n              <img src=\"…\">\n              Adolfo Hess\n            </SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem>…</SelectItem> <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nControlling the value displayed in the trigger\n​\n\nBy default the trigger will automatically display the selected item ItemText's content. You can control what appears by chosing to put things inside/outside the ItemText part.\n\nIf you need more flexibility, you can control the component using v-model props and passing slot to SelectValue. Remember to make sure what you put in there is accessible.\n\nvue\n<script setup>\nconst countries = { 'france': '🇫🇷', 'united-kingdom': '🇬🇧', 'spain': '🇪🇸' }\n\nconst value = ref('france')\n</script>\n\n<template>\n  <SelectRoot v-model=\"value\">\n    <SelectTrigger>\n      <SelectValue aria-label=\"value\">\n        {{ countries[value] }}\n      </SelectValue>\n      <SelectIcon />\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem value=\"france\">\n            <SelectItemText>France</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem value=\"united-kingdom\">\n            <SelectItemText>United Kingdom</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem value=\"spain\">\n            <SelectItemText>Spain</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nWith custom scrollbar\n​\n\nThe native scrollbar is hidden by default as we recommend using the ScrollUpButton and ScrollDownButton parts for the best UX. If you do not want to use these parts, compose your select with our Scroll Area primitive.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  ScrollAreaRoot,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaViewport,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <ScrollAreaRoot class=\"ScrollAreaRoot\" type=\"auto\">\n          <SelectViewport as-child>\n            <ScrollAreaViewport class=\"ScrollAreaViewport\">\n              <StyledItem>…</StyledItem> <StyledItem>…</StyledItem>\n              <StyledItem>…</StyledItem>\n            </ScrollAreaViewport>\n          </SelectViewport>\n          <ScrollAreaScrollbar class=\"ScrollAreaScrollbar\" orientation=\"vertical\">\n            <ScrollAreaThumb class=\"ScrollAreaThumb\" />\n          </ScrollAreaScrollbar>\n        </ScrollAreaRoot>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.ScrollAreaRoot {\n  width: 100%;\n  height: 100%;\n}\n\n.ScrollAreaViewport {\n  width: 100%;\n  height: 100%;\n}\n\n.ScrollAreaScrollbar {\n  width: 4px;\n  padding: 5px 2px;\n}\n\n.ScrollAreaThumb {\n  background: rgba(0, 0, 0, 0.3);\n  borderradius: 3px;\n}\nAccessibility\n​\n\nAdheres to the ListBox WAI-ARIA design pattern.\n\nSee the W3C Select-Only Combobox example for more information.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on SelectTrigger, opens the select and focuses the selected item.\nWhen focus is on an item, selects the focused item.\n\n\nEnter\n\t\nWhen focus is on SelectTrigger, opens the select and focuses the first item.\nWhen focus is on an item, selects the focused item.\n\n\nArrowDown\n\t\nWhen focus is on SelectTrigger, opens the Select\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on SelectTrigger, opens the Select\nWhen focus is on an item, moves focus to the previous item.\n\n\nEsc\n\t\nCloses the select and moves focus to SelectTrigger.\nLabelling\n​\n\nUse our Label component in order to offer a visual and accessible label for the Select\n\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  Label,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <Label>\n    Country\n    <SelectRoot>…</SelectRoot>\n  </Label>\n\n  <!-- or -->\n\n  <Label for=\"country\">Country</Label>\n  <SelectRoot>\n    <SelectTrigger id=\"country\">\n      …\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>…</SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract down to Select and SelectItem\n​\n\nThis example abstracts most of the parts.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Select, SelectItem } from './your-select'\n</script>\n\n<template>\n  <Select default-value=\"2\">\n    <SelectItem value=\"1\">\n      Item 1\n    </SelectItem>\n    <SelectItem value=\"2\">\n      Item 2\n    </SelectItem>\n    <SelectItem value=\"3\">\n      Item 3\n    </SelectItem>\n  </Select>\n</template>\nImplementation\n​\nts\n// your-select.ts\nexport { default as Select } from 'Select.vue'\nexport { default as SelectItem } from 'SelectItem.vue'\nvue\n<!-- Select.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'\nimport { SelectContent, SelectIcon, SelectPortal, SelectRoot, SelectScrollDownButton, SelectScrollUpButton, SelectTrigger, SelectValue, SelectViewport, useForwardPropsEmits } from 'radix-vue'\nimport type { SelectRootEmits, SelectRootProps } from 'radix-vue'\n\nconst props = defineProps<SelectRootProps>()\nconst emits = defineEmits<SelectRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <SelectRoot v-bind=\"forward\">\n    <SelectTrigger>\n      <SelectValue />\n      <SelectIcon>\n        <ChevronDownIcon />\n      </SelectIcon>\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent>\n        <SelectScrollUpButton>\n          <ChevronUpIcon />\n        </SelectScrollUpButton>\n        <SelectViewport>\n          <slot />\n        </SelectViewport>\n        <SelectScrollDownButton>\n          <ChevronDownIcon />\n        </SelectScrollDownButton>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nvue\n<!-- SelectItem.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon } from '@radix-icons/vue'\nimport { SelectItem, SelectItemIndicator, type SelectItemProps, SelectItemText } from 'radix-vue'\n\nconst props = defineProps<SelectItemProps>()\n</script>\n\n<template>\n  <SelectItem v-bind=\"props\">\n    <SelectItemText>\n      <slot />\n    </SelectItemText>\n    <SelectItemIndicator>\n      <CheckIcon />\n    </SelectItemIndicator>\n  </SelectItem>\n</template>"
  },
  {
    "title": "Switch | Radix Vue",
    "url": "https://www.radix-vue.com/components/switch#VPContent",
    "html": "Switch\n​\nA control that allows the user to toggle between checked and not checked.\nAirplane mode\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { SwitchRoot, SwitchThumb } from 'radix-vue'\nimport { ref } from 'vue'\n\nconst switchState = ref(false)\n</script>\n\n<template>\n  <div class=\"flex gap-2 items-center\">\n    <label class=\"text-white text-[15px] leading-none pr-[15px] select-none\" for=\"airplane-mode\">\n      Airplane mode\n    </label>\n    <SwitchRoot\n      id=\"airplane-mode\"\n      v-model:checked=\"switchState\"\n      class=\"w-[42px] h-[25px] focus-within:outline focus-within:outline-black flex bg-black/50 shadow-sm rounded-full relative data-[state=checked]:bg-black cursor-default\"\n    >\n      <SwitchThumb\n        class=\"block w-[21px] h-[21px] my-auto bg-white shadow-sm rounded-full transition-transform duration-100 translate-x-0.5 will-change-transform data-[state=checked]:translate-x-[19px]\"\n      />\n    </SwitchRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { SwitchRoot, SwitchThumb } from 'radix-vue'\n</script>\n\n<template>\n  <SwitchRoot>\n    <SwitchThumb />\n  </SwitchRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a switch. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\ndefaultChecked\n\t\nboolean\n\t\n\n\nchecked\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nvalue\n\t\nstring\n\t\non\n\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:checked\n\t(value: boolean) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nThumb\n​\n\nThe thumb that is used to visually indicate whether the switch is on or off.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nAccessibility\n​\n\nAdheres to the switch role requirements.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nToggles the component's state.\n\n\nEnter\n\t\nToggles the component's state."
  },
  {
    "title": "Radio Group | Radix Vue",
    "url": "https://www.radix-vue.com/components/radio-group#VPContent",
    "html": "RadioGroup\n​\nA set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.\nDefault\nComfortable\nCompact\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { RadioGroupIndicator, RadioGroupItem, RadioGroupRoot } from 'radix-vue'\nimport { ref } from 'vue'\n\nconst radioStateSingle = ref('default')\n</script>\n\n<template>\n  <RadioGroupRoot\n    v-model=\"radioStateSingle\" class=\"flex flex-col gap-2.5\" default-value=\"default\"\n    aria-label=\"View density\"\n  >\n    <div class=\"flex items-center\">\n      <RadioGroupItem\n        id=\"r1\"\n        class=\"bg-white w-[25px] h-[25px] rounded-full shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black outline-none cursor-default\" value=\"default\"\n      >\n        <RadioGroupIndicator\n          class=\"flex items-center justify-center w-full h-full relative after:content-[''] after:block after:w-[11px] after:h-[11px] after:rounded-[50%] after:bg-grass11\"\n        />\n      </RadioGroupItem>\n      <label class=\"text-white text-[15px] leading-none pl-[15px]\" for=\"r1\">\n        Default\n      </label>\n    </div>\n    <div class=\"flex items-center\">\n      <RadioGroupItem\n        id=\"r2\"\n        class=\"bg-white w-[25px] h-[25px] rounded-full shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black outline-none cursor-default\" value=\"comfortable\"\n      >\n        <RadioGroupIndicator\n          class=\"flex items-center justify-center w-full h-full relative after:content-[''] after:block after:w-[11px] after:h-[11px] after:rounded-[50%] after:bg-grass11\"\n        />\n      </RadioGroupItem>\n      <label class=\"text-white text-[15px] leading-none pl-[15px]\" for=\"r2\">\n        Comfortable\n      </label>\n    </div>\n    <div class=\"flex items-center\">\n      <RadioGroupItem\n        id=\"r3\"\n        class=\"bg-white w-[25px] h-[25px] rounded-full shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black outline-none cursor-default\" value=\"compact\"\n      >\n        <RadioGroupIndicator\n          class=\"flex items-center justify-center w-full h-full relative after:content-[''] after:block after:w-[11px] after:h-[11px] after:rounded-[50%] after:bg-grass11\"\n        />\n      </RadioGroupItem>\n      <label class=\"text-white text-[15px] leading-none pl-[15px]\" for=\"r3\">\n        Compact\n      </label>\n    </div>\n  </RadioGroupRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nSupports horizontal/vertical orientation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { RadioGroupIndicator, RadioGroupItem, RadioGroupRoot } from 'radix-vue'\n</script>\n\n<template>\n  <RadioGroupRoot>\n    <RadioGroupItem>\n      <RadioGroupIndicator />\n    </RadioGroupItem>\n  </RadioGroupRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a radio group.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\norientation\n\t\nenum\n\t\nundefined\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\ntrue\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\nItem\n​\n\nAn item in the group that can be checked. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nIndicator\n​\n\nRenders when the radio item is in a checked state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nAccessibility\n​\n\nAdheres to the Radio Group WAI-ARIA design pattern and uses roving tabindex to manage focus movement among radio items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to either the checked radio item or the first radio item in the group.\n\n\nSpace\n\t\nWhen focus is on an unchecked radio item, checks it.\n\n\nArrowDown\n\t\nMoves focus and checks the next radio item in the group.\n\n\nArrowRight\n\t\nMoves focus and checks the next radio item in the group.\n\n\nArrowUp\n\t\nMoves focus to the previous radio item in the group.\n\n\nArrowLeft\n\t\nMoves focus to the previous radio item in the group."
  },
  {
    "title": "Scroll Area | Radix Vue",
    "url": "https://www.radix-vue.com/components/scroll-area#VPContent",
    "html": "ScrollArea\n​\nAugments native scroll functionality for custom, cross-browser styling.\nTags\nv1.2.0-beta.50\nv1.2.0-beta.49\nv1.2.0-beta.48\nv1.2.0-beta.47\nv1.2.0-beta.46\nv1.2.0-beta.45\nv1.2.0-beta.44\nv1.2.0-beta.43\nv1.2.0-beta.42\nv1.2.0-beta.41\nv1.2.0-beta.40\nv1.2.0-beta.39\nv1.2.0-beta.38\nv1.2.0-beta.37\nv1.2.0-beta.36\nv1.2.0-beta.35\nv1.2.0-beta.34\nv1.2.0-beta.33\nv1.2.0-beta.32\nv1.2.0-beta.31\nv1.2.0-beta.30\nv1.2.0-beta.29\nv1.2.0-beta.28\nv1.2.0-beta.27\nv1.2.0-beta.26\nv1.2.0-beta.25\nv1.2.0-beta.24\nv1.2.0-beta.23\nv1.2.0-beta.22\nv1.2.0-beta.21\nv1.2.0-beta.20\nv1.2.0-beta.19\nv1.2.0-beta.18\nv1.2.0-beta.17\nv1.2.0-beta.16\nv1.2.0-beta.15\nv1.2.0-beta.14\nv1.2.0-beta.13\nv1.2.0-beta.12\nv1.2.0-beta.11\nv1.2.0-beta.10\nv1.2.0-beta.9\nv1.2.0-beta.8\nv1.2.0-beta.7\nv1.2.0-beta.6\nv1.2.0-beta.5\nv1.2.0-beta.4\nv1.2.0-beta.3\nv1.2.0-beta.2\nv1.2.0-beta.1\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from 'radix-vue'\n\nconst tags = Array.from({ length: 50 }).map((_, i, a) => `v1.2.0-beta.${a.length - i}`)\n</script>\n\n<template>\n  <ScrollAreaRoot\n    class=\"w-[200px] h-[225px] rounded overflow-hidden shadow-[0_2px_10px] shadow-blackA7 bg-white\"\n    style=\"--scrollbar-size: 10px\"\n  >\n    <ScrollAreaViewport class=\"w-full h-full rounded\">\n      <div class=\"py-[15px] px-5\">\n        <div class=\"text-grass11 text-[15px] leading-[18px] font-semibold\">\n          Tags\n        </div>\n        <div\n          v-for=\"tag in tags\"\n          :key=\"tag\"\n          class=\"text-mauve12 text-[13px] leading-[18px] mt-2.5 pt-2.5 border-t border-t-mauve6\"\n        >\n          {{ tag }}\n        </div>\n      </div>\n    </ScrollAreaViewport>\n    <ScrollAreaScrollbar\n      class=\"flex select-none touch-none p-0.5 bg-blackA6 transition-colors duration-[160ms] ease-out hover:bg-blackA8 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n      orientation=\"vertical\"\n    >\n      <ScrollAreaThumb\n        class=\"flex-1 bg-mauve10 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\"\n      />\n    </ScrollAreaScrollbar>\n    <ScrollAreaScrollbar\n      class=\"flex select-none touch-none p-0.5 bg-blackA6 transition-colors duration-[160ms] ease-out hover:bg-blackA8 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n      orientation=\"horizontal\"\n    >\n      <ScrollAreaThumb\n        class=\"flex-1 bg-mauve10 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\"\n      />\n    </ScrollAreaScrollbar>\n  </ScrollAreaRoot>\n</template>\nExpand code\nFeatures\n​\nScrollbar sits on top of the scrollable content, taking up no space.\nScrolling is native; no underlying position movements via CSS transformations.\nShims pointer behaviors only when interacting with the controls, so keyboard controls are unaffected.\nSupports Right to Left direction.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from 'radix-vue'\n</script>\n\n<template>\n  <ScrollAreaRoot>\n    <ScrollAreaViewport />\n    <ScrollAreaScrollbar orientation=\"horizontal\">\n      <ScrollAreaThumb />\n    </ScrollAreaScrollbar>\n    <ScrollAreaScrollbar orientation=\"vertical\">\n      <ScrollAreaThumb />\n    </ScrollAreaScrollbar>\n    <ScrollAreaCorner />\n  </ScrollAreaRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a scroll area.\n\nProp\tType\tDefault\n\ntype\n\t\nenum\n\t\n\"hover\"\n\n\nscrollHideDelay\n\t\nnumber\n\t\n600\n\n\ndir\n\t\nenum\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nViewport\n​\n\nThe viewport area of the scroll area.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nScrollbar\n​\n\nThe vertical scrollbar. Add a second Scrollbar with an orientation prop to enable horizontal scrolling.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\norientation\n\t\nenum\n\t\nvertical\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nThumb\n​\n\nThe thumb to be used in ScrollAreaScrollbar.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\nCorner\n​\n\nThe corner where both vertical and horizontal scrollbars meet.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAccessibility\n​\n\nIn most cases, it's best to rely on native scrolling and work with the customization options available in CSS. When that isn't enough, ScrollArea provides additional customizability while maintaining the browser's native scroll behavior (as well as accessibility features, like keyboard scrolling).\n\nKeyboard Interactions\n​\n\nScrolling via keyboard is supported by default because the component relies on native scrolling. Specific keyboard interactions may differ between platforms, so we do not specify them here or add specific event listeners to handle scrolling via key events."
  },
  {
    "title": "Separator | Radix Vue",
    "url": "https://www.radix-vue.com/components/separator#VPContent",
    "html": "Separator\n​\nVisually or semantically separates content.\nRadix Primitives\nAn open-source UI component library.\nBlog\nDocs\nSource\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { Separator } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"w-full max-w-[300px] mx-[15px]\">\n    <div class=\"text-white text-[15px] leading-5 font-semibold\">\n      Radix Primitives\n    </div>\n    <div class=\"text-white text-[15px] leading-5\">\n      An open-source UI component library.\n    </div>\n    <Separator\n      class=\"bg-[#d7cff9] data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px my-[15px]\"\n    />\n    <div class=\"flex h-5 items-center\">\n      <div class=\"text-white text-[15px] leading-5\">\n        Blog\n      </div>\n      <Separator\n        class=\"bg-[#d7cff9] data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px mx-[15px]\"\n        decorative\n        orientation=\"vertical\"\n      />\n      <div class=\"text-white text-[15px] leading-5\">\n        Docs\n      </div>\n      <Separator\n        class=\"bg-[#d7cff9] data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px mx-[15px]\"\n        decorative\n        orientation=\"vertical\"\n      />\n      <div class=\"text-white text-[15px] leading-5\">\n        Source\n      </div>\n    </div>\n  </div>\n</template>\nExpand code\nFeatures\n​\nSupports horizontal and vertical orientations.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { Separator } from 'radix-vue'\n</script>\n\n<template>\n  <Separator />\n</template>\nAPI Reference\n​\nRoot\n​\n\nThe separator.\n\nProp\tType\tDefault\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndecorative\n\t\nboolean\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nAccessibility\n​\n\nAdheres to the separator role requirements."
  },
  {
    "title": "Popover | Radix Vue",
    "url": "https://www.radix-vue.com/components/popover#VPContent",
    "html": "Popover\n​\nDisplays rich content in a portal, triggered by a button.\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger\n      class=\"rounded-full w-[35px] h-[35px] inline-flex items-center justify-center text-grass11 bg-white shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black cursor-default outline-none\"\n      aria-label=\"Update dimensions\"\n    >\n      <Icon icon=\"radix-icons:mixer-horizontal\" />\n    </PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent\n        side=\"bottom\"\n        :side-offset=\"5\"\n        class=\"rounded p-5 w-[260px] bg-white shadow-[0_10px_38px_-10px_hsla(206,22%,7%,.35),0_10px_20px_-15px_hsla(206,22%,7%,.2)] focus:shadow-[0_10px_38px_-10px_hsla(206,22%,7%,.35),0_10px_20px_-15px_hsla(206,22%,7%,.2),0_0_0_2px_theme(colors.green7)] will-change-[transform,opacity] data-[state=open]:data-[side=top]:animate-slideDownAndFade data-[state=open]:data-[side=right]:animate-slideLeftAndFade data-[state=open]:data-[side=bottom]:animate-slideUpAndFade data-[state=open]:data-[side=left]:animate-slideRightAndFade\"\n      >\n        <div class=\"flex flex-col gap-2.5\">\n          <p class=\"text-mauve12 text-[15px] leading-[19px] font-semibold mb-2.5\">\n            Dimensions\n          </p>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"width\"> Width </label>\n            <input\n              id=\"width\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"100%\"\n            >\n          </fieldset>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"maxWidth\"> Max. width </label>\n            <input\n              id=\"maxWidth\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"300px\"\n            >\n          </fieldset>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"height\"> Height </label>\n            <input\n              id=\"height\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"25px\"\n            >\n          </fieldset>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"maxHeight\"> Max. height </label>\n            <input\n              id=\"maxHeight\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"none\"\n            >\n          </fieldset>\n        </div>\n        <PopoverClose\n          class=\"rounded-full h-[25px] w-[25px] inline-flex items-center justify-center text-grass11 absolute top-[5px] right-[5px] hover:bg-green4 focus:shadow-[0_0_0_2px] focus:shadow-green7 outline-none cursor-default\"\n          aria-label=\"Close\"\n        >\n          <Icon icon=\"radix-icons:cross-2\" />\n        </PopoverClose>\n        <PopoverArrow class=\"fill-white\" />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed and customizable.\nSupports modal and non-modal modes.\nDismissing and layering behavior is highly customizable.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger />\n    <PopoverAnchor />\n    <PopoverPortal>\n      <PopoverContent>\n        <PopoverClose />\n        <PopoverArrow />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a popover.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nmodal\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that toggles the popover. By default, the PopoverContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nAnchor\n​\n\nAn optional element to position the PopoverContent against. If this part is not used, the content will position alongside the PopoverTrigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the popover is open.\n\nProp\tType\tDefault\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@openAutoFocus\n\t(event: Event) => void\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-popover-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-popover-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-popover-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-popover-trigger-width\t\nThe width of the trigger\n\n--radix-popover-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the popover. This can be used to help visually link the anchor with the PopoverContent. Must be rendered inside PopoverContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nClose\n​\n\nThe button that closes an open popover.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nConstrain the content size\n​\n\nYou may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-popover-trigger-width and --radix-popover-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>…</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\" :side-offset=\"5\">\n        …\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.PopoverContent {\n  width: var(--radix-popover-trigger-width);\n  max-height: var(--radix-popover-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-popover-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>…</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        …\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.PopoverContent {\n  transform-origin: var(--radix-popover-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>…</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        …\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.PopoverContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.PopoverContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.PopoverContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nWith custom anchor\n​\n\nYou can anchor the content to another element if you do not want to use the trigger as the anchor.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverAnchor as-child>\n      <div class=\"Row\">\n        Row as anchor <PopoverTrigger>Trigger</PopoverTrigger>\n      </div>\n    </PopoverAnchor>\n\n    <PopoverPortal>\n      <PopoverContent>…</PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.Row {\n  background-color: gainsboro;\n  padding: 20px;\n}\nAccessibility\n​\n\nAdheres to the Dialog WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the popover.\n\n\nEnter\n\t\nOpens/closes the popover.\n\n\nTab\n\t\nMoves focus to the next focusable element\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element\n\n\nEsc\n\t\nCloses the popover and moves focus to PopoverTrigger.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract the arrow and set default configuration\n​\n\nThis example abstracts the PopoverArrow part and sets a default sideOffset configuration.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Popover, PopoverContent, PopoverTrigger } from './your-popover'\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger>Popover trigger</PopoverTrigger>\n    <PopoverContent>Popover content</PopoverContent>\n  </Popover>\n</template>\nImplementation\n​\nts\n// your-popover.ts\nexport { default as PopoverContent } from 'PopoverContent.vue'\n\nexport { PopoverRoot as Popover, PopoverTrigger } from 'radix-vue'\nvue\n<!-- PopoverContent.vue -->\n<script setup lang=\"ts\">\nimport { PopoverContent, type PopoverContentEmits, type PopoverContentProps, PopoverPortal, useForwardPropsEmits, } from 'radix-vue'\n\nconst props = defineProps<PopoverContentProps>()\nconst emits = defineEmits<PopoverContentEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <PopoverPortal>\n    <PopoverContent v-bind=\"{ ...forwarded, ...$attrs }\">\n      <slot />\n    </PopoverContent>\n  </PopoverPortal>\n</template>"
  },
  {
    "title": "Menubar | Radix Vue",
    "url": "https://www.radix-vue.com/components/menubar#VPContent",
    "html": "Menubar\n​\nA visually persistent menu common in desktop applications that provides quick access to a consistent set of commands.\nFile\nEdit\nView\nProfiles\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from 'radix-vue'\n\nconst currentMenu = ref('')\nconst checkboxOne = ref(false)\nconst checkboxTwo = ref(false)\nconst person = ref('pedro')\nfunction handleClick() {\n  alert('hello!')\n}\n\nconst RADIO_ITEMS = ['Andy', 'Benoît', 'Luis']\nconst CHECK_ITEMS = ['Always Show Bookmarks Bar', 'Always Show Full URLs']\n</script>\n\n<template>\n  <MenubarRoot v-model=\"currentMenu\" class=\"flex bg-white p-[3px] rounded-md shadow-[0_2px_10px] shadow-blackA7\">\n    <MenubarMenu value=\"file\">\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        File\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-3\"\n        >\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            New Tab\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ T\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            New Window\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ N\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            disabled\n          >\n            New Incognito Window\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarSub>\n            <MenubarSubTrigger\n              class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            >\n              Share\n              <div\n                class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n              >\n                <Icon icon=\"radix-icons:chevron-right\" />\n              </div>\n            </MenubarSubTrigger>\n            <MenubarPortal>\n              <MenubarSubContent\n                class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n                :align-offset=\"-5\"\n              >\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Email Link\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Messages\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Notes\n                </MenubarItem>\n              </MenubarSubContent>\n            </MenubarPortal>\n          </MenubarSub>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Print…\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ P\n            </div>\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n\n    <MenubarMenu>\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        Edit\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-3\"\n        >\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Undo\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ Z\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Redo\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⇧ ⌘ Z\n            </div>\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarSub>\n            <MenubarSubTrigger\n              class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            >\n              Find\n              <div\n                class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n              >\n                <Icon icon=\"radix-icons:chevron-right\" />\n              </div>\n            </MenubarSubTrigger>\n\n            <MenubarPortal>\n              <MenubarSubContent\n                class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n                :align-offset=\"-5\"\n              >\n                <MenubarItem\n                  class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Search the web…\n                </MenubarItem>\n                <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Find…\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Find Next\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Find Previous\n                </MenubarItem>\n              </MenubarSubContent>\n            </MenubarPortal>\n          </MenubarSub>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Cut\n          </MenubarItem>\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Copy\n          </MenubarItem>\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Paste\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n\n    <MenubarMenu>\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        View\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-14\"\n        >\n          <MenubarCheckboxItem\n            v-model=\"checkboxOne\"\n            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          >\n            <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:check\" />\n            </MenubarItemIndicator>\n            Show Bookmarks\n            <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              ⌘+B\n            </div>\n          </MenubarCheckboxItem>\n          <MenubarCheckboxItem\n            v-model=\"checkboxTwo\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          >\n            <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:check\" />\n            </MenubarItemIndicator>\n            Show Full URLs\n          </MenubarCheckboxItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Reload\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ R\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            disabled\n          >\n            Force Reload\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⇧ ⌘ R\n            </div>\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Toggle Fullscreen\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Hide Sidebar\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n\n    <MenubarMenu>\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        Profiles\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-14\"\n        >\n          <MenubarRadioGroup v-model=\"person\">\n            <MenubarRadioItem\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              value=\"pedro\"\n            >\n              <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:dot-filled\" />\n              </MenubarItemIndicator>\n              Pedro Duarte\n            </MenubarRadioItem>\n            <MenubarRadioItem\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              value=\"colm\"\n            >\n              <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:dot-filled\" />\n              </MenubarItemIndicator>\n              Colm Tuite\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            @click=\"handleClick\"\n          >\n            Edit…\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Add Profile…\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports submenus with configurable reading direction.\nSupports items, labels, groups of items.\nSupports checkable items (single or multiple).\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed.\nFull keyboard navigation.\nTypeahead support.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarArrow,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from './'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger />\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarLabel />\n          <MenubarItem />\n\n          <MenubarGroup>\n            <MenubarItem />\n          </MenubarGroup>\n\n          <MenubarCheckboxItem>\n            <MenubarItemIndicator />\n          </MenubarCheckboxItem>\n\n          <MenubarRadioGroup>\n            <MenubarRadioItem>\n              <MenubarItemIndicator />\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n\n          <MenubarSub>\n            <MenubarSubTrigger />\n            <MenubarPortal>\n              <MenubarSubContent />\n            </MenubarPortal>\n          </MenubarSub>\n\n          <MenubarSeparator />\n          <MenubarArrow />\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a menubar\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nMenu\n​\n\nA top level menu item, contains a trigger with content combination.\n\nProp\tType\tDefault\n\nvalue\n\t\nstring\n\t\nTrigger\n​\n\nThe button that toggles the content. By default, the MenubarContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when a menu is open.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-menubar-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-menubar-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-menubar-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-menubar-trigger-width\t\nThe width of the trigger\n\n--radix-menubar-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside a menubar menu. This can be used to help visually link the trigger with the MenubarContent. Must be rendered inside MenubarContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nItem\n​\n\nThe component that contains the menubar items.\n\nProp\tType\tDefault\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nGroup\n​\n\nUsed to group multiple MenubarItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render a label. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCheckboxItem\n​\n\nAn item that can be controlled and rendered like a checkbox.\n\nProp\tType\tDefault\n\nchecked\n\t\nboolean | 'indeterminate'\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:checked\n\t(checked: boolean) => void\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nRadioGroup\n​\n\nUsed to group multiple MenubarRadioItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nmodelValue\n\t\nstring\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nRadioItem\n​\n\nAn item that can be controlled and rendered like a radio.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the parent MenubarCheckboxItem or MenubarRadioItem is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\nSeparator\n​\n\nUsed to visually separate items in a menubar menu.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSub\n​\n\nContains all the parts of a submenu.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nSubTrigger\n​\n\nAn item that opens a submenu. Must be rendered inside MenubarSub.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nSubContent\n​\n\nThe component that pops out when a submenu is open. Must be rendered inside MenubarSub.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-menubar-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-menubar-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-menubar-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-menubar-trigger-width\t\nThe width of the trigger\n\n--radix-menubar-trigger-height\t\nThe height of the trigger\nExamples\n​\nWith submenus\n​\n\nYou can create submenus by using MenubarSub in combination with its parts.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Sub menu →</MenubarSubTrigger>\n            <MenubarPortal>\n              <MenubarSubContent>\n                <MenubarItem>Sub menu item</MenubarItem>\n                <MenubarItem>Sub menu item</MenubarItem>\n                <MenubarArrow />\n              </MenubarSubContent>\n            </MenubarPortal>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem class=\"MenubarItem\" disabled>\n            …\n          </MenubarItem>\n          <MenubarItem class=\"MenubarItem\">\n            …\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarItem[data-disabled] {\n  color: gainsboro;\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith labels\n​\n\nUse the Label part to help label a section.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarLabel>Label</MenubarLabel>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith checkbox items\n​\n\nUse the CheckboxItem part to add an item that can be checked.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst checked = ref(true)\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarCheckboxItem v-model:checked=\"checked\">\n            <MenubarItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </MenubarItemIndicator>\n            Checkbox item\n          </MenubarCheckboxItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith radio items\n​\n\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst color = ref('blue')\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarRadioGroup v-model=\"color\">\n            <MenubarRadioItem value=\"red\">\n              <MenubarItemIndicator>\n                <Icon icon=\"radix-icons:check\" />\n              </MenubarItemIndicator>\n              Red\n            </MenubarRadioItem>\n            <MenubarRadioItem value=\"blue\">\n              <MenubarItemIndicator>\n                <Icon icon=\"radix-icons:check\" />\n              </MenubarItemIndicator>\n              Blue\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith complex items\n​\n\nYou can add extra decorative elements in the Item parts, such as images.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>\n            <img src=\"…\">\n            Adolfo Hess\n          </MenubarItem>\n          <MenubarItem>\n            <img src=\"…\">\n            Miyah Myles\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nConstrain the content/sub-content size\n​\n\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-menubar-trigger-width and --radix-menubar-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger> Trigger </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\" :side-offset=\"5\" :align-offset=\"-3\">\n          <MenubarItem> New Tab </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarContent {\n  width: var(--radix-menubar-trigger-width);\n  max-height: var(--radix-menubar-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-menubar-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\">\n          …\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarContent {\n  transform-origin: var(--radix-menubar-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\">\n          …\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.MenubarContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.MenubarContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\n\nAdheres to the Menu Button WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on MenubarTrigger, opens the menubar and focuses the first item.\nWhen focus is on an item, activates the focused item.\n\n\nEnter\n\t\nWhen focus is on MenubarTrigger, opens the associated menu.\nWhen focus is on an item, activates the focused item.\n\n\nArrowDown\n\t\nWhen focus is on MenubarTrigger, opens the associated menu.\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on an item, moves focus to the previous item.\n\n\nArrowRight\nArrowLeft\n\t\nWhen focus is on a MenubarTrigger, moves focus to the next or previous item.\nWhen focus is on a MenubarSubTrigger, opens or closes the submenu depending on reading direction.\nWhen focus is within a MenubarContent, opens the next menu in the menubar\n\n\nEsc\n\t\nCloses the currently open menu and moves focus to its MenubarTrigger."
  },
  {
    "title": "Progress | Radix Vue",
    "url": "https://www.radix-vue.com/components/progress#VPContent",
    "html": "Progress\n​\nDisplays an indicator showing the completion progress of a task, typically displayed as a progress bar.\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue'\nimport { ProgressIndicator, ProgressRoot } from 'radix-vue'\n\nconst progressValue = ref(10)\n\nonMounted(() => {\n  const timer = setTimeout(() => (progressValue.value = 66), 500)\n  return () => clearTimeout(timer)\n})\n</script>\n\n<template>\n  <ProgressRoot\n    v-model=\"progressValue\"\n    class=\"relative overflow-hidden bg-blackA9 rounded-full w-full sm:w-[300px] h-4 sm:h-5\"\n    style=\"transform: translateZ(0)\"\n  >\n    <ProgressIndicator\n      class=\"bg-white rounded-full w-full h-full transition-transform duration-[660ms] ease-[cubic-bezier(0.65, 0, 0.35, 1)]\"\n      :style=\"`transform: translateX(-${100 - progressValue}%)`\"\n    />\n  </ProgressRoot>\n</template>\nExpand code\nFeatures\n​\nProvides context for assistive technology to read the progress of a task.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { ProgressIndicator, ProgressRoot } from 'radix-vue'\n</script>\n\n<template>\n  <ProgressRoot>\n    <ProgressIndicator />\n  </ProgressRoot>\n</template>\nAccessibility\n​\n\nAdheres to the progressbar role requirements.\n\nAPI Reference\n​\nRoot\n​\n\nContains all of the progress parts.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nnumber | null\n\t\n\n\nmax\n\t\nnumber\n\t\n\n\ngetValueLabel\n\t\nfunction\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-state]\t\"complete\" | \"indeterminate\" | \"loading\"\n[data-value]\tThe current value\n[data-max]\tThe max value\nIndicator\n​\n\nUsed to show the progress visually. It also makes progress accessible to assistive technologies.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"complete\" | \"indeterminate\" | \"loading\"\n[data-value]\tThe current value\n[data-max]\tThe max value"
  },
  {
    "title": "Pin Input | Radix Vue",
    "url": "https://www.radix-vue.com/components/pin-input#VPContent",
    "html": "Pin Input\n​\nAlpha\nA sequence of one-character alphanumeric inputs.\nPin Input\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { Label, PinInputInput, PinInputRoot } from 'radix-vue'\n\nconst value = ref<string[]>([])\nconst handleComplete = (e: string[]) => alert(e.join(''))\n</script>\n\n<template>\n  <div>\n    <Label for=\"pin-input\" class=\"text-white\">Pin Input</Label>\n    <PinInputRoot\n      id=\"pin-input\"\n      v-model=\"value\"\n      placeholder=\"○\"\n      class=\"flex gap-2 items-center mt-1\"\n      @complete=\"handleComplete\"\n    >\n      <PinInputInput\n        v-for=\"(id, index) in 5\"\n        :key=\"id\"\n        :index=\"index\"\n        class=\"w-10 h-10 bg-white rounded text-center shadow-lg text-green10 placeholder:text-mauve8 focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-white\"\n      />\n    </PinInputRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nSupports pasting from clipboard\nEmit event when inputs were filled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { PinInputInput, PinInputRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PinInputRoot>\n    <PinInputInput />\n  </PinInputRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a checkbox. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndefaultValue\n\t\nstring[]\n\t\n\n\nmodelValue\n\t\nstring[]\n\t\n\n\nplaceholder\n\t\nstring\n\t\n\n\nmask\n\t\nboolean\n\t\nfalse\n\n\notp\n\t\nboolean\n\t\nfalse\n\n\ntype\n\t\ntext | number\n\t\ntext\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string[]) => void\n\n@complete\n\t(value: string[]) => void\nData Attribute\tValue\n[data-complete]\tPresent when completed\n[data-disabled]\tPresent when disabled\nInput\n​\n\nInput field for Pin Input. You can add as many input as you like.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nindex\n\t\nnumber\n\t\n\n\ndisabled\n\t\nboolean\n\t\nData Attribute\tValue\n[data-complete]\tPresent when completed\n[data-disabled]\tPresent when disabled\nExamples\n​\nOTP mode\n​\n\nYou can set the pin input to otp mode by setting otp to true.\n\nvue\n<script setup lang=\"ts\"> \nimport { Label, PinInputInput, PinInputRoot } from 'radix-vue' \n</script>\n\n<template>\n  <PinInputRoot v-model=\"value\" otp>\n    …\n  </PinInputRoot>\n</template>\nNumeric mode\n​\n\nYou can set the pin input to only accept number type by setting type to number.\n\nvue\n<script setup lang=\"ts\"> \nimport { Label, PinInputInput, PinInputRoot } from 'radix-vue' \n</script>\n\n<template>\n  <PinInputRoot v-model=\"value\" type=\"number\">\n    …\n  </PinInputRoot>\n</template>\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nArrowLeft\n\t\nFocus on previous input.\n\n\nArrowRight\n\t\nFocus on next input.\n\n\nHome\n\t\nFocus on the first input.\n\n\nEnd\n\t\nFocus on the last input.\n\n\nBackspace\n\t\nDeletes the value of the current input. If the input is empty, moves to the previous input and deletes that value as well.\n\n\nDelete\n\t\nDeletes the value of the current input.\n\n\nCtrl + V\n\t\nPastes the contents of the clipboard into the pin input. If the number of characters in the clipboard equals exceeds the number of inputs, the contents are pasted from the first input. Otherwise, the contents are pasted from the current input onwards."
  },
  {
    "title": "Dropdown Menu | Radix Vue",
    "url": "https://www.radix-vue.com/components/dropdown-menu#VPContent",
    "html": "DropdownMenu\n​\nDisplays a menu to the user—such as a set of actions or functions—triggered by a button.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  DropdownMenuArrow,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n\nconst toggleState = ref(false)\nconst checkboxOne = ref(false)\nconst checkboxTwo = ref(false)\nconst person = ref('pedro')\n\nfunction handleClick() {\n  alert('hello!')\n}\n</script>\n\n<template>\n  <DropdownMenuRoot v-model:open=\"toggleState\">\n    <DropdownMenuTrigger\n      class=\"rounded-full w-[35px] h-[35px] inline-flex items-center justify-center text-grass11 bg-white shadow-[0_2px_10px] shadow-blackA7 outline-none hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      aria-label=\"Customise options\"\n    >\n      <Icon icon=\"radix-icons:hamburger-menu\" />\n    </DropdownMenuTrigger>\n\n    <DropdownMenuPortal>\n      <DropdownMenuContent\n        class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n        :side-offset=\"5\"\n      >\n        <DropdownMenuItem\n          value=\"New Tab\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          @click=\"handleClick\"\n        >\n          New Tab\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+T\n          </div>\n        </DropdownMenuItem>\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger\n            value=\"more toolsz\"\n            class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools\n            <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent\n              class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\"\n              :align-offset=\"-5\"\n            >\n              <DropdownMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As…\n                <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </DropdownMenuItem>\n              <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </DropdownMenuItem>\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuItem\n          value=\"New Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          New Window\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+N\n          </div>\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          value=\"New Private Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          disabled\n        >\n          New Private Window\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⇧+⌘+N\n          </div>\n        </DropdownMenuItem>\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger\n            value=\"more tools\"\n            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none w-full outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools\n            <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent\n              class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\"\n              :align-offset=\"-5\"\n            >\n              <DropdownMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As…\n                <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </DropdownMenuItem>\n              <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </DropdownMenuItem>\n              <DropdownMenuSub>\n                <DropdownMenuSubTrigger\n                  value=\"more toolsz\"\n                  class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                >\n                  More Tools\n                  <div\n                    class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                  >\n                    <Icon icon=\"radix-icons:chevron-right\" />\n                  </div>\n                </DropdownMenuSubTrigger>\n                <DropdownMenuPortal>\n                  <DropdownMenuSubContent\n                    class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                    :side-offset=\"2\"\n                    :align-offset=\"-5\"\n                  >\n                    <DropdownMenuItem\n                      class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Save Page As…\n                      <div\n                        class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                      >\n                        ⌘+S\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Create Shortcut…\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Name Window…\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                    <DropdownMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Developer Tools\n                    </DropdownMenuItem>\n                    <DropdownMenuSub>\n                      <DropdownMenuSubTrigger\n                        value=\"more toolsz\"\n                        class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                      >\n                        More Tools\n                        <div\n                          class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                        >\n                          <Icon icon=\"radix-icons:chevron-right\" />\n                        </div>\n                      </DropdownMenuSubTrigger>\n                      <DropdownMenuPortal>\n                        <DropdownMenuSubContent\n                          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                          :side-offset=\"2\"\n                          :align-offset=\"-5\"\n                        >\n                          <DropdownMenuItem\n                            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Save Page As…\n                            <div\n                              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                            >\n                              ⌘+S\n                            </div>\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Create Shortcut…\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Name Window…\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                          <DropdownMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Developer Tools\n                          </DropdownMenuItem>\n                        </DropdownMenuSubContent>\n                      </DropdownMenuPortal>\n                    </DropdownMenuSub>\n                  </DropdownMenuSubContent>\n                </DropdownMenuPortal>\n              </DropdownMenuSub>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </DropdownMenuItem>\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n        <DropdownMenuCheckboxItem\n          v-model:checked=\"checkboxOne\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </DropdownMenuItemIndicator>\n          Show Bookmarks\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+B\n          </div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          v-model:checked=\"checkboxTwo\"\n          class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </DropdownMenuItemIndicator>\n          Show Full URLs\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n\n        <DropdownMenuLabel class=\"pl-[25px] text-xs leading-[25px] text-mauve11\">\n          People\n        </DropdownMenuLabel>\n        <DropdownMenuRadioGroup v-model=\"person\">\n          <DropdownMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"pedro\"\n          >\n            <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </DropdownMenuItemIndicator>\n            Pedro Duarte\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"colm\"\n          >\n            <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </DropdownMenuItemIndicator>\n            Colm Tuite\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n        <DropdownMenuArrow class=\"fill-white\" />\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports submenus with configurable reading direction.\nSupports items, labels, groups of items.\nSupports checkable items (single or multiple) with optional indeterminate state.\nSupports modal and non-modal modes.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed.\nFull keyboard navigation.\nTypeahead support.\nDismissing and layering behavior is highly customizable.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuArrow,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger />\n\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuLabel />\n        <DropdownMenuItem />\n\n        <DropdownMenuGroup>\n          <DropdownMenuItem />\n        </DropdownMenuGroup>\n\n        <DropdownMenuCheckboxItem>\n          <DropdownMenuItemIndicator />\n        </DropdownMenuCheckboxItem>\n\n        <DropdownMenuRadioGroup>\n          <DropdownMenuRadioItem>\n            <DropdownMenuItemIndicator />\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger />\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent />\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n\n        <DropdownMenuSeparator />\n        <DropdownMenuArrow />\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a dropdown menu.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nmodal\n\t\nboolean\n\t\ntrue\n\n\ndir\n\t\nenum\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that toggles the dropdown menu. By default, the DropdownMenuContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the dropdown menu is open.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-dropdown-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-dropdown-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-dropdown-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-dropdown-menu-trigger-width\t\nThe width of the trigger\n\n--radix-dropdown-menu-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the dropdown menu. This can be used to help visually link the trigger with the DropdownMenuContent. Must be rendered inside DropdownMenuContent.\n\nProp\tType\tDefault\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\n\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nThe component that contains the dropdown menu items.\n\nProp\tType\tDefault\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nGroup\n​\n\nUsed to group multiple DropdownMenuItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render a label. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCheckboxItem\n​\n\nAn item that can be controlled and rendered like a checkbox.\n\nProp\tType\tDefault\n\nchecked\n\t\nboolean | 'indeterminate'\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:checked\n\t(checked: boolean) => void\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nRadioGroup\n​\n\nUsed to group multiple DropdownMenuRadioItems.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nRadioItem\n​\n\nAn item that can be controlled and rendered like a radio.\n\nProp\tType\tDefault\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the parent DropdownMenuCheckboxItem or DropdownMenuRadioItem is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\nSeparator\n​\n\nUsed to visually separate items in the dropdown menu.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSub\n​\n\nContains all the parts of a submenu.\n\nProp\tType\tDefault\n\nopen\n\t\nboolean\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nSubTrigger\n​\n\nAn item that opens a submenu. Must be rendered inside DropdownMenuSub.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nCSS Variable\tDescription\n--radix-dropdown-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-dropdown-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-dropdown-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-dropdown-menu-trigger-width\t\nThe width of the trigger\n\n--radix-dropdown-menu-trigger-height\t\nThe height of the trigger\nSubContent\n​\n\nThe component that pops out when a submenu is open. Must be rendered inside DropdownMenuSub.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nWith submenus\n​\n\nYou can create submenus by using DropdownMenuSub in combination with its parts.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuArrow,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>Sub menu →</DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent>\n              <DropdownMenuItem>Sub menu item</DropdownMenuItem>\n              <DropdownMenuItem>Sub menu item</DropdownMenuItem>\n              <DropdownMenuArrow />\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem class=\"DropdownMenuItem\" disabled>\n          …\n        </DropdownMenuItem>\n        <DropdownMenuItem class=\"DropdownMenuItem\">\n          …\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuItem[data-disabled] {\n  color: gainsboro;\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith labels\n​\n\nUse the Label part to help label a section.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuLabel>Label</DropdownMenuLabel>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith checkbox items\n​\n\nUse the CheckboxItem part to add an item that can be checked.\n\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n\nconst checked = ref(false)\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem v-model:checked=\"checked\">\n          <DropdownMenuItemIndicator>\n            <Icon icon=\"radix-icons:check\" />\n          </DropdownMenuItemIndicator>\n          Checkbox item\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith radio items\n​\n\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others.\n\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  DropdownMenuContent,\n  DropdownMenuItemIndicator,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n\nconst color = ref(false)\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuRadioGroup v-model=\"color\">\n          <DropdownMenuRadioItem value=\"red\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Red\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"blue\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Blue\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"green\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Green\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith complex items\n​\n\nYou can add extra decorative elements in the Item parts, such as images.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>\n          <img src=\"…\">\n          Adolfo Hess\n        </DropdownMenuItem>\n        <DropdownMenuItem>\n          <img src=\"…\">\n          Miyah Myles\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nConstrain the content/sub-content size\n​\n\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-dropdown-menu-trigger-width and --radix-dropdown-menu-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\" :side-offset=\"5\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuContent {\n  width: var(--radix-dropdown-menu-trigger-width);\n  max-height: var(--radix-dropdown-menu-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-dropdown-menu-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuContent {\n  transform-origin: var(--radix-dropdown-menu-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.DropdownMenuContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.DropdownMenuContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\n\nAdheres to the Menu Button WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on DropdownMenuTrigger, opens the dropdown menu and focuses the first item.\nWhen focus is on an item, activates the focused item.\n\n\nEnter\n\t\nWhen focus is on DropdownMenuTrigger, opens the dropdown menu and focuses the first item.\nWhen focus is on an item, activates the focused item.\n\n\nArrowDown\n\t\nWhen focus is on DropdownMenuTrigger, opens the dropdown menu.\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on an item, moves focus to the previous item.\n\n\nArrowRight\nArrowLeft\n\t\nWhen focus is on DropdownMenuSubTrigger, opens or closes the submenu depending on reading direction.\n\n\nEsc\n\t\nCloses the dropdown menu and moves focus to{' '} DropdownMenuTrigger.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract the arrow and item indicators\n​\n\nThis example abstracts the DropdownMenuArrow and DropdownMenuItemIndicator parts. It also wraps implementation details for CheckboxItem and RadioItem.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from './your-dropdown-menu'\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger>DropdownMenu trigger</DropdownMenuTrigger>\n    <DropdownMenuContent>\n      <DropdownMenuItem>Item</DropdownMenuItem>\n      <DropdownMenuLabel>Label</DropdownMenuLabel>\n      <DropdownMenuGroup>Group</DropdownMenuGroup>\n      <DropdownMenuCheckboxItem>CheckboxItem</DropdownMenuCheckboxItem>\n      <DropdownMenuSeparator>Separator</DropdownMenuSeparator>\n      <DropdownMenuRadioGroup>\n        <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n        <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n      </DropdownMenuRadioGroup>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\nImplementation\n​\nts\n// your-dropdown-menu.ts\nexport { default as DropdownMenuContent } from 'DropdownMenuContent.vue'\nexport { default as DropdownMenuCheckboxItem } from 'DropdownMenuCheckboxItem.vue'\nexport { default as DropdownMenuRadioItem } from 'DropdownMenuRadioItem.vue'\n\nexport {\n  DropdownMenuRoot as DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuGroup,\n  DropdownMenuRadioGroup,\n  DropdownMenuSeparator\n} from 'radix-vue'\nvue\n<!-- DropdownMenuContent.vue -->\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, type DropdownMenuContentEmits, type DropdownMenuContentProps, DropdownMenuPortal, useForwardPropsEmits, } from 'radix-vue'\n\nconst props = defineProps<DropdownMenuContentProps>()\nconst emits = defineEmits<DropdownMenuContentEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuPortal>\n    <DropdownMenuContent v-bind=\"forwarded\">\n      <slot />\n    </DropdownMenuContent>\n  </DropdownMenuPortal>\n</template>\nvue\n<!-- DropdownMenuCheckboxItem.vue -->\n<script setup lang=\"ts\">\nimport { DropdownMenuCheckboxItem, type DropdownMenuCheckboxItemEmits, type DropdownMenuCheckboxItemProps, DropdownMenuItemIndicator, useForwardPropsEmits } from 'radix-vue'\nimport { CheckIcon } from '@radix-icons/vue'\n\nconst props = defineProps<DropdownMenuCheckboxItemProps>()\nconst emits = defineEmits<DropdownMenuCheckboxItemEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuCheckboxItem v-bind=\"forwarded\">\n    <span>\n      <DropdownMenuItemIndicator>\n        <CheckIcon />\n      </DropdownMenuItemIndicator>\n    </span>\n    <slot />\n  </DropdownMenuCheckboxItem>\n</template>\nvue\n<!-- DropdownMenuRadioItem.vue -->\n<script setup lang=\"ts\">\nimport { DropdownMenuItemIndicator, DropdownMenuRadioItem, type DropdownMenuRadioItemEmits, type DropdownMenuRadioItemProps, useForwardPropsEmits, } from 'radix-vue'\nimport { DotFilledIcon } from '@radix-icons/vue'\n\nconst props = defineProps<DropdownMenuRadioItemProps>()\nconst emits = defineEmits<DropdownMenuRadioItemEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuRadioItem v-bind=\"forwarded\">\n    <span>\n      <DropdownMenuItemIndicator>\n        <DotFilledIcon />\n      </DropdownMenuItemIndicator>\n    </span>\n    <slot />\n  </DropdownMenuRadioItem>\n</template>"
  },
  {
    "title": "Pagination | Radix Vue",
    "url": "https://www.radix-vue.com/components/pagination#VPContent",
    "html": "Pagination\n​\nDisplays data in paged format and provides navigation between pages.\n1\n2\n3\n4\n5\n…\n10\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { PaginationEllipsis, PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationNext, PaginationPrev, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot :total=\"100\" :sibling-count=\"1\" show-edges :default-page=\"2\">\n    <PaginationList v-slot=\"{ items }\" class=\"flex items-center gap-1 text-white\">\n      <PaginationFirst class=\"w-9 h-9  flex items-center justify-center  disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:double-arrow-left\" />\n      </PaginationFirst>\n      <PaginationPrev class=\"w-9 h-9  flex items-center justify-center mr-4  disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:chevron-left\" />\n      </PaginationPrev>\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem v-if=\"page.type === 'page'\" :key=\"index\" class=\"w-9 h-9 border rounded  data-[selected]:bg-white data-[selected]:text-blackA11 hover:bg-white/10 transition focus-within:outline focus-within:outline-1 focus-within:outline-offset-1\" :value=\"page.value\">\n          {{ page.value }}\n        </PaginationListItem>\n        <PaginationEllipsis v-else :key=\"page.type\" :index=\"index\" class=\"w-9 h-9 flex items-center justify-center\">\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n      <PaginationNext class=\"w-9 h-9  flex items-center justify-center  ml-4 disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:chevron-right\" />\n      </PaginationNext>\n      <PaginationLast class=\"w-9 h-9  flex items-center justify-center disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:double-arrow-right\" />\n      </PaginationLast>\n    </PaginationList>\n  </PaginationRoot>\n</template>\nExpand code\nFeatures\n​\nEnable quick access to first, or last page\nEnable to show edges constantly, or not\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { PaginationEllipsis, PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationNext, PaginationPrev, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList v-slot=\"{ items }\">\n      <PaginationFirst />\n      <PaginationPrev />\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem v-if=\"page.type === 'page'\" :key=\"index\" />\n        <PaginationEllipsis v-else :key=\"page.type\" :index=\"index\">\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n      <PaginationNext />\n      <PaginationLast />\n    </PaginationList>\n  </PaginationRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all of the paginations parts.\n\nProp\tType\tDefault\n\npage\n\t\nnumber\n\t\n\n\ndefaultPage\n\t\nnumber\n\t\n1\n\n\ntotal\n\t\nnumber\n\t\n10\n\n\nitemsPerPage\n\t\nnumber\n\t\n10\n\n\nsiblingCount\n\t\nnumber\n\t\n3\n\n\nshowEdges\n\t\nboolean\n\t\nEmit\tType\n\n@update:page\n\t(value: number) => void\nList\n​\n\nUsed to show the list of pages. It also makes pagination accessible to assistive technologies.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nUsed to render the button that changes the current page.\n\nProp\tType\tDefault\n\nvalue\n\t\nnumber\n\t\n\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-selected]\t\"true\" | \"\"\n[data-type]\t\"page\"\nEllipsis\n​\n\nPlaceholder element when the list is long, and only a small amount of siblingCount was set and showEdges was set to true.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-type]\t\"ellipsis\"\nFirst\n​\n\nTriggers that set the page value to 1\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPrev\n​\n\nTriggers that set the page value to the previous page\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nNext\n​\n\nTriggers that set the page value to the next page\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLast\n​\n\nTriggers that set the page value to the last page\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nWith ellipsis\n​\n\nYou can add PaginationEllipsis as a visual cue for more previous and after items.\n\nvue\n<script setup lang=\"ts\">\nimport { PaginationEllipsis, PaginationList, PaginationListItem, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList v-slot=\"{ items }\">\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem v-if=\"page.type === 'page'\" :key=\"index\" />\n        <PaginationEllipsis v-else :key=\"page.type\" :index=\"index\">\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n    </PaginationList>\n  </PaginationRoot>\n</template>\nWith first/last button\n​\n\nYou can add PaginationFirst to allow user to navigate to first page, or PaginationLast to navigate to last page.\n\nvue\n<script setup lang=\"ts\">\nimport { PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList>\n      <PaginationFirst />\n      ...\n      <PaginationLast />\n    </PaginationList>\n  </PaginationRoot>\n</template>\nControl page programmatically\n​\n\nYou can control the current page by passing it a reactive value.\n\nvue\n<script setup lang=\"ts\">\nimport { PaginationRoot } from 'radix-vue'\nimport { Select } from './custom-select'\nimport { ref } from 'vue'\n\nconst currentPage = ref(1)\n</script>\n\n<template>\n  <Select v-model=\"currentPage\" />\n  <PaginationRoot v-model:page=\"currentPage\">\n    ...\n  </PaginationRoot>\n</template>\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nSpace\n\t\nWhen focus is on a any trigger, trigger selected page or arrow navigation\n\n\nEnter\n\t\nWhen focus is on a any trigger, trigger selected page or arrow navigation"
  },
  {
    "title": "Hover Card | Radix Vue",
    "url": "https://www.radix-vue.com/components/hover-card#VPContent",
    "html": "HoverCard\n​\nFor sighted users to preview content available behind a link.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n\nconst hoverState = ref(false)\n</script>\n\n<template>\n  <HoverCardRoot v-model:open=\"hoverState\">\n    <HoverCardTrigger\n      class=\"inline-block cursor-pointer rounded-full shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] outline-none focus:shadow-[0_0_0_2px_white]\"\n      href=\"https://twitter.com/radix_ui\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n    >\n      <img\n        class=\"block h-[45px] w-[45px] rounded-full\"\n        src=\"https://pbs.twimg.com/profile_images/1337055608613253126/r_eiMp2H_400x400.png\"\n        alt=\"Radix UI\"\n      >\n    </HoverCardTrigger>\n    <HoverCardPortal>\n      <HoverCardContent\n        class=\"data-[side=bottom]:animate-slideUpAndFade data-[side=right]:animate-slideLeftAndFade data-[side=left]:animate-slideRightAndFade data-[side=top]:animate-slideDownAndFade w-[300px] rounded-md bg-white p-5 shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] data-[state=open]:transition-all\"\n        :side-offset=\"5\"\n      >\n        <div class=\"flex flex-col gap-[7px]\">\n          <img\n            class=\"block h-[60px] w-[60px] rounded-full\"\n            src=\"https://pbs.twimg.com/profile_images/1337055608613253126/r_eiMp2H_400x400.png\"\n            alt=\"Radix UI\"\n          >\n          <div class=\"flex flex-col gap-[15px]\">\n            <div>\n              <div class=\"text-mauve12 m-0 text-[15px] font-medium leading-[1.5]\">\n                Radix\n              </div>\n              <div class=\"text-mauve10 m-0 text-[15px] leading-[1.5]\">\n                @radix_ui\n              </div>\n            </div>\n            <div class=\"text-mauve12 m-0 text-[15px] leading-[1.5]\">\n              Components, icons, colors, and templates for building high-quality, accessible UI. Free and open-source.\n            </div>\n            <div class=\"flex gap-[15px]\">\n              <div class=\"flex gap-[5px]\">\n                <div class=\"text-mauve12 m-0 text-[15px] font-medium leading-[1.5]\">\n                  0\n                </div>\n                <div class=\"text-mauve10 m-0 text-[15px] leading-[1.5]\">\n                  Following\n                </div>\n              </div>\n              <div class=\"flex gap-[5px]\">\n                <div class=\"text-mauve12 m-0 text-[15px] font-medium leading-[1.5]\">\n                  2,900\n                </div>\n                <div class=\"text-mauve10 m-0 text-[15px] leading-[1.5]\">\n                  Followers\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <HoverCardArrow class=\"fill-white\" size=\"8\" />\n      </HoverCardContent>\n    </HoverCardPortal>\n  </HoverCardRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nSupports custom open and close delays.\nOpens on hover only.\nIgnored by screen readers.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger />\n    <HoverCardPortal>\n      <HoverCardContent>\n        <HoverCardArrow />\n      </HoverCardContent>\n    </HoverCardPortal>\n  </HoverCardRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a hover card.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nopenDelay\n\t\nnumber\n\t\n700\n\n\ncloseDelay\n\t\nnumber\n\t\n300\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\nTrigger\n​\n\nThe link that opens the hover card when hovered.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\na\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the hover card is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-hover-card-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-hover-card-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-hover-card-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-hover-card-trigger-width\t\nThe width of the trigger\n\n--radix-hover-card-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the hover card. This can be used to help visually link the trigger with the HoverCardContent. Must be rendered inside HoverCardContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nShow instantly\n​\n\nUse the openDelay prop to control the time it takes for the hover card to open.\n\nvue\n<script setup>\nimport {\n  HoverCardArrow,\n  HoverCardContent,\n  HoverCardPortal,\n  HoverCardRoot,\n  HoverCardTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot :open-delay=\"0\">\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardContent>…</HoverCardContent>\n  </HoverCardRoot>\n</template>\nConstrain the content size\n​\n\nYou may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-hover-card-trigger-width and --radix-hover-card-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n// index.vue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardPortal>\n      <HoverCardContent class=\"HoverCardContent\" :side-offset=\"5\">\n        …\n      </HoverCardContent>\n    </HoverCardPortal>\n  </HoverCardRoot>\n</template>\ncss\n/* styles.css */\n.HoverCardContent {\n  width: var(--radix-hover-card-trigger-width);\n  max-height: var(--radix-hover-card-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-hover-card-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n// index.vue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardContent class=\"HoverCardContent\">\n      …\n    </HoverCardContent>\n  </HoverCardRoot>\n</template>\ncss\n/* styles.css */\n.HoverCardContent {\n  transform-origin: var(--radix-hover-card-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n// index.vue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardContent class=\"HoverCardContent\">\n      …\n    </HoverCardContent>\n  </HoverCardRoot>\n</template>\ncss\n/* styles.css */\n.HoverCardContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.HoverCardContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.HoverCardContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\nKeyboard Interactions\n​\n\nThe hover card is intended for mouse users only so will not respond to keyboard navigation."
  },
  {
    "title": "Label | Radix Vue",
    "url": "https://www.radix-vue.com/components/label#VPContent",
    "html": "Label\n​\nRenders an accessible label associated with controls.\nFirst name\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Label } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"flex flex-wrap items-center gap-[15px] px-5\">\n    <Label class=\"text-[15px] font-semibold leading-[35px] text-white\" for=\"firstName\"> First name </Label>\n    <input\n      id=\"firstName\"\n      class=\"bg-blackA5 shadow-blackA9 inline-flex h-[35px] w-[200px] appearance-none items-center justify-center rounded-[4px] px-[10px] text-[15px] leading-none text-white shadow-[0_0_0_1px] outline-none focus:shadow-[0_0_0_2px_black] selection:color-white selection:bg-blackA9\"\n      type=\"text\"\n      value=\"Pedro Duarte\"\n    >\n  </div>\n</template>\nExpand code\nFeatures\n​\nText selection is prevented when double clicking label.\nSupports nested controls.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { Label } from 'radix-vue'\n</script>\n\n<template>\n  <Label />\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains the content for the label.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nlabel\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nfor\n\t\nstring\n\t\nAccessibility\n​\n\nThis component is based on the native label element, it will automatically apply the correct labelling when wrapping controls or using the for attribute. For your own custom controls to work correctly, ensure they use native elements such as button or input as a base."
  },
  {
    "title": "Context Menu | Radix Vue",
    "url": "https://www.radix-vue.com/components/context-menu#VPContent",
    "html": "Context Menu\n​\nDisplays a menu located at the pointer, triggered by a right-click or a long-press.\nRight click here.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'radix-vue'\n\nconst checkboxOne = ref(false)\nconst checkboxTwo = ref(false)\nconst person = ref('pedro')\n\nfunction handleClick() {\n  alert('hello!')\n}\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger\n      as-child\n      class=\"block border-2 border-white border-dashed text-white rounded text-[15px] select-none py-[45px] w-[300px] text-center\"\n    >\n      <span> Right click here. </span>\n    </ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent\n        class=\"min-w-[220px] z-30 bg-white outline-none rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n        :side-offset=\"5\"\n      >\n        <ContextMenuItem\n          value=\"New Tab\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          @click=\"handleClick\"\n        >\n          New Tab <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+T\n          </div>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger\n            value=\"more toolsz\"\n            class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </ContextMenuSubTrigger>\n          <ContextMenuPortal>\n            <ContextMenuSubContent\n              class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\" :align-offset=\"-5\"\n            >\n              <ContextMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As… <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </ContextMenuItem>\n              <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </ContextMenuItem>\n            </ContextMenuSubContent>\n          </ContextMenuPortal>\n        </ContextMenuSub>\n        <ContextMenuItem\n          value=\"New Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          New Window <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+N\n          </div>\n        </ContextMenuItem>\n        <ContextMenuItem\n          value=\"New Private Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          disabled\n        >\n          New Private Window <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⇧+⌘+N\n          </div>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger\n            value=\"more tools\"\n            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none w-full outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </ContextMenuSubTrigger>\n          <ContextMenuPortal>\n            <ContextMenuSubContent\n              class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\" :align-offset=\"-5\"\n            >\n              <ContextMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As… <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </ContextMenuItem>\n              <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </ContextMenuItem>\n              <ContextMenuSub>\n                <ContextMenuSubTrigger\n                  value=\"more toolsz\"\n                  class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                >\n                  More Tools <div\n                    class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                  >\n                    <Icon icon=\"radix-icons:chevron-right\" />\n                  </div>\n                </ContextMenuSubTrigger>\n                <ContextMenuPortal>\n                  <ContextMenuSubContent\n                    class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                    :side-offset=\"2\" :align-offset=\"-5\"\n                  >\n                    <ContextMenuItem\n                      class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Save Page As… <div\n                        class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                      >\n                        ⌘+S\n                      </div>\n                    </ContextMenuItem>\n                    <ContextMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Create Shortcut…\n                    </ContextMenuItem>\n                    <ContextMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Name Window…\n                    </ContextMenuItem>\n                    <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                    <ContextMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Developer Tools\n                    </ContextMenuItem>\n                    <ContextMenuSub>\n                      <ContextMenuSubTrigger\n                        value=\"more toolsz\"\n                        class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                      >\n                        More Tools <div\n                          class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                        >\n                          <Icon icon=\"radix-icons:chevron-right\" />\n                        </div>\n                      </ContextMenuSubTrigger>\n                      <ContextMenuPortal>\n                        <ContextMenuSubContent\n                          class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                          :side-offset=\"2\" :align-offset=\"-5\"\n                        >\n                          <ContextMenuItem\n                            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Save Page As… <div\n                              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                            >\n                              ⌘+S\n                            </div>\n                          </ContextMenuItem>\n                          <ContextMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Create Shortcut…\n                          </ContextMenuItem>\n                          <ContextMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Name Window…\n                          </ContextMenuItem>\n                          <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                          <ContextMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Developer Tools\n                          </ContextMenuItem>\n                        </ContextMenuSubContent>\n                      </ContextMenuPortal>\n                    </ContextMenuSub>\n                  </ContextMenuSubContent>\n                </ContextMenuPortal>\n              </ContextMenuSub>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </ContextMenuItem>\n            </ContextMenuSubContent>\n          </ContextMenuPortal>\n        </ContextMenuSub>\n        <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n        <ContextMenuCheckboxItem\n          v-model=\"checkboxOne\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </ContextMenuItemIndicator> Show Bookmarks <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+B\n          </div>\n        </ContextMenuCheckboxItem>\n        <ContextMenuCheckboxItem\n          v-model=\"checkboxTwo\"\n          class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </ContextMenuItemIndicator> Show Full URLs\n        </ContextMenuCheckboxItem>\n        <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n        <ContextMenuLabel class=\"pl-[25px] text-xs leading-[25px] text-mauve11\">\n          People\n        </ContextMenuLabel>\n        <ContextMenuRadioGroup v-model=\"person\">\n          <ContextMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"pedro\"\n          >\n            <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </ContextMenuItemIndicator> Pedro Duarte\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"colm\"\n          >\n            <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </ContextMenuItemIndicator> Colm Tuite\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nExpand code\nFeatures\n​\nSupports submenus with configurable reading direction.\nSupports items, labels, groups of items.\nSupports checkable items (single or multiple) with optional indeterminate state.\nSupports modal and non-modal modes.\nCustomize side, alignment, offsets, collision handling.\nFocus is fully managed.\nFull keyboard navigation.\nTypeahead support.\nDismissing and layering behavior is highly customizable.\nTriggers with a long-press on touch devices\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuGroup,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger />\n\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuLabel />\n        <ContextMenuItem />\n\n        <ContextMenuGroup>\n          <ContextMenuItem />\n        </ContextMenuGroup>\n\n        <ContextMenuCheckboxItem>\n          <ContextMenuItemIndicator />\n        </ContextMenuCheckboxItem>\n\n        <ContextMenuRadioGroup>\n          <ContextMenuRadioItem>\n            <ContextMenuItemIndicator />\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n\n        <ContextMenuSub>\n          <ContextMenuSubTrigger />\n          <ContextMenuPortal>\n            <ContextMenuSubContent />\n          </ContextMenuPortal>\n        </ContextMenuSub>\n\n        <ContextMenuSeparator />\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nAPI Reference\n​\n\nAdheres to the Menu WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items.\n\nRoot\n​\n\nContains all the parts of a context menu.\n\nProp\tType\tDefault\n\ndir\n\t\nenum\n\t\n\n\nmodal\n\t\nboolean\n\t\ntrue\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe area that opens the context menu. Wrap it around the target you want the context menu to open from when right-clicking (or using the relevant keyboard shortcuts).\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out in an open context menu.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-context-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-context-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-context-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-context-menu-trigger-width\t\nThe width of the trigger\n\n--radix-context-menu-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside a submenu. This can be used to help visually link the trigger item with the ContextMenu.Content. Must be rendered inside ContextMenu.Content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nItem\n​\n\nThe component that contains the context menu items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nGroup\n​\n\nUsed to group multiple ContextMenu.Items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render a label. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCheckboxItem\n​\n\nAn item that can be controlled and rendered like a checkbox.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nchecked\n\t\nboolean | 'indeterminate'\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@update:checked\n\t(checked: boolean) => void\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nRadioGroup\n​\n\nUsed to group multiple ContextMenu.RadioItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nmodelValue\n\t\nstring\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nRadioItem\n​\n\nAn item that can be controlled and rendered like a radio.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the parent ContextMenu.CheckboxItem or ContextMenu.RadioItem is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\nSeparator\n​\n\nUsed to visually separate items in the context menu.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSub\n​\n\nContains all the parts of a submenu.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nSubTrigger\n​\n\nAn item that opens a submenu. Must be rendered inside ContextMenu.Sub.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nSubContent\n​\n\nThe component that pops out when a submenu is open. Must be rendered inside ContextMenu.Sub.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-context-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-context-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-context-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-context-menu-trigger-width\t\nThe width of the trigger\n\n--radix-context-menu-trigger-height\t\nThe height of the trigger\nExamples\n​\nWith submenus\n​\n\nYou can create submenus by using ContextMenuSub in combination with its parts.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuSub>\n          <ContextMenuSubTrigger>Sub menu →</ContextMenuSubTrigger>\n          <ContextMenuPortal>\n            <ContextMenuSubContent>\n              <ContextMenuItem>Sub menu item</ContextMenuItem>\n              <ContextMenuItem>Sub menu item</ContextMenuItem>\n              <ContextMenuArrow />\n            </ContextMenuSubContent>\n          </ContextMenuPortal>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem class=\"ContextMenuItem\" disabled>\n          …\n        </ContextMenuItem>\n        <ContextMenuItem class=\"ContextMenuItem\">\n          …\n        </ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuItem[data-disabled] {\n  color: gainsboro;\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith labels\n​\n\nUse the Label part to help label a section.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuLabel>Label</ContextMenuLabel>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith checkbox items\n​\n\nUse the CheckboxItem part to add an item that can be checked.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst checked = ref(true)\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem v-model=\"checked\">\n          <ContextMenuItemIndicator>\n            <Icon icon=\"radix-icons:check\" />\n          </ContextMenuItemIndicator>\n          Checkbox item\n        </ContextMenuCheckboxItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith radio items\n​\n\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst color = ref('blue')\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuRadioGroup v-model=\"color\">\n          <ContextMenuRadioItem value=\"red\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Red\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"blue\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Blue\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"green\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Green\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith complex items\n​\n\nYou can add extra decorative elements in the Item parts, such as images.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>\n          <img src=\"…\">\n          Adolfo Hess\n        </ContextMenuItem>\n        <ContextMenuItem>\n          <img src=\"…\">\n          Miyah Myles\n        </ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nConstrain the content/sub-content size\n​\n\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-context-menu-trigger-width and --radix-context-menu-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuContent {\n  width: var(--radix-context-menu-trigger-width);\n  max-height: var(--radix-context-menu-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-context-menu-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuContent {\n  transform-origin: var(--radix-context-menu-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.ContextMenuContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.ContextMenuContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\n\nUses roving tabindex to manage focus movement among menu items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nActivates the focused item.\n\n\nEnter\n\t\nActivates the focused item.\n\n\nArrowDown\n\t\nMoves focus to the next item.\n\n\nArrowUp\n\t\nMoves focus to the previous item.\n\n\nArrowRight\nArrowLeft\n\t\nWhen focus is on ContextMenu.SubTrigger, opens or closes the submenu depending on reading direction.\n\n\nEsc\n\t\nCloses the context menu"
  },
  {
    "title": "Dialog | Radix Vue",
    "url": "https://www.radix-vue.com/components/dialog#VPContent",
    "html": "Dialog\n​\nA window overlaid on either the primary window or another dialog window, rendering the content underneath inert.\nEdit profile\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger\n      class=\"text-grass11 font-semibold shadow-blackA7 hover:bg-mauve3 inline-flex h-[35px] items-center justify-center rounded-[4px] bg-white px-[15px] leading-none shadow-[0_2px_10px] focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none\"\n    >\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal>\n      <DialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n      <DialogContent\n        class=\"data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none z-[100]\"\n      >\n        <DialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n          Edit profile\n        </DialogTitle>\n        <DialogDescription class=\"text-mauve11 mt-[10px] mb-5 text-[15px] leading-normal\">\n          Make changes to your profile here. Click save when you're done.\n        </DialogDescription>\n        <fieldset class=\"mb-[15px] flex items-center gap-5\">\n          <label class=\"text-grass11 w-[90px] text-right text-[15px]\" for=\"name\"> Name </label>\n          <input\n            id=\"name\"\n            class=\"text-grass11 shadow-green7 focus:shadow-green8 inline-flex h-[35px] w-full flex-1 items-center justify-center rounded-[4px] px-[10px] text-[15px] leading-none shadow-[0_0_0_1px] outline-none focus:shadow-[0_0_0_2px]\"\n            defaultValue=\"Pedro Duarte\"\n          >\n        </fieldset>\n        <fieldset class=\"mb-[15px] flex items-center gap-5\">\n          <label class=\"text-grass11 w-[90px] text-right text-[15px]\" for=\"username\"> Username </label>\n          <input\n            id=\"username\"\n            class=\"text-grass11 shadow-green7 focus:shadow-green8 inline-flex h-[35px] w-full flex-1 items-center justify-center rounded-[4px] px-[10px] text-[15px] leading-none shadow-[0_0_0_1px] outline-none focus:shadow-[0_0_0_2px]\"\n            defaultValue=\"@peduarte\"\n          >\n        </fieldset>\n        <div class=\"mt-[25px] flex justify-end\">\n          <DialogClose as-child>\n            <button\n              class=\"bg-green4 text-green11 hover:bg-green5 focus:shadow-green7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none focus:shadow-[0_0_0_2px] focus:outline-none\"\n            >\n              Save changes\n            </button>\n          </DialogClose>\n        </div>\n        <DialogClose\n          class=\"text-grass11 hover:bg-green4 focus:shadow-green7 absolute top-[10px] right-[10px] inline-flex h-[25px] w-[25px] appearance-none items-center justify-center rounded-full focus:shadow-[0_0_0_2px] focus:outline-none\"\n          aria-label=\"Close\"\n        >\n          <Icon icon=\"lucide:x\" />\n        </DialogClose>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\nExpand code\nFeatures\n​\nSupports modal and non-modal modes.\nFocus is automatically trapped when modal.\nCan be controlled or uncontrolled.\nManages screen reader announcements with Title andDescription components.\nEsc closes the component automatically.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger />\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogContent>\n        <DialogTitle />\n        <DialogDescription />\n        <DialogClose />\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a dialog\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nmodal\n\t\nboolean\n\t\ntrue\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that opens the dialog\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals your overlay and content parts into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nOverlay\n​\n\nA layer that covers the inert portion of the view when the dialog is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nContent\n​\n\nContains content to be rendered in the open dialog\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@openAutoFocus\n\t(event: Event) => void\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\tfunction\n\n\n@interactOutside\n\tfunction\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nClose\n​\n\nThe button that closes the dialog\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nTitle\n​\n\nAn accessible title to be announced when the dialog is opened.\n\nIf you want to hide the title, wrap it inside our Visually Hidden utility like this <VisuallyHidden asChild>.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nh2\n\n\nasChild\n\t\nboolean\n\t\nfalse\nDescription\n​\n\nAn optional accessible description to be announced when the dialog is opened.\n\nIf you want to hide the description, wrap it inside our Visually Hidden utility like this <VisuallyHidden asChild>. If you want to remove the description entirely, remove this part and pass aria-describedby=\"undefined} to DialogContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\np\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nNested dialog\n​\n\nYou can nest multiple layers of dialogs.\n\nOpen Dialog\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n</script>\n\n<template>\n  <div>\n    <DialogRoot>\n      <DialogTrigger\n        class=\"text-grass11 font-semibold shadow-blackA7 hover:bg-mauve3 inline-flex h-[35px] items-center justify-center rounded-[4px] bg-white px-[15px] leading-none shadow-[0_2px_10px] focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none\"\n      >\n        Open Dialog\n      </DialogTrigger>\n      <DialogPortal>\n        <DialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n        <DialogContent\n          class=\"data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none z-[100]\"\n        >\n          <DialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n            First Dialog\n          </DialogTitle>\n          <DialogDescription class=\"text-mauve11 mt-[10px] mb-5 text-[15px] leading-normal\">\n            First dialog.\n          </DialogDescription>\n\n          <div class=\"mt-[25px] flex gap-4 justify-end\">\n            <DialogClose as-child>\n              <button\n                class=\"bg-green4 text-green11 hover:bg-green5 focus:shadow-green7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none focus:shadow-[0_0_0_2px] focus:outline-none\"\n              >\n                Close\n              </button>\n            </DialogClose>\n\n            <DialogRoot>\n              <DialogTrigger\n                class=\"bg-green9 font-semibold shadow-blackA7 hover:bg-green10  inline-flex h-[35px] items-center justify-center rounded-[4px] text-white px-[15px] leading-none shadow-[0_2px_10px] focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none\"\n              >\n                Open second\n              </DialogTrigger>\n\n              <DialogPortal>\n                <DialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n                <DialogContent\n                  class=\"data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none z-[100]\"\n                >\n                  <DialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n                    Second Dialog\n                  </DialogTitle>\n                  <DialogDescription class=\"text-mauve11 mt-[10px] mb-5 text-[15px] leading-normal\">\n                    Second dialog.\n                  </DialogDescription>\n\n                  <div class=\"flex justify-end\">\n                    <DialogClose as-child>\n                      <button\n                        class=\"bg-green4 text-green11 hover:bg-green5 focus:shadow-green7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none focus:shadow-[0_0_0_2px] focus:outline-none\"\n                      >\n                        Close\n                      </button>\n                    </DialogClose>\n                  </div>\n                </DialogContent>\n              </DialogPortal>\n            </DialogRoot>\n          </div>\n          <DialogClose\n            class=\"text-grass11 hover:bg-green4 focus:shadow-green7 absolute top-[10px] right-[10px] inline-flex h-[25px] w-[25px] appearance-none items-center justify-center rounded-full focus:shadow-[0_0_0_2px] focus:outline-none\"\n            aria-label=\"Close\"\n          >\n            <Icon icon=\"lucide:x\" />\n          </DialogClose>\n        </DialogContent>\n      </DialogPortal>\n    </DialogRoot>\n  </div>\n</template>\nExpand code\nClose after asynchronous form submission\n​\n\nUse the controlled props to programmatically close the Dialog after an async operation has completed.\n\nvue\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'radix-vue'\n\nconst wait = () => new Promise(resolve => setTimeout(resolve, 1000))\nconst open = ref(false)\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>Open</DialogTrigger>\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogContent>\n        <form\n          @submit.prevent=\"\n            (event) => {\n              wait().then(() => (open = false));\n            }\n          \"\n        >\n          <!-- some inputs -->\n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\nScrollable overlay\n​\n\nMove the content inside the overlay to render a dialog with overflow.\n\nvue\n// index.vue\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger />\n    <DialogPortal>\n      <DialogOverlay class=\"DialogOverlay\">\n        <DialogContent class=\"DialogContent\">\n          ...\n        </DialogContent>\n      </DialogOverlay>\n    </DialogPortal>\n  </DialogRoot>\n</template>\ncss\n/* styles.css */\n.DialogOverlay {\n  background: rgba(0 0 0 / 0.5);\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: grid;\n  place-items: center;\n  overflow-y: auto;\n}\n\n.DialogContent {\n  min-width: 300px;\n  background: white;\n  padding: 30px;\n  border-radius: 4px;\n}\nCustom portal container\n​\n\nCustomise the element that your dialog portals into.\n\nvue\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'radix-vue'\n\nconst container = ref(null)\n</script>\n\n<template>\n  <div>\n    <DialogRoot>\n      <DialogTrigger />\n      <DialogPortal to=\"container\">\n        <DialogOverlay />\n        <DialogContent>...</DialogContent>\n      </DialogPortal>\n    </DialogRoot>\n\n    <div ref=\"container\" />\n  </div>\n</template>\nAccessibility\n​\n\nAdheres to the Dialog WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the dialog\n\n\nEnter\n\t\nOpens/closes the dialog\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nEsc\n\t\nCloses the dialog and moves focus to DialogTrigger.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract the overlay and the close button\n​\n\nThis example abstracts the DialogOverlay and DialogClose parts.\n\nUsage\n​\nvue\n<script setup>\nimport { Dialog, DialogContent, DialogTrigger } from './your-dialog'\n</script>\n\n<template>\n  <Dialog>\n    <DialogTrigger>Dialog trigger</DialogTrigger>\n    <DialogContent>Dialog Content</DialogContent>\n  </Dialog>\n</template>\nImplementation\n​\nts\n// your-dialog.ts\nexport { default as DialogContent } from 'DialogContent.vue'\nexport { DialogRoot as Dialog, DialogTrigger } from 'radix-vue'\nvue\n<!-- DialogContent.vue -->\n<script setup lang=\"ts\">\nimport { DialogClose, DialogContent, type DialogContentEmits, type DialogContentProps, DialogOverlay, DialogPortal, useEmitAsProps, } from 'radix-vue'\nimport { Cross2Icon } from '@radix-icons/vue'\n\nconst props = defineProps<DialogContentProps>()\nconst emits = defineEmits<DialogContentEmits>()\n\nconst emitsAsProps = useEmitAsProps(emits)\n</script>\n\n<template>\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogContent v-bind=\"{ ...props, ...emitsAsProps }\">\n      <slot />\n\n      <DialogClose>\n        <Cross2Icon />\n        <span class=\"sr-only\">Close</span>\n      </DialogClose>\n    </DialogContent>\n  </DialogPortal>\n</template>"
  },
  {
    "title": "Combobox | Radix Vue",
    "url": "https://www.radix-vue.com/components/combobox#VPContent",
    "html": "Combobox\n​\nChoose from a list of suggested values with full keyboard support.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxAnchor, ComboboxContent, ComboboxEmpty, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxRoot, ComboboxSeparator, ComboboxTrigger, ComboboxViewport } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst v = ref('')\nconst options = ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple']\nconst vegetables = ['Aubergine', 'Broccoli', 'Carrot', 'Courgette', 'Leek']\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"v\" class=\"relative\">\n    <ComboboxAnchor class=\"min-w-[160px] inline-flex items-center justify-between rounded px-[15px] text-[13px] leading-none h-[35px] gap-[5px] bg-white text-grass11 shadow-[0_2px_10px] shadow-black/10 hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black data-[placeholder]:text-grass9 outline-none\">\n      <ComboboxInput class=\"!bg-transparent outline-none text-grass11 h-full selection:bg-grass5 placeholder-mauve8\" placeholder=\"Placeholder...\" />\n      <ComboboxTrigger>\n        <Icon icon=\"radix-icons:chevron-down\" class=\"h-4 w-4 text-grass11\" />\n      </ComboboxTrigger>\n    </ComboboxAnchor>\n\n    <ComboboxContent class=\"absolute z-10 w-full mt-2 min-w-[160px] bg-white overflow-hidden rounded shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\">\n      <ComboboxViewport class=\"p-[5px]\">\n        <ComboboxEmpty class=\"text-mauve8 text-xs font-medium text-center py-2\" />\n\n        <ComboboxGroup>\n          <ComboboxLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Fruits\n          </ComboboxLabel>\n\n          <ComboboxItem\n            v-for=\"(option, index) in options\" :key=\"index\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-grass9 data-[highlighted]:text-grass1\"\n            :value=\"option\"\n          >\n            <ComboboxItemIndicator\n              class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\"\n            >\n              <Icon icon=\"radix-icons:check\" />\n            </ComboboxItemIndicator>\n            <span>\n              {{ option }}\n            </span>\n          </ComboboxItem>\n          <ComboboxSeparator class=\"h-[1px] bg-grass6 m-[5px]\" />\n        </ComboboxGroup>\n\n        <ComboboxGroup>\n          <ComboboxLabel\n            class=\"px-[25px] text-xs leading-[25px] text-mauve11\"\n          >\n            Vegetables\n          </ComboboxLabel>\n          <ComboboxItem\n            v-for=\"(option, index) in vegetables\" :key=\"index\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-grass9 data-[highlighted]:text-grass1\"\n            :value=\"option\"\n          >\n            <ComboboxItemIndicator\n              class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\"\n            >\n              <Icon icon=\"radix-icons:check\" />\n            </ComboboxItemIndicator>\n            <span>\n              {{ option }}\n            </span>\n          </ComboboxItem>\n        </ComboboxGroup>\n      </ComboboxViewport>\n    </ComboboxContent>\n  </ComboboxRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nOffers 2 positioning modes.\nSupports items, labels, groups of items.\nFocus is fully managed.\nFull keyboard navigation.\nSupports custom placeholder.\nSupports Right to Left direction.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ComboboxAnchor,\n  ComboboxArrow,\n  ComboboxCancel,\n  ComboboxContent,\n  ComboboxEmpty,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot,\n  ComboboxSeparator,\n  ComboboxTrigger,\n  ComboboxViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxAnchor>\n      <ComboboxInput />\n      <ComboboxTrigger />\n      <ComboboxCancel />\n    </ComboboxAnchor>\n\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxViewport>\n          <ComboboxEmpty />\n\n          <ComboboxItem>\n            <ComboboxItemIndicator />\n          </ComboboxItem>\n\n          <ComboboxGroup>\n            <ComboboxLabel />\n            <ComboboxItem>\n              <ComboboxItemIndicator />\n            </ComboboxItem>\n          </ComboboxGroup>\n          <ComboboxSeparator />\n        </ComboboxViewport>\n\n        <ComboboxArrow />\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a Combobox\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nT\n\t\n\n\nmodelValue\n\t\nT\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nsearchTerm\n\t\nstring\n\t\n\n\nfilterFunction\n\t\n(val: Array<T>, term: string) => Array<T>\n\t\n\n\ndisplayValue\n\t\n(val: T) => string\n\t\n\n\nmultiple\n\t\nboolean\n\t\n\n\ndir\n\t\nenum\n\t\n\n\nname\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: T) => void\n\n@update:open\n\t(open: boolean) => void\n\n@update:searchTerm\n\t(value: string) => void\nAnchor\n​\n\nUsed as an anchor if you set ComboboxContent's position to popper.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nInput\n​\n\nThe input component to search through the combobox items.\n\nTrigger\n​\n\nThe button that toggles the Combobox Content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nautoFocus\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nCancel\n​\n\nThe button that clears the search term.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the combobox is open.\n\nProp\tType\tDefault\n\nposition\n\t\nenum\n\t\n\"inline\"\n\n\nbodyLock\n\t\nboolean\n\t\nfalse\n\n\ndisableOutsidePointerEvents\n\t\nboolean\n\t\nfalse\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"start\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n10\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-combobox-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets. Only present when position=\"popper\".\n\n--radix-combobox-content-available-width\t\nThe remaining width between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-combobox-content-available-height\t\nThe remaining height between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-combobox-trigger-width\t\nThe width of the trigger. Only present when position=\"popper\".\n\n--radix-combobox-trigger-height\t\nThe height of the trigger. Only present when position=\"popper\".\nViewport\n​\n\nThe scrolling viewport that contains all of the items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nThe component that contains the combobox items.\n\nProp\tType\tDefault\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: SelectEvent) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nGroup\n​\n\nUsed to group multiple items. use in conjunction with ComboboxLabel to ensure good accessibility via automatic labelling.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render the label of a group. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSeparator\n​\n\nUsed to visually separate items in the Combobox\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nArrow\n​\n\nAn optional arrow element to render alongside the content. This can be used to help visually link the trigger with the ComboboxContent. Must be rendered inside ComboboxContent. Only available when position is set to popper.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nBinding objects as values\n​\n\nUnlike native HTML form controls which only allow you to provide strings as values, radix-vue supports binding complex objects as well.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\">\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in people\"\n          :key=\"person.id\"\n          :value=\"person\"\n          :disabled=\"person.unavailable\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nSelecting multiple values\n​\n\nThe Combobox component allows you to select multiple values. You can enable this by providing an array of values instead of a single value.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref([people[0], people[1]])\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\" multiple>\n    ...\n  </ComboboxRoot>\n</template>\nCustom filtering\n​\n\nInternally, ComboboxRoot would apply default filter function to filter relevant ComboboxItem (only apply when modelValue is type string).\n\nHowever this behavior can be replaced using 2 different method.\n\n1. Provide filter-function props.\n​\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\n\nfunction filterFunction(list: typeof people[number], searchTerm: string) {\n  return list.filter((person) => {\n    return person.name.toLowerCase().includes(searchTerm.toLowerCase())\n  })\n}\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"selectedPeople\"\n    :filter-function=\"filterFunction\"\n  >\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in people\"\n          :key=\"person.id\"\n          :value=\"person\"\n          :disabled=\"person.unavailable\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n2. Filtered v-for options\n​\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\nconst searchTerm = ref('')\n\nconst filteredPeople = computed(() =>\n  searchTerm.value === ''\n    ? people\n    : people.filter((person) => {\n      return person.name.toLowerCase().includes(searchTerm.value.toLowerCase())\n    })\n)\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"selectedPeople\"\n    v-model:searchTerm=\"searchTerm\"\n  >\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in filteredPeople\"\n          :key=\"person.id\"\n          :value=\"person\"\n          :disabled=\"person.unavailable\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nCustom label\n​\n\nBy default the Combobox will use the input contents as the label for screenreaders. If you'd like more control over what is announced to assistive technologies, use the Label component.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxInput, ComboboxRoot, Label } from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\">\n    <Label for=\"person\">Person: </Label>\n    <ComboboxInput id=\"person\" placeholder=\"Select a person\" />\n    ...\n  </ComboboxRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxPortal,\n  ComboboxRoot,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem class=\"ComboboxItem\" disabled>\n          ...\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\ncss\n/* styles.css */\n.ComboboxItem[data-disabled] {\n  color: \"gainsboro\";\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxPortal,\n  ComboboxRoot,\n  ComboboxSeparator\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxSeparator />\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nWith grouped items\n​\n\nUse the Group and Label parts to group items in a section.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxGroup>\n          <ComboboxLabel>Label</ComboboxLabel>\n          <ComboboxItem>…</ComboboxItem>\n          <ComboboxItem>…</ComboboxItem>\n          <ComboboxItem>…</ComboboxItem>\n        </ComboboxGroup>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nWith complex items\n​\n\nYou can use custom content in your items.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem>\n          <img src=\"…\">\n          Adolfo Hess\n          <ComboboxItemIndicator />\n        </ComboboxItem>\n        …\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nPrevent select behavior\n​\n\nBy default, selecting ComboboxItem would close the content, and update the modelValue with the provided value. You can prevent this behavior by preventing default @select.prevent.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem @select.prevent>\n          Item A\n        </ComboboxItem>\n        …\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nAccessibility\n​\n\nAdheres to the Combobox WAI-ARIA design pattern.\n\nSee the W3C Combobox Autocomplete List example for more information.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nEnter\n\t\nWhen focus is on ComboboxItem, selects the focused item.\n\n\nArrowDown\n\t\nWhen focus is on ComboboxInput, opens the combobox content.\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on ComboboxInput, opens the combobox content.\nWhen focus is on an item, moves focus to the previous item.\n\n\nEsc\n\t\nCloses combobox and restores the selected item in the ComboboxInput field.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nCommand Menu\n​\n\nCombobox can be use to build your own Command Menu.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Command, CommandItem } from './your-command'\n</script>\n\n<template>\n  <Command>\n    <CommandItem value=\"1\">\n      Item 1\n    </CommandItem>\n    <CommandItem value=\"2\">\n      Item 2\n    </CommandItem>\n    <CommandItem value=\"3\">\n      Item 3\n    </CommandItem>\n  </Command>\n</template>\nImplementation\n​\nts\n// your-command.ts\nexport { default as Command } from 'Command.vue'\nexport { default as CommandItem } from 'CommandItem.vue'\nvue\n<!-- Command.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'\nimport { ComboboxContent, ComboboxEmpty, ComboboxInput, ComboboxPortal, ComboboxRoot, useForwardPropsEmits } from 'radix-vue'\nimport type { ComboboxRootEmits, ComboboxRootProps } from 'radix-vue'\n\nconst props = defineProps<ComboboxRootProps>()\nconst emits = defineEmits<ComboboxRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <ComboboxRoot v-bind=\"forward\" :open=\"true\" model-value=\"\">\n    <ComboboxInput placeholder=\"Type a command or search...\" />\n\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxEmpty />\n        <ComboboxViewport>\n          <slot />\n        </ComboboxViewport>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nvue\n<!-- ComboboxItem.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon } from '@radix-icons/vue'\nimport { ComboboxItem, type ComboboxItemProps } from 'radix-vue'\n\nconst props = defineProps<ComboboxItemProps>()\n</script>\n\n<template>\n  <ComboboxItem v-bind=\"props\" @select.prevent>\n    <slot />\n  </ComboboxItem>\n</template>"
  },
  {
    "title": "Collapsible | Radix Vue",
    "url": "https://www.radix-vue.com/components/collapsible#VPContent",
    "html": "Collapsible\n​\nAn interactive component which expands/collapses a panel.\n@peduarte starred 3 repos\n@radix-vue/radix-vue\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst open = ref(false)\n</script>\n\n<template>\n  <CollapsibleRoot v-model:open=\"open\" class=\"w-[300px]\">\n    <div style=\"display: flex; align-items: center; justify-content: space-between\">\n      <span class=\"text-white text-[15px] leading-[25px]\"> @peduarte starred 3 repos </span>\n      <CollapsibleTrigger\n        class=\"cursor-default rounded-full h-[25px] w-[25px] inline-flex items-center justify-center text-grass11 shadow-[0_2px_10px] shadow-blackA7 outline-none data-[state=closed]:bg-white data-[state=open]:bg-green3 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      >\n        <Icon v-if=\"open\" icon=\"radix-icons:cross-2\" class=\"h-3.5 w-3.5\" />\n        <Icon v-else icon=\"radix-icons:row-spacing\" class=\"h-3.5 w-3.5\" />\n      </CollapsibleTrigger>\n    </div>\n\n    <div class=\"bg-white rounded mt-[10px] p-[10px] shadow-[0_2px_10px] shadow-blackA7\">\n      <span class=\"text-grass11 text-[15px] leading-[25px]\">@radix-vue/radix-vue</span>\n    </div>\n\n    <CollapsibleContent class=\"data-[state=open]:animate-slideDown data-[state=closed]:animate-slideUp overflow-hidden\">\n      <div class=\"bg-white rounded my-[10px] p-[10px] shadow-[0_2px_10px] shadow-blackA7\">\n        <span class=\"text-grass11 text-[15px] leading-[25px]\">@vuejs/core</span>\n      </div>\n      <div class=\"bg-white rounded my-[10px] p-[10px] shadow-[0_2px_10px] shadow-blackA7\">\n        <span class=\"text-grass11 text-[15px] leading-[25px]\">@radix-ui/primitives</span>\n      </div>\n    </CollapsibleContent>\n  </CollapsibleRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the components and piece the parts together.\n\nvue\n<script setup>\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <CollapsibleRoot>\n    <CollapsibleTrigger />\n    <CollapsibleContent />\n  </CollapsibleRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a collapsible\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nTrigger\n​\n\nThe button that toggles the collapsible\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nContent\n​\n\nThe component that contains the collapsible content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nCSS Variable\tDescription\n--radix-collapsible-content-width\t\nThe width of the content when it opens/closes\n\n--radix-collapsible-content-height\t\nThe height of the content when it opens/closes\nExamples\n​\nAnimating content size\n​\n\nUse the --radix-collapsible-content-width and/or --radix-collapsible-content-height CSS variables to animate the size of the content when it opens/closes. Here's a demo:\n\nvue\n// index.vue\n<script setup>\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <CollapsibleRoot>\n    <CollapsibleTrigger>…</CollapsibleTrigger>\n    <CollapsibleContent class=\"CollapsibleContent\">\n      …\n    </CollapsibleContent>\n  </CollapsibleRoot>\n</template>\ncss\n/* styles.css */\n.CollapsibleContent {\n  overflow: hidden;\n}\n.CollapsibleContent[data-state=\"open\"] {\n  animation: slideDown 300ms ease-out;\n}\n.CollapsibleContent[data-state=\"closed\"] {\n  animation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-collapsible-content-height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    height: var(--radix-collapsible-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\nAccessibility\n​\n\nAdheres to the Disclosure WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the collapsible\n\n\nEnter\n\t\nOpens/closes the collapsible"
  },
  {
    "title": "Checkbox | Radix Vue",
    "url": "https://www.radix-vue.com/components/checkbox#VPContent",
    "html": "Checkbox\n​\nA control that allows the user to toggle between checked and not checked.\nAccept terms and conditions.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxIndicator, CheckboxRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst checkboxOne = ref(true)\n</script>\n\n<template>\n  <div class=\"flex flex-col gap-2.5\">\n    <label class=\"flex flex-row gap-4 items-center [&>.checkbox]:hover:bg-neutral-100\">\n      <CheckboxRoot\n        v-model:checked=\"checkboxOne\"\n        class=\"shadow-blackA7 hover:bg-green3 flex h-[25px] w-[25px] appearance-none items-center justify-center rounded-[4px] bg-white shadow-[0_2px_10px] outline-none focus-within:shadow-[0_0_0_2px_black]\"\n      >\n        <CheckboxIndicator class=\"bg-white h-full w-full rounded flex items-center justify-center\">\n          <Icon icon=\"radix-icons:check\" class=\"h-3.5 w-3.5 text-grass11\" />\n        </CheckboxIndicator>\n      </CheckboxRoot>\n      <span class=\"select-none text-white\">Accept terms and conditions.</span>\n    </label>\n  </div>\n</template>\nExpand code\nFeatures\n​\nSupports indeterminate state.\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { CheckboxIndicator, CheckboxRoot } from 'radix-vue'\n</script>\n\n<template>\n  <CheckboxRoot>\n    <CheckboxIndicator />\n  </CheckboxRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a checkbox. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndefaultChecked\n\t\nboolean\n\t\n\n\nchecked\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nvalue\n\t\nstring\n\t\non\nEmit\tType\n\n@update:checked\n\t(value: boolean) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-disabled]\tPresent when disabled\nIndicator\n​\n\nRenders when the checkbox is in a checked or indeterminate state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-disabled]\tPresent when disabled\nExamples\n​\nIndeterminate\n​\n\nYou can set the checkbox to indeterminate by taking control of its state.\n\nvue\n<script setup>\nimport { Icon } from '@iconify/vue'\nimport { CheckboxIndicator, CheckboxRoot } from 'radix-vue'\n\nconst checked = ref('indeterminate')\n</script>\n\n<template>\n  <StyledCheckbox v-model:checked=\"checked\">\n    <Icon icon=\"radix-icons:checkbox-indicator\">\n      <Icon v-if=\"checked === 'indeterminate'\" icon=\"radix-icons:divider-horizontal\" />\n      <Icon v-if=\"checked\" icon=\"radix-icons:check\" />\n    </Icon>\n  </StyledCheckbox>\n\n  <button type=\"button\" @click=\"() => (checked === 'indeterminate' ? (checked = false) : (checked = 'indeterminate'))\">\n    Toggle indeterminate\n  </button>\n</template>\nAccessibility\n​\n\nAdheres to the tri-state Checkbox WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nChecks/unchecks the checkbox"
  },
  {
    "title": "Avatar | Radix Vue",
    "url": "https://www.radix-vue.com/components/avatar#VPContent",
    "html": "Avatar\n​\nAn image element with a fallback for representing the user.\nPD\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { AvatarFallback, AvatarImage, AvatarRoot } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"flex gap-5\">\n    <AvatarRoot class=\"bg-blackA3 inline-flex h-[45px] w-[45px] select-none items-center justify-center overflow-hidden rounded-full align-middle\">\n      <AvatarImage\n        class=\"h-full w-full rounded-[inherit] object-cover\"\n        src=\"https://images.unsplash.com/photo-1492633423870-43d1cd2775eb?&w=128&h=128&dpr=2&q=80\"\n        alt=\"Colm Tuite\"\n      />\n      <AvatarFallback\n        class=\"text-grass11 leading-1 flex h-full w-full items-center justify-center bg-white text-[15px] font-medium\"\n        :delay-ms=\"600\"\n      >\n        CT\n      </AvatarFallback>\n    </AvatarRoot>\n    <AvatarRoot class=\"bg-blackA3 inline-flex h-[45px] w-[45px] select-none items-center justify-center overflow-hidden rounded-full align-middle\">\n      <AvatarImage\n        class=\"h-full w-full rounded-[inherit] object-cover\"\n        src=\"https://images.unsplash.com/photo-1511485977113-f34c92461ad9?ixlib=rb-1.2.1&w=128&h=128&dpr=2&q=80\"\n        alt=\"Pedro Duarte\"\n      />\n      <AvatarFallback\n        class=\"text-grass11 leading-1 flex h-full w-full items-center justify-center bg-white text-[15px] font-medium\"\n        :delay-ms=\"600\"\n      >\n        JD\n      </AvatarFallback>\n    </AvatarRoot>\n    <AvatarRoot class=\"bg-blackA3 inline-flex h-[45px] w-[45px] select-none items-center justify-center overflow-hidden rounded-full align-middle\">\n      <AvatarFallback class=\"text-grass11 leading-1 flex h-full w-full items-center justify-center bg-white text-[15px] font-medium\">\n        PD\n      </AvatarFallback>\n    </AvatarRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nAutomatic and manual control over when the image renders.\nFallback part accepts any children.\nOptionally delay fallback rendering to avoid content flashing.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { AvatarImage, AvatarRoot } from 'radix-vue'\n</script>\n\n<template>\n  <AvatarRoot>\n    <AvatarImage />\n    <AvatarFallback />\n  </AvatarRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of an avatar\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nImage\n​\n\nThe image to render. By default it will only render when it has loaded. You can use the @loadingStatusChange handler if you need more control.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nimg\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@loadingStatusChange\n\t(status: \"idle\" | \"loading\" | \"loaded\" | \"error\") => void\nFallback\n​\n\nAn element that renders when the image hasn't loaded. This means whilst it's loading, or if there was an error. If you notice a flash during loading, you can provide a delayMs prop to delay its rendering so it only renders for those with slower connections. For more control, use the @loadingStatusChange emit on AvatarImage.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndelayMs\n\t\nnumber\n\t\nExamples\n​\nClickable Avatar with tooltip\n​\n\nYou can compose the Avatar with a Tooltip to display extra information.\n\nvue\n<script setup>\nimport { AvatarImage, AvatarRoot, TooltipArrow, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>\n      <AvatarRoot>…</AvatarRoot>\n    </TooltipTrigger>\n\n    <TooltipContent side=\"top\">\n      Tooltip content\n      <TooltipArrow />\n    </TooltipContent>\n  </TooltipRoot>\n</template>"
  },
  {
    "title": "Aspect Ratio | Radix Vue",
    "url": "https://www.radix-vue.com/components/aspect-ratio#VPContent",
    "html": "Aspect Ratio\n​\nDisplays content within a desired ratio.\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { AspectRatio } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"shadow-blackA7 w-full sm:w-[300px] overflow-hidden rounded-md shadow-[0_2px_10px]\">\n    <AspectRatio :ratio=\"16 / 9\">\n      <img\n        class=\"h-full w-full object-cover\"\n        src=\"https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80\"\n        alt=\"Landscape photograph by Tobias Tullius\"\n      >\n    </AspectRatio>\n  </div>\n</template>\nExpand code\nFeatures\n​\nAccepts any custom ratio.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { AspectRatio } from 'radix-vue'\n</script>\n\n<template>\n  <AspectRatio />\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains the content you want to constrain to a given ratio.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nratio\n\t\nnumber\n\t\n1"
  },
  {
    "title": "Alert Dialog | Radix Vue",
    "url": "https://www.radix-vue.com/components/alert-dialog#VPContent",
    "html": "Alert Dialog\n​\nA modal dialog that interrupts the user with important content and expects a response.\nDelete account\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'radix-vue'\n\nfunction handleAction() {\n  alert('clicked action button!')\n}\n</script>\n\n<template>\n  <AlertDialogRoot>\n    <AlertDialogTrigger\n      class=\"bg-white text-grass11 font-semibold hover:bg-white/90 shadow-sm inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] leading-none outline-none focus:shadow-[0_0_0_2px] focus:shadow-black transition-all\"\n    >\n      Delete account\n    </AlertDialogTrigger>\n    <AlertDialogPortal>\n      <AlertDialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n      <AlertDialogContent\n        class=\"z-[100] text-[15px] data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[500px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none\"\n      >\n        <AlertDialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n          Are you absolutely sure?\n        </AlertDialogTitle>\n        <AlertDialogDescription class=\"text-mauve11 mt-4 mb-5 text-[15px] leading-normal\">\n          This action cannot be undone. This will permanently delete your account and remove your data from our servers.\n        </AlertDialogDescription>\n        <div class=\"flex justify-end gap-[25px]\">\n          <AlertDialogCancel\n            class=\"text-mauve11 bg-mauve4 hover:bg-mauve5 focus:shadow-mauve7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none outline-none focus:shadow-[0_0_0_2px]\"\n          >\n            Cancel\n          </AlertDialogCancel>\n          <AlertDialogAction\n            class=\"text-red11 bg-red4 hover:bg-red5 focus:shadow-red7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none outline-none focus:shadow-[0_0_0_2px]\"\n            @click=\"handleAction\"\n          >\n            Yes, delete account\n          </AlertDialogAction>\n        </div>\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\nExpand code\nFeatures\n​\nFocus is automatically trapped.\nCan be controlled or uncontrolled.\nManages screen reader announcements with Title and Description components.\nEsc closes the component automatically.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <AlertDialogRoot>\n    <AlertDialogTrigger />\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogContent>\n        <AlertDialogTitle />\n        <AlertDialogDescription />\n        <AlertDialogCancel />\n        <AlertDialogAction />\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of an alert dialog.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nA button that opens the dialog.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ntrigger\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals your overlay and content parts into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nOverlay\n​\n\nA layer that covers the inert portion of the view when the dialog is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nContent\n​\n\nContains content to be rendered when the dialog is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@openAutoFocus\n\t(event: Event) => void\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nCancel\n​\n\nA button that closes the dialog. This button should be distinguished visually from AlertDialogAction buttons.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAction\n​\n\nA button that closes the dialog. These buttons should be distinguished visually from the AlertDialogCancel button.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nTitle\n​\n\nAn accessible name to be announced when the dialog is opened. Alternatively, you can provide aria-label or aria-labelledby to AlertDialogContent and exclude this component.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nh2\n\n\nasChild\n\t\nboolean\n\t\nfalse\nDescription\n​\n\nAn accessible description to be announced when the dialog is opened. Alternatively, you can provide aria-describedby to AlertDialogContent and exclude this component.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\np\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nClose after asynchronous form submission\n​\n\nUse the controlled props to programmatically close the Alert Dialog after an async operation has completed.\n\nvue\n<script setup>\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'radix-vue'\n\nconst wait = () => new Promise(resolve => setTimeout(resolve, 1000))\nconst open = ref(false)\n</script>\n\n<template>\n  <AlertDialogRoot v-model:open=\"open\">\n    <AlertDialogTrigger>Open</AlertDialogTrigger>\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogContent>\n        <form\n          @submit.prevent=\"\n            (event) => {\n              wait().then(() => open = false);\n            }\n          \"\n        >\n          <!-- some inputs -->\n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\n\n\nCustom portal container\n​\n\nCustomise the element that your alert dialog portals into.\n\nvue\n<script setup>\nimport { ref } from 'vue'\n\nconst container = ref(null)\n</script>\n\n<template>\n  <div>\n    <AlertDialogRoot>\n      <AlertDialogTrigger />\n      <AlertDialogPortal :to=\"container\">\n        <AlertDialogOverlay />\n        <AlertDialogContent>...</AlertDialogContent>\n      </AlertDialogPortal>\n    </AlertDialogRoot>\n\n    <div ref=\"container\" />\n  </div>\n</template>\nAccessibility\n​\n\nAdheres to the Alert and Message Dialogs WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the dialog.\n\n\nEnter\n\t\nOpens/closes the dialog.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nEsc\n\t\nCloses the dialog and moves focus to AlertDialogTrigger."
  },
  {
    "title": "Namespaced components | Radix Vue",
    "url": "https://www.radix-vue.com/guides/namespaced-components#VPContent",
    "html": "Namespaced components\n​\n\nRadix Vue design pattern is to create primitives for each component, and allow user to construct or compose components however they want.\n\nHowever, importing all of the neccessary component 1-by-1 can be quite an effort, and user might some time accidentally left out any important components.\n\nIn order to solve this painpoint, we've introduced Namespaced components since v.1.2.0.\n\nHow to use?\n​\n\nFirst, you need import components via radix-vue/namespaced in your Vue component.\n\nvue\n<script setup lang=\"ts\">\nimport { Dialog, DropdownMenu } from 'radix-vue/namespaced'\n</script>\n\nThen, you can just the imported namespaced component and it will contains all the relevant components.\n\nvue\n<script setup lang=\"ts\">\nimport { Dialog } from 'radix-vue/namespaced'\n</script>\n\n<template>\n  <Dialog.Root>\n    <Dialog.Trigger>\n      Trigger\n    </Dialog.Trigger>\n  </Dialog.Root>\n\n  <Dialog.Portal>\n    <Dialog.Overlay />\n    <Dialog.Content>\n      …\n    </Dialog.Content>\n  </Dialog.Portal>\n</template>"
  },
  {
    "title": "Accordion | Radix Vue",
    "url": "https://www.radix-vue.com/components/accordion#VPContent",
    "html": "Accordion\n​\nA vertically stacked set of interactive headings that each reveal an associated section of content.\nIs it accessible?\nIs it unstyled?\nCan it be animated?\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst accordionItems = [\n  {\n    value: 'item-1',\n    title: 'Is it accessible?',\n    content: 'Yes. It adheres to the WAI-ARIA design pattern.',\n  },\n  {\n    value: 'item-2',\n    title: 'Is it unstyled?',\n    content: 'Yes. It\\'s unstyled by default, giving you freedom over the look and feel.',\n  },\n  {\n    value: 'item-3',\n    title: 'Can it be animated?',\n    content: 'Yes! You can use the transition prop to configure the animation.',\n  },\n]\n</script>\n\n<template>\n  <AccordionRoot\n    class=\"bg-mauve6 w-[300px] rounded-md shadow-[0_2px_10px] shadow-black/5\"\n    default-value=\"'item-1'\"\n    type=\"single\"\n    :collapsible=\"true\"\n  >\n    <template v-for=\"item in accordionItems\" :key=\"item.value\">\n      <AccordionItem class=\"focus-within:shadow-mauve12 mt-px overflow-hidden first:mt-0 first:rounded-t last:rounded-b focus-within:relative focus-within:z-10 focus-within:shadow-[0_0_0_2px]\" :value=\"item.value\">\n        <AccordionHeader class=\"flex\">\n          <AccordionTrigger class=\"text-grass11  shadow-mauve6 hover:bg-mauve2 flex h-[45px] flex-1 cursor-default items-center justify-between bg-white px-5 text-[15px] leading-none shadow-[0_1px_0] outline-none group\">\n            <span>{{ item.title }}</span>\n            <Icon\n              icon=\"radix-icons:chevron-down\"\n              class=\"text-green10 ease-[cubic-bezier(0.87,_0,_0.13,_1)] transition-transform duration-300 group-data-[state=open]:rotate-180\"\n              aria-hidden\n            />\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent class=\"text-mauve11 bg-mauve2 data-[state=open]:animate-slideDown data-[state=closed]:animate-slideUp overflow-hidden text-[15px]\">\n          <div class=\"px-5 py-4\">\n            {{ item.content }}\n          </div>\n        </AccordionContent>\n      </AccordionItem>\n    </template>\n  </AccordionRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nSupports horizontal/vertical orientation.\nSupports Right to Left direction.\nCan expand one or multiple items.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem>\n      <AccordionHeader>\n        <AccordionTrigger />\n      </AccordionHeader>\n      <AccordionContent />\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of an Accordion\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ntype*\n\t\nenum\n\t\n\n\ndefaultValue\n\t\nstring | string[]\n\t\n\n\nvalue\n\t\nstring | string[]\n\t\n\n\ncollapsible\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\ndir\n\t\nenum\n\t\n\"ltr\"\n\n\norientation\n\t\nenum\n\t\n\"vertical\"\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nItem\n​\n\nContains all the parts of a collapsible section.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nHeader\n​\n\nWraps an AccordionTrigger. Use the asChild prop to update it to the appropriate heading level for your page.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nh3\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nTrigger\n​\n\nToggles the collapsed state of its associated item. It should be nested inside of an AccordionHeader.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nContent\n​\n\nContains the collapsible content for an item.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-accordion-content-width\t\nThe width of the content when it opens/closes\n\n--radix-accordion-content-height\t\nThe height of the content when it opens/closes\nExamples\n​\nExpanded by default\n​\n\nUse the defaultValue prop to define the open item by default.\n\nvue\n<template>\n  <AccordionRoot type=\"single\" default-value=\"item-2\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nAllow collapsing all items\n​\n\nUse the collapsible prop to allow all items to close.\n\nvue\n<template>\n  <AccordionRoot type=\"single\" collapsible>\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nMultiple items open at the same time\n​\n\nSet the type prop to multiple to enable opening multiple items at once.\n\nvue\n<template>\n  <AccordionRoot type=\"multiple\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nRotated icon when open\n​\n\nYou can add extra decorative elements, such as chevrons, and rotate it when the item is open.\n\nvue\n// index.vue\n<script setup>\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport './styles.css'\n</script>\n\n<template>\n  <AccordionRoot type=\"single\">\n    <AccordionItem value=\"item-1\">\n      <AccordionHeader>\n        <AccordionTrigger class=\"AccordionTrigger\">\n          <span>Trigger text</span>\n          <Icon icon=\"radix-icons:chevron-down\" class=\"AccordionChevron\" aria-hidden />\n        </AccordionTrigger>\n      </AccordionHeader>\n      <AccordionContent>…</AccordionContent>\n    </AccordionItem>\n  </AccordionRoot>\n</template>\ncss\n/* styles.css */\n.AccordionChevron {\n  transition: transform 300ms;\n}\n.AccordionTrigger[data-state=\"open\"] > .AccordionChevron {\n  transform: rotate(180deg);\n}\nHorizontal orientation\n​\n\nUse the orientation prop to create a horizontal Accordion\n\nvue\n<template>\n  <AccordionRoot orientation=\"horizontal\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nAnimating content size\n​\n\nUse the --radix-accordion-content-width and/or --radix-accordion-content-height CSS variables to animate the size of the content when it opens/closes:\n\nvue\n// index.vue\n<script setup>\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <AccordionRoot type=\"single\">\n    <AccordionItem value=\"item-1\">\n      <AccordionHeader>…</AccordionHeader>\n      <AccordionContent class=\"AccordionContent\">\n        …\n      </AccordionContent>\n    </AccordionItem>\n  </AccordionRoot>\n</template>\ncss\n/* styles.css */\n.AccordionContent {\n  overflow: hidden;\n}\n.AccordionContent[data-state=\"open\"] {\n  animation: slideDown 300ms ease-out;\n}\n.AccordionContent[data-state=\"closed\"] {\n  animation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-accordion-content-height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    height: var(--radix-accordion-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\nAccessibility\n​\n\nAdheres to the Accordion WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on an AccordionTrigger of a collapsed section, expands the section.\n\n\nEnter\n\t\nWhen focus is on an AccordionTrigger of a collapsed section, expands the section.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nArrowDown\n\t\nMoves focus to the next AccordionTrigger when orientation is vertical.\n\n\nArrowUp\n\t\nMoves focus to the previous AccordionTrigger when orientation is vertical.\n\n\nArrowRight\n\t\nMoves focus to the next AccordionTrigger when orientation is horizontal.\n\n\nArrowLeft\n\t\nMoves focus to the previous AccordionTrigger when orientation is horizontal.\n\n\nHome\n\t\nWhen focus is on an AccordionTrigger, moves focus to the start AccordionTrigger.\n\n\nEnd\n\t\nWhen focus is on an AccordionTrigger, moves focus to the last AccordionTrigger."
  },
  {
    "title": "Server side rendering | Radix Vue",
    "url": "https://www.radix-vue.com/guides/server-side-rendering#VPContent",
    "html": "Server side rendering\n​\nRadix Primitives can be rendered on the server.\nOverview\n​\n\nServer side rendering or SSR, is a technique used to render components to HTML on the server, as opposed to rendering them only on the client.\n\nStatic rendering is another similar approach. Instead it pre-renders pages to HTML at build time rather than on each request.\n\nYou should be able to use all of our primitives with both approaches, for example with Nuxt.js.\n\nINFO\n\nSome components' state might not rendered correctly in server-side, we are working on fixing it. If you encoutered any issue, feel free to open a ticket."
  },
  {
    "title": "Animation/Transition | Radix Vue",
    "url": "https://www.radix-vue.com/guides/animation#VPContent",
    "html": "Animation\n​\nAnimate Radix Primitives with CSS keyframes, native Vue Transition or JavaScript animation library of your choice.\n\nAdding animation to Radix Primitives should feel similar to any other component, but there are some caveats noted here in regards to exiting animations with JS animation libraries.\n\nAnimating with CSS animation\n​\n\nThe simplest way to animate Primitives is with CSS.\n\nYou can use CSS animation to animate both mount and unmount phases. The latter is possible because the Radix Primitives will suspend unmount while your animation plays out.\n\ncss\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.DialogOverlay[data-state=\"open\"],\n.DialogContent[data-state=\"open\"] {\n  animation: fadeIn 300ms ease-out;\n}\n\n.DialogOverlay[data-state=\"closed\"],\n.DialogContent[data-state=\"closed\"] {\n  animation: fadeOut 300ms ease-in;\n}\nAnimating with Vue Transition\n​\n\nOther than using CSS animation, you might prefer to use the native Vue <Transition>. Great news! It should be as easy as wrapping component (that has forceMount prop), and you are done!\n\nvue\n<script setup lang=\"ts\">\nimport { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'radix-vue'\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal>\n      <Transition name=\"fade\">\n        <DialogOverlay />\n      </Transition>\n      <Transition name=\"fade\">\n        <DialogContent>\n          <h1>Hello from inside the Dialog!</h1>\n          <DialogClose>Close</DialogClose>\n        </DialogContent>\n      </Transition>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n\n<style>\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n\nTIP\n\nFuthemore, we discovered that Motion One, a Web Animations API based animation library works perfectly with Radix Vue.\n\nCheck out this Stackblitz Demo 🤩\n\nDelegating unmounting for JavaScript Animation\n​\n\nWhen many stateful Primitives are hidden from view, they are actually removed from the DOM. JavaScript animation libraries need control of the unmounting phase, so we provide the forceMount prop on many components to allow consumers to delegate the mounting and unmounting of children based on the animation state determined by those libraries.\n\nFor example, if you want to use @vueuse/motion to animate a Dialog, you would do so by conditionally rendering the dialog Overlay and Content parts based on the animation state from one of its composable like useSpring:\n\nvue\n<script setup lang=\"ts\">\nimport { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'radix-vue'\nimport { reactive, ref, watch } from 'vue'\nimport { useSpring } from '@vueuse/motion'\n\nconst stages = {\n  initial: { opacity: 0, scale: 0, top: 0, },\n  enter: { opacity: 1, scale: 1, top: 50, },\n  leave: { opacity: 0, scale: 0.6, top: 30, },\n}\n\nconst styles = reactive(stages.initial)\nconst { set } = useSpring(styles, {\n  damping: 8,\n  stiffness: 200,\n})\n\nconst open = ref(false)\nwatch(open, () => {\n  if (open.value)\n    set(stages.enter)\n  else\n    set(stages.leave)\n})\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal v-if=\"styles.opacity !== 0\">\n      <DialogOverlay\n        force-mount\n        :style=\"{\n          opacity: styles.opacity,\n          transform: `scale(${styles.scale})`,\n        }\"\n      />\n      <DialogContent\n        force-mount\n        :style=\"{\n          opacity: styles.opacity,\n          top: `${styles.top}%`,\n        }\"\n      >\n        <h1>Hello from inside the Dialog!</h1>\n        <DialogClose>Close</DialogClose>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n\nTIP\n\nCheck out this Stackblitz Demo"
  },
  {
    "title": "Composition | Radix Vue",
    "url": "https://www.radix-vue.com/guides/composition#VPContent",
    "html": "Composition\n​\nUse the `asChild` prop to compose Radix's functionality onto alternative element types or your own Vue components.\n\nAll Radix primitive parts that render a DOM element accept an asChild prop. When asChild is set to true, Radix Vue will not render a default DOM element, instead passing the props and behavior required to make it functional to the first child of the slots.\n\nChanging the element type\n​\n\nIn the majority of cases you shouldn’t need to modify the element type as Radix has been designed to provide the most appropriate defaults. However, there are cases where it is helpful to do so.\n\nA good example is with TooltipTrigger. By default this part is rendered as a button, though you may want to add a tooltip to a link (a tag) as well. Let's see how you can achieve this using asChild:\n\nvue\n<script setup lang=\"ts\">\nimport { TooltipRoot, TooltipTrigger, TooltipPortal } from \"radix-vue\";\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger asChild>\n      <a href=\"https://www.radix-vue.com/\">Radix Vue</a>\n    </TooltipTrigger>\n    <TooltipPortal>…</TooltipPortal>\n  </TooltipRoot>\n</template>\n\nIf you do decide to change the underlying element type, it is your responsibility to ensure it remains accessible and functional. In the case of TooltipTrigger for example, it must be a focusable element that can respond to pointer and keyboard events. If you were to switch it to a div, it would no longer be accessible.\n\nIn reality, you will rarely modify the underlying DOM element like we've seen above. Instead it's more common to use your own Vue components. This is especially true for most Trigger parts, as you usually want to compose the functionality with the custom buttons and links in your design system.\n\nComposing with your own Vue components\n​\n\nThis works exactly the same as above, you pass asChild to the part and then wrap your own component with it. However, there are a few gotchas to be aware of.\n\nComposing multiple primitives\n​\n\nasChild can be used as deeply as you need to. This means it is a great way to compose multiple primitive's behavior together. Here is an example of how you can compose TooltipTrigger and DialogTrigger together with your own button:\n\nvue\n<script setup lang=\"ts\">\nimport { TooltipRoot, TooltipTrigger, TooltipPortal, DialogRoot, DialogTrigger, DialogPortal } from \"radix-vue\";\nimport MyButton from from \"@/components/MyButton.vue\"\n</script>\n\n<template>\n  <DialogRoot>\n    <TooltipRoot>\n      <TooltipTrigger asChild>\n        <DialogTrigger asChild>\n          <MyButton>Open dialog</MyButton>\n        </DialogTrigger>\n      </TooltipTrigger>\n      <TooltipPortal>…</TooltipPortal>\n    </TooltipRoot>\n\n    <DialogPortal>...</DialogPortal>\n  </DialogRoot>\n</template>"
  },
  {
    "title": "Installation | Radix Vue",
    "url": "https://www.radix-vue.com/overview/installation#VPContent",
    "html": "Installation\n​\n\nA quick tutorial to walk through installing the packages, as well as the supported plugins.\n\nInstalling the package\n​\n\nbash\npnpm add radix-vue\n# yarn add radix-vue\n# npm i radix-vue\nNuxt modules\n​\n\nRadix Vue offers Nuxt modules support.\n\nIn nuxt.config.ts, simply add radix-vue/nuxt into the modules, and it will auto-imports all the components for you.\n\nts\nexport default defineNuxtConfig({\n  modules: ['radix-vue/nuxt'],\n})\nunplugin-vue-components\n​\n\nRadix Vue also has resolver for the popular unplugin-vue-components.\n\nIn vite.config.ts, import radix-vue/resolver, and configure as such and it will auto-imports all the components from Radix Vue.\n\nts\nimport Component from 'unplugin-vue-components/vite'\nimport RadixVueResolver from 'radix-vue/resolver'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    Component({\n      dts: true,\n      resolvers: [\n        RadixVueResolver()\n\n        // RadixVueResolver({\n        //   prefix: '' // use the prefix option to add Prefix to the imported components\n        // })\n      ],\n    }),\n  ],\n})"
  },
  {
    "title": "Styling | Radix Vue",
    "url": "https://www.radix-vue.com/guides/styling#VPContent",
    "html": "Styling\n​\nRadix Primitives are unstyled and compatible with any styling solution giving you complete control over styling.\nStyling overview\n​\nFunctional styles\n​\n\nYou are in control of all aspects of styling, including functional styles. For example, by default, a Dialog Overlay won't cover the entire viewport. You're responsible for adding those styles, plus any presentation styles.\n\nClasses\n​\n\nAll components accept class attributes, just like normal component. This class will be passed through to the DOM element. You can use it in CSS as expected.\n\nData attributes\n​\n\nWhen components are stateful, their state will be exposed in a data-state attribute. For example, when an Accordion Item is opened, it includes a data-state=\"open\" attribute.\n\nStyling with CSS\n​\nStyling a part\n​\n\nYou can style a component part by targeting the class that you provide.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"radix-vue\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem class=\"AccordionItem\" value=\"item-1\" />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\n\n<style>\n.AccordionItem {\n  /* ... */\n}\n</style>\nStyling a state\n​\n\nYou can style a component state by targeting its data-state attribute.\n\ncss\n.AccordionItem {\n  border-bottom: 1px solid gainsboro;\n}\n\n.AccordionItem[data-state=\"open\"] {\n  border-bottom-width: 2px;\n}\nStyling with Tailwind CSS\n​\n\nThe examples below are using Tailwind CSS, but you can use any library of your choice.\n\nStyling a part\n​\n\nYou can style a component part by targeting the class.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"radix-vue\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem class=\"border border-gray-400 rounded-2xl\" value=\"item-1\" />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\nStyling a state\n​\n\nWith Tailwind CSS's powerful variant selector, you can style a component state by targeting its data-state attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"radix-vue\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem\n      class=\"\n        border border-gray-400 rounded-2xl\n        data-[state=open]:border-b-2 data-[state=open]:border-gray-800\n      \"\n      value=\"item-1\"\n    />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\nExtending a primitive\n​\n\nExtending a primitive is done the same way you extend any Vue component.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionItem, type AccordionItemProps } from \"radix-vue\";\n\ninterface Props extends AccordionItemProps {\n  foo: string;\n}\n\ndefineProps<Props>();\n</script>\n\n<template>\n  <AccordionItem v-bind=\"$props\"><slot /></AccordionItem>\n</template>\nSummary\n​\n\nRadix Primitives were designed to encapsulate accessibility concerns and other complex functionalities, while ensuring you retain complete control over styling.\n\nFor convenience, stateful components include a data-state attribute.\n\nINFO\n\nSource: Radix UI"
  },
  {
    "title": "Releases | Radix Vue",
    "url": "https://www.radix-vue.com/overview/releases#VPContent",
    "html": "Releases\n​\nDiscover the latest release of Radix Vue.\n\nLatest releases on github"
  },
  {
    "title": "Getting started | Radix Vue",
    "url": "https://www.radix-vue.com/overview/getting-started#VPContent",
    "html": "Getting started\n​\nA quick tutorial to get you up and running with Radix Primitives.\nImplementing a Popover\n​\n\nIn this quick tutorial, we will install and style the Popover component.\n\n1. Install the library\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\n2. Import the parts\n​\n\nImport and structure the parts.\n\nvue\n<!-- Popover.vue -->\n<script setup lang=\"ts\">\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>More info</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent>\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n3. Add your styles\n​\n\nAdd styles where desired.\n\nvue\n<template>\n  <PopoverRoot>\n    <PopoverTrigger class=\"PopoverTrigger\">\n      More info\n    </PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow class=\"PopoverArrow\" />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n\n<style>\n.PopoverTrigger {\n  background-color: white;\n  border-radius: 4px;\n}\n\n.PopoverContent {\n  border-radius: 4px;\n  padding: 20px;\n  width: 260px;\n  background-color: white;\n}\n\n.PopoverArrow {\n  background-color: white;\n}\n</style>\nDemo\n​\n\nHere's a complete demo.\n\nMore info\nindex.vue\nstyles.css\nTailwind CSS\nvue\n<script setup lang=\"ts\">\nimport {\n  PopoverArrow,\n  PopoverClose,\n  PopoverContent,\n  PopoverPortal,\n  PopoverRoot,\n  PopoverTrigger,\n} from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger class=\"PopoverTrigger\">\n      More info\n    </PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow class=\"PopoverArrow\" />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\nExpand code\nSummary\n​\n\nThe steps above outline briefly what's involved in using a Radix Primitive in your application.\n\nThese components are low-level enough to give you control over how you want to wrap them. You're free to introduce your own high-level API to better suit the needs of your team and product.\n\nIn a few simple steps, we've implemented a fully accessible Popover component, without having to worry about many of its complexities.\n\nAdheres to WAI-ARIA design pattern.\nCan be controlled or uncontrolled.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed and customizable.\nDismissing and layering behavior is highly customizable."
  },
  {
    "title": "Accessibility | Radix Vue",
    "url": "https://www.radix-vue.com/overview/accessibility#VPContent",
    "html": "Accessibility\n​\nRadix Primitives follow the WAI-ARIA authoring practices guidelines and are tested in a wide selection of modern browsers and commonly used assistive technologies.\n\nWe take care of many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation. That means that users should be able to use our components as-is in most contexts and rely on functionality to follow the expected accessibility design patterns.\n\nWAI-ARIA\n​\n\nWAI-ARIA, published and maintained by the W3C, specifies the semantics for many common UI patterns that show up in Radix Primitives. This is designed to provide meaning for controls that aren't built using elements provided by the browser. For example, if you use a div instead of a button element to create a button, there are attributes you need to add to the div in order to convey that it's a button for screen readers or voice recognition tools.\n\nIn addition to semantics, there are behaviors that are expected from different types of components. A button element is going to respond to certain interactions in ways that a div will not, so it's up to the developer to reimplement those interactions with JavaScript. The WAI-ARIA authoring practices provide additional guidance for implementing behaviors for various controls that come with Radix Primitives.\n\nAccessible Labels\n​\n\nWith many built-in form controls, the native HTML label element is designed to provide semantic meaning and context for corresponding input elements. For non-form control elements, or for custom controls like those provided by Radix Primitives, WAI-ARIA provides a specification for how to provide accessible names and descriptions to those contols.\n\nWhere possible, Radix Primitives include abstractions to make labelling our controls simple. The Label primitive is designed to work with many of our controls. Ultimately it's up to you to provide those labels so that users have the proper context when navigating your application.\n\nKeyboard Navigation\n​\n\nMany complex components, like Tabs and Dialog, come with expectations from users on how to interact with their content using a keyboard or other non-mouse input modalities. Radix Primitives provide basic keyboard support in accordance with the WAI-ARIA authoring practices.\n\nFocus Management\n​\n\nProper keyboard navigation and good labelling often go hand-in-hand with managing focus. When a user interacts with an element and something changes as a result, it's often helpful to move focus with the interaction so that the next tab stop is logical depending on the new context of the app. And for screen reader users, moving focus often results in an announcement to convey this new context, which relies on proper labelling.\n\nIn many Radix Primitives, we move focus based on the interactions a user normally takes in a given component. For example, in AlertDialog, when the modal is opened, focus is programatically moved to a Cancel button element to anticipate a response to the prompt.\n\nINFO\n\nSource: Radix UI"
  },
  {
    "title": "useForwardPropsEmits | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-forward-props-emits",
    "html": "useForwardPropsEmits\n​\nCombinations for useForwardProps & useEmitAsProps\n\nThis composable is just a wrapper for useForwardProps & useEmitAsProps composables. Doing so it returns only 1 object that is designed to be use with v-bind directly.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { useForwardPropsEmits } from 'radix-vue'\n\nconst emits = defineProps<CompEmitEmits>()\nconst props = defineEmits<CompEmitProps>()\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <Comp v-bind=\"forwarded\">\n    ...\n  </Comp>\n</template>"
  },
  {
    "title": "useForwardProps | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-forward-props",
    "html": "useForwardProps\n​\nForward component's props without boolean casting\n\nWhen you are building a wrapper for a component, in some cases you want to ignore Vue Props Boolean Casting.\n\nYou can either set default value as undefined for all the boolean field, or you can use this composable.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { useForwardProps } from 'radix-vue'\n\nconst props = defineProps<CompEmitProps>()\nconst forwarded = useForwardProps(props)\n</script>\n\n<template>\n  <Comp v-bind=\"forwarded\">\n    ...\n  </Comp>\n</template>"
  },
  {
    "title": "useEmitAsProps | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-emit-as-props",
    "html": "useEmitAsProps\n​\nConvert emits into object similar to props\n\nWhen you are building a wrapper for a component, one of the biggest painpoint is to forward all the emitted events from components.\n\nBy using this composables, it will convert the emits you've declared into an object of handlers that is acceptable by Vue component.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { useEmitAsProps } from 'radix-vue'\n\nconst emits = defineEmits<CompEmitType>()\nconst emitsAsProps = useEmitAsProps(emits)\n</script>\n\n<template>\n  <Comp v-bind=\"emitsAsProps\">\n    ...\n  </Comp>\n</template>"
  },
  {
    "title": "useId | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/use-id",
    "html": "useId\n​\nGenerate random id\nUsage\n​\nts\nimport { useId } from 'radix-vue'\n\nconst buttonId = useId() // radix-1\nts\nimport { useId } from 'radix-vue'\n\nconst buttonId = useId('test-id') // test-id"
  },
  {
    "title": "Slot | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/slot",
    "html": "Slot\n​\nMerges its props onto its immediate child.\n\nQuestion\n\nHow is this component different from Vue native slot?\n\nA: The biggest different is how it handles the attributes assigned to it.\n\nNative slot treat any binded value as Scoped Slots, where the values will be exposed to the parent template and be consumed.\n\nBut Radix Vue's slot behave differently, it would merge all the assigned attributes onto it's immediate child.\n\nExample\n​\n\nSay we want to assign an id attribute to whatever component/element that was rendered, but Native slot will convert it into a scoped slot, and you will need to assign that id manually.\n\nvue\n<!-- Native Slot -->\n<!-- Comp.vue -->\n<template>\n  <slot id=\"radix-01\">\n    ...\n  </slot>\n</template>\n\n<!-- parent template -->\n<template>\n  <Comp v-slot=\"slotProps\">\n    <button :id=\"slotProps.id\">...<button>\n  <Comp>\n<template>\n\n(You can check out Vue SFC Playground and see that the id wasn't being inheritted.)\n\nThis would be troublesome if you want to ensure some attributes are being passed onto certain element, maybe for accessibility reason.\n\nAlternatively, If you use Slot from Radix Vue, the attributes assigned to the Slot component will be inheritted by the immediate child element, but you will no longer have access to the Scoped Slot,\n\nvue\n<!-- Radix Vue Slot -->\n<script setup lang=\"ts\">\nimport { Slot } from 'radix-vue'\n</script>\n\n<!-- Comp.vue -->\n<template>\n  <Slot id=\"radix-01\">\n    ...\n  </Slot>\n</template>\n\n<!-- parent template -->\n<template>\n  <Comp>\n    <!-- id will be inherrited -->\n    <button>...<button>\n  <Comp>\n<template>"
  },
  {
    "title": "Primitive | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/primitive",
    "html": "Primitive\n​\nCompose Radix's functionality onto alternative element types or your own Vue components.\n\nWhen you are building a component, in some cases you might want to allow user to compose some functionalities onto the underlying element, or alternative element. This is where Primitive comes in handy as it expose this capability to the user.\n\nAPI Reference\n​\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nUsage\n​\nChanging as value\n​\n\nIf you want to change the default element or component being render, you can set the default as when defining the props.\n\nvue\n<script setup lang=\"ts\">\nimport { Primitive, type PrimitiveProps } from 'radix-vue'\n\nconst props = withDefaults(defineProps<PrimitiveProps>(), {\n  as: 'span'\n})\n</script>\n\n<template>\n  <!-- Now this element will be rendered as `span` by default -->\n  <Primitive v-bind=\"props\">\n    ...\n  </Primitive>\n</template>\nRender asChild\n​\n\nChange the default rendered element for the one passed as a child, merging their props and behavior.\n\nRead our Composition guide for more details."
  },
  {
    "title": "Visually Hidden | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/visually-hidden",
    "html": "Visually Hidden\n​\nHides content from the screen in an accessible way.\nVisually hides content while preserving it for assistive technology.\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport { VisuallyHidden } from 'radix-vue'\n</script>\n\n<template>\n  <VisuallyHidden>\n    <slot />\n  </VisuallyHidden>\n</template>\nBasic example\n​\n\nUse the visually hidden primitive.\n\nvue\n<script setup lang=\"ts\">\nimport { VisuallyHidden } from 'radix-vue'\nimport { GearIcon } from '@radix-icons/vue'\n</script>\n\n<template>\n  <button>\n    <GearIcon />\n    <VisuallyHidden>Settings</VisuallyHidden>\n  </button>\n</template>\nAPI Reference\n​\nRoot\n​\n\nAnything you put inside this component will be hidden from the screen but will be announced by screen readers.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAccessibility\n​\n\nThis is useful in certain scenarios as an alternative to traditional labelling with aria-label or aria-labelledby."
  },
  {
    "title": "Tooltip | Radix Vue",
    "url": "https://www.radix-vue.com/components/tooltip",
    "html": "Tooltip\n​\nA popup that displays information related to an element when the element receives keyboard focus or the mouse hovers over it.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { TooltipArrow, TooltipContent, TooltipPortal, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n</script>\n\n<template>\n  <TooltipProvider>\n    <TooltipRoot>\n      <TooltipTrigger\n        class=\"text-grass11 shadow-blackA7 hover:bg-green3 inline-flex h-[35px] w-[35px] items-center justify-center rounded-full bg-white shadow-[0_2px_10px] outline-none focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      >\n        <Icon icon=\"radix-icons:plus\" />\n      </TooltipTrigger>\n      <TooltipPortal>\n        <TooltipContent\n          as-child\n          class=\"data-[state=delayed-open]:data-[side=top]:animate-slideDownAndFade data-[state=delayed-open]:data-[side=right]:animate-slideLeftAndFade data-[state=delayed-open]:data-[side=left]:animate-slideRightAndFade data-[state=delayed-open]:data-[side=bottom]:animate-slideUpAndFade text-grass11 select-none rounded-[4px] bg-white px-[15px] py-[10px] text-[15px] leading-none shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] will-change-[transform,opacity]\"\n          :side-offset=\"5\"\n        >\n          <ul>\n            Add to library\n            <TooltipArrow class=\"fill-white\" size=\"8\" />\n          </ul>\n        </TooltipContent>\n      </TooltipPortal>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\nExpand code\nFeatures\n​\nProvider to control display delay globally.\nOpens when the trigger is focused or hovered.\nCloses when the trigger is activated or when pressing escape.\nSupports custom timings.\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport { TooltipArrow, TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipProvider>\n    <TooltipRoot>\n      <TooltipTrigger />\n      <Tooltip>\n        <TooltipContent>\n          <TooltipArrow />\n        </TooltipContent>\n      </Tooltip>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\nAPI Reference\n​\nProvider\n​\n\nWraps your app to provide global functionality to your tooltips.\n\nProp\tType\tDefault\n\ndelayDuration\n\t\nnumber\n\t\n700\n\n\nskipDelayDuration\n\t\nnumber\n\t\n300\n\n\ndisableHoverableContent\n\t\nboolean\n\t\n\n\ndisableClosingTrigger\n\t\nboolean\n\t\nRoot\n​\n\nContains all the parts of a tooltip.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\ndelayDuration\n\t\nnumber\n\t\n700\n\n\ndisableHoverableContent\n\t\nboolean\n\t\n\n\ndisableClosingTrigger\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\nTrigger\n​\n\nThe button that toggles the tooltip. By default, the TooltipContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"closed\" | \"delayed-open\" | \"instant-open\"\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the tooltip is open.\n\nProp\tType\tDefault\n\nariaLabel\n\t\nstring\n\t\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"top\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escape-key-down\n\t(event: KeyboardEvent) => void\n\n@pointer-down-outside\n\t(event: KeyboardEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-tooltip-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-tooltip-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-tooltip-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-tooltip-trigger-width\t\nThe width of the trigger\n\n--radix-tooltip-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the tooltip. This can be used to help visually link the trigger with the TooltipContent. Must be rendered inside TooltipContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nConfigure globally\n​\n\nUse the Provider to control delayDuration and skipDelayDuration globally.\n\nvue\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipProvider :delay-duration=\"800\" :skip-delay-duration=\"500\">\n    <TooltipRoot>\n      <TooltipTrigger>…</TooltipTrigger>\n      <TooltipContent>…</TooltipContent>\n    </TooltipRoot>\n    <TooltipRoot>\n      <TooltipTrigger>…</TooltipTrigger>\n      <TooltipContent>…</TooltipContent>\n    </TooltipRoot>\n  </TooltipProvider>\n</template>\nShow instantly\n​\n\nUse the delayDuration prop to control the time it takes for the tooltip to open.\n\nvue\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot :delay-duration=\"0\">\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent>…</TooltipContent>\n  </TooltipRoot>\n</template>\nDisplaying a tooltip from a disabled button\n​\n\nSince disabled buttons don't fire events, you need to:\n\nRender the Trigger as span.\nEnsure the button has no pointerEvents.\nvue\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger as-child>\n      <span tabindex=\"0\">\n        <button disabled style=\"{ pointerEvents: 'none' }\">…</button>\n      </span>\n    </TooltipTrigger>\n    <TooltipContent>…</TooltipContent>\n  </TooltipRoot>\n</template>\nConstrain the content size\n​\n\nYou may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-tooltip-trigger-width and --radix-tooltip-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n <!-- index.vue -->\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipPortal>\n      <TooltipContent class=\"TooltipContent\" :side-offset=\"5\">\n        …\n      </TooltipContent>\n    </TooltipPortal>\n  </TooltipRoot>\n</template>\ncss\n/* styles.css */\n.TooltipContent {\n  width: var(--radix-tooltip-trigger-width);\n  max-height: var(--radix-tooltip-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-tooltip-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n <!-- index.vue -->\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent class=\"TooltipContent\">\n      …\n    </TooltipContent>\n  </TooltipRoot>\n</template>\ncss\n/* styles.css */\n.TooltipContent {\n  transform-origin: var(--radix-tooltip-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n <!-- index.vue -->\n<script setup>\nimport { TooltipContent, TooltipProvider, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>…</TooltipTrigger>\n    <TooltipContent class=\"TooltipContent\">\n      …\n    </TooltipContent>\n  </TooltipRoot>\n</template>\ncss\n/* styles.css */\n.TooltipContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.TooltipContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.TooltipContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nOpens/closes the tooltip without delay.\n\n\nSpace\n\t\nIf open, closes the tooltip without delay.\n\n\nEnter\n\t\nIf open, closes the tooltip without delay.\n\n\nEscape\n\t\nIf open, closes the tooltip without delay.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract parts and introduce a content prop\n​\n\nThis example abstracts all of the Tooltip parts and introduces a new content prop.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Tooltip } from './your-tooltip'\n</script>\n\n<template>\n  <Tooltip content=\"Tooltip content\">\n    <button>Tooltip trigger</button>\n  </Tooltip>\n</template>\nImplementation\n​\n\nUse the asChild prop to convert the trigger part into a slottable area. It will replace the trigger with the child that gets passed to it.\n\nvue\n<!-- your-tooltip.vue  -->\n<script setup lang=\"ts\">\nimport { TooltipArrow, TooltipContent, TooltipRoot, type TooltipRootEmits, type TooltipRootProps, TooltipTrigger, useForwardPropsEmits } from 'radix-vue'\n\nconst props = defineProps<TooltipRootProps & { content?: string }>()\nconst emits = defineEmits<TooltipRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <TooltipRoot v-bind=\"forward\">\n    <TooltipTrigger as-child>\n      <slot />\n    </TooltipTrigger>\n    <TooltipContent side=\"top\" align=\"center\">\n      {{ content }}\n      <TooltipArrow :width=\"11\" :height=\"5\" />\n    </TooltipContent>\n  </TooltipRoot>\n</template>"
  },
  {
    "title": "Config Provider | Radix Vue",
    "url": "https://www.radix-vue.com/utilities/config-provider",
    "html": "Config Provider\n​\nWraps your app to provide global configurations.\nEnables all primitives to inherit global reading direction.\nEnables changing the behavior of scroll body when setting body lock.\nMuch more controls to prevent layout shifts.\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport { ConfigProvider } from 'radix-vue'\n</script>\n\n<template>\n  <ConfigProvider>\n    <slot />\n  </ConfigProvider>\n</template>\nAPI Reference\n​\nConfig Provider\n​\n\nWhen creating localized apps that require right-to-left (RTL) reading direction, you need to wrap your application with the ConfigProvider component to ensure all of the primitives adjust their behavior based on the dir prop.\n\nYou can also change the global behavior of bodylock for components such as Alert, DropdownMenu and etc to fit your layout to prevent any content shifts.\n\nProp\tType\tDefault\n\ndir\n\t\n\"ltr\" | \"rtl\"\n\t\n\"ltr\"\n\n\nscrollBody\n\t\nboolean | ScrollBodyOption\n\t\ntrue\nExample\n​\n\nUse the config provider.\n\nSet global direction to rtl, and scroll body behavior to false (will not set any padding/margin).\n\nvue\n<script setup lang=\"ts\">\nimport { ConfigProvider } from 'radix-vue'\n</script>\n\n<template>\n  <ConfigProvider dir=\"rtl\" :scroll-body=\"false\">\n    <slot />\n  </ConfigProvider>\n</template>"
  },
  {
    "title": "Toggle Group | Radix Vue",
    "url": "https://www.radix-vue.com/components/toggle-group",
    "html": "ToggleGroup\n​\nA set of two-state buttons that can be toggled on or off.\n\n\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ToggleGroupItem, ToggleGroupRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\n\nconst toggleStateSingle = ref('left')\nconst toggleStateMultiple = ref(['italic'])\n\nconst toggleGroupItemClasses\n  = 'hover:bg-green3 text-mauve11 data-[state=on]:bg-green6 data-[state=on]:text-violet12 flex h-[35px] w-[35px] items-center justify-center bg-white text-base leading-4 first:rounded-l last:rounded-r focus:z-10 focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none'\n</script>\n\n<template>\n  <div>\n    <ToggleGroupRoot v-model=\"toggleStateSingle\" class=\"flex\">\n      <ToggleGroupItem value=\"left\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:text-align-left\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"center\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:text-align-center\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"right\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:text-align-right\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n    </ToggleGroupRoot>\n    <br>\n    <ToggleGroupRoot v-model=\"toggleStateMultiple\" type=\"multiple\" class=\"flex\">\n      <ToggleGroupItem value=\"bold\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:font-bold\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"italic\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:font-italic\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"strikethrough\" aria-label=\"Toggle italic\" :class=\"toggleGroupItemClasses\">\n        <Icon icon=\"radix-icons:strikethrough\" class=\"w-[15px] h-[15px]\" />\n      </ToggleGroupItem>\n    </ToggleGroupRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nSupports horizontal/vertical orientation.\nSupport single and multiple pressed buttons.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { ToggleGroupItem, ToggleGroupRoot } from 'radix-vue'\n</script>\n\n<template>\n  <ToggleGroupRoot>\n    <ToggleGroupItem />\n  </ToggleGroupRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a toggle group.\n\nProp\tType\tDefault\n\ntype*\n\t\nenum\n\t\n\n\nmodelValue\n\t\nstring | string[]\n\t\n\n\ndefaultValue\n\t\nstring | string[]\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nrovingFocus\n\t\nboolean\n\t\ntrue\n\n\norientation\n\t\nenum\n\t\nundefined\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\ntrue\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(payload: string | string[]) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nItem\n​\n\nAn item in the group.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"on\" | \"off\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nEnsuring there is always a value\n​\n\nYou can control the component to ensure a value.\n\nvue\n<script setup>\nimport { ref } from 'vue'\nimport { ToggleGroupItem, ToggleGroupRoot } from 'radix-vue'\n\nconst value = ref('left')\n</script>\n\n<template>\n  <ToggleGroupRoot v-model=\"value\" type=\"single\">\n    <ToggleGroupItem value=\"left\">\n      <TextAlignLeftIcon />\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"center\">\n      <TextAlignCenterIcon />\n    </ToggleGroupItem>\n    <ToggleGroupItem value=\"right\">\n      <TextAlignRightIcon />\n    </ToggleGroupItem>\n  </ToggleGroupRoot>\n</template>\nAccessibility\n​\n\nUses roving tabindex to manage focus movement among items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to either the pressed item or the first item in the group.\n\n\nSpace\n\t\nActivates/deactivates the item.\n\n\nEnter\n\t\nActivates/deactivates the item.\n\n\nArrowDown\n\t\nMoves focus to the next item in the group.\n\n\nArrowRight\n\t\nMoves focus to the next item in the group.\n\n\nArrowUp\n\t\nMoves focus to the previous item in the group.\n\n\nArrowLeft\n\t\nMoves focus to the previous item in the group.\n\n\nHome\n\t\nMoves focus to the first item.\n\n\nEnd\n\t\nMoves focus to the last item."
  },
  {
    "title": "Toolbar | Radix Vue",
    "url": "https://www.radix-vue.com/components/toolbar",
    "html": "Toolbar\n​\nA container for grouping a set of controls, such as buttons, Toolbar groups or dropdown menus.\nEdited 2 hours ago\nShare\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport {\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\n\nconst toggleStateSingle = ref('center')\nconst toggleStateMultiple = ref([])\n</script>\n\n<template>\n  <ToolbarRoot\n    class=\"flex p-[10px] w-full max-w-[610px] !min-w-max rounded-md bg-white shadow-[0_2px_10px] shadow-blackA7\"\n    aria-label=\"Formatting options\"\n  >\n    <ToolbarToggleGroup v-model=\"toggleStateMultiple\" type=\"multiple\" aria-label=\"Text formatting\">\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"bold\"\n        aria-label=\"Bold\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:font-bold\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"italic\"\n        aria-label=\"Italic\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:font-italic\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"strikethrough\"\n        aria-label=\"Strike through\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:strikethrough\" />\n      </ToolbarToggleItem>\n    </ToolbarToggleGroup>\n    <ToolbarSeparator class=\"w-[1px] bg-mauve6 mx-[10px]\" />\n    <ToolbarToggleGroup v-model=\"toggleStateSingle\" type=\"single\" aria-label=\"Text Alignment\">\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"left\"\n        aria-label=\"Left Aligned\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:text-align-left\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"center\"\n        aria-label=\"Center Aligned\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:text-align-center\" />\n      </ToolbarToggleItem>\n      <ToolbarToggleItem\n        class=\"flex-shrink-0 flex-grow-0 basis-auto text-mauve11 h-[25px] px-[5px] rounded inline-flex text-[13px] leading-none items-center justify-center bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n        value=\"right\"\n        aria-label=\"Right Aligned\"\n      >\n        <Icon class=\"w-[15px] h-[15px]\" icon=\"radix-icons:text-align-right\" />\n      </ToolbarToggleItem>\n    </ToolbarToggleGroup>\n    <ToolbarSeparator class=\"w-[1px] bg-mauve6 mx-[10px]\" />\n    <ToolbarLink\n      class=\"bg-transparent !font-normal !text-mauve11 inline-flex justify-center items-center hover:bg-transparent hover:cursor-pointer flex-shrink-0 flex-grow-0 basis-auto h-[25px] px-[5px] rounded text-[13px] leading-none bg-white ml-0.5 outline-none hover:bg-green3 hover:text-grass11 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7 first:ml-0 data-[state=on]:bg-green5 data-[state=on]:text-grass11\"\n      href=\"#\"\n      target=\"_blank\"\n      style=\"margin-right: 10\"\n    >\n      Edited 2 hours ago\n    </ToolbarLink>\n    <ToolbarButton\n      class=\"px-[10px] text-white bg-green9 flex-shrink-0 flex-grow-0 basis-auto h-[25px] rounded inline-flex text-[13px] leading-none items-center justify-center outline-none hover:bg-green10 focus:relative focus:shadow-[0_0_0_2px] focus:shadow-green7\"\n      style=\"margin-left: auto\"\n    >\n      Share\n    </ToolbarButton>\n  </ToolbarRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ToolbarRoot>\n    <ToolbarButton />\n    <ToolbarSeparator />\n    <ToolbarLink />\n    <ToolbarToggleGroup>\n      <ToolbarToggleItem />\n    </ToolbarToggleGroup>\n  </ToolbarRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the toolbar component parts.\n\nProp\tType\tDefault\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\ntrue\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nButton\n​\n\nA button item.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nLink\n​\n\nA link item.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\na\n\n\nasChild\n\t\nboolean\n\t\nfalse\nToggleGroup\n​\n\nA set of two-state buttons that can be toggled on or off.\n\nProp\tType\tDefault\n\ntype*\n\t\nenum\n\t\n\n\nmodelValue\n\t\nstring | string[]\n\t\n\n\ndefaultValue\n\t\nstring | string[]\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(payload: string | string[]) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nToggleItem\n​\n\nAn item in the group.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"on\" | \"off\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nSeparator\n​\n\nUsed to visually separate items in the toolbar\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nUse with other primitives\n​\n\nAll our primitives which expose a Trigger part, such as Dialog, AlertDialog, Popover, DropdownMenu can be composed within a toolbar by using the asChild prop.\n\nHere is an example using our DropdownMenu primitive.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n  ToolbarButton,\n  ToolbarLink,\n  ToolbarRoot,\n  ToolbarSeparator,\n  ToolbarToggleGroup,\n  ToolbarToggleItem,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ToolbarRoot>\n    <ToolbarButton>Action 1</ToolbarButton>\n    <ToolbarSeparator />\n    <DropdownMenuRoot>\n      <ToolbarButton as-child>\n        <DropdownMenuTrigger>Trigger</DropdownMenuTrigger>\n      </ToolbarButton>\n      <DropdownMenuContent>…</DropdownMenuContent>\n    </DropdownMenuRoot>\n  </ToolbarRoot>\n</template>\nAccessibility\n​\n\nUses roving tabindex to manage focus movement among items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to the first item in the group.\n\n\nSpace\n\t\nActivates/deactivates the item.\n\n\nEnter\n\t\nActivates/deactivates the item.\n\n\nArrowDown\n\t\nMoves focus to the next item depending on orientation.\n\n\nArrowRight\n\t\nMoves focus to the next item depending on orientation.\n\n\nArrowUp\n\t\nMoves focus to the previous item depending on orientation .\n\n\nArrowLeft\n\t\nMoves focus to the previous item depending on orientation .\n\n\nHome\n\t\nMoves focus to the first item.\n\n\nEnd\n\t\nMoves focus to the last item."
  },
  {
    "title": "Toast | Radix Vue",
    "url": "https://www.radix-vue.com/components/toast",
    "html": "Toast\n​\nA succinct message that is displayed temporarily.\nAdd to calendar\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ToastAction, ToastDescription, ToastProvider, ToastRoot, ToastTitle, ToastViewport } from 'radix-vue'\n\nconst open = ref(false)\nconst eventDateRef = ref(new Date())\nconst timerRef = ref(0)\n\nfunction oneWeekAway() {\n  const now = new Date()\n  const inOneWeek = now.setDate(now.getDate() + 7)\n  return new Date(inOneWeek)\n}\n\nfunction prettyDate(date: Date) {\n  return new Intl.DateTimeFormat('en-US', { dateStyle: 'full', timeStyle: 'short' }).format(date)\n}\n\nfunction handleClick() {\n  open.value = false\n  window.clearTimeout(timerRef.value)\n  timerRef.value = window.setTimeout(() => {\n    eventDateRef.value = oneWeekAway()\n    open.value = true\n  }, 100)\n}\n</script>\n\n<template>\n  <ToastProvider>\n    <button\n      class=\"inline-flex items-center justify-center rounded font-medium text-[15px] px-[15px] leading-[35px] h-[35px] bg-white text-grass11 shadow-[0_2px_10px] shadow-blackA7 outline-none hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      @click=\"handleClick\"\n    >\n      Add to calendar\n    </button>\n\n    <ToastRoot\n      v-model:open=\"open\"\n      class=\"bg-white rounded-md shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] p-[15px] grid [grid-template-areas:_'title_action'_'description_action'] grid-cols-[auto_max-content] gap-x-[15px] items-center data-[state=open]:animate-slideIn data-[state=closed]:animate-hide data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=cancel]:translate-x-0 data-[swipe=cancel]:transition-[transform_200ms_ease-out] data-[swipe=end]:animate-swipeOut\"\n    >\n      <ToastTitle class=\"[grid-area:_title] mb-[5px] font-medium text-slate12 text-[15px]\">\n        Scheduled: Catch up\n      </ToastTitle>\n      <ToastDescription as-child>\n        <time\n          class=\"[grid-area:_description] m-0 text-slate11 text-[13px] leading-[1.3]\"\n          :dateTime=\"eventDateRef.toISOString()\"\n        >\n          {{ prettyDate(eventDateRef) }}\n        </time>\n      </ToastDescription>\n      <ToastAction class=\"[grid-area:_action]\" as-child alt-text=\"Goto schedule to undo\">\n        <button class=\"inline-flex items-center justify-center rounded font-medium text-xs px-[10px] leading-[25px] h-[25px] bg-green2 text-green11 shadow-[inset_0_0_0_1px] shadow-green7 hover:shadow-[inset_0_0_0_1px] hover:shadow-green8 focus:shadow-[0_0_0_2px] focus:shadow-green8\">\n          Undo\n        </button>\n      </ToastAction>\n    </ToastRoot>\n    <ToastViewport class=\"[--viewport-padding:_25px] fixed bottom-0 right-0 flex flex-col p-[var(--viewport-padding)] gap-[10px] w-[390px] max-w-[100vw] m-0 list-none z-[2147483647] outline-none\" />\n  </ToastProvider>\n</template>\nExpand code\nAutomatically closes.\nPauses closing on hover, focus and window blur.\nSupports hotkey to jump to toast viewport.\nSupports closing via swipe gesture.\nExposes CSS variables for swipe gesture animations.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup lang=\"ts\">\nimport { ToastAction, ToastClose, ToastDescription, ToastProvider, ToastRoot, ToastTitle, ToastViewport } from 'radix-vue'\n</script>\n\n<template>\n  <ToastProvider>\n    <ToastRoot>\n      <ToastTitle />\n      <ToastDescription />\n      <ToastAction />\n      <ToastClose />\n    </ToastRoot>\n\n    <ToastViewport />\n  </ToastProvider>\n</template>\nAPI Reference\n​\nProvider\n​\n\nThe provider that wraps your toasts and toast viewport. It usually wraps the application.\n\nProp\tType\tDefault\n\nduration\n\t\nnumber\n\t\n5000\n\n\nlabel*\n\t\nstring\n\t\n\"Notification\"\n\n\nswipeDirection\n\t\n\"right\" | \"left\" | \"up\" | \"down\"\n\t\n\"right\"\n\n\nswipeThreshold\n\t\nnumber\n\t\n50\nViewport\n​\n\nThe fixed area where toasts appear. Users can jump to the viewport by pressing a hotkey. It is up to you to ensure the discoverability of the hotkey for keyboard users.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nol\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nhotkey\n\t\nstring[]\n\t\n[\"F8\"]\n\n\nlabel\n\t\nstring\n\t\n\"Notifications ({hotkey})\"\nRoot\n​\n\nThe toast that automatically closes. It should not be held open to acquire a user response.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nli\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ntype\n\t\n\"foreground\" | \"background\"\n\t\n\"foreground\"\n\n\nduration\n\t\nnumber\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\ntrue\n\n\nopen\n\t\nboolean\n\t\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pause\n\t() => void\n\n@resume\n\t() => void\n\n@swipeStart\n\t(event: SwipeEvent) => void\n\n@swipeMove\n\t(event: SwipeEvent) => void\n\n@swipeEnd\n\t(event: SwipeEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-swipe]\t\"start\" | \"move\" | \"cancel\" | \"end\"\n[data-swipe-direction]\t\"up\" | \"down\" | \"left\" | \"right\"\nCSS Variable\tDescription\n--radix-toast-swipe-move-x\t\nThe offset position of the toast when horizontally swiping\n\n--radix-toast-swipe-move-y\t\nThe offset position of the toast when vertically swiping\n\n--radix-toast-swipe-end-x\t\nThe offset end position of the toast after horizontally swiping\n\n--radix-toast-swipe-end-y\t\nThe offset end position of the toast after vertically swiping\nTitle\n​\n\nAn optional title for the toast\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nDescription\n​\n\nThe toast message.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAction\n​\n\nAn action that is safe to ignore to ensure users are not expected to complete tasks with unexpected side effects as a result of a time limit.\n\nWhen obtaining a user response is necessary, portal an \"AlertDialog\" styled as a toast into the viewport instead.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\naltText*\n\t\nstring\n\t\nClose\n​\n\nA button that allows users to dismiss the toast before its duration has elapsed.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nCustom hotkey\n​\n\nOverride the default hotkey using the event.code value for each key from keycode.info.\n\nhtml\n<ToastProvider>\n  ...\n  <ToastViewport :hotkey=\"['altKey', 'KeyT']\" />\n</ToastProvider>\nCustom duration\n​\n\nCustomise the duration of a toast to override the provider value.\n\nvue\n<ToastRoot :duration=\"3000\">\n  <ToastDescription>Saved!</ToastDescription>\n</ToastRoot>\nDuplicate toasts\n​\n\nWhen a toast must appear every time a user clicks a button, use state to render multiple instances of the same toast (see below). Alternatively, you can abstract the parts to create your own imperative API.\n\nhtml\n<div>\n  <form  @submit=\"count++\">\n    ...\n    <button>save</button>\n  </form>\n\n  <ToastRoot v-for=\"(_, index) in count\" :key=\"index\">\n    <ToastDescription>Saved!</ToastDescription>\n  </ToastRoot>\n</div>\nAnimating swipe gesture\n​\n\nCombine --radix-toast-swipe-move-[x|y] and --radix-toast-swipe-end-[x|y] CSS variables with data-swipe=\"[start|move|cancel|end]\" attributes to animate a swipe to close gesture. Here's an example:\n\nhtml\n<ToastProvider swipeDirection=\"right\">\n  <ToastRoot class=\"ToastRoot\">...</ToastRoot>\n  <ToastViewport />\n</ToastProvider>\ncss\n/* styles.css */\n.ToastRoot[data-swipe='move'] {\n  transform: translateX(var(--radix-toast-swipe-move-x));\n}\n.ToastRoot[data-swipe='cancel'] {\n  transform: translateX(0);\n  transition: transform 200ms ease-out;\n}\n.ToastRoot[data-swipe='end'] {\n  animation: slideRight 100ms ease-out;\n}\n\n@keyframes slideRight {\n  from {\n    transform: translateX(var(--radix-toast-swipe-end-x));\n  }\n  to {\n    transform: translateX(100%);\n  }\n}\nAccessibility\n​\n\nAdheres to the aria-live requirements.\n\nSensitivity\n​\n\nControl the sensitivity of the toast for screen readers using the type prop.\n\nFor toasts that are the result of a user action, choose foreground. Toasts generated from background tasks should use background.\n\nForeground\n​\n\nForeground toasts are announced immediately. Assistive technologies may choose to clear previously queued messages when a foreground toast appears. Try to avoid stacking distinct foreground toasts at the same time.\n\nBackground\n​\n\nBackground toasts are announced at the next graceful opportunity, for example, when the screen reader has finished reading its current sentence. They do not clear queued messages so overusing them can be perceived as a laggy user experience for screen reader users when used in response to a user interaction.\n\nhtml\n<ToastRoot type=\"foreground\">\n  <ToastDescription>File removed successfully.</ToastDescription>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\n\n<ToastRoot type=\"background\">\n  <ToastDescription>We've just released Radix 1.0.</ToastDescription>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\nAlternative action\n​\n\nUse the altText prop on the Action to instruct an alternative way of actioning the toast to screen reader users.\n\nYou can direct the user to a permanent place in your application where they can action it or implement your own custom hotkey logic. If implementing the latter, use foreground type to announce immediately and increase the duration to give the user ample time.\n\nhtml\n<ToastRoot type=\"background\">\n  <ToastTitle>Upgrade Available!</ToastTitle>\n  <ToastDescription>We've just released Radix 1.0.</ToastDescription>\n  <ToastAction altText=\"Goto account settings to upgrade\">\n    Upgrade\n  </ToastAction>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\n\n<ToastRoot type=\"foreground\" :duration=\"10000\">\n  <ToastDescription>File removed successfully.</ToastDescription>\n  <ToastAction altText=\"Undo (Alt+U)\">\n    Undo <kbd>Alt</kbd>+<kbd>U</kbd>\n  </ToastAction>\n  <ToastClose>Dismiss</ToastClose>\n</ToastRoot>\nClose icon button\n​\n\nWhen providing an icon (or font icon), remember to label it correctly for screen reader users.\n\nhtml\n<ToastRoot type=\"foreground\">\n  <ToastDescription>Saved!</ToastDescription>\n  <ToastClose aria-label=\"Close\">\n    <span aria-hidden>×</span>\n  </ToastClose>\n</ToastRoot>\nKeyboard Interactions\n​\nKey\tDescription\n\nF8\n\t\nFocuses toasts viewport.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nSpace\n\t\nWhen focus is on a ToastAction or ToastClose, closes the toast\n\n\nEnter\n\t\nWhen focus is on a ToastAction or ToastClose, closes the toast\n\n\nEsc\n\t\nWhen focus is on a Toast, closes the toast\nCustom APIs\n​\nAbstract parts\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport Toast from './your-toast.vue'\n</script>\n\n<template>\n  <Toast title=\"Upgrade available\" content=\"We've just released Radix 3.0!\">\n    <button @click=\"handleUpgrade\">\n      Upgrade\n    </button>\n  </Toast>\n</template>\nImplementation\n​\nvue\n// your-toast.vue\n<script setup lang=\"ts\">\nimport { ToastAction, ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'radix-vue'\n\ndefineProps<{\n  title: string\n  content: string\n}>()\n</script>\n\n<template>\n  <ToastRoot>\n    <ToastTitle v-if=\"title\">\n      {{ title }}\n    </ToastTitle>\n    <ToastDescription>{{ content }}</ToastDescription>\n    <ToastAction as-child>\n      <slot />\n    </ToastAction>\n    <ToastClose aria-label=\"Close\">\n      <span aria-hidden>×</span>\n    </ToastClose>\n  </ToastRoot>\n</template>\nImperative API\n​\n\nCreate your own imperative API to allow toast duplication if preferred.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport Toast from './your-toast.vue'\nimport type { InstanceType } from 'vue'\n\nconst savedRef = ref<InstanceType<typeof Toast>>()\n</script>\n\n<template>\n  <div>\n    <form @submit=\"savedRef.publish()\">\n      ...\n    </form>\n    <Toast ref=\"savedRef\">\n      Saved successfully!\n    </Toast>\n  </div>\n</template>\nImplementation\n​\nvue\n// your-toast.vue\n<script setup lang=\"ts\">\nimport { ToastClose, ToastDescription, ToastRoot, ToastTitle } from 'radix-vue'\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction publish() {\n  count.value++\n}\n\ndefineExpose({\n  publish\n})\n</script>\n\n<template>\n  <ToastRoot v-for=\"index in count\" :key=\"index\">\n    <ToastDescription>\n      <slot />\n    </ToastDescription>\n    <ToastClose>Dismiss</ToastClose>\n  </ToastRoot>\n</template>"
  },
  {
    "title": "Tags Input | Radix Vue",
    "url": "https://www.radix-vue.com/components/tags-input",
    "html": "Tags Input\n​\nAlpha\nTag inputs render tags inside an input, followed by an actual text input.\nApple\nBanana\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst modelValue = ref(['Apple', 'Banana'])\n</script>\n\n<template>\n  <TagsInputRoot\n    v-model=\"modelValue\"\n    class=\"flex gap-2 items-center border p-2 rounded-lg w-full max-w-[480px] flex-wrap border-blackA7 bg-white\"\n  >\n    <TagsInputItem v-for=\"item in modelValue\" :key=\"item\" :value=\"item\" class=\"text-white flex shadow-md items-center justify-center gap-2 bg-green8 aria-[current=true]:bg-green9 rounded p-1\">\n      <TagsInputItemText class=\"text-sm pl-1\" />\n      <TagsInputItemDelete class=\"p-0.5 rounded bg-transparent hover:bg-blackA4\">\n        <Icon icon=\"lucide:x\" />\n      </TagsInputItemDelete>\n    </TagsInputItem>\n\n    <TagsInputInput placeholder=\"Fruits...\" class=\"text-sm focus:outline-none flex-1 rounded text-green9 bg-transparent placeholder:text-mauve9 px-1\" />\n  </TagsInputRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nFull keyboard navigation.\nLimit the number of tags.\nAccept value from clipboard.\nClear button to reset all tags values.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { TagsInputClear, TagsInputDelete, TagsInputInput, TagsInputItem, TagsInputRoot, TagsInputText } from 'radix-vue'\n</script>\n\n<template>\n  <TagsInputRoot>\n    <TagsInputItem>\n      <TagsInputItemText />\n      <TagsInputItemDelete />\n    </TagsInputItem>\n\n    <TagsInputInput />\n    <TagsInputClear />\n  </TagsInputRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the tags input component parts.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\naddOnPaste\n\t\nboolean\n\t\n\n\ndelimiter\n\t\nstring\n\t\n, (comma)\n\n\nduplicate\n\t\nboolean\n\t\nfalse\n\n\ndir\n\t\nenum\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nmax\n\t\nnumber\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\n\n@invalid\n\t(value: string) => void\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-focused]\tPresent when focus on input\n[data-invalid]\tPresent when input value is invalid\nItem\n​\n\nThe component that contains the tag.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nvalue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-disabled]\tPresent when disabled\nItemText\n​\n\nThe textual part of the tag. Important for accessibility.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItemDelete\n​\n\nThe button that delete the associate tag.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-disabled]\tPresent when disabled\nInput\n​\n\nThe input element for the tags input.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ninput\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nplaceholder\n\t\nstring\n\t\n\n\nautoFocus\n\t\nboolean\n\t\n\n\nmaxLength\n\t\nnumber\n\t\nData Attribute\tValue\n[data-invalid]\tPresent when input value is invalid\nClear\n​\n\nThe button that remove all tags.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\nExamples\n​\nWith Combobox\n​\n\nYou can compose Tags input together with Combobox.\n\nApple\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\nimport { ComboboxAnchor, ComboboxContent, ComboboxEmpty, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxRoot, ComboboxTrigger, ComboboxViewport, TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst searchTerm = ref('')\nconst values = ref(['Apple'])\nconst options = ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple']\n\nwatch(values, () => {\n  searchTerm.value = ''\n}, { deep: true })\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"values\"\n    v-model:search-term=\"searchTerm\"\n    multiple\n    class=\"my-4 mx-auto relative\"\n  >\n    <ComboboxAnchor class=\"w-[400px] inline-flex items-center justify-between rounded-lg p-2 text-[13px] leading-none  gap-[5px] bg-white text-grass11 shadow-[0_2px_10px] shadow-black/10 hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black data-[placeholder]:text-grass9 outline-none\">\n      <TagsInputRoot\n        v-slot=\"{ values: tags }\"\n        :model-value=\"values\"\n        delimiter=\"\"\n        class=\"flex gap-2 items-center rounded-lg flex-wrap\"\n      >\n        <TagsInputItem\n          v-for=\"item in tags\" :key=\"item\"\n          :value=\"item\"\n          class=\"flex items-center justify-center gap-2 text-white bg-grass8 aria-[current=true]:bg-grass9 rounded px-2 py-1\"\n        >\n          <TagsInputItemText class=\"text-sm\" />\n          <TagsInputItemDelete>\n            <Icon icon=\"lucide:x\" />\n          </TagsInputItemDelete>\n        </TagsInputItem>\n\n        <ComboboxInput as-child>\n          <TagsInputInput\n            placeholder=\"Fruits...\"\n            class=\"focus:outline-none flex-1 rounded !bg-transparent  placeholder:text-mauve10 px-1\"\n            @keydown.enter.prevent\n          />\n        </ComboboxInput>\n      </TagsInputRoot>\n\n      <ComboboxTrigger>\n        <Icon icon=\"radix-icons:chevron-down\" class=\"h-4 w-4 text-grass11\" />\n      </ComboboxTrigger>\n    </ComboboxAnchor>\n    <ComboboxContent class=\"absolute z-10 w-full mt-2 bg-white overflow-hidden rounded shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\">\n      <ComboboxViewport class=\"p-[5px]\">\n        <ComboboxEmpty class=\"text-gray-400  text-xs font-medium text-center py-2\" />\n\n        <ComboboxGroup>\n          <ComboboxLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Fruits\n          </ComboboxLabel>\n\n          <ComboboxItem\n            v-for=\"(option, index) in options\" :key=\"index\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-grass8 data-[highlighted]:text-grass1\"\n            :value=\"option\"\n          >\n            <ComboboxItemIndicator\n              class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\"\n            >\n              <Icon icon=\"radix-icons:check\" />\n            </ComboboxItemIndicator>\n            <span>\n              {{ option }}\n            </span>\n          </ComboboxItem>\n        </ComboboxGroup>\n      </ComboboxViewport>\n    </ComboboxContent>\n  </ComboboxRoot>\n</template>\nExpand code\nPaste behavior\n​\n\nYou can automatically add tags on paste by passing the add-on-paste prop.\n\nvue\n<script setup lang=\"ts\">\nimport { TagsInputInput, TagsInputItem, TagsInputItemDelete, TagsInputItemText, TagsInputRoot } from 'radix-vue'\n</script>\n\n<template>\n  <TagsInputRoot v-model=\"modelValue\" add-on-paste>\n    …\n  </TagsInputRoot>\n</template>\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nDelete\n\t\nWhen tag is active, remove it and set the tag on right active.\n\n\nBackspace\n\t\nWhen tag is active, remove it and set the tag on left active. If there are no tags to the left, either the next tags gets focus, or the input.\n\n\nArrowRight\n\t\nSet the next tag active.\n\n\nArrowLeft\n\t\nSet the previous tag active.\n\n\nHome\n\t\nSet the first tag active\n\n\nEnd\n\t\nSet the last tag active"
  },
  {
    "title": "Tabs | Radix Vue",
    "url": "https://www.radix-vue.com/components/tabs",
    "html": "Tabs\n​\nA set of layered sections of content—known as tab panels—that are displayed one at a time.\nAccount\nPassword\n\nMake changes to your account here. Click save when you're done.\n\nName\nUsername\nSave changes\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { TabsContent, TabsIndicator, TabsList, TabsRoot, TabsTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TabsRoot class=\"flex flex-col w-full sm:w-[300px] shadow-[0_2px_10px] shadow-blackA4\" default-value=\"tab1\">\n    <TabsList class=\"relative shrink-0 flex border-b border-mauve6\" aria-label=\"Manage your account\">\n      <TabsIndicator class=\"absolute px-8 left-0 h-[2px] bottom-0 w-[--radix-tabs-indicator-size] translate-x-[--radix-tabs-indicator-position] rounded-full transition-[width,transform] duration-300\">\n        <div class=\"bg-grass8 w-full h-full\" />\n      </TabsIndicator>\n      <TabsTrigger\n        class=\"bg-white px-5 h-[45px] flex-1 flex items-center justify-center text-[15px] leading-none text-mauve11 select-none  rounded-tl-md  hover:text-grass11 data-[state=active]:text-grass11 outline-none cursor-default\"\n        value=\"tab1\"\n      >\n        Account\n      </TabsTrigger>\n      <TabsTrigger\n        class=\"bg-white px-5 h-[45px] flex-1 flex items-center justify-center text-[15px] leading-none text-mauve11 select-none  rounded-tr-md hover:text-grass11 data-[state=active]:text-grass11 outline-none cursor-default\"\n        value=\"tab2\"\n      >\n        Password\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent\n      class=\"grow p-5 bg-white rounded-b-md outline-none focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      value=\"tab1\"\n    >\n      <p class=\"mb-5 !mt-0 text-mauve11 text-[15px] !leading-normal\">\n        Make changes to your account here. Click save when you're done.\n      </p>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"name\"> Name </label>\n        <input\n          id=\"name\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          value=\"Pedro Duarte\"\n        >\n      </fieldset>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"username\"> Username </label>\n        <input\n          id=\"username\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          value=\"@peduarte\"\n        >\n      </fieldset>\n      <div class=\"flex justify-end mt-5\">\n        <button\n          class=\"inline-flex items-center justify-center rounded px-[15px] text-[15px] leading-none font-medium h-[35px] bg-green4 text-green11 hover:bg-green5 focus:shadow-[0_0_0_2px] focus:shadow-green7 outline-none cursor-default\"\n        >\n          Save changes\n        </button>\n      </div>\n    </TabsContent>\n    <TabsContent\n      class=\"grow p-5 bg-white rounded-b-md outline-none focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      value=\"tab2\"\n    >\n      <p class=\"mb-5 !mt-0 text-mauve11 text-[15px] !leading-normal\">\n        Change your password here. After saving, you'll be logged out.\n      </p>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"currentPassword\">\n          Current password\n        </label>\n        <input\n          id=\"currentPassword\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          type=\"password\"\n        >\n      </fieldset>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"newPassword\"> New password </label>\n        <input\n          id=\"newPassword\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          type=\"password\"\n        >\n      </fieldset>\n      <fieldset class=\"mb-[15px] w-full flex flex-col justify-start\">\n        <label class=\"text-[13px] leading-none mb-2.5 text-green12 block\" for=\"confirmPassword\">\n          Confirm password\n        </label>\n        <input\n          id=\"confirmPassword\"\n          class=\"grow shrink-0 rounded px-2.5 text-[15px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[35px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n          type=\"password\"\n        >\n      </fieldset>\n      <div class=\"flex justify-end mt-5\">\n        <button\n          class=\"inline-flex items-center justify-center rounded px-[15px] text-[15px] leading-none font-medium h-[35px] bg-green4 text-green11 hover:bg-green5 focus:shadow-[0_0_0_2px] focus:shadow-green7 outline-none cursor-default\"\n        >\n          Change password\n        </button>\n      </div>\n    </TabsContent>\n  </TabsRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports horizontal/vertical orientation.\nSupports automatic/manual activation.\nFull keyboard navigation.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { TabsContent, TabsIndicator, TabsList, TabsRoot, TabsTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TabsRoot>\n    <TabsList>\n      <TabsIndicator />\n      <TabsTrigger />\n    </TabsList>\n    <TabsContent />\n  </TabsRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the tabs component parts.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndir\n\t\nenum\n\t\n\n\nactivationMode\n\t\nenum\n\t\n\"automatic\"\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nList\n​\n\nContains the triggers that are aligned along the edge of the active content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nloop\n\t\nboolean\n\t\ntrue\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nTrigger\n​\n\nThe button that activates its associated content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nIndicator\n​\n\nThe indicator that highlights the current active tab.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCSS Variable\tDescription\n--radix-tabs-indicator-size\t\nThe size of the indicator.\n\n--radix-tabs-indicator-position\t\nThe position of the indicator\nContent\n​\n\nContains the content associated with each trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"active\" | \"inactive\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nVertical\n​\n\nYou can create vertical tabs by using the orientation prop.\n\nvue\n<script setup>\nimport { TabsContent, TabsList, TabsRoot, TabsTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TabsRoot default-value=\"tab1\" orientation=\"vertical\">\n    <TabsList aria-label=\"tabs example\">\n      <TabsTrigger value=\"tab1\">\n        One\n      </TabsTrigger>\n      <TabsTrigger value=\"tab2\">\n        Two\n      </TabsTrigger>\n      <TabsTrigger value=\"tab3\">\n        Three\n      </TabsTrigger>\n    </TabsList>\n    <TabsContent value=\"tab1\">\n      Tab one content\n    </TabsContent>\n    <TabsContent value=\"tab2\">\n      Tab two content\n    </TabsContent>\n    <TabsContent value=\"tab3\">\n      Tab three content\n    </TabsContent>\n  </TabsRoot>\n</template>\nAccessibility\n​\n\nAdheres to the Tabs WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nWhen focus moves onto the tabs, focuses the active trigger. When a trigger is focused, moves focus to the active content.\n\n\nArrowDown\n\t\nMoves focus to the next trigger depending on orientation and activates its associated content.\n\n\nArrowRight\n\t\nMoves focus to the next trigger depending on orientation and activates its associated content.\n\n\nArrowUp\n\t\nMoves focus to the previous trigger depending on orientation and activates its associated content.\n\n\nArrowLeft\n\t\nMoves focus to the previous trigger depending on orientation and activates its associated content.\n\n\nHome\n\t\nMoves focus to the first trigger and activates its associated content.\n\n\nEnd\n\t\nMoves focus to the last trigger and activates its associated content."
  },
  {
    "title": "Slider | Radix Vue",
    "url": "https://www.radix-vue.com/components/slider",
    "html": "Slider\n​\nAn input where the user selects a value from within a given range.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n\nconst sliderValue = ref([50])\n</script>\n\n<template>\n  <SliderRoot\n    v-model=\"sliderValue\" class=\"relative flex items-center select-none touch-none w-[200px] h-5\" :max=\"100\"\n    :step=\"1\"\n  >\n    <SliderTrack class=\"bg-blackA10 relative grow rounded-full h-[3px]\">\n      <SliderRange class=\"absolute bg-white rounded-full h-full\" />\n    </SliderTrack>\n    <SliderThumb\n      class=\"block w-5 h-5 bg-white shadow-[0_2px_10px] shadow-blackA7 rounded-[10px] hover:bg-violet3 focus:outline-none focus:shadow-[0_0_0_5px] focus:shadow-blackA8\"\n      aria-label=\"Volume\"\n    />\n  </SliderRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports multiple thumbs.\nSupports a minimum value between thumbs.\nSupports touch or click on track to update value.\nSupports Right to Left direction.\nFull keyboard navigation.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot>\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n  </SliderRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a slider. It will render an input for each thumb when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nnumber[]\n\t\n\n\nmodelValue\n\t\nnumber[]\n\t\n\n\nname\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndir\n\t\nenum\n\t\n\n\ninverted\n\t\nboolean\n\t\nfalse\n\n\nmin\n\t\nnumber\n\t\n0\n\n\nmax\n\t\nnumber\n\t\n100\n\n\nstep\n\t\nnumber\n\t\n1\n\n\nminStepsBetweenThumbs\n\t\nnumber\n\t\n0\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: number) => void\n\n@valueCommit\n\t(value: number[]): void\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nTrack\n​\n\nThe track that contains the SliderRange.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nRange\n​\n\nThe range part. Must live inside SliderTrack.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nThumb\n​\n\nA draggable thumb. You can render multiple thumbs.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nVertical orientation\n​\n\nUse the orientation prop to create a vertical slider.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot class=\"SliderRoot\" :default-value=\"[50]\" orientation=\"vertical\">\n    <SliderTrack class=\"SliderTrack\">\n      <SliderRange class=\"SliderRange\" />\n    </SliderTrack>\n    <SliderThumb class=\"SliderThumb\" />\n  </SliderRoot>\n</template>\ncss\n/* styles.css */\n.SliderRoot {\n  position: relative;\n  display: flex;\n  align-items: center;\n}\n.SliderRoot[data-orientation=\"vertical\"] {\n  flex-direction: column;\n  width: 20px;\n  height: 100px;\n}\n\n.SliderTrack {\n  position: relative;\n  flex-grow: 1;\n  background-color: grey;\n}\n.SliderTrack[data-orientation=\"vertical\"] {\n  width: 3px;\n}\n\n.SliderRange {\n  position: absolute;\n  background-color: black;\n}\n.SliderRange[data-orientation=\"vertical\"] {\n  width: 100%;\n}\n\n.SliderThumb {\n  display: block;\n  width: 20px;\n  height: 20px;\n  background-color: black;\n}\nCreate a range\n​\n\nAdd multiple thumbs and values to create a range slider.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot :default-value=\"[25, 75]\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n    <SliderThumb />\n  </SliderRoot>\n</template>\nDefine step size\n​\n\nUse the step prop to increase the stepping interval.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot :default-value=\"[50]\" :step=\"10\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n  </SliderRoot>\n</template>\nPrevent thumb overlap\n​\n\nUse minStepsBetweenThumbs to avoid thumbs with equal values.\n\nvue\n// index.vue\n<script setup>\nimport { SliderRange, SliderRoot, SliderThumb, SliderTrack } from 'radix-vue'\n</script>\n\n<template>\n  <SliderRoot\n    :default-value=\"[25, 75]\"\n    :step=\"10\"\n    :min-steps-between-thumbs=\"1\"\n  >\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n    <SliderThumb />\n    <SliderThumb />\n  </SliderRoot>\n</template>\nAccessibility\n​\n\nAdheres to the Slider WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nArrowRight\n\t\nIncrements/decrements by the step value depending on orientation.\n\n\nArrowLeft\n\t\nIncrements/decrements by the step value depending on orientation.\n\n\nArrowUp\n\t\nIncreases the value by the step amount.\n\n\nArrowDown\n\t\nDecreases the value by the step amount.\n\n\nPageUp\n\t\nIncreases the value by a larger step.\n\n\nPageDown\n\t\nDecreases the value by a larger step.\n\n\nShift + ArrowUp\n\t\nIncreases the value by a larger step.\n\n\nShift + ArrowDown\n\t\nDecreases the value by a larger step.\n\n\nHome\n\t\nSets the value to its minimum.\n\n\nEnd\n\t\nSets the value to its maximum.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract all parts\n​\n\nThis example abstracts all of the Slider parts so it can be used as a self closing element.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Slider } from './your-slider'\n</script>\n\n<template>\n  <Slider :default-value=\"[25]\" />\n</template>\nImplementation\n​\nts\n// your-slider.ts\nexport { default as Slider } from 'Slider.vue'\nvue\n <!-- Slider.vue -->\n<script setup lang=\"ts\">\nimport { SlideRoot, SliderRange, type SliderRootEmits, type SliderRootProps, SliderThumb, SliderTrack, useForwardPropsEmits } from 'radix-vue'\n\nconst props = defineProps<SliderRootProps>()\nconst emits = defineEmits<SliderRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <SliderRoot v-bind=\"forward\">\n    <SliderTrack>\n      <SliderRange />\n    </SliderTrack>\n\n    <SliderThumb v-for=\"(_, i) in value\" :key=\"i\" />\n  </SliderRoot>\n</template>\nCaveats\n​\nMouse events are not fired\n​\n\nBecause of a limitation we faced during implementation, the following example won't work as expected and the @mousedown and @mousedown event handlers won't be fired:\n\nvue\n<SliderRoot\n  @mousedown=\"() => { console.log('onMouseDown')  }\"\n  @mouseup=\"() => { console.log('onMouseUp')  }\"\n>\n  …\n</SliderRoot>\n\nWe recommend using pointer events instead (eg. @pointerdown, @pointerup). Regardless of the above limitation, these events are better suited for cross-platform/device handling as they are fired for all pointer input types (mouse, touch, pen, etc.)."
  },
  {
    "title": "Switch | Radix Vue",
    "url": "https://www.radix-vue.com/components/switch",
    "html": "Switch\n​\nA control that allows the user to toggle between checked and not checked.\nAirplane mode\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { SwitchRoot, SwitchThumb } from 'radix-vue'\nimport { ref } from 'vue'\n\nconst switchState = ref(false)\n</script>\n\n<template>\n  <div class=\"flex gap-2 items-center\">\n    <label class=\"text-white text-[15px] leading-none pr-[15px] select-none\" for=\"airplane-mode\">\n      Airplane mode\n    </label>\n    <SwitchRoot\n      id=\"airplane-mode\"\n      v-model:checked=\"switchState\"\n      class=\"w-[42px] h-[25px] focus-within:outline focus-within:outline-black flex bg-black/50 shadow-sm rounded-full relative data-[state=checked]:bg-black cursor-default\"\n    >\n      <SwitchThumb\n        class=\"block w-[21px] h-[21px] my-auto bg-white shadow-sm rounded-full transition-transform duration-100 translate-x-0.5 will-change-transform data-[state=checked]:translate-x-[19px]\"\n      />\n    </SwitchRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { SwitchRoot, SwitchThumb } from 'radix-vue'\n</script>\n\n<template>\n  <SwitchRoot>\n    <SwitchThumb />\n  </SwitchRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a switch. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\ndefaultChecked\n\t\nboolean\n\t\n\n\nchecked\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nvalue\n\t\nstring\n\t\non\n\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:checked\n\t(value: boolean) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nThumb\n​\n\nThe thumb that is used to visually indicate whether the switch is on or off.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nAccessibility\n​\n\nAdheres to the switch role requirements.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nToggles the component's state.\n\n\nEnter\n\t\nToggles the component's state."
  },
  {
    "title": "Select | Radix Vue",
    "url": "https://www.radix-vue.com/components/select",
    "html": "Select\n​\nDisplays a list of options for the user to pick from—triggered by a button.\nSelect a fruit...\nApple\nBanana\nBlueberry\nGrapes\nPineapple\nAubergine\nBroccoli\nCarrot\nCourgette\nLeek\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n} from 'radix-vue'\n\nconst fruit = ref()\n\nfunction handleClick() {\n  alert('hello!')\n}\n\nconst options = ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple']\nconst vegetables = ['Aubergine', 'Broccoli', 'Carrot', 'Courgette', 'Leek']\n</script>\n\n<template>\n  <SelectRoot v-model=\"fruit\">\n    <SelectTrigger\n      class=\"inline-flex min-w-[160px] items-center justify-between rounded px-[15px] text-[13px] leading-none h-[35px] gap-[5px] bg-white text-grass11 shadow-[0_2px_10px] shadow-black/10 hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black data-[placeholder]:text-green9 outline-none\"\n      aria-label=\"Customise options\"\n    >\n      <SelectValue placeholder=\"Select a fruit...\" />\n      <Icon icon=\"radix-icons:chevron-down\" class=\"h-3.5 w-3.5\" />\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent\n        class=\"min-w-[160px] bg-white rounded shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade z-[100]\"\n        :side-offset=\"5\"\n      >\n        <SelectScrollUpButton class=\"flex items-center justify-center h-[25px] bg-white text-violet11 cursor-default\">\n          <Icon icon=\"radix-icons:chevron-up\" />\n        </SelectScrollUpButton>\n\n        <SelectViewport class=\"p-[5px]\">\n          <SelectLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Fruits\n          </SelectLabel>\n          <SelectGroup>\n            <SelectItem\n              v-for=\"(option, index) in options\"\n              :key=\"index\"\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              :value=\"option\"\n            >\n              <SelectItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:check\" />\n              </SelectItemIndicator>\n              <SelectItemText>\n                {{ option }}\n              </SelectItemText>\n            </SelectItem>\n          </SelectGroup>\n          <SelectSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <SelectLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Vegetables\n          </SelectLabel>\n          <SelectGroup>\n            <SelectItem\n              v-for=\"(option, index) in vegetables\"\n              :key=\"index\"\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              :value=\"option\"\n              :disabled=\"option === 'Courgette'\"\n            >\n              <SelectItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:check\" />\n              </SelectItemIndicator>\n              <SelectItemText>\n                {{ option }}\n              </SelectItemText>\n            </SelectItem>\n          </SelectGroup>\n        </SelectViewport>\n\n        <SelectScrollDownButton class=\"flex items-center justify-center h-[25px] bg-white text-violet11 cursor-default\">\n          <Icon icon=\"radix-icons:chevron-down\" />\n        </SelectScrollDownButton>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nOffers 2 positioning modes.\nSupports items, labels, groups of items.\nFocus is fully managed.\nFull keyboard navigation.\nSupports custom placeholder.\nTypeahead support.\nSupports Right to Left direction.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>\n      <SelectValue />\n      <SelectIcon />\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent>\n        <SelectScrollUpButton />\n        <SelectViewport>\n          <SelectItem>\n            <SelectItemText />\n            <SelectItemIndicator />\n          </SelectItem>\n          <SelectGroup>\n            <SelectLabel />\n            <SelectItem>\n              <SelectItemText />\n              <SelectItemIndicator />\n            </SelectItem>\n          </SelectGroup>\n          <SelectSeparator />\n        </SelectViewport>\n        <SelectScrollDownButton />\n        <SelectArrow />\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a Select\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\ndir\n\t\nenum\n\t\n\n\nname\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that toggles the Select The SelectContent will position itself by aligning over the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-placeholder]\tPresent when has placeholder\nValue\n​\n\nThe part that reflects the selected value. By default the selected item's text will be rendered. if you require more control, you can instead control the select and pass your own children. It should not be styled to ensure correct positioning. An optional placeholder prop is also available for when the select has no value.\n\nProp\tType\tDefault\n\nplaceholder\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nIcon\n​\n\nA small icon often displayed next to the value as a visual affordance for the fact it can be open. By default renders ▼ but you can use your own icon via asChild or use children.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the select is open.\n\nProp\tType\tDefault\n\nposition\n\t\nenum\n\t\n\"item-aligned\"\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"start\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n10\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-select-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets. Only present when position=\"popper\".\n\n--radix-select-content-available-width\t\nThe remaining width between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-select-content-available-height\t\nThe remaining height between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-select-trigger-width\t\nThe width of the trigger. Only present when position=\"popper\".\n\n--radix-select-trigger-height\t\nThe height of the trigger. Only present when position=\"popper\".\nViewport\n​\n\nThe scrolling viewport that contains all of the items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nThe component that contains the select items.\n\nProp\tType\tDefault\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemText\n​\n\nThe textual part of the item. It should only contain the text you want to see in the trigger when that item is selected. It should not be styled to ensure correct positioning.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItemIndicator\n​\n\nRenders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nScrollUpButton\n​\n\nAn optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling upwards.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nScrollDownButton\n​\n\nAn optional button used as an affordance to show the viewport overflow as well as functionaly enable scrolling downwards.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nGroup\n​\n\nUsed to group multiple items. use in conjunction with SelectLabel to ensure good accessibility via automatic labelling.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render the label of a group. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSeparator\n​\n\nUsed to visually separate items in the Select\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nArrow\n​\n\nAn optional arrow element to render alongside the content. This can be used to help visually link the trigger with the SelectContent. Must be rendered inside SelectContent. Only available when position is set to popper.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nChange the positioning mode\n​\n\nBy default, Select will behave similarly to a native MacOS menu by positioning SelectContent relative to the active item. If you would prefer an alternative positioning approach similar to Popover or DropdownMenu then you can set position to popper and make use of additional alignment options such as side, sideOffset and more.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent position=\"popper\" :side-offset=\"5\">\n        …\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nConstrain the content size\n​\n\nWhen using position=\"popper\" on SelectContent, you may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-select-trigger-width and --radix-select-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent class=\"SelectContent\" position=\"popper\" :side-offset=\"5\">\n        …\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.SelectContent {\n  width: var(--radix-select-trigger-width);\n  max-height: var(--radix-select-content-available-height);\n}\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem class=\"SelectItem\" disabled>\n            …\n          </SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.SelectItem[data-disabled] {\n  color: \"gainsboro\";\n}\nWith a placeholder\n​\n\nYou can use the placeholder prop on Value for when the select has no value. There's also a data-placeholder attribute on Trigger to help with styling.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger class=\"SelectTrigger\">\n      <SelectValue placeholder=\"Pick an option\" />\n      <SelectIcon />\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>…</SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.SelectTrigger[data-placeholder] {\n  color: \"gainsboro\";\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n          <SelectSeparator />\n          <SelectItem>…</SelectItem>\n          <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nWith grouped items\n​\n\nUse the Group and Label parts to group items in a section.\n\nvue\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectGroup>\n            <SelectLabel>Label</SelectLabel>\n            <SelectItem>…</SelectItem>\n            <SelectItem>…</SelectItem>\n            <SelectItem>…</SelectItem>\n          </SelectGroup>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nWith complex items\n​\n\nYou can use custom content in your items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem>\n            <SelectItemText>\n              <img src=\"…\">\n              Adolfo Hess\n            </SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem>…</SelectItem> <SelectItem>…</SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nControlling the value displayed in the trigger\n​\n\nBy default the trigger will automatically display the selected item ItemText's content. You can control what appears by chosing to put things inside/outside the ItemText part.\n\nIf you need more flexibility, you can control the component using v-model props and passing slot to SelectValue. Remember to make sure what you put in there is accessible.\n\nvue\n<script setup>\nconst countries = { 'france': '🇫🇷', 'united-kingdom': '🇬🇧', 'spain': '🇪🇸' }\n\nconst value = ref('france')\n</script>\n\n<template>\n  <SelectRoot v-model=\"value\">\n    <SelectTrigger>\n      <SelectValue aria-label=\"value\">\n        {{ countries[value] }}\n      </SelectValue>\n      <SelectIcon />\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <SelectViewport>\n          <SelectItem value=\"france\">\n            <SelectItemText>France</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem value=\"united-kingdom\">\n            <SelectItemText>United Kingdom</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n          <SelectItem value=\"spain\">\n            <SelectItemText>Spain</SelectItemText>\n            <SelectItemIndicator>…</SelectItemIndicator>\n          </SelectItem>\n        </SelectViewport>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nWith custom scrollbar\n​\n\nThe native scrollbar is hidden by default as we recommend using the ScrollUpButton and ScrollDownButton parts for the best UX. If you do not want to use these parts, compose your select with our Scroll Area primitive.\n\nvue\n// index.vue\n<script setup lang=\"ts\">\nimport {\n  ScrollAreaRoot,\n  ScrollAreaScrollbar,\n  ScrollAreaThumb,\n  ScrollAreaViewport,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <SelectRoot>\n    <SelectTrigger>…</SelectTrigger>\n    <SelectPortal>\n      <SelectContent>\n        <ScrollAreaRoot class=\"ScrollAreaRoot\" type=\"auto\">\n          <SelectViewport as-child>\n            <ScrollAreaViewport class=\"ScrollAreaViewport\">\n              <StyledItem>…</StyledItem> <StyledItem>…</StyledItem>\n              <StyledItem>…</StyledItem>\n            </ScrollAreaViewport>\n          </SelectViewport>\n          <ScrollAreaScrollbar class=\"ScrollAreaScrollbar\" orientation=\"vertical\">\n            <ScrollAreaThumb class=\"ScrollAreaThumb\" />\n          </ScrollAreaScrollbar>\n        </ScrollAreaRoot>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\ncss\n/* styles.css */\n.ScrollAreaRoot {\n  width: 100%;\n  height: 100%;\n}\n\n.ScrollAreaViewport {\n  width: 100%;\n  height: 100%;\n}\n\n.ScrollAreaScrollbar {\n  width: 4px;\n  padding: 5px 2px;\n}\n\n.ScrollAreaThumb {\n  background: rgba(0, 0, 0, 0.3);\n  borderradius: 3px;\n}\nAccessibility\n​\n\nAdheres to the ListBox WAI-ARIA design pattern.\n\nSee the W3C Select-Only Combobox example for more information.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on SelectTrigger, opens the select and focuses the selected item.\nWhen focus is on an item, selects the focused item.\n\n\nEnter\n\t\nWhen focus is on SelectTrigger, opens the select and focuses the first item.\nWhen focus is on an item, selects the focused item.\n\n\nArrowDown\n\t\nWhen focus is on SelectTrigger, opens the Select\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on SelectTrigger, opens the Select\nWhen focus is on an item, moves focus to the previous item.\n\n\nEsc\n\t\nCloses the select and moves focus to SelectTrigger.\nLabelling\n​\n\nUse our Label component in order to offer a visual and accessible label for the Select\n\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  Label,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectItemIndicator,\n  SelectLabel,\n  SelectPortal,\n  SelectRoot,\n  SelectSeparator,\n  SelectTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <Label>\n    Country\n    <SelectRoot>…</SelectRoot>\n  </Label>\n\n  <!-- or -->\n\n  <Label for=\"country\">Country</Label>\n  <SelectRoot>\n    <SelectTrigger id=\"country\">\n      …\n    </SelectTrigger>\n    <SelectPortal>\n      <SelectContent>…</SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract down to Select and SelectItem\n​\n\nThis example abstracts most of the parts.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Select, SelectItem } from './your-select'\n</script>\n\n<template>\n  <Select default-value=\"2\">\n    <SelectItem value=\"1\">\n      Item 1\n    </SelectItem>\n    <SelectItem value=\"2\">\n      Item 2\n    </SelectItem>\n    <SelectItem value=\"3\">\n      Item 3\n    </SelectItem>\n  </Select>\n</template>\nImplementation\n​\nts\n// your-select.ts\nexport { default as Select } from 'Select.vue'\nexport { default as SelectItem } from 'SelectItem.vue'\nvue\n<!-- Select.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'\nimport { SelectContent, SelectIcon, SelectPortal, SelectRoot, SelectScrollDownButton, SelectScrollUpButton, SelectTrigger, SelectValue, SelectViewport, useForwardPropsEmits } from 'radix-vue'\nimport type { SelectRootEmits, SelectRootProps } from 'radix-vue'\n\nconst props = defineProps<SelectRootProps>()\nconst emits = defineEmits<SelectRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <SelectRoot v-bind=\"forward\">\n    <SelectTrigger>\n      <SelectValue />\n      <SelectIcon>\n        <ChevronDownIcon />\n      </SelectIcon>\n    </SelectTrigger>\n\n    <SelectPortal>\n      <SelectContent>\n        <SelectScrollUpButton>\n          <ChevronUpIcon />\n        </SelectScrollUpButton>\n        <SelectViewport>\n          <slot />\n        </SelectViewport>\n        <SelectScrollDownButton>\n          <ChevronDownIcon />\n        </SelectScrollDownButton>\n      </SelectContent>\n    </SelectPortal>\n  </SelectRoot>\n</template>\nvue\n<!-- SelectItem.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon } from '@radix-icons/vue'\nimport { SelectItem, SelectItemIndicator, type SelectItemProps, SelectItemText } from 'radix-vue'\n\nconst props = defineProps<SelectItemProps>()\n</script>\n\n<template>\n  <SelectItem v-bind=\"props\">\n    <SelectItemText>\n      <slot />\n    </SelectItemText>\n    <SelectItemIndicator>\n      <CheckIcon />\n    </SelectItemIndicator>\n  </SelectItem>\n</template>"
  },
  {
    "title": "Separator | Radix Vue",
    "url": "https://www.radix-vue.com/components/separator",
    "html": "Separator\n​\nVisually or semantically separates content.\nRadix Primitives\nAn open-source UI component library.\nBlog\nDocs\nSource\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { Separator } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"w-full max-w-[300px] mx-[15px]\">\n    <div class=\"text-white text-[15px] leading-5 font-semibold\">\n      Radix Primitives\n    </div>\n    <div class=\"text-white text-[15px] leading-5\">\n      An open-source UI component library.\n    </div>\n    <Separator\n      class=\"bg-[#d7cff9] data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px my-[15px]\"\n    />\n    <div class=\"flex h-5 items-center\">\n      <div class=\"text-white text-[15px] leading-5\">\n        Blog\n      </div>\n      <Separator\n        class=\"bg-[#d7cff9] data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px mx-[15px]\"\n        decorative\n        orientation=\"vertical\"\n      />\n      <div class=\"text-white text-[15px] leading-5\">\n        Docs\n      </div>\n      <Separator\n        class=\"bg-[#d7cff9] data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px mx-[15px]\"\n        decorative\n        orientation=\"vertical\"\n      />\n      <div class=\"text-white text-[15px] leading-5\">\n        Source\n      </div>\n    </div>\n  </div>\n</template>\nExpand code\nFeatures\n​\nSupports horizontal and vertical orientations.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { Separator } from 'radix-vue'\n</script>\n\n<template>\n  <Separator />\n</template>\nAPI Reference\n​\nRoot\n​\n\nThe separator.\n\nProp\tType\tDefault\n\norientation\n\t\nenum\n\t\n\"horizontal\"\n\n\ndecorative\n\t\nboolean\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nAccessibility\n​\n\nAdheres to the separator role requirements."
  },
  {
    "title": "Radio Group | Radix Vue",
    "url": "https://www.radix-vue.com/components/radio-group",
    "html": "RadioGroup\n​\nA set of checkable buttons—known as radio buttons—where no more than one of the buttons can be checked at a time.\nDefault\nComfortable\nCompact\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { RadioGroupIndicator, RadioGroupItem, RadioGroupRoot } from 'radix-vue'\nimport { ref } from 'vue'\n\nconst radioStateSingle = ref('default')\n</script>\n\n<template>\n  <RadioGroupRoot\n    v-model=\"radioStateSingle\" class=\"flex flex-col gap-2.5\" default-value=\"default\"\n    aria-label=\"View density\"\n  >\n    <div class=\"flex items-center\">\n      <RadioGroupItem\n        id=\"r1\"\n        class=\"bg-white w-[25px] h-[25px] rounded-full shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black outline-none cursor-default\" value=\"default\"\n      >\n        <RadioGroupIndicator\n          class=\"flex items-center justify-center w-full h-full relative after:content-[''] after:block after:w-[11px] after:h-[11px] after:rounded-[50%] after:bg-grass11\"\n        />\n      </RadioGroupItem>\n      <label class=\"text-white text-[15px] leading-none pl-[15px]\" for=\"r1\">\n        Default\n      </label>\n    </div>\n    <div class=\"flex items-center\">\n      <RadioGroupItem\n        id=\"r2\"\n        class=\"bg-white w-[25px] h-[25px] rounded-full shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black outline-none cursor-default\" value=\"comfortable\"\n      >\n        <RadioGroupIndicator\n          class=\"flex items-center justify-center w-full h-full relative after:content-[''] after:block after:w-[11px] after:h-[11px] after:rounded-[50%] after:bg-grass11\"\n        />\n      </RadioGroupItem>\n      <label class=\"text-white text-[15px] leading-none pl-[15px]\" for=\"r2\">\n        Comfortable\n      </label>\n    </div>\n    <div class=\"flex items-center\">\n      <RadioGroupItem\n        id=\"r3\"\n        class=\"bg-white w-[25px] h-[25px] rounded-full shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black outline-none cursor-default\" value=\"compact\"\n      >\n        <RadioGroupIndicator\n          class=\"flex items-center justify-center w-full h-full relative after:content-[''] after:block after:w-[11px] after:h-[11px] after:rounded-[50%] after:bg-grass11\"\n        />\n      </RadioGroupItem>\n      <label class=\"text-white text-[15px] leading-none pl-[15px]\" for=\"r3\">\n        Compact\n      </label>\n    </div>\n  </RadioGroupRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nSupports horizontal/vertical orientation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { RadioGroupIndicator, RadioGroupItem, RadioGroupRoot } from 'radix-vue'\n</script>\n\n<template>\n  <RadioGroupRoot>\n    <RadioGroupItem>\n      <RadioGroupIndicator />\n    </RadioGroupItem>\n  </RadioGroupRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a radio group.\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\norientation\n\t\nenum\n\t\nundefined\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\ntrue\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-disabled]\tPresent when disabled\nItem\n​\n\nAn item in the group that can be checked. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nIndicator\n​\n\nRenders when the radio item is in a checked state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-disabled]\tPresent when disabled\nAccessibility\n​\n\nAdheres to the Radio Group WAI-ARIA design pattern and uses roving tabindex to manage focus movement among radio items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to either the checked radio item or the first radio item in the group.\n\n\nSpace\n\t\nWhen focus is on an unchecked radio item, checks it.\n\n\nArrowDown\n\t\nMoves focus and checks the next radio item in the group.\n\n\nArrowRight\n\t\nMoves focus and checks the next radio item in the group.\n\n\nArrowUp\n\t\nMoves focus to the previous radio item in the group.\n\n\nArrowLeft\n\t\nMoves focus to the previous radio item in the group."
  },
  {
    "title": "Scroll Area | Radix Vue",
    "url": "https://www.radix-vue.com/components/scroll-area",
    "html": "ScrollArea\n​\nAugments native scroll functionality for custom, cross-browser styling.\nTags\nv1.2.0-beta.50\nv1.2.0-beta.49\nv1.2.0-beta.48\nv1.2.0-beta.47\nv1.2.0-beta.46\nv1.2.0-beta.45\nv1.2.0-beta.44\nv1.2.0-beta.43\nv1.2.0-beta.42\nv1.2.0-beta.41\nv1.2.0-beta.40\nv1.2.0-beta.39\nv1.2.0-beta.38\nv1.2.0-beta.37\nv1.2.0-beta.36\nv1.2.0-beta.35\nv1.2.0-beta.34\nv1.2.0-beta.33\nv1.2.0-beta.32\nv1.2.0-beta.31\nv1.2.0-beta.30\nv1.2.0-beta.29\nv1.2.0-beta.28\nv1.2.0-beta.27\nv1.2.0-beta.26\nv1.2.0-beta.25\nv1.2.0-beta.24\nv1.2.0-beta.23\nv1.2.0-beta.22\nv1.2.0-beta.21\nv1.2.0-beta.20\nv1.2.0-beta.19\nv1.2.0-beta.18\nv1.2.0-beta.17\nv1.2.0-beta.16\nv1.2.0-beta.15\nv1.2.0-beta.14\nv1.2.0-beta.13\nv1.2.0-beta.12\nv1.2.0-beta.11\nv1.2.0-beta.10\nv1.2.0-beta.9\nv1.2.0-beta.8\nv1.2.0-beta.7\nv1.2.0-beta.6\nv1.2.0-beta.5\nv1.2.0-beta.4\nv1.2.0-beta.3\nv1.2.0-beta.2\nv1.2.0-beta.1\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from 'radix-vue'\n\nconst tags = Array.from({ length: 50 }).map((_, i, a) => `v1.2.0-beta.${a.length - i}`)\n</script>\n\n<template>\n  <ScrollAreaRoot\n    class=\"w-[200px] h-[225px] rounded overflow-hidden shadow-[0_2px_10px] shadow-blackA7 bg-white\"\n    style=\"--scrollbar-size: 10px\"\n  >\n    <ScrollAreaViewport class=\"w-full h-full rounded\">\n      <div class=\"py-[15px] px-5\">\n        <div class=\"text-grass11 text-[15px] leading-[18px] font-semibold\">\n          Tags\n        </div>\n        <div\n          v-for=\"tag in tags\"\n          :key=\"tag\"\n          class=\"text-mauve12 text-[13px] leading-[18px] mt-2.5 pt-2.5 border-t border-t-mauve6\"\n        >\n          {{ tag }}\n        </div>\n      </div>\n    </ScrollAreaViewport>\n    <ScrollAreaScrollbar\n      class=\"flex select-none touch-none p-0.5 bg-blackA6 transition-colors duration-[160ms] ease-out hover:bg-blackA8 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n      orientation=\"vertical\"\n    >\n      <ScrollAreaThumb\n        class=\"flex-1 bg-mauve10 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\"\n      />\n    </ScrollAreaScrollbar>\n    <ScrollAreaScrollbar\n      class=\"flex select-none touch-none p-0.5 bg-blackA6 transition-colors duration-[160ms] ease-out hover:bg-blackA8 data-[orientation=vertical]:w-2.5 data-[orientation=horizontal]:flex-col data-[orientation=horizontal]:h-2.5\"\n      orientation=\"horizontal\"\n    >\n      <ScrollAreaThumb\n        class=\"flex-1 bg-mauve10 rounded-[10px] relative before:content-[''] before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-full before:h-full before:min-w-[44px] before:min-h-[44px]\"\n      />\n    </ScrollAreaScrollbar>\n  </ScrollAreaRoot>\n</template>\nExpand code\nFeatures\n​\nScrollbar sits on top of the scrollable content, taking up no space.\nScrolling is native; no underlying position movements via CSS transformations.\nShims pointer behaviors only when interacting with the controls, so keyboard controls are unaffected.\nSupports Right to Left direction.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { ScrollAreaRoot, ScrollAreaScrollbar, ScrollAreaThumb, ScrollAreaViewport } from 'radix-vue'\n</script>\n\n<template>\n  <ScrollAreaRoot>\n    <ScrollAreaViewport />\n    <ScrollAreaScrollbar orientation=\"horizontal\">\n      <ScrollAreaThumb />\n    </ScrollAreaScrollbar>\n    <ScrollAreaScrollbar orientation=\"vertical\">\n      <ScrollAreaThumb />\n    </ScrollAreaScrollbar>\n    <ScrollAreaCorner />\n  </ScrollAreaRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a scroll area.\n\nProp\tType\tDefault\n\ntype\n\t\nenum\n\t\n\"hover\"\n\n\nscrollHideDelay\n\t\nnumber\n\t\n600\n\n\ndir\n\t\nenum\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nViewport\n​\n\nThe viewport area of the scroll area.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nScrollbar\n​\n\nThe vertical scrollbar. Add a second Scrollbar with an orientation prop to enable horizontal scrolling.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\norientation\n\t\nenum\n\t\nvertical\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nThumb\n​\n\nThe thumb to be used in ScrollAreaScrollbar.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\nCorner\n​\n\nThe corner where both vertical and horizontal scrollbars meet.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAccessibility\n​\n\nIn most cases, it's best to rely on native scrolling and work with the customization options available in CSS. When that isn't enough, ScrollArea provides additional customizability while maintaining the browser's native scroll behavior (as well as accessibility features, like keyboard scrolling).\n\nKeyboard Interactions\n​\n\nScrolling via keyboard is supported by default because the component relies on native scrolling. Specific keyboard interactions may differ between platforms, so we do not specify them here or add specific event listeners to handle scrolling via key events."
  },
  {
    "title": "Popover | Radix Vue",
    "url": "https://www.radix-vue.com/components/popover",
    "html": "Popover\n​\nDisplays rich content in a portal, triggered by a button.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger\n      class=\"rounded-full w-[35px] h-[35px] inline-flex items-center justify-center text-grass11 bg-white shadow-[0_2px_10px] shadow-blackA7 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black cursor-default outline-none\"\n      aria-label=\"Update dimensions\"\n    >\n      <Icon icon=\"radix-icons:mixer-horizontal\" />\n    </PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent\n        side=\"bottom\"\n        :side-offset=\"5\"\n        class=\"rounded p-5 w-[260px] bg-white shadow-[0_10px_38px_-10px_hsla(206,22%,7%,.35),0_10px_20px_-15px_hsla(206,22%,7%,.2)] focus:shadow-[0_10px_38px_-10px_hsla(206,22%,7%,.35),0_10px_20px_-15px_hsla(206,22%,7%,.2),0_0_0_2px_theme(colors.green7)] will-change-[transform,opacity] data-[state=open]:data-[side=top]:animate-slideDownAndFade data-[state=open]:data-[side=right]:animate-slideLeftAndFade data-[state=open]:data-[side=bottom]:animate-slideUpAndFade data-[state=open]:data-[side=left]:animate-slideRightAndFade\"\n      >\n        <div class=\"flex flex-col gap-2.5\">\n          <p class=\"text-mauve12 text-[15px] leading-[19px] font-semibold mb-2.5\">\n            Dimensions\n          </p>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"width\"> Width </label>\n            <input\n              id=\"width\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"100%\"\n            >\n          </fieldset>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"maxWidth\"> Max. width </label>\n            <input\n              id=\"maxWidth\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"300px\"\n            >\n          </fieldset>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"height\"> Height </label>\n            <input\n              id=\"height\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"25px\"\n            >\n          </fieldset>\n          <fieldset class=\"flex gap-5 items-center\">\n            <label class=\"text-[13px] text-grass11 w-[75px]\" for=\"maxHeight\"> Max. height </label>\n            <input\n              id=\"maxHeight\"\n              class=\"w-full inline-flex items-center justify-center flex-1 rounded px-2.5 text-[13px] leading-none text-grass11 shadow-[0_0_0_1px] shadow-green7 h-[25px] focus:shadow-[0_0_0_2px] focus:shadow-green8 outline-none\"\n              defaultValue=\"none\"\n            >\n          </fieldset>\n        </div>\n        <PopoverClose\n          class=\"rounded-full h-[25px] w-[25px] inline-flex items-center justify-center text-grass11 absolute top-[5px] right-[5px] hover:bg-green4 focus:shadow-[0_0_0_2px] focus:shadow-green7 outline-none cursor-default\"\n          aria-label=\"Close\"\n        >\n          <Icon icon=\"radix-icons:cross-2\" />\n        </PopoverClose>\n        <PopoverArrow class=\"fill-white\" />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed and customizable.\nSupports modal and non-modal modes.\nDismissing and layering behavior is highly customizable.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger />\n    <PopoverAnchor />\n    <PopoverPortal>\n      <PopoverContent>\n        <PopoverClose />\n        <PopoverArrow />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a popover.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nmodal\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that toggles the popover. By default, the PopoverContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nAnchor\n​\n\nAn optional element to position the PopoverContent against. If this part is not used, the content will position alongside the PopoverTrigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the popover is open.\n\nProp\tType\tDefault\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@openAutoFocus\n\t(event: Event) => void\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-popover-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-popover-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-popover-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-popover-trigger-width\t\nThe width of the trigger\n\n--radix-popover-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the popover. This can be used to help visually link the anchor with the PopoverContent. Must be rendered inside PopoverContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nClose\n​\n\nThe button that closes an open popover.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nConstrain the content size\n​\n\nYou may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-popover-trigger-width and --radix-popover-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>…</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\" :side-offset=\"5\">\n        …\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.PopoverContent {\n  width: var(--radix-popover-trigger-width);\n  max-height: var(--radix-popover-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-popover-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>…</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        …\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.PopoverContent {\n  transform-origin: var(--radix-popover-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>…</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        …\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.PopoverContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.PopoverContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.PopoverContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nWith custom anchor\n​\n\nYou can anchor the content to another element if you do not want to use the trigger as the anchor.\n\nvue\n// index.vue\n<script setup>\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverAnchor as-child>\n      <div class=\"Row\">\n        Row as anchor <PopoverTrigger>Trigger</PopoverTrigger>\n      </div>\n    </PopoverAnchor>\n\n    <PopoverPortal>\n      <PopoverContent>…</PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\ncss\n/* styles.css */\n.Row {\n  background-color: gainsboro;\n  padding: 20px;\n}\nAccessibility\n​\n\nAdheres to the Dialog WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the popover.\n\n\nEnter\n\t\nOpens/closes the popover.\n\n\nTab\n\t\nMoves focus to the next focusable element\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element\n\n\nEsc\n\t\nCloses the popover and moves focus to PopoverTrigger.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract the arrow and set default configuration\n​\n\nThis example abstracts the PopoverArrow part and sets a default sideOffset configuration.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Popover, PopoverContent, PopoverTrigger } from './your-popover'\n</script>\n\n<template>\n  <Popover>\n    <PopoverTrigger>Popover trigger</PopoverTrigger>\n    <PopoverContent>Popover content</PopoverContent>\n  </Popover>\n</template>\nImplementation\n​\nts\n// your-popover.ts\nexport { default as PopoverContent } from 'PopoverContent.vue'\n\nexport { PopoverRoot as Popover, PopoverTrigger } from 'radix-vue'\nvue\n<!-- PopoverContent.vue -->\n<script setup lang=\"ts\">\nimport { PopoverContent, type PopoverContentEmits, type PopoverContentProps, PopoverPortal, useForwardPropsEmits, } from 'radix-vue'\n\nconst props = defineProps<PopoverContentProps>()\nconst emits = defineEmits<PopoverContentEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <PopoverPortal>\n    <PopoverContent v-bind=\"{ ...forwarded, ...$attrs }\">\n      <slot />\n    </PopoverContent>\n  </PopoverPortal>\n</template>"
  },
  {
    "title": "Progress | Radix Vue",
    "url": "https://www.radix-vue.com/components/progress",
    "html": "Progress\n​\nDisplays an indicator showing the completion progress of a task, typically displayed as a progress bar.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue'\nimport { ProgressIndicator, ProgressRoot } from 'radix-vue'\n\nconst progressValue = ref(10)\n\nonMounted(() => {\n  const timer = setTimeout(() => (progressValue.value = 66), 500)\n  return () => clearTimeout(timer)\n})\n</script>\n\n<template>\n  <ProgressRoot\n    v-model=\"progressValue\"\n    class=\"relative overflow-hidden bg-blackA9 rounded-full w-full sm:w-[300px] h-4 sm:h-5\"\n    style=\"transform: translateZ(0)\"\n  >\n    <ProgressIndicator\n      class=\"bg-white rounded-full w-full h-full transition-transform duration-[660ms] ease-[cubic-bezier(0.65, 0, 0.35, 1)]\"\n      :style=\"`transform: translateX(-${100 - progressValue}%)`\"\n    />\n  </ProgressRoot>\n</template>\nExpand code\nFeatures\n​\nProvides context for assistive technology to read the progress of a task.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { ProgressIndicator, ProgressRoot } from 'radix-vue'\n</script>\n\n<template>\n  <ProgressRoot>\n    <ProgressIndicator />\n  </ProgressRoot>\n</template>\nAccessibility\n​\n\nAdheres to the progressbar role requirements.\n\nAPI Reference\n​\nRoot\n​\n\nContains all of the progress parts.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nnumber | null\n\t\n\n\nmax\n\t\nnumber\n\t\n\n\ngetValueLabel\n\t\nfunction\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-state]\t\"complete\" | \"indeterminate\" | \"loading\"\n[data-value]\tThe current value\n[data-max]\tThe max value\nIndicator\n​\n\nUsed to show the progress visually. It also makes progress accessible to assistive technologies.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"complete\" | \"indeterminate\" | \"loading\"\n[data-value]\tThe current value\n[data-max]\tThe max value"
  },
  {
    "title": "Pin Input | Radix Vue",
    "url": "https://www.radix-vue.com/components/pin-input",
    "html": "Pin Input\n​\nAlpha\nA sequence of one-character alphanumeric inputs.\nPin Input\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { Label, PinInputInput, PinInputRoot } from 'radix-vue'\n\nconst value = ref<string[]>([])\nconst handleComplete = (e: string[]) => alert(e.join(''))\n</script>\n\n<template>\n  <div>\n    <Label for=\"pin-input\" class=\"text-white\">Pin Input</Label>\n    <PinInputRoot\n      id=\"pin-input\"\n      v-model=\"value\"\n      placeholder=\"○\"\n      class=\"flex gap-2 items-center mt-1\"\n      @complete=\"handleComplete\"\n    >\n      <PinInputInput\n        v-for=\"(id, index) in 5\"\n        :key=\"id\"\n        :index=\"index\"\n        class=\"w-10 h-10 bg-white rounded text-center shadow-lg text-green10 placeholder:text-mauve8 focus:outline focus:outline-2 focus:outline-offset-2 focus:outline-white\"\n      />\n    </PinInputRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nSupports pasting from clipboard\nEmit event when inputs were filled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { PinInputInput, PinInputRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PinInputRoot>\n    <PinInputInput />\n  </PinInputRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a checkbox. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndefaultValue\n\t\nstring[]\n\t\n\n\nmodelValue\n\t\nstring[]\n\t\n\n\nplaceholder\n\t\nstring\n\t\n\n\nmask\n\t\nboolean\n\t\nfalse\n\n\notp\n\t\nboolean\n\t\nfalse\n\n\ntype\n\t\ntext | number\n\t\ntext\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string[]) => void\n\n@complete\n\t(value: string[]) => void\nData Attribute\tValue\n[data-complete]\tPresent when completed\n[data-disabled]\tPresent when disabled\nInput\n​\n\nInput field for Pin Input. You can add as many input as you like.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nindex\n\t\nnumber\n\t\n\n\ndisabled\n\t\nboolean\n\t\nData Attribute\tValue\n[data-complete]\tPresent when completed\n[data-disabled]\tPresent when disabled\nExamples\n​\nOTP mode\n​\n\nYou can set the pin input to otp mode by setting otp to true.\n\nvue\n<script setup lang=\"ts\"> \nimport { Label, PinInputInput, PinInputRoot } from 'radix-vue' \n</script>\n\n<template>\n  <PinInputRoot v-model=\"value\" otp>\n    …\n  </PinInputRoot>\n</template>\nNumeric mode\n​\n\nYou can set the pin input to only accept number type by setting type to number.\n\nvue\n<script setup lang=\"ts\"> \nimport { Label, PinInputInput, PinInputRoot } from 'radix-vue' \n</script>\n\n<template>\n  <PinInputRoot v-model=\"value\" type=\"number\">\n    …\n  </PinInputRoot>\n</template>\nAccessibility\n​\nKeyboard Interactions\n​\nKey\tDescription\n\nArrowLeft\n\t\nFocus on previous input.\n\n\nArrowRight\n\t\nFocus on next input.\n\n\nHome\n\t\nFocus on the first input.\n\n\nEnd\n\t\nFocus on the last input.\n\n\nBackspace\n\t\nDeletes the value of the current input. If the input is empty, moves to the previous input and deletes that value as well.\n\n\nDelete\n\t\nDeletes the value of the current input.\n\n\nCtrl + V\n\t\nPastes the contents of the clipboard into the pin input. If the number of characters in the clipboard equals exceeds the number of inputs, the contents are pasted from the first input. Otherwise, the contents are pasted from the current input onwards."
  },
  {
    "title": "Pagination | Radix Vue",
    "url": "https://www.radix-vue.com/components/pagination",
    "html": "Pagination\n​\nDisplays data in paged format and provides navigation between pages.\n1\n2\n3\n4\n5\n…\n10\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { PaginationEllipsis, PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationNext, PaginationPrev, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot :total=\"100\" :sibling-count=\"1\" show-edges :default-page=\"2\">\n    <PaginationList v-slot=\"{ items }\" class=\"flex items-center gap-1 text-white\">\n      <PaginationFirst class=\"w-9 h-9  flex items-center justify-center  disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:double-arrow-left\" />\n      </PaginationFirst>\n      <PaginationPrev class=\"w-9 h-9  flex items-center justify-center mr-4  disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:chevron-left\" />\n      </PaginationPrev>\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem v-if=\"page.type === 'page'\" :key=\"index\" class=\"w-9 h-9 border rounded  data-[selected]:bg-white data-[selected]:text-blackA11 hover:bg-white/10 transition focus-within:outline focus-within:outline-1 focus-within:outline-offset-1\" :value=\"page.value\">\n          {{ page.value }}\n        </PaginationListItem>\n        <PaginationEllipsis v-else :key=\"page.type\" :index=\"index\" class=\"w-9 h-9 flex items-center justify-center\">\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n      <PaginationNext class=\"w-9 h-9  flex items-center justify-center  ml-4 disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:chevron-right\" />\n      </PaginationNext>\n      <PaginationLast class=\"w-9 h-9  flex items-center justify-center disabled:opacity-50  focus-within:outline focus-within:outline-1 focus-within:outline-offset-1 rounded\">\n        <Icon icon=\"radix-icons:double-arrow-right\" />\n      </PaginationLast>\n    </PaginationList>\n  </PaginationRoot>\n</template>\nExpand code\nFeatures\n​\nEnable quick access to first, or last page\nEnable to show edges constantly, or not\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { PaginationEllipsis, PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationNext, PaginationPrev, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList v-slot=\"{ items }\">\n      <PaginationFirst />\n      <PaginationPrev />\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem v-if=\"page.type === 'page'\" :key=\"index\" />\n        <PaginationEllipsis v-else :key=\"page.type\" :index=\"index\">\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n      <PaginationNext />\n      <PaginationLast />\n    </PaginationList>\n  </PaginationRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all of the paginations parts.\n\nProp\tType\tDefault\n\npage\n\t\nnumber\n\t\n\n\ndefaultPage\n\t\nnumber\n\t\n1\n\n\ntotal\n\t\nnumber\n\t\n10\n\n\nitemsPerPage\n\t\nnumber\n\t\n10\n\n\nsiblingCount\n\t\nnumber\n\t\n3\n\n\nshowEdges\n\t\nboolean\n\t\nEmit\tType\n\n@update:page\n\t(value: number) => void\nList\n​\n\nUsed to show the list of pages. It also makes pagination accessible to assistive technologies.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nUsed to render the button that changes the current page.\n\nProp\tType\tDefault\n\nvalue\n\t\nnumber\n\t\n\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-selected]\t\"true\" | \"\"\n[data-type]\t\"page\"\nEllipsis\n​\n\nPlaceholder element when the list is long, and only a small amount of siblingCount was set and showEdges was set to true.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-type]\t\"ellipsis\"\nFirst\n​\n\nTriggers that set the page value to 1\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPrev\n​\n\nTriggers that set the page value to the previous page\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nNext\n​\n\nTriggers that set the page value to the next page\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLast\n​\n\nTriggers that set the page value to the last page\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nWith ellipsis\n​\n\nYou can add PaginationEllipsis as a visual cue for more previous and after items.\n\nvue\n<script setup lang=\"ts\">\nimport { PaginationEllipsis, PaginationList, PaginationListItem, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList v-slot=\"{ items }\">\n      <template v-for=\"(page, index) in items\">\n        <PaginationListItem v-if=\"page.type === 'page'\" :key=\"index\" />\n        <PaginationEllipsis v-else :key=\"page.type\" :index=\"index\">\n          &#8230;\n        </PaginationEllipsis>\n      </template>\n    </PaginationList>\n  </PaginationRoot>\n</template>\nWith first/last button\n​\n\nYou can add PaginationFirst to allow user to navigate to first page, or PaginationLast to navigate to last page.\n\nvue\n<script setup lang=\"ts\">\nimport { PaginationFirst, PaginationLast, PaginationList, PaginationListItem, PaginationRoot } from 'radix-vue'\n</script>\n\n<template>\n  <PaginationRoot>\n    <PaginationList>\n      <PaginationFirst />\n      ...\n      <PaginationLast />\n    </PaginationList>\n  </PaginationRoot>\n</template>\nControl page programmatically\n​\n\nYou can control the current page by passing it a reactive value.\n\nvue\n<script setup lang=\"ts\">\nimport { PaginationRoot } from 'radix-vue'\nimport { Select } from './custom-select'\nimport { ref } from 'vue'\n\nconst currentPage = ref(1)\n</script>\n\n<template>\n  <Select v-model=\"currentPage\" />\n  <PaginationRoot v-model:page=\"currentPage\">\n    ...\n  </PaginationRoot>\n</template>\nKeyboard Interactions\n​\nKey\tDescription\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nSpace\n\t\nWhen focus is on a any trigger, trigger selected page or arrow navigation\n\n\nEnter\n\t\nWhen focus is on a any trigger, trigger selected page or arrow navigation"
  },
  {
    "title": "Navigation Menu | Radix Vue",
    "url": "https://www.radix-vue.com/components/navigation-menu",
    "html": "Navigation Menu\n​\nA collection of links for navigating websites.\nLearn\nOverview\nGithub\nindex.vue\nNavigationMenuListItem.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\nimport NavigationMenuListItem from './NavigationMenuListItem.vue'\n\nconst currentTrigger = ref('')\n</script>\n\n<template>\n  <NavigationMenuRoot v-model=\"currentTrigger\" class=\"relative z-[1] flex w-full justify-center\">\n    <NavigationMenuList class=\"center shadow-blackA7 m-0 flex list-none rounded-[6px] bg-white p-1 shadow-[0_2px_10px]\">\n      <NavigationMenuItem>\n        <NavigationMenuTrigger\n          class=\"text-grass11 hover:bg-green3 focus:shadow-green7 group flex select-none items-center justify-between gap-[2px] rounded-[4px] px-3 py-2 text-[15px] font-medium leading-none outline-none focus:shadow-[0_0_0_2px]\"\n        >\n          Learn\n          <Icon\n            icon=\"radix-icons:caret-down\"\n            class=\"text-green10 relative top-[1px] transition-transform duration-[250] ease-in group-data-[state=open]:-rotate-180\"\n            aria-hidden\n          />\n        </NavigationMenuTrigger>\n        <NavigationMenuContent\n          class=\"data-[motion=from-start]:animate-enterFromLeft data-[motion=from-end]:animate-enterFromRight data-[motion=to-start]:animate-exitToLeft data-[motion=to-end]:animate-exitToRight absolute top-0 left-0 w-full sm:w-auto\"\n        >\n          <ul class=\"one m-0 grid list-none gap-x-[10px] p-[22px] sm:w-[500px] sm:grid-cols-[0.75fr_1fr]\">\n            <li class=\"row-span-3 grid\">\n              <NavigationMenuLink as-child>\n                <a\n                  class=\"focus:shadow-green7 from-green9 to-teal9 flex h-full w-full select-none flex-col justify-end rounded-[6px] bg-gradient-to-b p-[25px] no-underline outline-none focus:shadow-[0_0_0_2px]\"\n                  href=\"/\"\n                >\n                  <img class=\"w-16\" src=\"https://www.radix-vue.com/logo.svg\">\n                  <div class=\"mt-4 mb-[7px] text-[18px] font-medium leading-[1.2] text-white\">Radix Primitives</div>\n                  <p class=\"text-mauve4 text-[14px] leading-[1.3]\">Unstyled, accessible components for Vue.</p>\n                </a>\n              </NavigationMenuLink>\n            </li>\n\n            <NavigationMenuListItem href=\"https://stitches.dev/\" title=\"Stitches\">\n              CSS-in-JS with best-in-class developer experience.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem href=\"/colors\" title=\"Colors\">\n              Beautiful, thought-out palettes with auto dark mode.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem href=\"https://icons.radix-ui.com/\" title=\"Icons\">\n              A crisp set of 15x15 icons, balanced and consistent.\n            </NavigationMenuListItem>\n          </ul>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuTrigger\n          class=\"text-grass11 hover:bg-green3 focus:shadow-green7 group flex select-none items-center justify-between gap-[2px] rounded-[4px] px-3 py-2 text-[15px] font-medium leading-none outline-none focus:shadow-[0_0_0_2px]\"\n        >\n          Overview\n          <Icon\n            icon=\"radix-icons:caret-down\"\n            class=\"text-green10 relative top-[1px] transition-transform duration-[250] ease-in group-data-[state=open]:-rotate-180\"\n            aria-hidden\n          />\n        </NavigationMenuTrigger>\n        <NavigationMenuContent class=\"data-[motion=from-start]:animate-enterFromLeft data-[motion=from-end]:animate-enterFromRight data-[motion=to-start]:animate-exitToLeft data-[motion=to-end]:animate-exitToRight absolute top-0 left-0 w-full sm:w-auto\">\n          <ul class=\"m-0 grid list-none gap-x-[10px] p-[22px] sm:w-[600px] sm:grid-flow-col sm:grid-rows-3\">\n            <NavigationMenuListItem title=\"Introduction\" href=\"/docs/primitives/overview/introduction\">\n              Build high-quality, accessible design systems and web apps.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Getting started\" href=\"/docs/primitives/overview/getting-started\">\n              A quick tutorial to get you up and running with Radix Primitives.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Styling\" href=\"/docs/primitives/guides/styling\">\n              Unstyled and compatible with any styling solution.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Animation\" href=\"/docs/primitives/guides/animation\">\n              Use CSS keyframes or any animation library of your choice.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Accessibility\" href=\"/docs/primitives/overview/accessibility\">\n              Tested in a range of browsers and assistive technologies.\n            </NavigationMenuListItem>\n            <NavigationMenuListItem title=\"Releases\" href=\"/docs/primitives/overview/releases\">\n              Radix Primitives releases and their changelogs.\n            </NavigationMenuListItem>\n          </ul>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuLink\n          class=\"text-grass11 hover:bg-green3 focus:shadow-green7 block select-none rounded-[4px] px-3 py-2 text-[15px] font-medium leading-none no-underline outline-none focus:shadow-[0_0_0_2px]\"\n          href=\"https://github.com/radix-vue\"\n        >\n          Github\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator\n        class=\"data-[state=hidden]:opacity-0 duration-200 data-[state=visible]:animate-fadeIn data-[state=hidden]:animate-fadeOut top-full z-[1] flex h-[10px] items-end justify-center overflow-hidden transition-[all,transform_250ms_ease]\"\n      >\n        <div class=\"relative top-[70%] h-[10px] w-[10px] rotate-[45deg] rounded-tl-[2px] bg-white\" />\n      </NavigationMenuIndicator>\n    </NavigationMenuList>\n\n    <div class=\"perspective-[2000px] absolute top-full left-0 flex w-full justify-center\">\n      <NavigationMenuViewport\n        class=\"data-[state=open]:animate-scaleIn data-[state=closed]:animate-scaleOut relative mt-[10px] h-[var(--radix-navigation-menu-viewport-height)] w-full origin-[top_center] overflow-hidden rounded-[10px] bg-white transition-[width,_height] duration-300 sm:w-[var(--radix-navigation-menu-viewport-width)]\"\n      />\n    </div>\n  </NavigationMenuRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nFlexible layout structure with managed tab focus.\nSupports submenus.\nOptional active item indicator.\nFull keyboard navigation.\nExposes CSS variables for advanced animation.\nSupports custom timings.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger />\n        <NavigationMenuContent>\n          <NavigationMenuLink />\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuLink />\n      </NavigationMenuItem>\n\n      <NavigationMenuItem>\n        <NavigationMenuTrigger />\n        <NavigationMenuContent>\n          <NavigationMenuSub>\n            <NavigationMenuList />\n            <NavigationMenuViewport />\n          </NavigationMenuSub>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator />\n    </NavigationMenuList>\n\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a navigation menu.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nstring\n\t\n\n\ndefaultValue\n\t\nstring\n\t\n\n\ndelayDuration\n\t\nnumber\n\t\n200\n\n\nskipDelayDuration\n\t\nnumber\n\t\n300\n\n\ndir\n\t\nenum\n\t\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\nEmit\tType\n\n@update:modelValue\n\t(payload: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nSub\n​\n\nSignifies a submenu. Use it in place of the root part when nested to create a submenu.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nstring\n\t\n\n\ndefaultValue\n\t\nstring\n\t\n\n\norientation\n\t\nenum\n\t\n\"horizontal\"\nEmit\tType\n\n@update:modelValue\n\t(payload: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nList\n​\n\nContains the top level menu items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nul\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nItem\n​\n\nA top level menu item, contains a link or trigger with content combination.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nli\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue\n\t\nstring\n\t\nTrigger\n​\n\nThe button that toggles the content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nContent\n​\n\nContains the content associated with each trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisableOutsidePointerEvents\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@escapeKeyDown\n\tfunction\n\n\n@pointerDownOutside\n\tfunction\n\n\n@focusOutside\n\tfunction\n\n\n@interactOutside\n\tfunction\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-motion]\t\"to-start\" | \"to-end\" | \"from-start\" | \"from-end\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nLink\n​\n\nA navigational link.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\na\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nactive\n\t\nboolean\n\t\nfalse\n\n\nonSelect\n\t\nfunction\n\t\nData Attribute\tValue\n[data-active]\tPresent when active\nIndicator\n​\n\nAn optional indicator element that renders below the list, is used to highlight the currently active trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nViewport\n​\n\nAn optional viewport element that is used to render active content outside of the list.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"visible\" | \"hidden\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-navigation-menu-viewport-width\t\nThe width of the viewport when visible/hidden, computed from the active content\n\n--radix-navigation-menu-viewport-height\t\nThe height of the viewport when visible/hidden, computed from the active content\nExamples\n​\nVertical\n​\n\nYou can create a vertical menu by using the orientation prop.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuIndicator,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot orientation=\"vertical\">\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item Two content</NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\nFlexible layouts\n​\n\nUse the Viewport part when you need extra control over where Content is rendered. This can be helpful when your design requires an adjusted DOM structure or if you need flexibility to achieve advanced animation. Tab focus will be maintained automatically.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item two content</NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n\n    <!-- NavigationMenuContent will be rendered here when active  -->\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\nWith indicator\n​\n\nYou can use the optional Indicator part to highlight the currently active Trigger, this is useful when you want to provide an animated visual cue such as an arrow or highlight to accompany the Viewport.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>Item two content</NavigationMenuContent>\n      </NavigationMenuItem>\n\n      <NavigationMenuIndicator class=\"NavigationMenuIndicator\" />\n    </NavigationMenuList>\n\n    <NavigationMenuViewport />\n  </NavigationMenuRoot>\n</template>\ncss\n/* styles.css */\n.NavigationMenuIndicator {\n  background-color: grey;\n}\n.NavigationMenuIndicator[data-orientation=\"horizontal\"] {\n  height: 3px;\n  transition: width, transform, 250ms ease;\n}\nWith submenus\n​\n\nCreate a submenu by nesting your NavigationMenu and using the Sub part in place of its Root. Submenus work differently to Root navigation menus and are similar to Tabs in that one item should always be active, so be sure to assign and set a defaultValue.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuSub,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent>Item one content</NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent>\n          <NavigationMenuSub default-value=\"sub1\">\n            <NavigationMenuList>\n              <NavigationMenuItem value=\"sub1\">\n                <NavigationMenuTrigger>Sub item one</NavigationMenuTrigger>\n                <NavigationMenuContent> Sub item one content </NavigationMenuContent>\n              </NavigationMenuItem>\n              <NavigationMenuItem value=\"sub2\">\n                <NavigationMenuTrigger>Sub item two</NavigationMenuTrigger>\n                <NavigationMenuContent> Sub item two content </NavigationMenuContent>\n              </NavigationMenuItem>\n            </NavigationMenuList>\n          </NavigationMenuSub>\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\nWith client side routing\n​\n\nIf you need to use the RouterLink component provided by your routing package then we recommend adding asChild=\"true\" to NavigationMenuLink, or setting as=\"RouterLink\". This will ensure accessibility and consistent keyboard control is maintained:\n\nvue\n<script setup lang=\"ts\">\nimport { NavigationMenuItem, NavigationMenuList, NavigationMenuRoot } from 'radix-vue'\n\n// RouterLink should be injected by default if using `vue-router`\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuLink as-child>\n          <RouterLink to=\"/\">\n            Home\n          </RouterLink>\n          <NavigationMenuLink />\n        </navigationmenulink>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuLink :as=\"RouterLink\" to=\"/about\">\n          About\n        </NavigationMenuLink>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n  </NavigationMenuRoot>\n</template>\nAdvanced animation\n​\n\nWe expose --radix-navigation-menu-viewport-[width|height] and data-motion['from-start'|'to-start'|'from-end'|'to-end'] attributes to allow you to animate Viewport size and Content position based on the enter/exit direction.\n\nCombining these with position: absolute; allows you to create smooth overlapping animation effects when moving between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuList,\n  NavigationMenuRoot,\n  NavigationMenuTrigger,\n  NavigationMenuViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <NavigationMenuRoot>\n    <NavigationMenuList>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item one</NavigationMenuTrigger>\n        <NavigationMenuContent class=\"NavigationMenuContent\">\n          Item one content\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n      <NavigationMenuItem>\n        <NavigationMenuTrigger>Item two</NavigationMenuTrigger>\n        <NavigationMenuContent class=\"NavigationMenuContent\">\n          Item two content\n        </NavigationMenuContent>\n      </NavigationMenuItem>\n    </NavigationMenuList>\n\n    <NavigationMenuViewport class=\"NavigationMenuViewport\" />\n  </NavigationMenuRoot>\n</template>\ncss\n/* styles.css */\n.NavigationMenuContent {\n  position: absolute;\n  top: 0;\n  left: 0;\n  animation-duration: 250ms;\n  animation-timing-function: ease;\n}\n.NavigationMenuContent[data-motion=\"from-start\"] {\n  animation-name: enterFromLeft;\n}\n.NavigationMenuContent[data-motion=\"from-end\"] {\n  animation-name: enterFromRight;\n}\n.NavigationMenuContent[data-motion=\"to-start\"] {\n  animation-name: exitToLeft;\n}\n.NavigationMenuContent[data-motion=\"to-end\"] {\n  animation-name: exitToRight;\n}\n\n.NavigationMenuViewport {\n  position: relative;\n  width: var(--radix-navigation-menu-viewport-width);\n  height: var(--radix-navigation-menu-viewport-height);\n  transition: width, height, 250ms ease;\n}\n\n@keyframes enterFromRight {\n  from {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes enterFromLeft {\n  from {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes exitToRight {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(200px);\n  }\n}\n\n@keyframes exitToLeft {\n  from {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  to {\n    opacity: 0;\n    transform: translateX(-200px);\n  }\n}\nAccessibility\n​\n\nAdheres to the navigation role requirements.\n\nDifferences to menubar\n​\n\nNavigationMenu should not be confused with menubar, although this primitive shares the name menu in the colloquial sense to refer to a set of navigation links, it does not use the WAI-ARIA menu role. This is because menu and menubars behave like native operating system menus most commonly found in desktop application windows, as such they feature complex functionality like composite focus management and first-character navigation.\n\nThese features are often considered unnecessary for website navigation and at worst can confuse users who are familiar with established website patterns.\n\nSee the W3C Disclosure Navigation Menu example for more information.\n\nLink usage and aria-current\n​\n\nIt's important to use NavigationMenuLink for all navigational links within a menu, this not only applies to the main list but also within any content rendered via NavigationMenuContent. This will ensure consistent keyboard interactions and accessibility while also giving access to the active prop for setting aria-current and the active styles. See this example for more information on usage with third party routing components.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\nEnter\n\t\nWhen focus is on NavigationMenuTrigger, opens the content.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nArrowDown\n\t\nWhen horizontal and focus is on an open NavigationMenuTrigger, moves focus into NavigationMenuContent.\nMoves focus to the next NavigationMenuTrigger or NavigationMenuLink.\n\n\nArrowUp\n\t\nMoves focus to the previous NavigationMenuTrigger or NavigationMenuLink.\n\n\nArrowRight\nArrowLeft\n\t\nWhen vertical and focus is on an open NavigationMenuTrigger, moves focus into its NavigationMenuContent.\nMoves focus to the next / previous NavigationMenuTrigger or NavigationMenuLink.\n\n\nHome\nEnd\n\t\nMoves focus to the first/last NavigationMenu.Trigger or NavigationMenu.Link.\n\n\nEsc\n\t\nCloses open NavigationMenu.Content and moves focus to its NavigationMenu.Trigger."
  },
  {
    "title": "Menubar | Radix Vue",
    "url": "https://www.radix-vue.com/components/menubar",
    "html": "Menubar\n​\nA visually persistent menu common in desktop applications that provides quick access to a consistent set of commands.\nFile\nEdit\nView\nProfiles\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from 'radix-vue'\n\nconst currentMenu = ref('')\nconst checkboxOne = ref(false)\nconst checkboxTwo = ref(false)\nconst person = ref('pedro')\nfunction handleClick() {\n  alert('hello!')\n}\n\nconst RADIO_ITEMS = ['Andy', 'Benoît', 'Luis']\nconst CHECK_ITEMS = ['Always Show Bookmarks Bar', 'Always Show Full URLs']\n</script>\n\n<template>\n  <MenubarRoot v-model=\"currentMenu\" class=\"flex bg-white p-[3px] rounded-md shadow-[0_2px_10px] shadow-blackA7\">\n    <MenubarMenu value=\"file\">\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        File\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-3\"\n        >\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            New Tab\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ T\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            New Window\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ N\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            disabled\n          >\n            New Incognito Window\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarSub>\n            <MenubarSubTrigger\n              class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            >\n              Share\n              <div\n                class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n              >\n                <Icon icon=\"radix-icons:chevron-right\" />\n              </div>\n            </MenubarSubTrigger>\n            <MenubarPortal>\n              <MenubarSubContent\n                class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n                :align-offset=\"-5\"\n              >\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Email Link\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Messages\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Notes\n                </MenubarItem>\n              </MenubarSubContent>\n            </MenubarPortal>\n          </MenubarSub>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Print…\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ P\n            </div>\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n\n    <MenubarMenu>\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        Edit\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-3\"\n        >\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Undo\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ Z\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Redo\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⇧ ⌘ Z\n            </div>\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarSub>\n            <MenubarSubTrigger\n              class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            >\n              Find\n              <div\n                class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n              >\n                <Icon icon=\"radix-icons:chevron-right\" />\n              </div>\n            </MenubarSubTrigger>\n\n            <MenubarPortal>\n              <MenubarSubContent\n                class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n                :align-offset=\"-5\"\n              >\n                <MenubarItem\n                  class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Search the web…\n                </MenubarItem>\n                <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Find…\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Find Next\n                </MenubarItem>\n                <MenubarItem\n                  class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n                >\n                  Find Previous\n                </MenubarItem>\n              </MenubarSubContent>\n            </MenubarPortal>\n          </MenubarSub>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Cut\n          </MenubarItem>\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Copy\n          </MenubarItem>\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Paste\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n\n    <MenubarMenu>\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        View\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-14\"\n        >\n          <MenubarCheckboxItem\n            v-model=\"checkboxOne\"\n            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          >\n            <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:check\" />\n            </MenubarItemIndicator>\n            Show Bookmarks\n            <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              ⌘+B\n            </div>\n          </MenubarCheckboxItem>\n          <MenubarCheckboxItem\n            v-model=\"checkboxTwo\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          >\n            <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:check\" />\n            </MenubarItemIndicator>\n            Show Full URLs\n          </MenubarCheckboxItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Reload\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⌘ R\n            </div>\n          </MenubarItem>\n          <MenubarItem\n            class=\"group text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            disabled\n          >\n            Force Reload\n            <div class=\"ml-auto pl-5 text-mauve9 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\">\n              ⇧ ⌘ R\n            </div>\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Toggle Fullscreen\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Hide Sidebar\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n\n    <MenubarMenu>\n      <MenubarTrigger\n        class=\"py-2 px-3 outline-none select-none font-semibold leading-none rounded text-grass11 text-[13px] flex items-center justify-between gap-[2px] data-[highlighted]:bg-green4 data-[state=open]:bg-green4\"\n      >\n        Profiles\n      </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent\n          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] [animation-duration:_400ms] [animation-timing-function:_cubic-bezier(0.16,_1,_0.3,_1)] will-change-[transform,opacity]\"\n          align=\"start\"\n          :side-offset=\"5\"\n          :align-offset=\"-14\"\n        >\n          <MenubarRadioGroup v-model=\"person\">\n            <MenubarRadioItem\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              value=\"pedro\"\n            >\n              <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:dot-filled\" />\n              </MenubarItemIndicator>\n              Pedro Duarte\n            </MenubarRadioItem>\n            <MenubarRadioItem\n              class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[20px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              value=\"colm\"\n            >\n              <MenubarItemIndicator class=\"absolute left-0 w-[20px] inline-flex items-center justify-center\">\n                <Icon icon=\"radix-icons:dot-filled\" />\n              </MenubarItemIndicator>\n              Colm Tuite\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n            @click=\"handleClick\"\n          >\n            Edit…\n          </MenubarItem>\n          <MenubarSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n          <MenubarItem\n            class=\"text-[13px] leading-none text-grass11 rounded flex items-center h-[25px] px-[10px] relative select-none pl-5 outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[highlighted]:bg-gradient-to-br data-[highlighted]:from-green9 data-[highlighted]:to-green10 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:text-green1 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none\"\n          >\n            Add Profile…\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports submenus with configurable reading direction.\nSupports items, labels, groups of items.\nSupports checkable items (single or multiple).\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed.\nFull keyboard navigation.\nTypeahead support.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarArrow,\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from './'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger />\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarLabel />\n          <MenubarItem />\n\n          <MenubarGroup>\n            <MenubarItem />\n          </MenubarGroup>\n\n          <MenubarCheckboxItem>\n            <MenubarItemIndicator />\n          </MenubarCheckboxItem>\n\n          <MenubarRadioGroup>\n            <MenubarRadioItem>\n              <MenubarItemIndicator />\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n\n          <MenubarSub>\n            <MenubarSubTrigger />\n            <MenubarPortal>\n              <MenubarSubContent />\n            </MenubarPortal>\n          </MenubarSub>\n\n          <MenubarSeparator />\n          <MenubarArrow />\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a menubar\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nstring\n\t\n\n\nmodelValue\n\t\nstring\n\t\n\n\ndir\n\t\nenum\n\t\n\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nMenu\n​\n\nA top level menu item, contains a trigger with content combination.\n\nProp\tType\tDefault\n\nvalue\n\t\nstring\n\t\nTrigger\n​\n\nThe button that toggles the content. By default, the MenubarContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when a menu is open.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-menubar-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-menubar-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-menubar-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-menubar-trigger-width\t\nThe width of the trigger\n\n--radix-menubar-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside a menubar menu. This can be used to help visually link the trigger with the MenubarContent. Must be rendered inside MenubarContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nItem\n​\n\nThe component that contains the menubar items.\n\nProp\tType\tDefault\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nGroup\n​\n\nUsed to group multiple MenubarItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render a label. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCheckboxItem\n​\n\nAn item that can be controlled and rendered like a checkbox.\n\nProp\tType\tDefault\n\nchecked\n\t\nboolean | 'indeterminate'\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:checked\n\t(checked: boolean) => void\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nRadioGroup\n​\n\nUsed to group multiple MenubarRadioItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nmodelValue\n\t\nstring\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nRadioItem\n​\n\nAn item that can be controlled and rendered like a radio.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the parent MenubarCheckboxItem or MenubarRadioItem is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\nSeparator\n​\n\nUsed to visually separate items in a menubar menu.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSub\n​\n\nContains all the parts of a submenu.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nSubTrigger\n​\n\nAn item that opens a submenu. Must be rendered inside MenubarSub.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nSubContent\n​\n\nThe component that pops out when a submenu is open. Must be rendered inside MenubarSub.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-menubar-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-menubar-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-menubar-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-menubar-trigger-width\t\nThe width of the trigger\n\n--radix-menubar-trigger-height\t\nThe height of the trigger\nExamples\n​\nWith submenus\n​\n\nYou can create submenus by using MenubarSub in combination with its parts.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarSub,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarSub>\n            <MenubarSubTrigger>Sub menu →</MenubarSubTrigger>\n            <MenubarPortal>\n              <MenubarSubContent>\n                <MenubarItem>Sub menu item</MenubarItem>\n                <MenubarItem>Sub menu item</MenubarItem>\n                <MenubarArrow />\n              </MenubarSubContent>\n            </MenubarPortal>\n          </MenubarSub>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem class=\"MenubarItem\" disabled>\n            …\n          </MenubarItem>\n          <MenubarItem class=\"MenubarItem\">\n            …\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarItem[data-disabled] {\n  color: gainsboro;\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith labels\n​\n\nUse the Label part to help label a section.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarContent,\n  MenubarItem,\n  MenubarLabel,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarLabel>Label</MenubarLabel>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith checkbox items\n​\n\nUse the CheckboxItem part to add an item that can be checked.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst checked = ref(true)\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>…</MenubarItem>\n          <MenubarItem>…</MenubarItem>\n          <MenubarSeparator />\n          <MenubarCheckboxItem v-model:checked=\"checked\">\n            <MenubarItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </MenubarItemIndicator>\n            Checkbox item\n          </MenubarCheckboxItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith radio items\n​\n\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  MenubarCheckboxItem,\n  MenubarContent,\n  MenubarItem,\n  MenubarItemIndicator,\n  MenubarMenu,\n  MenubarPortal,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarRoot,\n  MenubarSeparator,\n  MenubarTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst color = ref('blue')\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarRadioGroup v-model=\"color\">\n            <MenubarRadioItem value=\"red\">\n              <MenubarItemIndicator>\n                <Icon icon=\"radix-icons:check\" />\n              </MenubarItemIndicator>\n              Red\n            </MenubarRadioItem>\n            <MenubarRadioItem value=\"blue\">\n              <MenubarItemIndicator>\n                <Icon icon=\"radix-icons:check\" />\n              </MenubarItemIndicator>\n              Blue\n            </MenubarRadioItem>\n          </MenubarRadioGroup>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nWith complex items\n​\n\nYou can add extra decorative elements in the Item parts, such as images.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent>\n          <MenubarItem>\n            <img src=\"…\">\n            Adolfo Hess\n          </MenubarItem>\n          <MenubarItem>\n            <img src=\"…\">\n            Miyah Myles\n          </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\nConstrain the content/sub-content size\n​\n\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-menubar-trigger-width and --radix-menubar-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarItem, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger> Trigger </MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\" :side-offset=\"5\" :align-offset=\"-3\">\n          <MenubarItem> New Tab </MenubarItem>\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarContent {\n  width: var(--radix-menubar-trigger-width);\n  max-height: var(--radix-menubar-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-menubar-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\">\n          …\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarContent {\n  transform-origin: var(--radix-menubar-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n<script setup lang=\"ts\">\nimport { MenubarContent, MenubarMenu, MenubarPortal, MenubarRoot, MenubarTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <MenubarRoot>\n    <MenubarMenu>\n      <MenubarTrigger>…</MenubarTrigger>\n      <MenubarPortal>\n        <MenubarContent class=\"MenubarContent\">\n          …\n        </MenubarContent>\n      </MenubarPortal>\n    </MenubarMenu>\n  </MenubarRoot>\n</template>\ncss\n/* styles.css */\n.MenubarContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.MenubarContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.MenubarContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\n\nAdheres to the Menu Button WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on MenubarTrigger, opens the menubar and focuses the first item.\nWhen focus is on an item, activates the focused item.\n\n\nEnter\n\t\nWhen focus is on MenubarTrigger, opens the associated menu.\nWhen focus is on an item, activates the focused item.\n\n\nArrowDown\n\t\nWhen focus is on MenubarTrigger, opens the associated menu.\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on an item, moves focus to the previous item.\n\n\nArrowRight\nArrowLeft\n\t\nWhen focus is on a MenubarTrigger, moves focus to the next or previous item.\nWhen focus is on a MenubarSubTrigger, opens or closes the submenu depending on reading direction.\nWhen focus is within a MenubarContent, opens the next menu in the menubar\n\n\nEsc\n\t\nCloses the currently open menu and moves focus to its MenubarTrigger."
  },
  {
    "title": "Dropdown Menu | Radix Vue",
    "url": "https://www.radix-vue.com/components/dropdown-menu",
    "html": "DropdownMenu\n​\nDisplays a menu to the user—such as a set of actions or functions—triggered by a button.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  DropdownMenuArrow,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n\nconst toggleState = ref(false)\nconst checkboxOne = ref(false)\nconst checkboxTwo = ref(false)\nconst person = ref('pedro')\n\nfunction handleClick() {\n  alert('hello!')\n}\n</script>\n\n<template>\n  <DropdownMenuRoot v-model:open=\"toggleState\">\n    <DropdownMenuTrigger\n      class=\"rounded-full w-[35px] h-[35px] inline-flex items-center justify-center text-grass11 bg-white shadow-[0_2px_10px] shadow-blackA7 outline-none hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      aria-label=\"Customise options\"\n    >\n      <Icon icon=\"radix-icons:hamburger-menu\" />\n    </DropdownMenuTrigger>\n\n    <DropdownMenuPortal>\n      <DropdownMenuContent\n        class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n        :side-offset=\"5\"\n      >\n        <DropdownMenuItem\n          value=\"New Tab\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          @click=\"handleClick\"\n        >\n          New Tab\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+T\n          </div>\n        </DropdownMenuItem>\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger\n            value=\"more toolsz\"\n            class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools\n            <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent\n              class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\"\n              :align-offset=\"-5\"\n            >\n              <DropdownMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As…\n                <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </DropdownMenuItem>\n              <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </DropdownMenuItem>\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuItem\n          value=\"New Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          New Window\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+N\n          </div>\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          value=\"New Private Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          disabled\n        >\n          New Private Window\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⇧+⌘+N\n          </div>\n        </DropdownMenuItem>\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger\n            value=\"more tools\"\n            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none w-full outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools\n            <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent\n              class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\"\n              :align-offset=\"-5\"\n            >\n              <DropdownMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As…\n                <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </DropdownMenuItem>\n              <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </DropdownMenuItem>\n              <DropdownMenuSub>\n                <DropdownMenuSubTrigger\n                  value=\"more toolsz\"\n                  class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                >\n                  More Tools\n                  <div\n                    class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                  >\n                    <Icon icon=\"radix-icons:chevron-right\" />\n                  </div>\n                </DropdownMenuSubTrigger>\n                <DropdownMenuPortal>\n                  <DropdownMenuSubContent\n                    class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                    :side-offset=\"2\"\n                    :align-offset=\"-5\"\n                  >\n                    <DropdownMenuItem\n                      class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Save Page As…\n                      <div\n                        class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                      >\n                        ⌘+S\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Create Shortcut…\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Name Window…\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                    <DropdownMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Developer Tools\n                    </DropdownMenuItem>\n                    <DropdownMenuSub>\n                      <DropdownMenuSubTrigger\n                        value=\"more toolsz\"\n                        class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                      >\n                        More Tools\n                        <div\n                          class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                        >\n                          <Icon icon=\"radix-icons:chevron-right\" />\n                        </div>\n                      </DropdownMenuSubTrigger>\n                      <DropdownMenuPortal>\n                        <DropdownMenuSubContent\n                          class=\"min-w-[220px] outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                          :side-offset=\"2\"\n                          :align-offset=\"-5\"\n                        >\n                          <DropdownMenuItem\n                            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Save Page As…\n                            <div\n                              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                            >\n                              ⌘+S\n                            </div>\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Create Shortcut…\n                          </DropdownMenuItem>\n                          <DropdownMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Name Window…\n                          </DropdownMenuItem>\n                          <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                          <DropdownMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Developer Tools\n                          </DropdownMenuItem>\n                        </DropdownMenuSubContent>\n                      </DropdownMenuPortal>\n                    </DropdownMenuSub>\n                  </DropdownMenuSubContent>\n                </DropdownMenuPortal>\n              </DropdownMenuSub>\n              <DropdownMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </DropdownMenuItem>\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n        <DropdownMenuCheckboxItem\n          v-model:checked=\"checkboxOne\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </DropdownMenuItemIndicator>\n          Show Bookmarks\n          <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+B\n          </div>\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuCheckboxItem\n          v-model:checked=\"checkboxTwo\"\n          class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </DropdownMenuItemIndicator>\n          Show Full URLs\n        </DropdownMenuCheckboxItem>\n        <DropdownMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n\n        <DropdownMenuLabel class=\"pl-[25px] text-xs leading-[25px] text-mauve11\">\n          People\n        </DropdownMenuLabel>\n        <DropdownMenuRadioGroup v-model=\"person\">\n          <DropdownMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"pedro\"\n          >\n            <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </DropdownMenuItemIndicator>\n            Pedro Duarte\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"colm\"\n          >\n            <DropdownMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </DropdownMenuItemIndicator>\n            Colm Tuite\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n        <DropdownMenuArrow class=\"fill-white\" />\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nSupports submenus with configurable reading direction.\nSupports items, labels, groups of items.\nSupports checkable items (single or multiple) with optional indeterminate state.\nSupports modal and non-modal modes.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed.\nFull keyboard navigation.\nTypeahead support.\nDismissing and layering behavior is highly customizable.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuArrow,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger />\n\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuLabel />\n        <DropdownMenuItem />\n\n        <DropdownMenuGroup>\n          <DropdownMenuItem />\n        </DropdownMenuGroup>\n\n        <DropdownMenuCheckboxItem>\n          <DropdownMenuItemIndicator />\n        </DropdownMenuCheckboxItem>\n\n        <DropdownMenuRadioGroup>\n          <DropdownMenuRadioItem>\n            <DropdownMenuItemIndicator />\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger />\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent />\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n\n        <DropdownMenuSeparator />\n        <DropdownMenuArrow />\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a dropdown menu.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nmodal\n\t\nboolean\n\t\ntrue\n\n\ndir\n\t\nenum\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that toggles the dropdown menu. By default, the DropdownMenuContent will position itself against the trigger.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the dropdown menu is open.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-dropdown-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-dropdown-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-dropdown-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-dropdown-menu-trigger-width\t\nThe width of the trigger\n\n--radix-dropdown-menu-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the dropdown menu. This can be used to help visually link the trigger with the DropdownMenuContent. Must be rendered inside DropdownMenuContent.\n\nProp\tType\tDefault\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\n\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nThe component that contains the dropdown menu items.\n\nProp\tType\tDefault\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nGroup\n​\n\nUsed to group multiple DropdownMenuItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render a label. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCheckboxItem\n​\n\nAn item that can be controlled and rendered like a checkbox.\n\nProp\tType\tDefault\n\nchecked\n\t\nboolean | 'indeterminate'\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:checked\n\t(checked: boolean) => void\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nRadioGroup\n​\n\nUsed to group multiple DropdownMenuRadioItems.\n\nProp\tType\tDefault\n\nmodelValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nRadioItem\n​\n\nAn item that can be controlled and rendered like a radio.\n\nProp\tType\tDefault\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the parent DropdownMenuCheckboxItem or DropdownMenuRadioItem is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\nSeparator\n​\n\nUsed to visually separate items in the dropdown menu.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSub\n​\n\nContains all the parts of a submenu.\n\nProp\tType\tDefault\n\nopen\n\t\nboolean\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nSubTrigger\n​\n\nAn item that opens a submenu. Must be rendered inside DropdownMenuSub.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nCSS Variable\tDescription\n--radix-dropdown-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-dropdown-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-dropdown-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-dropdown-menu-trigger-width\t\nThe width of the trigger\n\n--radix-dropdown-menu-trigger-height\t\nThe height of the trigger\nSubContent\n​\n\nThe component that pops out when a submenu is open. Must be rendered inside DropdownMenuSub.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\n[data-orientation]\t\"vertical\" | \"horizontal\"\nExamples\n​\nWith submenus\n​\n\nYou can create submenus by using DropdownMenuSub in combination with its parts.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuArrow,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuSub>\n          <DropdownMenuSubTrigger>Sub menu →</DropdownMenuSubTrigger>\n          <DropdownMenuPortal>\n            <DropdownMenuSubContent>\n              <DropdownMenuItem>Sub menu item</DropdownMenuItem>\n              <DropdownMenuItem>Sub menu item</DropdownMenuItem>\n              <DropdownMenuArrow />\n            </DropdownMenuSubContent>\n          </DropdownMenuPortal>\n        </DropdownMenuSub>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem class=\"DropdownMenuItem\" disabled>\n          …\n        </DropdownMenuItem>\n        <DropdownMenuItem class=\"DropdownMenuItem\">\n          …\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuItem[data-disabled] {\n  color: gainsboro;\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith labels\n​\n\nUse the Label part to help label a section.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuLabel>Label</DropdownMenuLabel>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith checkbox items\n​\n\nUse the CheckboxItem part to add an item that can be checked.\n\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n\nconst checked = ref(false)\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuItem>…</DropdownMenuItem>\n        <DropdownMenuSeparator />\n        <DropdownMenuCheckboxItem v-model:checked=\"checked\">\n          <DropdownMenuItemIndicator>\n            <Icon icon=\"radix-icons:check\" />\n          </DropdownMenuItemIndicator>\n          Checkbox item\n        </DropdownMenuCheckboxItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith radio items\n​\n\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others.\n\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  DropdownMenuContent,\n  DropdownMenuItemIndicator,\n  DropdownMenuPortal,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n\nconst color = ref(false)\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuRadioGroup v-model=\"color\">\n          <DropdownMenuRadioItem value=\"red\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Red\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"blue\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Blue\n          </DropdownMenuRadioItem>\n          <DropdownMenuRadioItem value=\"green\">\n            <DropdownMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </DropdownMenuItemIndicator>\n            Green\n          </DropdownMenuRadioItem>\n        </DropdownMenuRadioGroup>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nWith complex items\n​\n\nYou can add extra decorative elements in the Item parts, such as images.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuPortal,\n  DropdownMenuRoot,\n  DropdownMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent>\n        <DropdownMenuItem>\n          <img src=\"…\">\n          Adolfo Hess\n        </DropdownMenuItem>\n        <DropdownMenuItem>\n          <img src=\"…\">\n          Miyah Myles\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\nConstrain the content/sub-content size\n​\n\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-dropdown-menu-trigger-width and --radix-dropdown-menu-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\" :side-offset=\"5\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuContent {\n  width: var(--radix-dropdown-menu-trigger-width);\n  max-height: var(--radix-dropdown-menu-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-dropdown-menu-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuContent {\n  transform-origin: var(--radix-dropdown-menu-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, DropdownMenuPortal, DropdownMenuRoot, DropdownMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <DropdownMenuRoot>\n    <DropdownMenuTrigger>…</DropdownMenuTrigger>\n    <DropdownMenuPortal>\n      <DropdownMenuContent class=\"DropdownMenuContent\">\n        …\n      </DropdownMenuContent>\n    </DropdownMenuPortal>\n  </DropdownMenuRoot>\n</template>\ncss\n/* styles.css */\n.DropdownMenuContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.DropdownMenuContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.DropdownMenuContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\n\nAdheres to the Menu Button WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on DropdownMenuTrigger, opens the dropdown menu and focuses the first item.\nWhen focus is on an item, activates the focused item.\n\n\nEnter\n\t\nWhen focus is on DropdownMenuTrigger, opens the dropdown menu and focuses the first item.\nWhen focus is on an item, activates the focused item.\n\n\nArrowDown\n\t\nWhen focus is on DropdownMenuTrigger, opens the dropdown menu.\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on an item, moves focus to the previous item.\n\n\nArrowRight\nArrowLeft\n\t\nWhen focus is on DropdownMenuSubTrigger, opens or closes the submenu depending on reading direction.\n\n\nEsc\n\t\nCloses the dropdown menu and moves focus to{' '} DropdownMenuTrigger.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract the arrow and item indicators\n​\n\nThis example abstracts the DropdownMenuArrow and DropdownMenuItemIndicator parts. It also wraps implementation details for CheckboxItem and RadioItem.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from './your-dropdown-menu'\n</script>\n\n<template>\n  <DropdownMenu>\n    <DropdownMenuTrigger>DropdownMenu trigger</DropdownMenuTrigger>\n    <DropdownMenuContent>\n      <DropdownMenuItem>Item</DropdownMenuItem>\n      <DropdownMenuLabel>Label</DropdownMenuLabel>\n      <DropdownMenuGroup>Group</DropdownMenuGroup>\n      <DropdownMenuCheckboxItem>CheckboxItem</DropdownMenuCheckboxItem>\n      <DropdownMenuSeparator>Separator</DropdownMenuSeparator>\n      <DropdownMenuRadioGroup>\n        <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n        <DropdownMenuRadioItem>RadioItem</DropdownMenuRadioItem>\n      </DropdownMenuRadioGroup>\n    </DropdownMenuContent>\n  </DropdownMenu>\n</template>\nImplementation\n​\nts\n// your-dropdown-menu.ts\nexport { default as DropdownMenuContent } from 'DropdownMenuContent.vue'\nexport { default as DropdownMenuCheckboxItem } from 'DropdownMenuCheckboxItem.vue'\nexport { default as DropdownMenuRadioItem } from 'DropdownMenuRadioItem.vue'\n\nexport {\n  DropdownMenuRoot as DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuGroup,\n  DropdownMenuRadioGroup,\n  DropdownMenuSeparator\n} from 'radix-vue'\nvue\n<!-- DropdownMenuContent.vue -->\n<script setup lang=\"ts\">\nimport { DropdownMenuContent, type DropdownMenuContentEmits, type DropdownMenuContentProps, DropdownMenuPortal, useForwardPropsEmits, } from 'radix-vue'\n\nconst props = defineProps<DropdownMenuContentProps>()\nconst emits = defineEmits<DropdownMenuContentEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuPortal>\n    <DropdownMenuContent v-bind=\"forwarded\">\n      <slot />\n    </DropdownMenuContent>\n  </DropdownMenuPortal>\n</template>\nvue\n<!-- DropdownMenuCheckboxItem.vue -->\n<script setup lang=\"ts\">\nimport { DropdownMenuCheckboxItem, type DropdownMenuCheckboxItemEmits, type DropdownMenuCheckboxItemProps, DropdownMenuItemIndicator, useForwardPropsEmits } from 'radix-vue'\nimport { CheckIcon } from '@radix-icons/vue'\n\nconst props = defineProps<DropdownMenuCheckboxItemProps>()\nconst emits = defineEmits<DropdownMenuCheckboxItemEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuCheckboxItem v-bind=\"forwarded\">\n    <span>\n      <DropdownMenuItemIndicator>\n        <CheckIcon />\n      </DropdownMenuItemIndicator>\n    </span>\n    <slot />\n  </DropdownMenuCheckboxItem>\n</template>\nvue\n<!-- DropdownMenuRadioItem.vue -->\n<script setup lang=\"ts\">\nimport { DropdownMenuItemIndicator, DropdownMenuRadioItem, type DropdownMenuRadioItemEmits, type DropdownMenuRadioItemProps, useForwardPropsEmits, } from 'radix-vue'\nimport { DotFilledIcon } from '@radix-icons/vue'\n\nconst props = defineProps<DropdownMenuRadioItemProps>()\nconst emits = defineEmits<DropdownMenuRadioItemEmits>()\n\nconst forwarded = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <DropdownMenuRadioItem v-bind=\"forwarded\">\n    <span>\n      <DropdownMenuItemIndicator>\n        <DotFilledIcon />\n      </DropdownMenuItemIndicator>\n    </span>\n    <slot />\n  </DropdownMenuRadioItem>\n</template>"
  },
  {
    "title": "Hover Card | Radix Vue",
    "url": "https://www.radix-vue.com/components/hover-card",
    "html": "HoverCard\n​\nFor sighted users to preview content available behind a link.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n\nconst hoverState = ref(false)\n</script>\n\n<template>\n  <HoverCardRoot v-model:open=\"hoverState\">\n    <HoverCardTrigger\n      class=\"inline-block cursor-pointer rounded-full shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] outline-none focus:shadow-[0_0_0_2px_white]\"\n      href=\"https://twitter.com/radix_ui\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n    >\n      <img\n        class=\"block h-[45px] w-[45px] rounded-full\"\n        src=\"https://pbs.twimg.com/profile_images/1337055608613253126/r_eiMp2H_400x400.png\"\n        alt=\"Radix UI\"\n      >\n    </HoverCardTrigger>\n    <HoverCardPortal>\n      <HoverCardContent\n        class=\"data-[side=bottom]:animate-slideUpAndFade data-[side=right]:animate-slideLeftAndFade data-[side=left]:animate-slideRightAndFade data-[side=top]:animate-slideDownAndFade w-[300px] rounded-md bg-white p-5 shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] data-[state=open]:transition-all\"\n        :side-offset=\"5\"\n      >\n        <div class=\"flex flex-col gap-[7px]\">\n          <img\n            class=\"block h-[60px] w-[60px] rounded-full\"\n            src=\"https://pbs.twimg.com/profile_images/1337055608613253126/r_eiMp2H_400x400.png\"\n            alt=\"Radix UI\"\n          >\n          <div class=\"flex flex-col gap-[15px]\">\n            <div>\n              <div class=\"text-mauve12 m-0 text-[15px] font-medium leading-[1.5]\">\n                Radix\n              </div>\n              <div class=\"text-mauve10 m-0 text-[15px] leading-[1.5]\">\n                @radix_ui\n              </div>\n            </div>\n            <div class=\"text-mauve12 m-0 text-[15px] leading-[1.5]\">\n              Components, icons, colors, and templates for building high-quality, accessible UI. Free and open-source.\n            </div>\n            <div class=\"flex gap-[15px]\">\n              <div class=\"flex gap-[5px]\">\n                <div class=\"text-mauve12 m-0 text-[15px] font-medium leading-[1.5]\">\n                  0\n                </div>\n                <div class=\"text-mauve10 m-0 text-[15px] leading-[1.5]\">\n                  Following\n                </div>\n              </div>\n              <div class=\"flex gap-[5px]\">\n                <div class=\"text-mauve12 m-0 text-[15px] font-medium leading-[1.5]\">\n                  2,900\n                </div>\n                <div class=\"text-mauve10 m-0 text-[15px] leading-[1.5]\">\n                  Followers\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <HoverCardArrow class=\"fill-white\" size=\"8\" />\n      </HoverCardContent>\n    </HoverCardPortal>\n  </HoverCardRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nSupports custom open and close delays.\nOpens on hover only.\nIgnored by screen readers.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger />\n    <HoverCardPortal>\n      <HoverCardContent>\n        <HoverCardArrow />\n      </HoverCardContent>\n    </HoverCardPortal>\n  </HoverCardRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a hover card.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nopenDelay\n\t\nnumber\n\t\n700\n\n\ncloseDelay\n\t\nnumber\n\t\n300\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\nTrigger\n​\n\nThe link that opens the hover card when hovered.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\na\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the hover card is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"center\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-hover-card-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-hover-card-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-hover-card-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-hover-card-trigger-width\t\nThe width of the trigger\n\n--radix-hover-card-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside the hover card. This can be used to help visually link the trigger with the HoverCardContent. Must be rendered inside HoverCardContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nShow instantly\n​\n\nUse the openDelay prop to control the time it takes for the hover card to open.\n\nvue\n<script setup>\nimport {\n  HoverCardArrow,\n  HoverCardContent,\n  HoverCardPortal,\n  HoverCardRoot,\n  HoverCardTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot :open-delay=\"0\">\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardContent>…</HoverCardContent>\n  </HoverCardRoot>\n</template>\nConstrain the content size\n​\n\nYou may want to constrain the width of the content so that it matches the trigger width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-hover-card-trigger-width and --radix-hover-card-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n// index.vue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardPortal>\n      <HoverCardContent class=\"HoverCardContent\" :side-offset=\"5\">\n        …\n      </HoverCardContent>\n    </HoverCardPortal>\n  </HoverCardRoot>\n</template>\ncss\n/* styles.css */\n.HoverCardContent {\n  width: var(--radix-hover-card-trigger-width);\n  max-height: var(--radix-hover-card-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-hover-card-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n// index.vue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardContent class=\"HoverCardContent\">\n      …\n    </HoverCardContent>\n  </HoverCardRoot>\n</template>\ncss\n/* styles.css */\n.HoverCardContent {\n  transform-origin: var(--radix-hover-card-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n// index.vue\n<script setup>\nimport { HoverCardArrow, HoverCardContent, HoverCardPortal, HoverCardRoot, HoverCardTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <HoverCardRoot>\n    <HoverCardTrigger>…</HoverCardTrigger>\n    <HoverCardContent class=\"HoverCardContent\">\n      …\n    </HoverCardContent>\n  </HoverCardRoot>\n</template>\ncss\n/* styles.css */\n.HoverCardContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.HoverCardContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.HoverCardContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\nKeyboard Interactions\n​\n\nThe hover card is intended for mouse users only so will not respond to keyboard navigation."
  },
  {
    "title": "Label | Radix Vue",
    "url": "https://www.radix-vue.com/components/label",
    "html": "Label\n​\nRenders an accessible label associated with controls.\nFirst name\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { Label } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"flex flex-wrap items-center gap-[15px] px-5\">\n    <Label class=\"text-[15px] font-semibold leading-[35px] text-white\" for=\"firstName\"> First name </Label>\n    <input\n      id=\"firstName\"\n      class=\"bg-blackA5 shadow-blackA9 inline-flex h-[35px] w-[200px] appearance-none items-center justify-center rounded-[4px] px-[10px] text-[15px] leading-none text-white shadow-[0_0_0_1px] outline-none focus:shadow-[0_0_0_2px_black] selection:color-white selection:bg-blackA9\"\n      type=\"text\"\n      value=\"Pedro Duarte\"\n    >\n  </div>\n</template>\nExpand code\nFeatures\n​\nText selection is prevented when double clicking label.\nSupports nested controls.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { Label } from 'radix-vue'\n</script>\n\n<template>\n  <Label />\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains the content for the label.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nlabel\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nfor\n\t\nstring\n\t\nAccessibility\n​\n\nThis component is based on the native label element, it will automatically apply the correct labelling when wrapping controls or using the for attribute. For your own custom controls to work correctly, ensure they use native elements such as button or input as a base."
  },
  {
    "title": "Context Menu | Radix Vue",
    "url": "https://www.radix-vue.com/components/context-menu",
    "html": "Context Menu\n​\nDisplays a menu located at the pointer, triggered by a right-click or a long-press.\nRight click here.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { Icon } from '@iconify/vue'\nimport { ref } from 'vue'\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'radix-vue'\n\nconst checkboxOne = ref(false)\nconst checkboxTwo = ref(false)\nconst person = ref('pedro')\n\nfunction handleClick() {\n  alert('hello!')\n}\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger\n      as-child\n      class=\"block border-2 border-white border-dashed text-white rounded text-[15px] select-none py-[45px] w-[300px] text-center\"\n    >\n      <span> Right click here. </span>\n    </ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent\n        class=\"min-w-[220px] z-30 bg-white outline-none rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n        :side-offset=\"5\"\n      >\n        <ContextMenuItem\n          value=\"New Tab\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          @click=\"handleClick\"\n        >\n          New Tab <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+T\n          </div>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger\n            value=\"more toolsz\"\n            class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </ContextMenuSubTrigger>\n          <ContextMenuPortal>\n            <ContextMenuSubContent\n              class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\" :align-offset=\"-5\"\n            >\n              <ContextMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As… <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </ContextMenuItem>\n              <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </ContextMenuItem>\n            </ContextMenuSubContent>\n          </ContextMenuPortal>\n        </ContextMenuSub>\n        <ContextMenuItem\n          value=\"New Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          New Window <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+N\n          </div>\n        </ContextMenuItem>\n        <ContextMenuItem\n          value=\"New Private Window\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n          disabled\n        >\n          New Private Window <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⇧+⌘+N\n          </div>\n        </ContextMenuItem>\n        <ContextMenuSub>\n          <ContextMenuSubTrigger\n            value=\"more tools\"\n            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none w-full outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n          >\n            More Tools <div\n              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n            >\n              <Icon icon=\"radix-icons:chevron-right\" />\n            </div>\n          </ContextMenuSubTrigger>\n          <ContextMenuPortal>\n            <ContextMenuSubContent\n              class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n              :side-offset=\"2\" :align-offset=\"-5\"\n            >\n              <ContextMenuItem\n                class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Save Page As… <div\n                  class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                >\n                  ⌘+S\n                </div>\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Create Shortcut…\n              </ContextMenuItem>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Name Window…\n              </ContextMenuItem>\n              <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </ContextMenuItem>\n              <ContextMenuSub>\n                <ContextMenuSubTrigger\n                  value=\"more toolsz\"\n                  class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                >\n                  More Tools <div\n                    class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                  >\n                    <Icon icon=\"radix-icons:chevron-right\" />\n                  </div>\n                </ContextMenuSubTrigger>\n                <ContextMenuPortal>\n                  <ContextMenuSubContent\n                    class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                    :side-offset=\"2\" :align-offset=\"-5\"\n                  >\n                    <ContextMenuItem\n                      class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Save Page As… <div\n                        class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                      >\n                        ⌘+S\n                      </div>\n                    </ContextMenuItem>\n                    <ContextMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Create Shortcut…\n                    </ContextMenuItem>\n                    <ContextMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Name Window…\n                    </ContextMenuItem>\n                    <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                    <ContextMenuItem\n                      class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                    >\n                      Developer Tools\n                    </ContextMenuItem>\n                    <ContextMenuSub>\n                      <ContextMenuSubTrigger\n                        value=\"more toolsz\"\n                        class=\"group w-full text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[state=open]:bg-green4 data-[state=open]:text-grass11 data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1 data-[highlighted]:data-[state=open]:bg-green9 data-[highlighted]:data-[state=open]:text-green1\"\n                      >\n                        More Tools <div\n                          class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                        >\n                          <Icon icon=\"radix-icons:chevron-right\" />\n                        </div>\n                      </ContextMenuSubTrigger>\n                      <ContextMenuPortal>\n                        <ContextMenuSubContent\n                          class=\"min-w-[220px] z-30 outline-none bg-white rounded-md p-[5px] shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\"\n                          :side-offset=\"2\" :align-offset=\"-5\"\n                        >\n                          <ContextMenuItem\n                            class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Save Page As… <div\n                              class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n                            >\n                              ⌘+S\n                            </div>\n                          </ContextMenuItem>\n                          <ContextMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Create Shortcut…\n                          </ContextMenuItem>\n                          <ContextMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Name Window…\n                          </ContextMenuItem>\n                          <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n                          <ContextMenuItem\n                            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n                          >\n                            Developer Tools\n                          </ContextMenuItem>\n                        </ContextMenuSubContent>\n                      </ContextMenuPortal>\n                    </ContextMenuSub>\n                  </ContextMenuSubContent>\n                </ContextMenuPortal>\n              </ContextMenuSub>\n              <ContextMenuItem\n                class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n              >\n                Developer Tools\n              </ContextMenuItem>\n            </ContextMenuSubContent>\n          </ContextMenuPortal>\n        </ContextMenuSub>\n        <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n        <ContextMenuCheckboxItem\n          v-model=\"checkboxOne\"\n          class=\"group text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </ContextMenuItemIndicator> Show Bookmarks <div\n            class=\"ml-auto pl-[20px] text-mauve11 group-data-[highlighted]:text-white group-data-[disabled]:text-mauve8\"\n          >\n            ⌘+B\n          </div>\n        </ContextMenuCheckboxItem>\n        <ContextMenuCheckboxItem\n          v-model=\"checkboxTwo\"\n          class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n        >\n          <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n            <Icon icon=\"radix-icons:check\" />\n          </ContextMenuItemIndicator> Show Full URLs\n        </ContextMenuCheckboxItem>\n        <ContextMenuSeparator class=\"h-[1px] bg-green6 m-[5px]\" />\n        <ContextMenuLabel class=\"pl-[25px] text-xs leading-[25px] text-mauve11\">\n          People\n        </ContextMenuLabel>\n        <ContextMenuRadioGroup v-model=\"person\">\n          <ContextMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"pedro\"\n          >\n            <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </ContextMenuItemIndicator> Pedro Duarte\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] px-[5px] relative pl-[25px] select-none outline-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:bg-green9 data-[highlighted]:text-green1\"\n            value=\"colm\"\n          >\n            <ContextMenuItemIndicator class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\">\n              <Icon icon=\"radix-icons:dot-filled\" />\n            </ContextMenuItemIndicator> Colm Tuite\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nExpand code\nFeatures\n​\nSupports submenus with configurable reading direction.\nSupports items, labels, groups of items.\nSupports checkable items (single or multiple) with optional indeterminate state.\nSupports modal and non-modal modes.\nCustomize side, alignment, offsets, collision handling.\nFocus is fully managed.\nFull keyboard navigation.\nTypeahead support.\nDismissing and layering behavior is highly customizable.\nTriggers with a long-press on touch devices\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuGroup,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger />\n\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuLabel />\n        <ContextMenuItem />\n\n        <ContextMenuGroup>\n          <ContextMenuItem />\n        </ContextMenuGroup>\n\n        <ContextMenuCheckboxItem>\n          <ContextMenuItemIndicator />\n        </ContextMenuCheckboxItem>\n\n        <ContextMenuRadioGroup>\n          <ContextMenuRadioItem>\n            <ContextMenuItemIndicator />\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n\n        <ContextMenuSub>\n          <ContextMenuSubTrigger />\n          <ContextMenuPortal>\n            <ContextMenuSubContent />\n          </ContextMenuPortal>\n        </ContextMenuSub>\n\n        <ContextMenuSeparator />\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nAPI Reference\n​\n\nAdheres to the Menu WAI-ARIA design pattern and uses roving tabindex to manage focus movement among menu items.\n\nRoot\n​\n\nContains all the parts of a context menu.\n\nProp\tType\tDefault\n\ndir\n\t\nenum\n\t\n\n\nmodal\n\t\nboolean\n\t\ntrue\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe area that opens the context menu. Wrap it around the target you want the context menu to open from when right-clicking (or using the relevant keyboard shortcuts).\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out in an open context menu.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-context-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-context-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-context-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-context-menu-trigger-width\t\nThe width of the trigger\n\n--radix-context-menu-trigger-height\t\nThe height of the trigger\nArrow\n​\n\nAn optional arrow element to render alongside a submenu. This can be used to help visually link the trigger item with the ContextMenu.Content. Must be rendered inside ContextMenu.Content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nItem\n​\n\nThe component that contains the context menu items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nGroup\n​\n\nUsed to group multiple ContextMenu.Items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render a label. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nCheckboxItem\n​\n\nAn item that can be controlled and rendered like a checkbox.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nchecked\n\t\nboolean | 'indeterminate'\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@update:checked\n\t(checked: boolean) => void\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nRadioGroup\n​\n\nUsed to group multiple ContextMenu.RadioItems.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nmodelValue\n\t\nstring\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nRadioItem\n​\n\nAn item that can be controlled and rendered like a radio.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nEmit\tType\n\n@select\n\t(event: Event) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the parent ContextMenu.CheckboxItem or ContextMenu.RadioItem is checked. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\nSeparator\n​\n\nUsed to visually separate items in the context menu.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSub\n​\n\nContains all the parts of a submenu.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nSubTrigger\n​\n\nAn item that opens a submenu. Must be rendered inside ContextMenu.Sub.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\n\n\ntextValue\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nSubContent\n​\n\nThe component that pops out when a submenu is open. Must be rendered inside ContextMenu.Sub.\n\nProp\tType\tDefault\n\nloop\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n0\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\n\n@focusOutside\n\t(event: FocusOutsideEvent) => void\n\n@interactOutside\n\t(event: FocusEvent | MouseEvent | TouchEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-context-menu-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets\n\n--radix-context-menu-content-available-width\t\nThe remaining width between the trigger and the boundary edge\n\n--radix-context-menu-content-available-height\t\nThe remaining height between the trigger and the boundary edge\n\n--radix-context-menu-trigger-width\t\nThe width of the trigger\n\n--radix-context-menu-trigger-height\t\nThe height of the trigger\nExamples\n​\nWith submenus\n​\n\nYou can create submenus by using ContextMenuSub in combination with its parts.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuSub>\n          <ContextMenuSubTrigger>Sub menu →</ContextMenuSubTrigger>\n          <ContextMenuPortal>\n            <ContextMenuSubContent>\n              <ContextMenuItem>Sub menu item</ContextMenuItem>\n              <ContextMenuItem>Sub menu item</ContextMenuItem>\n              <ContextMenuArrow />\n            </ContextMenuSubContent>\n          </ContextMenuPortal>\n        </ContextMenuSub>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem class=\"ContextMenuItem\" disabled>\n          …\n        </ContextMenuItem>\n        <ContextMenuItem class=\"ContextMenuItem\">\n          …\n        </ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuItem[data-disabled] {\n  color: gainsboro;\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith labels\n​\n\nUse the Label part to help label a section.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuLabel,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuLabel>Label</ContextMenuLabel>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith checkbox items\n​\n\nUse the CheckboxItem part to add an item that can be checked.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuPortal,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst checked = ref(true)\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuItem>…</ContextMenuItem>\n        <ContextMenuSeparator />\n        <ContextMenuCheckboxItem v-model=\"checked\">\n          <ContextMenuItemIndicator>\n            <Icon icon=\"radix-icons:check\" />\n          </ContextMenuItemIndicator>\n          Checkbox item\n        </ContextMenuCheckboxItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith radio items\n​\n\nUse the RadioGroup and RadioItem parts to add an item that can be checked amongst others.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ContextMenuCheckboxItem,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuItemIndicator,\n  ContextMenuPortal,\n  ContextMenuRadioGroup,\n  ContextMenuRadioItem,\n  ContextMenuRoot,\n  ContextMenuSeparator,\n  ContextMenuTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst color = ref('blue')\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuRadioGroup v-model=\"color\">\n          <ContextMenuRadioItem value=\"red\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Red\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"blue\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Blue\n          </ContextMenuRadioItem>\n          <ContextMenuRadioItem value=\"green\">\n            <ContextMenuItemIndicator>\n              <Icon icon=\"radix-icons:check\" />\n            </ContextMenuItemIndicator>\n            Green\n          </ContextMenuRadioItem>\n        </ContextMenuRadioGroup>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nWith complex items\n​\n\nYou can add extra decorative elements in the Item parts, such as images.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent>\n        <ContextMenuItem>\n          <img src=\"…\">\n          Adolfo Hess\n        </ContextMenuItem>\n        <ContextMenuItem>\n          <img src=\"…\">\n          Miyah Myles\n        </ContextMenuItem>\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\nConstrain the content/sub-content size\n​\n\nYou may want to constrain the width of the content (or sub-content) so that it matches the trigger (or sub-trigger) width. You may also want to constrain its height to not exceed the viewport.\n\nWe expose several CSS custom properties such as --radix-context-menu-trigger-width and --radix-context-menu-content-available-height to support this. Use them to constrain the content dimensions.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuItem, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuContent {\n  width: var(--radix-context-menu-trigger-width);\n  max-height: var(--radix-context-menu-content-available-height);\n}\nOrigin-aware animations\n​\n\nWe expose a CSS custom property --radix-context-menu-content-transform-origin. Use it to animate the content from its computed origin based on side, sideOffset, align, alignOffset and any collisions.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuContent {\n  transform-origin: var(--radix-context-menu-content-transform-origin);\n  animation: scaleIn 0.5s ease-out;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\nCollision-aware animations\n​\n\nWe expose data-side and data-align attributes. Their values will change at runtime to reflect collisions. Use them to create collision and direction-aware animations.\n\nvue\n<script setup lang=\"ts\">\nimport { ContextMenuContent, ContextMenuPortal, ContextMenuRoot, ContextMenuTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <ContextMenuRoot>\n    <ContextMenuTrigger>…</ContextMenuTrigger>\n    <ContextMenuPortal>\n      <ContextMenuContent class=\"ContextMenuContent\">\n        …\n      </ContextMenuContent>\n    </ContextMenuPortal>\n  </ContextMenuRoot>\n</template>\ncss\n/* styles.css */\n.ContextMenuContent {\n  animation-duration: 0.6s;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n}\n.ContextMenuContent[data-side=\"top\"] {\n  animation-name: slideUp;\n}\n.ContextMenuContent[data-side=\"bottom\"] {\n  animation-name: slideDown;\n}\n\n@keyframes slideUp {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideDown {\n  from {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\nAccessibility\n​\n\nUses roving tabindex to manage focus movement among menu items.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nActivates the focused item.\n\n\nEnter\n\t\nActivates the focused item.\n\n\nArrowDown\n\t\nMoves focus to the next item.\n\n\nArrowUp\n\t\nMoves focus to the previous item.\n\n\nArrowRight\nArrowLeft\n\t\nWhen focus is on ContextMenu.SubTrigger, opens or closes the submenu depending on reading direction.\n\n\nEsc\n\t\nCloses the context menu"
  },
  {
    "title": "Dialog | Radix Vue",
    "url": "https://www.radix-vue.com/components/dialog",
    "html": "Dialog\n​\nA window overlaid on either the primary window or another dialog window, rendering the content underneath inert.\nEdit profile\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger\n      class=\"text-grass11 font-semibold shadow-blackA7 hover:bg-mauve3 inline-flex h-[35px] items-center justify-center rounded-[4px] bg-white px-[15px] leading-none shadow-[0_2px_10px] focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none\"\n    >\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal>\n      <DialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n      <DialogContent\n        class=\"data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none z-[100]\"\n      >\n        <DialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n          Edit profile\n        </DialogTitle>\n        <DialogDescription class=\"text-mauve11 mt-[10px] mb-5 text-[15px] leading-normal\">\n          Make changes to your profile here. Click save when you're done.\n        </DialogDescription>\n        <fieldset class=\"mb-[15px] flex items-center gap-5\">\n          <label class=\"text-grass11 w-[90px] text-right text-[15px]\" for=\"name\"> Name </label>\n          <input\n            id=\"name\"\n            class=\"text-grass11 shadow-green7 focus:shadow-green8 inline-flex h-[35px] w-full flex-1 items-center justify-center rounded-[4px] px-[10px] text-[15px] leading-none shadow-[0_0_0_1px] outline-none focus:shadow-[0_0_0_2px]\"\n            defaultValue=\"Pedro Duarte\"\n          >\n        </fieldset>\n        <fieldset class=\"mb-[15px] flex items-center gap-5\">\n          <label class=\"text-grass11 w-[90px] text-right text-[15px]\" for=\"username\"> Username </label>\n          <input\n            id=\"username\"\n            class=\"text-grass11 shadow-green7 focus:shadow-green8 inline-flex h-[35px] w-full flex-1 items-center justify-center rounded-[4px] px-[10px] text-[15px] leading-none shadow-[0_0_0_1px] outline-none focus:shadow-[0_0_0_2px]\"\n            defaultValue=\"@peduarte\"\n          >\n        </fieldset>\n        <div class=\"mt-[25px] flex justify-end\">\n          <DialogClose as-child>\n            <button\n              class=\"bg-green4 text-green11 hover:bg-green5 focus:shadow-green7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none focus:shadow-[0_0_0_2px] focus:outline-none\"\n            >\n              Save changes\n            </button>\n          </DialogClose>\n        </div>\n        <DialogClose\n          class=\"text-grass11 hover:bg-green4 focus:shadow-green7 absolute top-[10px] right-[10px] inline-flex h-[25px] w-[25px] appearance-none items-center justify-center rounded-full focus:shadow-[0_0_0_2px] focus:outline-none\"\n          aria-label=\"Close\"\n        >\n          <Icon icon=\"lucide:x\" />\n        </DialogClose>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\nExpand code\nFeatures\n​\nSupports modal and non-modal modes.\nFocus is automatically trapped when modal.\nCan be controlled or uncontrolled.\nManages screen reader announcements with Title andDescription components.\nEsc closes the component automatically.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger />\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogContent>\n        <DialogTitle />\n        <DialogDescription />\n        <DialogClose />\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a dialog\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nmodal\n\t\nboolean\n\t\ntrue\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nThe button that opens the dialog\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals your overlay and content parts into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nOverlay\n​\n\nA layer that covers the inert portion of the view when the dialog is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nContent\n​\n\nContains content to be rendered in the open dialog\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@openAutoFocus\n\t(event: Event) => void\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\tfunction\n\n\n@interactOutside\n\tfunction\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nClose\n​\n\nThe button that closes the dialog\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nTitle\n​\n\nAn accessible title to be announced when the dialog is opened.\n\nIf you want to hide the title, wrap it inside our Visually Hidden utility like this <VisuallyHidden asChild>.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nh2\n\n\nasChild\n\t\nboolean\n\t\nfalse\nDescription\n​\n\nAn optional accessible description to be announced when the dialog is opened.\n\nIf you want to hide the description, wrap it inside our Visually Hidden utility like this <VisuallyHidden asChild>. If you want to remove the description entirely, remove this part and pass aria-describedby=\"undefined} to DialogContent.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\np\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nNested dialog\n​\n\nYou can nest multiple layers of dialogs.\n\nOpen Dialog\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport {\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogOverlay,\n  DialogPortal,\n  DialogRoot,\n  DialogTitle,\n  DialogTrigger,\n} from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n</script>\n\n<template>\n  <div>\n    <DialogRoot>\n      <DialogTrigger\n        class=\"text-grass11 font-semibold shadow-blackA7 hover:bg-mauve3 inline-flex h-[35px] items-center justify-center rounded-[4px] bg-white px-[15px] leading-none shadow-[0_2px_10px] focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none\"\n      >\n        Open Dialog\n      </DialogTrigger>\n      <DialogPortal>\n        <DialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n        <DialogContent\n          class=\"data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none z-[100]\"\n        >\n          <DialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n            First Dialog\n          </DialogTitle>\n          <DialogDescription class=\"text-mauve11 mt-[10px] mb-5 text-[15px] leading-normal\">\n            First dialog.\n          </DialogDescription>\n\n          <div class=\"mt-[25px] flex gap-4 justify-end\">\n            <DialogClose as-child>\n              <button\n                class=\"bg-green4 text-green11 hover:bg-green5 focus:shadow-green7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none focus:shadow-[0_0_0_2px] focus:outline-none\"\n              >\n                Close\n              </button>\n            </DialogClose>\n\n            <DialogRoot>\n              <DialogTrigger\n                class=\"bg-green9 font-semibold shadow-blackA7 hover:bg-green10  inline-flex h-[35px] items-center justify-center rounded-[4px] text-white px-[15px] leading-none shadow-[0_2px_10px] focus:shadow-[0_0_0_2px] focus:shadow-black focus:outline-none\"\n              >\n                Open second\n              </DialogTrigger>\n\n              <DialogPortal>\n                <DialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n                <DialogContent\n                  class=\"data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[450px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none z-[100]\"\n                >\n                  <DialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n                    Second Dialog\n                  </DialogTitle>\n                  <DialogDescription class=\"text-mauve11 mt-[10px] mb-5 text-[15px] leading-normal\">\n                    Second dialog.\n                  </DialogDescription>\n\n                  <div class=\"flex justify-end\">\n                    <DialogClose as-child>\n                      <button\n                        class=\"bg-green4 text-green11 hover:bg-green5 focus:shadow-green7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none focus:shadow-[0_0_0_2px] focus:outline-none\"\n                      >\n                        Close\n                      </button>\n                    </DialogClose>\n                  </div>\n                </DialogContent>\n              </DialogPortal>\n            </DialogRoot>\n          </div>\n          <DialogClose\n            class=\"text-grass11 hover:bg-green4 focus:shadow-green7 absolute top-[10px] right-[10px] inline-flex h-[25px] w-[25px] appearance-none items-center justify-center rounded-full focus:shadow-[0_0_0_2px] focus:outline-none\"\n            aria-label=\"Close\"\n          >\n            <Icon icon=\"lucide:x\" />\n          </DialogClose>\n        </DialogContent>\n      </DialogPortal>\n    </DialogRoot>\n  </div>\n</template>\nExpand code\nClose after asynchronous form submission\n​\n\nUse the controlled props to programmatically close the Dialog after an async operation has completed.\n\nvue\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'radix-vue'\n\nconst wait = () => new Promise(resolve => setTimeout(resolve, 1000))\nconst open = ref(false)\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>Open</DialogTrigger>\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogContent>\n        <form\n          @submit.prevent=\"\n            (event) => {\n              wait().then(() => (open = false));\n            }\n          \"\n        >\n          <!-- some inputs -->\n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\nScrollable overlay\n​\n\nMove the content inside the overlay to render a dialog with overflow.\n\nvue\n// index.vue\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <DialogRoot>\n    <DialogTrigger />\n    <DialogPortal>\n      <DialogOverlay class=\"DialogOverlay\">\n        <DialogContent class=\"DialogContent\">\n          ...\n        </DialogContent>\n      </DialogOverlay>\n    </DialogPortal>\n  </DialogRoot>\n</template>\ncss\n/* styles.css */\n.DialogOverlay {\n  background: rgba(0 0 0 / 0.5);\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: grid;\n  place-items: center;\n  overflow-y: auto;\n}\n\n.DialogContent {\n  min-width: 300px;\n  background: white;\n  padding: 30px;\n  border-radius: 4px;\n}\nCustom portal container\n​\n\nCustomise the element that your dialog portals into.\n\nvue\n<script setup>\nimport { DialogContent, DialogOverlay, DialogPortal, DialogRoot, DialogTrigger } from 'radix-vue'\n\nconst container = ref(null)\n</script>\n\n<template>\n  <div>\n    <DialogRoot>\n      <DialogTrigger />\n      <DialogPortal to=\"container\">\n        <DialogOverlay />\n        <DialogContent>...</DialogContent>\n      </DialogPortal>\n    </DialogRoot>\n\n    <div ref=\"container\" />\n  </div>\n</template>\nAccessibility\n​\n\nAdheres to the Dialog WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the dialog\n\n\nEnter\n\t\nOpens/closes the dialog\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nEsc\n\t\nCloses the dialog and moves focus to DialogTrigger.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract the overlay and the close button\n​\n\nThis example abstracts the DialogOverlay and DialogClose parts.\n\nUsage\n​\nvue\n<script setup>\nimport { Dialog, DialogContent, DialogTrigger } from './your-dialog'\n</script>\n\n<template>\n  <Dialog>\n    <DialogTrigger>Dialog trigger</DialogTrigger>\n    <DialogContent>Dialog Content</DialogContent>\n  </Dialog>\n</template>\nImplementation\n​\nts\n// your-dialog.ts\nexport { default as DialogContent } from 'DialogContent.vue'\nexport { DialogRoot as Dialog, DialogTrigger } from 'radix-vue'\nvue\n<!-- DialogContent.vue -->\n<script setup lang=\"ts\">\nimport { DialogClose, DialogContent, type DialogContentEmits, type DialogContentProps, DialogOverlay, DialogPortal, useEmitAsProps, } from 'radix-vue'\nimport { Cross2Icon } from '@radix-icons/vue'\n\nconst props = defineProps<DialogContentProps>()\nconst emits = defineEmits<DialogContentEmits>()\n\nconst emitsAsProps = useEmitAsProps(emits)\n</script>\n\n<template>\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogContent v-bind=\"{ ...props, ...emitsAsProps }\">\n      <slot />\n\n      <DialogClose>\n        <Cross2Icon />\n        <span class=\"sr-only\">Close</span>\n      </DialogClose>\n    </DialogContent>\n  </DialogPortal>\n</template>"
  },
  {
    "title": "Combobox | Radix Vue",
    "url": "https://www.radix-vue.com/components/combobox",
    "html": "Combobox\n​\nChoose from a list of suggested values with full keyboard support.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxAnchor, ComboboxContent, ComboboxEmpty, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxRoot, ComboboxSeparator, ComboboxTrigger, ComboboxViewport } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst v = ref('')\nconst options = ['Apple', 'Banana', 'Blueberry', 'Grapes', 'Pineapple']\nconst vegetables = ['Aubergine', 'Broccoli', 'Carrot', 'Courgette', 'Leek']\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"v\" class=\"relative\">\n    <ComboboxAnchor class=\"min-w-[160px] inline-flex items-center justify-between rounded px-[15px] text-[13px] leading-none h-[35px] gap-[5px] bg-white text-grass11 shadow-[0_2px_10px] shadow-black/10 hover:bg-mauve3 focus:shadow-[0_0_0_2px] focus:shadow-black data-[placeholder]:text-grass9 outline-none\">\n      <ComboboxInput class=\"!bg-transparent outline-none text-grass11 h-full selection:bg-grass5 placeholder-mauve8\" placeholder=\"Placeholder...\" />\n      <ComboboxTrigger>\n        <Icon icon=\"radix-icons:chevron-down\" class=\"h-4 w-4 text-grass11\" />\n      </ComboboxTrigger>\n    </ComboboxAnchor>\n\n    <ComboboxContent class=\"absolute z-10 w-full mt-2 min-w-[160px] bg-white overflow-hidden rounded shadow-[0px_10px_38px_-10px_rgba(22,_23,_24,_0.35),_0px_10px_20px_-15px_rgba(22,_23,_24,_0.2)] will-change-[opacity,transform] data-[side=top]:animate-slideDownAndFade data-[side=right]:animate-slideLeftAndFade data-[side=bottom]:animate-slideUpAndFade data-[side=left]:animate-slideRightAndFade\">\n      <ComboboxViewport class=\"p-[5px]\">\n        <ComboboxEmpty class=\"text-mauve8 text-xs font-medium text-center py-2\" />\n\n        <ComboboxGroup>\n          <ComboboxLabel class=\"px-[25px] text-xs leading-[25px] text-mauve11\">\n            Fruits\n          </ComboboxLabel>\n\n          <ComboboxItem\n            v-for=\"(option, index) in options\" :key=\"index\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-grass9 data-[highlighted]:text-grass1\"\n            :value=\"option\"\n          >\n            <ComboboxItemIndicator\n              class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\"\n            >\n              <Icon icon=\"radix-icons:check\" />\n            </ComboboxItemIndicator>\n            <span>\n              {{ option }}\n            </span>\n          </ComboboxItem>\n          <ComboboxSeparator class=\"h-[1px] bg-grass6 m-[5px]\" />\n        </ComboboxGroup>\n\n        <ComboboxGroup>\n          <ComboboxLabel\n            class=\"px-[25px] text-xs leading-[25px] text-mauve11\"\n          >\n            Vegetables\n          </ComboboxLabel>\n          <ComboboxItem\n            v-for=\"(option, index) in vegetables\" :key=\"index\"\n            class=\"text-[13px] leading-none text-grass11 rounded-[3px] flex items-center h-[25px] pr-[35px] pl-[25px] relative select-none data-[disabled]:text-mauve8 data-[disabled]:pointer-events-none data-[highlighted]:outline-none data-[highlighted]:bg-grass9 data-[highlighted]:text-grass1\"\n            :value=\"option\"\n          >\n            <ComboboxItemIndicator\n              class=\"absolute left-0 w-[25px] inline-flex items-center justify-center\"\n            >\n              <Icon icon=\"radix-icons:check\" />\n            </ComboboxItemIndicator>\n            <span>\n              {{ option }}\n            </span>\n          </ComboboxItem>\n        </ComboboxGroup>\n      </ComboboxViewport>\n    </ComboboxContent>\n  </ComboboxRoot>\n</template>\nExpand code\nFeatures\n​\nCan be controlled or uncontrolled.\nOffers 2 positioning modes.\nSupports items, labels, groups of items.\nFocus is fully managed.\nFull keyboard navigation.\nSupports custom placeholder.\nSupports Right to Left direction.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  ComboboxAnchor,\n  ComboboxArrow,\n  ComboboxCancel,\n  ComboboxContent,\n  ComboboxEmpty,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot,\n  ComboboxSeparator,\n  ComboboxTrigger,\n  ComboboxViewport,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxAnchor>\n      <ComboboxInput />\n      <ComboboxTrigger />\n      <ComboboxCancel />\n    </ComboboxAnchor>\n\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxViewport>\n          <ComboboxEmpty />\n\n          <ComboboxItem>\n            <ComboboxItemIndicator />\n          </ComboboxItem>\n\n          <ComboboxGroup>\n            <ComboboxLabel />\n            <ComboboxItem>\n              <ComboboxItemIndicator />\n            </ComboboxItem>\n          </ComboboxGroup>\n          <ComboboxSeparator />\n        </ComboboxViewport>\n\n        <ComboboxArrow />\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a Combobox\n\nProp\tType\tDefault\n\ndefaultValue\n\t\nT\n\t\n\n\nmodelValue\n\t\nT\n\t\n\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\nsearchTerm\n\t\nstring\n\t\n\n\nfilterFunction\n\t\n(val: Array<T>, term: string) => Array<T>\n\t\n\n\ndisplayValue\n\t\n(val: T) => string\n\t\n\n\nmultiple\n\t\nboolean\n\t\n\n\ndir\n\t\nenum\n\t\n\n\nname\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\nEmit\tType\n\n@update:modelValue\n\t(value: T) => void\n\n@update:open\n\t(open: boolean) => void\n\n@update:searchTerm\n\t(value: string) => void\nAnchor\n​\n\nUsed as an anchor if you set ComboboxContent's position to popper.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nInput\n​\n\nThe input component to search through the combobox items.\n\nTrigger\n​\n\nThe button that toggles the Combobox Content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nautoFocus\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nCancel\n​\n\nThe button that clears the search term.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nPortal\n​\n\nWhen used, portals the content part into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nContent\n​\n\nThe component that pops out when the combobox is open.\n\nProp\tType\tDefault\n\nposition\n\t\nenum\n\t\n\"inline\"\n\n\nbodyLock\n\t\nboolean\n\t\nfalse\n\n\ndisableOutsidePointerEvents\n\t\nboolean\n\t\nfalse\n\n\nside\n\t\nenum\n\t\n\"bottom\"\n\n\nsideOffset\n\t\nnumber\n\t\n0\n\n\nalign\n\t\nenum\n\t\n\"start\"\n\n\nalignOffset\n\t\nnumber\n\t\n0\n\n\navoidCollisions\n\t\nboolean\n\t\ntrue\n\n\ncollisionBoundary\n\t\nBoundary\n\t\n[]\n\n\ncollisionPadding\n\t\nnumber | Padding\n\t\n10\n\n\narrowPadding\n\t\nnumber\n\t\n0\n\n\nsticky\n\t\nenum\n\t\n\"partial\"\n\n\nhideWhenDetached\n\t\nboolean\n\t\nfalse\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\n\n@pointerDownOutside\n\t(event: PointerDownOutsideEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-side]\t\"left\" | \"right\" | \"bottom\" | \"top\"\n[data-align]\t\"start\" | \"end\" | \"center\"\nCSS Variable\tDescription\n--radix-combobox-content-transform-origin\t\nThe transform-origin computed from the content and arrow positions/offsets. Only present when position=\"popper\".\n\n--radix-combobox-content-available-width\t\nThe remaining width between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-combobox-content-available-height\t\nThe remaining height between the trigger and the boundary edge. Only present when position=\"popper\".\n\n--radix-combobox-trigger-width\t\nThe width of the trigger. Only present when position=\"popper\".\n\n--radix-combobox-trigger-height\t\nThe height of the trigger. Only present when position=\"popper\".\nViewport\n​\n\nThe scrolling viewport that contains all of the items.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nItem\n​\n\nThe component that contains the combobox items.\n\nProp\tType\tDefault\n\nvalue*\n\t\nstring\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@select\n\t(event: SelectEvent) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\"\n[data-highlighted]\tPresent when highlighted\n[data-disabled]\tPresent when disabled\nItemIndicator\n​\n\nRenders when the item is selected. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nGroup\n​\n\nUsed to group multiple items. use in conjunction with ComboboxLabel to ensure good accessibility via automatic labelling.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nLabel\n​\n\nUsed to render the label of a group. It won't be focusable using arrow keys.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nSeparator\n​\n\nUsed to visually separate items in the Combobox\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\nArrow\n​\n\nAn optional arrow element to render alongside the content. This can be used to help visually link the trigger with the ComboboxContent. Must be rendered inside ComboboxContent. Only available when position is set to popper.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nsvg\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nwidth\n\t\nnumber\n\t\n10\n\n\nheight\n\t\nnumber\n\t\n5\nExamples\n​\nBinding objects as values\n​\n\nUnlike native HTML form controls which only allow you to provide strings as values, radix-vue supports binding complex objects as well.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\">\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in people\"\n          :key=\"person.id\"\n          :value=\"person\"\n          :disabled=\"person.unavailable\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nSelecting multiple values\n​\n\nThe Combobox component allows you to select multiple values. You can enable this by providing an array of values instead of a single value.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref([people[0], people[1]])\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\" multiple>\n    ...\n  </ComboboxRoot>\n</template>\nCustom filtering\n​\n\nInternally, ComboboxRoot would apply default filter function to filter relevant ComboboxItem (only apply when modelValue is type string).\n\nHowever this behavior can be replaced using 2 different method.\n\n1. Provide filter-function props.\n​\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\n\nfunction filterFunction(list: typeof people[number], searchTerm: string) {\n  return list.filter((person) => {\n    return person.name.toLowerCase().includes(searchTerm.toLowerCase())\n  })\n}\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"selectedPeople\"\n    :filter-function=\"filterFunction\"\n  >\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in people\"\n          :key=\"person.id\"\n          :value=\"person\"\n          :disabled=\"person.unavailable\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\n2. Filtered v-for options\n​\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxInput, ComboboxItem, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n\nconst people = [\n  { id: 1, name: 'Durward Reynolds' },\n  { id: 2, name: 'Kenton Towne' },\n  { id: 3, name: 'Therese Wunsch' },\n  { id: 4, name: 'Benedict Kessler' },\n  { id: 5, name: 'Katelyn Rohan' },\n]\nconst selectedPeople = ref(people[0])\nconst searchTerm = ref('')\n\nconst filteredPeople = computed(() =>\n  searchTerm.value === ''\n    ? people\n    : people.filter((person) => {\n      return person.name.toLowerCase().includes(searchTerm.value.toLowerCase())\n    })\n)\n</script>\n\n<template>\n  <ComboboxRoot\n    v-model=\"selectedPeople\"\n    v-model:searchTerm=\"searchTerm\"\n  >\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem\n          v-for=\"person in filteredPeople\"\n          :key=\"person.id\"\n          :value=\"person\"\n          :disabled=\"person.unavailable\"\n        >\n          {{ person.name }}\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nCustom label\n​\n\nBy default the Combobox will use the input contents as the label for screenreaders. If you'd like more control over what is announced to assistive technologies, use the Label component.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxInput, ComboboxRoot, Label } from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot v-model=\"selectedPeople\">\n    <Label for=\"person\">Person: </Label>\n    <ComboboxInput id=\"person\" placeholder=\"Select a person\" />\n    ...\n  </ComboboxRoot>\n</template>\nWith disabled items\n​\n\nYou can add special styles to disabled items via the data-disabled attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxPortal,\n  ComboboxRoot,\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem class=\"ComboboxItem\" disabled>\n          ...\n        </ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\ncss\n/* styles.css */\n.ComboboxItem[data-disabled] {\n  color: \"gainsboro\";\n}\nWith separators\n​\n\nUse the Separator part to add a separator between items.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxPortal,\n  ComboboxRoot,\n  ComboboxSeparator\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxSeparator />\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n        <ComboboxItem>…</ComboboxItem>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nWith grouped items\n​\n\nUse the Group and Label parts to group items in a section.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxGroup>\n          <ComboboxLabel>Label</ComboboxLabel>\n          <ComboboxItem>…</ComboboxItem>\n          <ComboboxItem>…</ComboboxItem>\n          <ComboboxItem>…</ComboboxItem>\n        </ComboboxGroup>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nWith complex items\n​\n\nYou can use custom content in your items.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport {\n  ComboboxContent,\n  ComboboxGroup,\n  ComboboxInput,\n  ComboboxItem,\n  ComboboxItemIndicator,\n  ComboboxLabel,\n  ComboboxPortal,\n  ComboboxRoot\n} from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem>\n          <img src=\"…\">\n          Adolfo Hess\n          <ComboboxItemIndicator />\n        </ComboboxItem>\n        …\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nPrevent select behavior\n​\n\nBy default, selecting ComboboxItem would close the content, and update the modelValue with the provided value. You can prevent this behavior by preventing default @select.prevent.\n\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { ComboboxContent, ComboboxGroup, ComboboxInput, ComboboxItem, ComboboxItemIndicator, ComboboxLabel, ComboboxPortal, ComboboxRoot } from 'radix-vue'\n</script>\n\n<template>\n  <ComboboxRoot>\n    <ComboboxInput />\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxItem @select.prevent>\n          Item A\n        </ComboboxItem>\n        …\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nAccessibility\n​\n\nAdheres to the Combobox WAI-ARIA design pattern.\n\nSee the W3C Combobox Autocomplete List example for more information.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nEnter\n\t\nWhen focus is on ComboboxItem, selects the focused item.\n\n\nArrowDown\n\t\nWhen focus is on ComboboxInput, opens the combobox content.\nWhen focus is on an item, moves focus to the next item.\n\n\nArrowUp\n\t\nWhen focus is on ComboboxInput, opens the combobox content.\nWhen focus is on an item, moves focus to the previous item.\n\n\nEsc\n\t\nCloses combobox and restores the selected item in the ComboboxInput field.\nCustom APIs\n​\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nCommand Menu\n​\n\nCombobox can be use to build your own Command Menu.\n\nUsage\n​\nvue\n<script setup lang=\"ts\">\nimport { Command, CommandItem } from './your-command'\n</script>\n\n<template>\n  <Command>\n    <CommandItem value=\"1\">\n      Item 1\n    </CommandItem>\n    <CommandItem value=\"2\">\n      Item 2\n    </CommandItem>\n    <CommandItem value=\"3\">\n      Item 3\n    </CommandItem>\n  </Command>\n</template>\nImplementation\n​\nts\n// your-command.ts\nexport { default as Command } from 'Command.vue'\nexport { default as CommandItem } from 'CommandItem.vue'\nvue\n<!-- Command.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon, } from '@radix-icons/vue'\nimport { ComboboxContent, ComboboxEmpty, ComboboxInput, ComboboxPortal, ComboboxRoot, useForwardPropsEmits } from 'radix-vue'\nimport type { ComboboxRootEmits, ComboboxRootProps } from 'radix-vue'\n\nconst props = defineProps<ComboboxRootProps>()\nconst emits = defineEmits<ComboboxRootEmits>()\n\nconst forward = useForwardPropsEmits(props, emits)\n</script>\n\n<template>\n  <ComboboxRoot v-bind=\"forward\" :open=\"true\" model-value=\"\">\n    <ComboboxInput placeholder=\"Type a command or search...\" />\n\n    <ComboboxPortal>\n      <ComboboxContent>\n        <ComboboxEmpty />\n        <ComboboxViewport>\n          <slot />\n        </ComboboxViewport>\n      </ComboboxContent>\n    </ComboboxPortal>\n  </ComboboxRoot>\n</template>\nvue\n<!-- ComboboxItem.vue -->\n<script setup lang=\"ts\">\nimport { CheckIcon } from '@radix-icons/vue'\nimport { ComboboxItem, type ComboboxItemProps } from 'radix-vue'\n\nconst props = defineProps<ComboboxItemProps>()\n</script>\n\n<template>\n  <ComboboxItem v-bind=\"props\" @select.prevent>\n    <slot />\n  </ComboboxItem>\n</template>"
  },
  {
    "title": "Collapsible | Radix Vue",
    "url": "https://www.radix-vue.com/components/collapsible",
    "html": "Collapsible\n​\nAn interactive component which expands/collapses a panel.\n@peduarte starred 3 repos\n@radix-vue/radix-vue\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst open = ref(false)\n</script>\n\n<template>\n  <CollapsibleRoot v-model:open=\"open\" class=\"w-[300px]\">\n    <div style=\"display: flex; align-items: center; justify-content: space-between\">\n      <span class=\"text-white text-[15px] leading-[25px]\"> @peduarte starred 3 repos </span>\n      <CollapsibleTrigger\n        class=\"cursor-default rounded-full h-[25px] w-[25px] inline-flex items-center justify-center text-grass11 shadow-[0_2px_10px] shadow-blackA7 outline-none data-[state=closed]:bg-white data-[state=open]:bg-green3 hover:bg-green3 focus:shadow-[0_0_0_2px] focus:shadow-black\"\n      >\n        <Icon v-if=\"open\" icon=\"radix-icons:cross-2\" class=\"h-3.5 w-3.5\" />\n        <Icon v-else icon=\"radix-icons:row-spacing\" class=\"h-3.5 w-3.5\" />\n      </CollapsibleTrigger>\n    </div>\n\n    <div class=\"bg-white rounded mt-[10px] p-[10px] shadow-[0_2px_10px] shadow-blackA7\">\n      <span class=\"text-grass11 text-[15px] leading-[25px]\">@radix-vue/radix-vue</span>\n    </div>\n\n    <CollapsibleContent class=\"data-[state=open]:animate-slideDown data-[state=closed]:animate-slideUp overflow-hidden\">\n      <div class=\"bg-white rounded my-[10px] p-[10px] shadow-[0_2px_10px] shadow-blackA7\">\n        <span class=\"text-grass11 text-[15px] leading-[25px]\">@vuejs/core</span>\n      </div>\n      <div class=\"bg-white rounded my-[10px] p-[10px] shadow-[0_2px_10px] shadow-blackA7\">\n        <span class=\"text-grass11 text-[15px] leading-[25px]\">@radix-ui/primitives</span>\n      </div>\n    </CollapsibleContent>\n  </CollapsibleRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the components and piece the parts together.\n\nvue\n<script setup>\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <CollapsibleRoot>\n    <CollapsibleTrigger />\n    <CollapsibleContent />\n  </CollapsibleRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a collapsible\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(value: boolean) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nTrigger\n​\n\nThe button that toggles the collapsible\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nContent\n​\n\nThe component that contains the collapsible content.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\nCSS Variable\tDescription\n--radix-collapsible-content-width\t\nThe width of the content when it opens/closes\n\n--radix-collapsible-content-height\t\nThe height of the content when it opens/closes\nExamples\n​\nAnimating content size\n​\n\nUse the --radix-collapsible-content-width and/or --radix-collapsible-content-height CSS variables to animate the size of the content when it opens/closes. Here's a demo:\n\nvue\n// index.vue\n<script setup>\nimport { CollapsibleContent, CollapsibleRoot, CollapsibleTrigger } from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <CollapsibleRoot>\n    <CollapsibleTrigger>…</CollapsibleTrigger>\n    <CollapsibleContent class=\"CollapsibleContent\">\n      …\n    </CollapsibleContent>\n  </CollapsibleRoot>\n</template>\ncss\n/* styles.css */\n.CollapsibleContent {\n  overflow: hidden;\n}\n.CollapsibleContent[data-state=\"open\"] {\n  animation: slideDown 300ms ease-out;\n}\n.CollapsibleContent[data-state=\"closed\"] {\n  animation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-collapsible-content-height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    height: var(--radix-collapsible-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\nAccessibility\n​\n\nAdheres to the Disclosure WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the collapsible\n\n\nEnter\n\t\nOpens/closes the collapsible"
  },
  {
    "title": "Checkbox | Radix Vue",
    "url": "https://www.radix-vue.com/components/checkbox",
    "html": "Checkbox\n​\nA control that allows the user to toggle between checked and not checked.\nAccept terms and conditions.\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport { CheckboxIndicator, CheckboxRoot } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst checkboxOne = ref(true)\n</script>\n\n<template>\n  <div class=\"flex flex-col gap-2.5\">\n    <label class=\"flex flex-row gap-4 items-center [&>.checkbox]:hover:bg-neutral-100\">\n      <CheckboxRoot\n        v-model:checked=\"checkboxOne\"\n        class=\"shadow-blackA7 hover:bg-green3 flex h-[25px] w-[25px] appearance-none items-center justify-center rounded-[4px] bg-white shadow-[0_2px_10px] outline-none focus-within:shadow-[0_0_0_2px_black]\"\n      >\n        <CheckboxIndicator class=\"bg-white h-full w-full rounded flex items-center justify-center\">\n          <Icon icon=\"radix-icons:check\" class=\"h-3.5 w-3.5 text-grass11\" />\n        </CheckboxIndicator>\n      </CheckboxRoot>\n      <span class=\"select-none text-white\">Accept terms and conditions.</span>\n    </label>\n  </div>\n</template>\nExpand code\nFeatures\n​\nSupports indeterminate state.\nFull keyboard navigation.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { CheckboxIndicator, CheckboxRoot } from 'radix-vue'\n</script>\n\n<template>\n  <CheckboxRoot>\n    <CheckboxIndicator />\n  </CheckboxRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of a checkbox. An input will also render when used within a form to ensure events propagate correctly.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndefaultChecked\n\t\nboolean\n\t\n\n\nchecked\n\t\nboolean\n\t\n\n\ndisabled\n\t\nboolean\n\t\n\n\nrequired\n\t\nboolean\n\t\n\n\nname\n\t\nstring\n\t\n\n\nvalue\n\t\nstring\n\t\non\nEmit\tType\n\n@update:checked\n\t(value: boolean) => void\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-disabled]\tPresent when disabled\nIndicator\n​\n\nRenders when the checkbox is in a checked or indeterminate state. You can style this element directly, or you can use it as a wrapper to put an icon into, or both.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"checked\" | \"unchecked\" | \"indeterminate\"\n[data-disabled]\tPresent when disabled\nExamples\n​\nIndeterminate\n​\n\nYou can set the checkbox to indeterminate by taking control of its state.\n\nvue\n<script setup>\nimport { Icon } from '@iconify/vue'\nimport { CheckboxIndicator, CheckboxRoot } from 'radix-vue'\n\nconst checked = ref('indeterminate')\n</script>\n\n<template>\n  <StyledCheckbox v-model:checked=\"checked\">\n    <Icon icon=\"radix-icons:checkbox-indicator\">\n      <Icon v-if=\"checked === 'indeterminate'\" icon=\"radix-icons:divider-horizontal\" />\n      <Icon v-if=\"checked\" icon=\"radix-icons:check\" />\n    </Icon>\n  </StyledCheckbox>\n\n  <button type=\"button\" @click=\"() => (checked === 'indeterminate' ? (checked = false) : (checked = 'indeterminate'))\">\n    Toggle indeterminate\n  </button>\n</template>\nAccessibility\n​\n\nAdheres to the tri-state Checkbox WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nChecks/unchecks the checkbox"
  },
  {
    "title": "Avatar | Radix Vue",
    "url": "https://www.radix-vue.com/components/avatar",
    "html": "Avatar\n​\nAn image element with a fallback for representing the user.\nPD\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { AvatarFallback, AvatarImage, AvatarRoot } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"flex gap-5\">\n    <AvatarRoot class=\"bg-blackA3 inline-flex h-[45px] w-[45px] select-none items-center justify-center overflow-hidden rounded-full align-middle\">\n      <AvatarImage\n        class=\"h-full w-full rounded-[inherit] object-cover\"\n        src=\"https://images.unsplash.com/photo-1492633423870-43d1cd2775eb?&w=128&h=128&dpr=2&q=80\"\n        alt=\"Colm Tuite\"\n      />\n      <AvatarFallback\n        class=\"text-grass11 leading-1 flex h-full w-full items-center justify-center bg-white text-[15px] font-medium\"\n        :delay-ms=\"600\"\n      >\n        CT\n      </AvatarFallback>\n    </AvatarRoot>\n    <AvatarRoot class=\"bg-blackA3 inline-flex h-[45px] w-[45px] select-none items-center justify-center overflow-hidden rounded-full align-middle\">\n      <AvatarImage\n        class=\"h-full w-full rounded-[inherit] object-cover\"\n        src=\"https://images.unsplash.com/photo-1511485977113-f34c92461ad9?ixlib=rb-1.2.1&w=128&h=128&dpr=2&q=80\"\n        alt=\"Pedro Duarte\"\n      />\n      <AvatarFallback\n        class=\"text-grass11 leading-1 flex h-full w-full items-center justify-center bg-white text-[15px] font-medium\"\n        :delay-ms=\"600\"\n      >\n        JD\n      </AvatarFallback>\n    </AvatarRoot>\n    <AvatarRoot class=\"bg-blackA3 inline-flex h-[45px] w-[45px] select-none items-center justify-center overflow-hidden rounded-full align-middle\">\n      <AvatarFallback class=\"text-grass11 leading-1 flex h-full w-full items-center justify-center bg-white text-[15px] font-medium\">\n        PD\n      </AvatarFallback>\n    </AvatarRoot>\n  </div>\n</template>\nExpand code\nFeatures\n​\nAutomatic and manual control over when the image renders.\nFallback part accepts any children.\nOptionally delay fallback rendering to avoid content flashing.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { AvatarImage, AvatarRoot } from 'radix-vue'\n</script>\n\n<template>\n  <AvatarRoot>\n    <AvatarImage />\n    <AvatarFallback />\n  </AvatarRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of an avatar\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\nImage\n​\n\nThe image to render. By default it will only render when it has loaded. You can use the @loadingStatusChange handler if you need more control.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nimg\n\n\nasChild\n\t\nboolean\n\t\nfalse\nEmit\tType\n\n@loadingStatusChange\n\t(status: \"idle\" | \"loading\" | \"loaded\" | \"error\") => void\nFallback\n​\n\nAn element that renders when the image hasn't loaded. This means whilst it's loading, or if there was an error. If you notice a flash during loading, you can provide a delayMs prop to delay its rendering so it only renders for those with slower connections. For more control, use the @loadingStatusChange emit on AvatarImage.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nspan\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndelayMs\n\t\nnumber\n\t\nExamples\n​\nClickable Avatar with tooltip\n​\n\nYou can compose the Avatar with a Tooltip to display extra information.\n\nvue\n<script setup>\nimport { AvatarImage, AvatarRoot, TooltipArrow, TooltipRoot, TooltipTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger>\n      <AvatarRoot>…</AvatarRoot>\n    </TooltipTrigger>\n\n    <TooltipContent side=\"top\">\n      Tooltip content\n      <TooltipArrow />\n    </TooltipContent>\n  </TooltipRoot>\n</template>"
  },
  {
    "title": "Aspect Ratio | Radix Vue",
    "url": "https://www.radix-vue.com/components/aspect-ratio",
    "html": "Aspect Ratio\n​\nDisplays content within a desired ratio.\nindex.vue\ntailwind.config.js\nvue\n<script setup lang=\"ts\">\nimport { AspectRatio } from 'radix-vue'\n</script>\n\n<template>\n  <div class=\"shadow-blackA7 w-full sm:w-[300px] overflow-hidden rounded-md shadow-[0_2px_10px]\">\n    <AspectRatio :ratio=\"16 / 9\">\n      <img\n        class=\"h-full w-full object-cover\"\n        src=\"https://images.unsplash.com/photo-1535025183041-0991a977e25b?w=300&dpr=2&q=80\"\n        alt=\"Landscape photograph by Tobias Tullius\"\n      >\n    </AspectRatio>\n  </div>\n</template>\nExpand code\nFeatures\n​\nAccepts any custom ratio.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport the component.\n\nvue\n<script setup>\nimport { AspectRatio } from 'radix-vue'\n</script>\n\n<template>\n  <AspectRatio />\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains the content you want to constrain to a given ratio.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nratio\n\t\nnumber\n\t\n1"
  },
  {
    "title": "Alert Dialog | Radix Vue",
    "url": "https://www.radix-vue.com/components/alert-dialog",
    "html": "Alert Dialog\n​\nA modal dialog that interrupts the user with important content and expects a response.\nDelete account\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'radix-vue'\n\nfunction handleAction() {\n  alert('clicked action button!')\n}\n</script>\n\n<template>\n  <AlertDialogRoot>\n    <AlertDialogTrigger\n      class=\"bg-white text-grass11 font-semibold hover:bg-white/90 shadow-sm inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] leading-none outline-none focus:shadow-[0_0_0_2px] focus:shadow-black transition-all\"\n    >\n      Delete account\n    </AlertDialogTrigger>\n    <AlertDialogPortal>\n      <AlertDialogOverlay class=\"bg-blackA9 data-[state=open]:animate-overlayShow fixed inset-0 z-30\" />\n      <AlertDialogContent\n        class=\"z-[100] text-[15px] data-[state=open]:animate-contentShow fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[500px] translate-x-[-50%] translate-y-[-50%] rounded-[6px] bg-white p-[25px] shadow-[hsl(206_22%_7%_/_35%)_0px_10px_38px_-10px,_hsl(206_22%_7%_/_20%)_0px_10px_20px_-15px] focus:outline-none\"\n      >\n        <AlertDialogTitle class=\"text-mauve12 m-0 text-[17px] font-semibold\">\n          Are you absolutely sure?\n        </AlertDialogTitle>\n        <AlertDialogDescription class=\"text-mauve11 mt-4 mb-5 text-[15px] leading-normal\">\n          This action cannot be undone. This will permanently delete your account and remove your data from our servers.\n        </AlertDialogDescription>\n        <div class=\"flex justify-end gap-[25px]\">\n          <AlertDialogCancel\n            class=\"text-mauve11 bg-mauve4 hover:bg-mauve5 focus:shadow-mauve7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none outline-none focus:shadow-[0_0_0_2px]\"\n          >\n            Cancel\n          </AlertDialogCancel>\n          <AlertDialogAction\n            class=\"text-red11 bg-red4 hover:bg-red5 focus:shadow-red7 inline-flex h-[35px] items-center justify-center rounded-[4px] px-[15px] font-semibold leading-none outline-none focus:shadow-[0_0_0_2px]\"\n            @click=\"handleAction\"\n          >\n            Yes, delete account\n          </AlertDialogAction>\n        </div>\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\nExpand code\nFeatures\n​\nFocus is automatically trapped.\nCan be controlled or uncontrolled.\nManages screen reader announcements with Title and Description components.\nEsc closes the component automatically.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup lang=\"ts\">\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'radix-vue'\n</script>\n\n<template>\n  <AlertDialogRoot>\n    <AlertDialogTrigger />\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogContent>\n        <AlertDialogTitle />\n        <AlertDialogDescription />\n        <AlertDialogCancel />\n        <AlertDialogAction />\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of an alert dialog.\n\nProp\tType\tDefault\n\ndefaultOpen\n\t\nboolean\n\t\n\n\nopen\n\t\nboolean\n\t\nEmit\tType\n\n@update:open\n\t(open: boolean) => void\nTrigger\n​\n\nA button that opens the dialog.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ntrigger\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nPortal\n​\n\nWhen used, portals your overlay and content parts into the body.\n\nProp\tType\tDefault\n\nto\n\t\nstring | HTMLElement\n\t\nbody\nOverlay\n​\n\nA layer that covers the inert portion of the view when the dialog is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nContent\n​\n\nContains content to be rendered when the dialog is open.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nEmit\tType\n\n@openAutoFocus\n\t(event: Event) => void\n\n@closeAutoFocus\n\t(event: Event) => void\n\n@escapeKeyDown\n\t(event: KeyboardEvent) => void\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\nCancel\n​\n\nA button that closes the dialog. This button should be distinguished visually from AlertDialogAction buttons.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nAction\n​\n\nA button that closes the dialog. These buttons should be distinguished visually from the AlertDialogCancel button.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nTitle\n​\n\nAn accessible name to be announced when the dialog is opened. Alternatively, you can provide aria-label or aria-labelledby to AlertDialogContent and exclude this component.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nh2\n\n\nasChild\n\t\nboolean\n\t\nfalse\nDescription\n​\n\nAn accessible description to be announced when the dialog is opened. Alternatively, you can provide aria-describedby to AlertDialogContent and exclude this component.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\np\n\n\nasChild\n\t\nboolean\n\t\nfalse\nExamples\n​\nClose after asynchronous form submission\n​\n\nUse the controlled props to programmatically close the Alert Dialog after an async operation has completed.\n\nvue\n<script setup>\nimport {\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogRoot,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from 'radix-vue'\n\nconst wait = () => new Promise(resolve => setTimeout(resolve, 1000))\nconst open = ref(false)\n</script>\n\n<template>\n  <AlertDialogRoot v-model:open=\"open\">\n    <AlertDialogTrigger>Open</AlertDialogTrigger>\n    <AlertDialogPortal>\n      <AlertDialogOverlay />\n      <AlertDialogContent>\n        <form\n          @submit.prevent=\"\n            (event) => {\n              wait().then(() => open = false);\n            }\n          \"\n        >\n          <!-- some inputs -->\n          <button type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </AlertDialogContent>\n    </AlertDialogPortal>\n  </AlertDialogRoot>\n</template>\n\n\nCustom portal container\n​\n\nCustomise the element that your alert dialog portals into.\n\nvue\n<script setup>\nimport { ref } from 'vue'\n\nconst container = ref(null)\n</script>\n\n<template>\n  <div>\n    <AlertDialogRoot>\n      <AlertDialogTrigger />\n      <AlertDialogPortal :to=\"container\">\n        <AlertDialogOverlay />\n        <AlertDialogContent>...</AlertDialogContent>\n      </AlertDialogPortal>\n    </AlertDialogRoot>\n\n    <div ref=\"container\" />\n  </div>\n</template>\nAccessibility\n​\n\nAdheres to the Alert and Message Dialogs WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nOpens/closes the dialog.\n\n\nEnter\n\t\nOpens/closes the dialog.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nEsc\n\t\nCloses the dialog and moves focus to AlertDialogTrigger."
  },
  {
    "title": "Accordion | Radix Vue",
    "url": "https://www.radix-vue.com/components/accordion",
    "html": "Accordion\n​\nA vertically stacked set of interactive headings that each reveal an associated section of content.\nIs it accessible?\nIs it unstyled?\nCan it be animated?\nindex.vue\ntailwind.config.js\nTailwindCSS\nTailwindCSS\nCSS\nvue\n<script setup lang=\"ts\">\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\n\nconst accordionItems = [\n  {\n    value: 'item-1',\n    title: 'Is it accessible?',\n    content: 'Yes. It adheres to the WAI-ARIA design pattern.',\n  },\n  {\n    value: 'item-2',\n    title: 'Is it unstyled?',\n    content: 'Yes. It\\'s unstyled by default, giving you freedom over the look and feel.',\n  },\n  {\n    value: 'item-3',\n    title: 'Can it be animated?',\n    content: 'Yes! You can use the transition prop to configure the animation.',\n  },\n]\n</script>\n\n<template>\n  <AccordionRoot\n    class=\"bg-mauve6 w-[300px] rounded-md shadow-[0_2px_10px] shadow-black/5\"\n    default-value=\"'item-1'\"\n    type=\"single\"\n    :collapsible=\"true\"\n  >\n    <template v-for=\"item in accordionItems\" :key=\"item.value\">\n      <AccordionItem class=\"focus-within:shadow-mauve12 mt-px overflow-hidden first:mt-0 first:rounded-t last:rounded-b focus-within:relative focus-within:z-10 focus-within:shadow-[0_0_0_2px]\" :value=\"item.value\">\n        <AccordionHeader class=\"flex\">\n          <AccordionTrigger class=\"text-grass11  shadow-mauve6 hover:bg-mauve2 flex h-[45px] flex-1 cursor-default items-center justify-between bg-white px-5 text-[15px] leading-none shadow-[0_1px_0] outline-none group\">\n            <span>{{ item.title }}</span>\n            <Icon\n              icon=\"radix-icons:chevron-down\"\n              class=\"text-green10 ease-[cubic-bezier(0.87,_0,_0.13,_1)] transition-transform duration-300 group-data-[state=open]:rotate-180\"\n              aria-hidden\n            />\n          </AccordionTrigger>\n        </AccordionHeader>\n        <AccordionContent class=\"text-mauve11 bg-mauve2 data-[state=open]:animate-slideDown data-[state=closed]:animate-slideUp overflow-hidden text-[15px]\">\n          <div class=\"px-5 py-4\">\n            {{ item.content }}\n          </div>\n        </AccordionContent>\n      </AccordionItem>\n    </template>\n  </AccordionRoot>\n</template>\nExpand code\nFeatures\n​\nFull keyboard navigation.\nSupports horizontal/vertical orientation.\nSupports Right to Left direction.\nCan expand one or multiple items.\nCan be controlled or uncontrolled.\nInstallation\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\nAnatomy\n​\n\nImport all parts and piece them together.\n\nvue\n<script setup>\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem>\n      <AccordionHeader>\n        <AccordionTrigger />\n      </AccordionHeader>\n      <AccordionContent />\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nAPI Reference\n​\nRoot\n​\n\nContains all the parts of an Accordion\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ntype*\n\t\nenum\n\t\n\n\ndefaultValue\n\t\nstring | string[]\n\t\n\n\nvalue\n\t\nstring | string[]\n\t\n\n\ncollapsible\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\ndir\n\t\nenum\n\t\n\"ltr\"\n\n\norientation\n\t\nenum\n\t\n\"vertical\"\nEmit\tType\n\n@update:modelValue\n\t(value: string) => void\nData Attribute\tValue\n[data-orientation]\t\"vertical\" | \"horizontal\"\nItem\n​\n\nContains all the parts of a collapsible section.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\ndisabled\n\t\nboolean\n\t\nfalse\n\n\nvalue*\n\t\nstring\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nHeader\n​\n\nWraps an AccordionTrigger. Use the asChild prop to update it to the appropriate heading level for your page.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nh3\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nTrigger\n​\n\nToggles the collapsed state of its associated item. It should be nested inside of an AccordionHeader.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\nbutton\n\n\nasChild\n\t\nboolean\n\t\nfalse\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nContent\n​\n\nContains the collapsible content for an item.\n\nProp\tType\tDefault\n\nas\n\t\nstring | Component\n\t\ndiv\n\n\nasChild\n\t\nboolean\n\t\nfalse\n\n\nforceMount\n\t\nboolean\n\t\nData Attribute\tValue\n[data-state]\t\"open\" | \"closed\"\n[data-disabled]\tPresent when disabled\n[data-orientation]\t\"vertical\" | \"horizontal\"\nCSS Variable\tDescription\n--radix-accordion-content-width\t\nThe width of the content when it opens/closes\n\n--radix-accordion-content-height\t\nThe height of the content when it opens/closes\nExamples\n​\nExpanded by default\n​\n\nUse the defaultValue prop to define the open item by default.\n\nvue\n<template>\n  <AccordionRoot type=\"single\" default-value=\"item-2\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nAllow collapsing all items\n​\n\nUse the collapsible prop to allow all items to close.\n\nvue\n<template>\n  <AccordionRoot type=\"single\" collapsible>\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nMultiple items open at the same time\n​\n\nSet the type prop to multiple to enable opening multiple items at once.\n\nvue\n<template>\n  <AccordionRoot type=\"multiple\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nRotated icon when open\n​\n\nYou can add extra decorative elements, such as chevrons, and rotate it when the item is open.\n\nvue\n// index.vue\n<script setup>\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\nimport { Icon } from '@iconify/vue'\nimport './styles.css'\n</script>\n\n<template>\n  <AccordionRoot type=\"single\">\n    <AccordionItem value=\"item-1\">\n      <AccordionHeader>\n        <AccordionTrigger class=\"AccordionTrigger\">\n          <span>Trigger text</span>\n          <Icon icon=\"radix-icons:chevron-down\" class=\"AccordionChevron\" aria-hidden />\n        </AccordionTrigger>\n      </AccordionHeader>\n      <AccordionContent>…</AccordionContent>\n    </AccordionItem>\n  </AccordionRoot>\n</template>\ncss\n/* styles.css */\n.AccordionChevron {\n  transition: transform 300ms;\n}\n.AccordionTrigger[data-state=\"open\"] > .AccordionChevron {\n  transform: rotate(180deg);\n}\nHorizontal orientation\n​\n\nUse the orientation prop to create a horizontal Accordion\n\nvue\n<template>\n  <AccordionRoot orientation=\"horizontal\">\n    <AccordionItem value=\"item-1\">\n      …\n    </AccordionItem>\n    <AccordionItem value=\"item-2\">\n      …\n    </AccordionItem>\n  </AccordionRoot>\n</template>\nAnimating content size\n​\n\nUse the --radix-accordion-content-width and/or --radix-accordion-content-height CSS variables to animate the size of the content when it opens/closes:\n\nvue\n// index.vue\n<script setup>\nimport { AccordionContent, AccordionHeader, AccordionItem, AccordionRoot, AccordionTrigger } from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <AccordionRoot type=\"single\">\n    <AccordionItem value=\"item-1\">\n      <AccordionHeader>…</AccordionHeader>\n      <AccordionContent class=\"AccordionContent\">\n        …\n      </AccordionContent>\n    </AccordionItem>\n  </AccordionRoot>\n</template>\ncss\n/* styles.css */\n.AccordionContent {\n  overflow: hidden;\n}\n.AccordionContent[data-state=\"open\"] {\n  animation: slideDown 300ms ease-out;\n}\n.AccordionContent[data-state=\"closed\"] {\n  animation: slideUp 300ms ease-out;\n}\n\n@keyframes slideDown {\n  from {\n    height: 0;\n  }\n  to {\n    height: var(--radix-accordion-content-height);\n  }\n}\n\n@keyframes slideUp {\n  from {\n    height: var(--radix-accordion-content-height);\n  }\n  to {\n    height: 0;\n  }\n}\nAccessibility\n​\n\nAdheres to the Accordion WAI-ARIA design pattern.\n\nKeyboard Interactions\n​\nKey\tDescription\n\nSpace\n\t\nWhen focus is on an AccordionTrigger of a collapsed section, expands the section.\n\n\nEnter\n\t\nWhen focus is on an AccordionTrigger of a collapsed section, expands the section.\n\n\nTab\n\t\nMoves focus to the next focusable element.\n\n\nShift + Tab\n\t\nMoves focus to the previous focusable element.\n\n\nArrowDown\n\t\nMoves focus to the next AccordionTrigger when orientation is vertical.\n\n\nArrowUp\n\t\nMoves focus to the previous AccordionTrigger when orientation is vertical.\n\n\nArrowRight\n\t\nMoves focus to the next AccordionTrigger when orientation is horizontal.\n\n\nArrowLeft\n\t\nMoves focus to the previous AccordionTrigger when orientation is horizontal.\n\n\nHome\n\t\nWhen focus is on an AccordionTrigger, moves focus to the start AccordionTrigger.\n\n\nEnd\n\t\nWhen focus is on an AccordionTrigger, moves focus to the last AccordionTrigger."
  },
  {
    "title": "Namespaced components | Radix Vue",
    "url": "https://www.radix-vue.com/guides/namespaced-components",
    "html": "Namespaced components\n​\n\nRadix Vue design pattern is to create primitives for each component, and allow user to construct or compose components however they want.\n\nHowever, importing all of the neccessary component 1-by-1 can be quite an effort, and user might some time accidentally left out any important components.\n\nIn order to solve this painpoint, we've introduced Namespaced components since v.1.2.0.\n\nHow to use?\n​\n\nFirst, you need import components via radix-vue/namespaced in your Vue component.\n\nvue\n<script setup lang=\"ts\">\nimport { Dialog, DropdownMenu } from 'radix-vue/namespaced'\n</script>\n\nThen, you can just the imported namespaced component and it will contains all the relevant components.\n\nvue\n<script setup lang=\"ts\">\nimport { Dialog } from 'radix-vue/namespaced'\n</script>\n\n<template>\n  <Dialog.Root>\n    <Dialog.Trigger>\n      Trigger\n    </Dialog.Trigger>\n  </Dialog.Root>\n\n  <Dialog.Portal>\n    <Dialog.Overlay />\n    <Dialog.Content>\n      …\n    </Dialog.Content>\n  </Dialog.Portal>\n</template>"
  },
  {
    "title": "Server side rendering | Radix Vue",
    "url": "https://www.radix-vue.com/guides/server-side-rendering",
    "html": "Server side rendering\n​\nRadix Primitives can be rendered on the server.\nOverview\n​\n\nServer side rendering or SSR, is a technique used to render components to HTML on the server, as opposed to rendering them only on the client.\n\nStatic rendering is another similar approach. Instead it pre-renders pages to HTML at build time rather than on each request.\n\nYou should be able to use all of our primitives with both approaches, for example with Nuxt.js.\n\nINFO\n\nSome components' state might not rendered correctly in server-side, we are working on fixing it. If you encoutered any issue, feel free to open a ticket."
  },
  {
    "title": "Composition | Radix Vue",
    "url": "https://www.radix-vue.com/guides/composition",
    "html": "Composition\n​\nUse the `asChild` prop to compose Radix's functionality onto alternative element types or your own Vue components.\n\nAll Radix primitive parts that render a DOM element accept an asChild prop. When asChild is set to true, Radix Vue will not render a default DOM element, instead passing the props and behavior required to make it functional to the first child of the slots.\n\nChanging the element type\n​\n\nIn the majority of cases you shouldn’t need to modify the element type as Radix has been designed to provide the most appropriate defaults. However, there are cases where it is helpful to do so.\n\nA good example is with TooltipTrigger. By default this part is rendered as a button, though you may want to add a tooltip to a link (a tag) as well. Let's see how you can achieve this using asChild:\n\nvue\n<script setup lang=\"ts\">\nimport { TooltipRoot, TooltipTrigger, TooltipPortal } from \"radix-vue\";\n</script>\n\n<template>\n  <TooltipRoot>\n    <TooltipTrigger asChild>\n      <a href=\"https://www.radix-vue.com/\">Radix Vue</a>\n    </TooltipTrigger>\n    <TooltipPortal>…</TooltipPortal>\n  </TooltipRoot>\n</template>\n\nIf you do decide to change the underlying element type, it is your responsibility to ensure it remains accessible and functional. In the case of TooltipTrigger for example, it must be a focusable element that can respond to pointer and keyboard events. If you were to switch it to a div, it would no longer be accessible.\n\nIn reality, you will rarely modify the underlying DOM element like we've seen above. Instead it's more common to use your own Vue components. This is especially true for most Trigger parts, as you usually want to compose the functionality with the custom buttons and links in your design system.\n\nComposing with your own Vue components\n​\n\nThis works exactly the same as above, you pass asChild to the part and then wrap your own component with it. However, there are a few gotchas to be aware of.\n\nComposing multiple primitives\n​\n\nasChild can be used as deeply as you need to. This means it is a great way to compose multiple primitive's behavior together. Here is an example of how you can compose TooltipTrigger and DialogTrigger together with your own button:\n\nvue\n<script setup lang=\"ts\">\nimport { TooltipRoot, TooltipTrigger, TooltipPortal, DialogRoot, DialogTrigger, DialogPortal } from \"radix-vue\";\nimport MyButton from from \"@/components/MyButton.vue\"\n</script>\n\n<template>\n  <DialogRoot>\n    <TooltipRoot>\n      <TooltipTrigger asChild>\n        <DialogTrigger asChild>\n          <MyButton>Open dialog</MyButton>\n        </DialogTrigger>\n      </TooltipTrigger>\n      <TooltipPortal>…</TooltipPortal>\n    </TooltipRoot>\n\n    <DialogPortal>...</DialogPortal>\n  </DialogRoot>\n</template>"
  },
  {
    "title": "Animation/Transition | Radix Vue",
    "url": "https://www.radix-vue.com/guides/animation",
    "html": "Animation\n​\nAnimate Radix Primitives with CSS keyframes, native Vue Transition or JavaScript animation library of your choice.\n\nAdding animation to Radix Primitives should feel similar to any other component, but there are some caveats noted here in regards to exiting animations with JS animation libraries.\n\nAnimating with CSS animation\n​\n\nThe simplest way to animate Primitives is with CSS.\n\nYou can use CSS animation to animate both mount and unmount phases. The latter is possible because the Radix Primitives will suspend unmount while your animation plays out.\n\ncss\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n\n.DialogOverlay[data-state=\"open\"],\n.DialogContent[data-state=\"open\"] {\n  animation: fadeIn 300ms ease-out;\n}\n\n.DialogOverlay[data-state=\"closed\"],\n.DialogContent[data-state=\"closed\"] {\n  animation: fadeOut 300ms ease-in;\n}\nAnimating with Vue Transition\n​\n\nOther than using CSS animation, you might prefer to use the native Vue <Transition>. Great news! It should be as easy as wrapping component (that has forceMount prop), and you are done!\n\nvue\n<script setup lang=\"ts\">\nimport { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'radix-vue'\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal>\n      <Transition name=\"fade\">\n        <DialogOverlay />\n      </Transition>\n      <Transition name=\"fade\">\n        <DialogContent>\n          <h1>Hello from inside the Dialog!</h1>\n          <DialogClose>Close</DialogClose>\n        </DialogContent>\n      </Transition>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n\n<style>\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n\nTIP\n\nFuthemore, we discovered that Motion One, a Web Animations API based animation library works perfectly with Radix Vue.\n\nCheck out this Stackblitz Demo 🤩\n\nDelegating unmounting for JavaScript Animation\n​\n\nWhen many stateful Primitives are hidden from view, they are actually removed from the DOM. JavaScript animation libraries need control of the unmounting phase, so we provide the forceMount prop on many components to allow consumers to delegate the mounting and unmounting of children based on the animation state determined by those libraries.\n\nFor example, if you want to use @vueuse/motion to animate a Dialog, you would do so by conditionally rendering the dialog Overlay and Content parts based on the animation state from one of its composable like useSpring:\n\nvue\n<script setup lang=\"ts\">\nimport { DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogRoot, DialogTitle, DialogTrigger, } from 'radix-vue'\nimport { reactive, ref, watch } from 'vue'\nimport { useSpring } from '@vueuse/motion'\n\nconst stages = {\n  initial: { opacity: 0, scale: 0, top: 0, },\n  enter: { opacity: 1, scale: 1, top: 50, },\n  leave: { opacity: 0, scale: 0.6, top: 30, },\n}\n\nconst styles = reactive(stages.initial)\nconst { set } = useSpring(styles, {\n  damping: 8,\n  stiffness: 200,\n})\n\nconst open = ref(false)\nwatch(open, () => {\n  if (open.value)\n    set(stages.enter)\n  else\n    set(stages.leave)\n})\n</script>\n\n<template>\n  <DialogRoot v-model:open=\"open\">\n    <DialogTrigger>\n      Edit profile\n    </DialogTrigger>\n    <DialogPortal v-if=\"styles.opacity !== 0\">\n      <DialogOverlay\n        force-mount\n        :style=\"{\n          opacity: styles.opacity,\n          transform: `scale(${styles.scale})`,\n        }\"\n      />\n      <DialogContent\n        force-mount\n        :style=\"{\n          opacity: styles.opacity,\n          top: `${styles.top}%`,\n        }\"\n      >\n        <h1>Hello from inside the Dialog!</h1>\n        <DialogClose>Close</DialogClose>\n      </DialogContent>\n    </DialogPortal>\n  </DialogRoot>\n</template>\n\nTIP\n\nCheck out this Stackblitz Demo"
  },
  {
    "title": "Styling | Radix Vue",
    "url": "https://www.radix-vue.com/guides/styling",
    "html": "Styling\n​\nRadix Primitives are unstyled and compatible with any styling solution giving you complete control over styling.\nStyling overview\n​\nFunctional styles\n​\n\nYou are in control of all aspects of styling, including functional styles. For example, by default, a Dialog Overlay won't cover the entire viewport. You're responsible for adding those styles, plus any presentation styles.\n\nClasses\n​\n\nAll components accept class attributes, just like normal component. This class will be passed through to the DOM element. You can use it in CSS as expected.\n\nData attributes\n​\n\nWhen components are stateful, their state will be exposed in a data-state attribute. For example, when an Accordion Item is opened, it includes a data-state=\"open\" attribute.\n\nStyling with CSS\n​\nStyling a part\n​\n\nYou can style a component part by targeting the class that you provide.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"radix-vue\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem class=\"AccordionItem\" value=\"item-1\" />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\n\n<style>\n.AccordionItem {\n  /* ... */\n}\n</style>\nStyling a state\n​\n\nYou can style a component state by targeting its data-state attribute.\n\ncss\n.AccordionItem {\n  border-bottom: 1px solid gainsboro;\n}\n\n.AccordionItem[data-state=\"open\"] {\n  border-bottom-width: 2px;\n}\nStyling with Tailwind CSS\n​\n\nThe examples below are using Tailwind CSS, but you can use any library of your choice.\n\nStyling a part\n​\n\nYou can style a component part by targeting the class.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"radix-vue\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem class=\"border border-gray-400 rounded-2xl\" value=\"item-1\" />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\nStyling a state\n​\n\nWith Tailwind CSS's powerful variant selector, you can style a component state by targeting its data-state attribute.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionRoot, AccordionItem, ... } from \"radix-vue\";\n</script>\n\n<template>\n  <AccordionRoot>\n    <AccordionItem\n      class=\"\n        border border-gray-400 rounded-2xl\n        data-[state=open]:border-b-2 data-[state=open]:border-gray-800\n      \"\n      value=\"item-1\"\n    />\n    <!-- ... -->\n  </AccordionRoot>\n</template>\nExtending a primitive\n​\n\nExtending a primitive is done the same way you extend any Vue component.\n\nvue\n<script setup lang=\"ts\">\nimport { AccordionItem, type AccordionItemProps } from \"radix-vue\";\n\ninterface Props extends AccordionItemProps {\n  foo: string;\n}\n\ndefineProps<Props>();\n</script>\n\n<template>\n  <AccordionItem v-bind=\"$props\"><slot /></AccordionItem>\n</template>\nSummary\n​\n\nRadix Primitives were designed to encapsulate accessibility concerns and other complex functionalities, while ensuring you retain complete control over styling.\n\nFor convenience, stateful components include a data-state attribute.\n\nINFO\n\nSource: Radix UI"
  },
  {
    "title": "Releases | Radix Vue",
    "url": "https://www.radix-vue.com/overview/releases",
    "html": "Releases\n​\nDiscover the latest release of Radix Vue.\n\nLatest releases on github"
  },
  {
    "title": "Accessibility | Radix Vue",
    "url": "https://www.radix-vue.com/overview/accessibility",
    "html": "Accessibility\n​\nRadix Primitives follow the WAI-ARIA authoring practices guidelines and are tested in a wide selection of modern browsers and commonly used assistive technologies.\n\nWe take care of many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation. That means that users should be able to use our components as-is in most contexts and rely on functionality to follow the expected accessibility design patterns.\n\nWAI-ARIA\n​\n\nWAI-ARIA, published and maintained by the W3C, specifies the semantics for many common UI patterns that show up in Radix Primitives. This is designed to provide meaning for controls that aren't built using elements provided by the browser. For example, if you use a div instead of a button element to create a button, there are attributes you need to add to the div in order to convey that it's a button for screen readers or voice recognition tools.\n\nIn addition to semantics, there are behaviors that are expected from different types of components. A button element is going to respond to certain interactions in ways that a div will not, so it's up to the developer to reimplement those interactions with JavaScript. The WAI-ARIA authoring practices provide additional guidance for implementing behaviors for various controls that come with Radix Primitives.\n\nAccessible Labels\n​\n\nWith many built-in form controls, the native HTML label element is designed to provide semantic meaning and context for corresponding input elements. For non-form control elements, or for custom controls like those provided by Radix Primitives, WAI-ARIA provides a specification for how to provide accessible names and descriptions to those contols.\n\nWhere possible, Radix Primitives include abstractions to make labelling our controls simple. The Label primitive is designed to work with many of our controls. Ultimately it's up to you to provide those labels so that users have the proper context when navigating your application.\n\nKeyboard Navigation\n​\n\nMany complex components, like Tabs and Dialog, come with expectations from users on how to interact with their content using a keyboard or other non-mouse input modalities. Radix Primitives provide basic keyboard support in accordance with the WAI-ARIA authoring practices.\n\nFocus Management\n​\n\nProper keyboard navigation and good labelling often go hand-in-hand with managing focus. When a user interacts with an element and something changes as a result, it's often helpful to move focus with the interaction so that the next tab stop is logical depending on the new context of the app. And for screen reader users, moving focus often results in an announcement to convey this new context, which relies on proper labelling.\n\nIn many Radix Primitives, we move focus based on the interactions a user normally takes in a given component. For example, in AlertDialog, when the modal is opened, focus is programatically moved to a Cancel button element to anticipate a response to the prompt.\n\nINFO\n\nSource: Radix UI"
  },
  {
    "title": "Installation | Radix Vue",
    "url": "https://www.radix-vue.com/overview/installation",
    "html": "Installation\n​\n\nA quick tutorial to walk through installing the packages, as well as the supported plugins.\n\nInstalling the package\n​\n\nbash\npnpm add radix-vue\n# yarn add radix-vue\n# npm i radix-vue\nNuxt modules\n​\n\nRadix Vue offers Nuxt modules support.\n\nIn nuxt.config.ts, simply add radix-vue/nuxt into the modules, and it will auto-imports all the components for you.\n\nts\nexport default defineNuxtConfig({\n  modules: ['radix-vue/nuxt'],\n})\nunplugin-vue-components\n​\n\nRadix Vue also has resolver for the popular unplugin-vue-components.\n\nIn vite.config.ts, import radix-vue/resolver, and configure as such and it will auto-imports all the components from Radix Vue.\n\nts\nimport Component from 'unplugin-vue-components/vite'\nimport RadixVueResolver from 'radix-vue/resolver'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    Component({\n      dts: true,\n      resolvers: [\n        RadixVueResolver()\n\n        // RadixVueResolver({\n        //   prefix: '' // use the prefix option to add Prefix to the imported components\n        // })\n      ],\n    }),\n  ],\n})"
  },
  {
    "title": "Getting started | Radix Vue",
    "url": "https://www.radix-vue.com/overview/getting-started",
    "html": "Getting started\n​\nA quick tutorial to get you up and running with Radix Primitives.\nImplementing a Popover\n​\n\nIn this quick tutorial, we will install and style the Popover component.\n\n1. Install the library\n​\n\nInstall the component from your command line.\n\nbash\nnpm install radix-vue\n2. Import the parts\n​\n\nImport and structure the parts.\n\nvue\n<!-- Popover.vue -->\n<script setup lang=\"ts\">\nimport { PopoverArrow, PopoverClose, PopoverContent, PopoverPortal, PopoverRoot, PopoverTrigger } from 'radix-vue'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger>More info</PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent>\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n3. Add your styles\n​\n\nAdd styles where desired.\n\nvue\n<template>\n  <PopoverRoot>\n    <PopoverTrigger class=\"PopoverTrigger\">\n      More info\n    </PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow class=\"PopoverArrow\" />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\n\n<style>\n.PopoverTrigger {\n  background-color: white;\n  border-radius: 4px;\n}\n\n.PopoverContent {\n  border-radius: 4px;\n  padding: 20px;\n  width: 260px;\n  background-color: white;\n}\n\n.PopoverArrow {\n  background-color: white;\n}\n</style>\nDemo\n​\n\nHere's a complete demo.\n\nMore info\nindex.vue\nstyles.css\nTailwind CSS\nvue\n<script setup lang=\"ts\">\nimport {\n  PopoverArrow,\n  PopoverClose,\n  PopoverContent,\n  PopoverPortal,\n  PopoverRoot,\n  PopoverTrigger,\n} from 'radix-vue'\nimport './styles.css'\n</script>\n\n<template>\n  <PopoverRoot>\n    <PopoverTrigger class=\"PopoverTrigger\">\n      More info\n    </PopoverTrigger>\n    <PopoverPortal>\n      <PopoverContent class=\"PopoverContent\">\n        Some more info...\n        <PopoverClose />\n        <PopoverArrow class=\"PopoverArrow\" />\n      </PopoverContent>\n    </PopoverPortal>\n  </PopoverRoot>\n</template>\nExpand code\nSummary\n​\n\nThe steps above outline briefly what's involved in using a Radix Primitive in your application.\n\nThese components are low-level enough to give you control over how you want to wrap them. You're free to introduce your own high-level API to better suit the needs of your team and product.\n\nIn a few simple steps, we've implemented a fully accessible Popover component, without having to worry about many of its complexities.\n\nAdheres to WAI-ARIA design pattern.\nCan be controlled or uncontrolled.\nCustomize side, alignment, offsets, collision handling.\nOptionally render a pointing arrow.\nFocus is fully managed and customizable.\nDismissing and layering behavior is highly customizable."
  },
  {
    "title": "Introduction | Radix Vue",
    "url": "https://www.radix-vue.com/overview/introduction#VPContent",
    "html": "Introduction\n​\nAn open-source UI component library for building high-quality, accessible design systems and web apps using Vue.js.\n\nTIP\n\nRadix Vue is an unofficial community-led Vue port of Radix UI, thus we share the same principal and vision when building primitives.\n\nRadix Primitives is a low-level UI component library with a focus on accessibility, customization and developer experience. You can use these components either as the base layer of your design system, or adopt them incrementally.\n\nVision\n​\n\nMost of us share similar definitions for common UI patterns like accordion, checkbox, combobox, dialog, dropdown, select, slider, and tooltip. These UI patterns are documented by WAI-ARIA and generally understood by the community.\n\nHowever, the implementations provided to us by the web platform are inadequate. They're either non-existent, lacking in functionality, or cannot be customized sufficiently.\n\nSo, developers are forced to build custom components; an incredibly difficult task. As a result, most components on the web are inaccessible, non-performant, and lacking important features.\n\nOur goal is to create a well-funded, open-source component library that the community can use to build accessible design systems.\n\nKey Features\n​\nAccessible\n​\n\nComponents adhere to the WAI-ARIA design patterns where possible. We handle many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation. Learn more in our accessibility overview.\n\nUnstyled\n​\n\nComponents ship with zero styles, giving you complete control over styling. Components can be styled with any styling solution (vanilla CSS, CSS preprocessors, CSS-in-JS libraries). Learn more in our styling guide.\n\nOpened\n​\n\nRadix Primitives are designed to be customized to suit your needs. Our open component architecture provides you granular access to each component part, so you can wrap them and add your own event listeners, props, or refs.\n\nUncontrolled\n​\n\nWhere applicable, components are uncontrolled by default but can also be controlled, alternatively. All of the behavior wiring is handled internally, so you can get up and running as smoothly as possible, without needing to create any local states.\n\nDeveloper experience\n​\n\nOne of our main goals is to provide the best possible developer experience. Radix Primitives provides a fully-typed API. All components share a similar API, creating a consistent and predictable experience. We've also implemented an asChild prop (It's not a problem for Vue), giving users full control over the rendered element.\n\nTree-shaking friendly\n​\n\nWe compile all primitives into one package, so you just have to install once, and have access to all the primitives. Worry not, it is tree-shaking friendly so any unused primitives will not be included in the bundle.\n\nbash\nnpm install radix-vue\nCommunity\n​\nDiscord\n​\n\nTo get involved with the Radix community, ask questions, and share tips, join our Discord.\n\nJoin our Discord\n\nTwitter\n​\n\nTo receive updates on new primitives, announcements, blog posts, and general Radix tips, follow along on Twitter.\n\nFollow Radix on Twitter\n\nGitHub\n​\n\nTo file issues, request features, and contribute, check out our GitHub.\n\nGitHub repo\n\nCode of conduct"
  },
  {
    "title": "Introduction | Radix Vue",
    "url": "https://www.radix-vue.com/overview/introduction",
    "html": "Introduction\n​\nAn open-source UI component library for building high-quality, accessible design systems and web apps using Vue.js.\n\nTIP\n\nRadix Vue is an unofficial community-led Vue port of Radix UI, thus we share the same principal and vision when building primitives.\n\nRadix Primitives is a low-level UI component library with a focus on accessibility, customization and developer experience. You can use these components either as the base layer of your design system, or adopt them incrementally.\n\nVision\n​\n\nMost of us share similar definitions for common UI patterns like accordion, checkbox, combobox, dialog, dropdown, select, slider, and tooltip. These UI patterns are documented by WAI-ARIA and generally understood by the community.\n\nHowever, the implementations provided to us by the web platform are inadequate. They're either non-existent, lacking in functionality, or cannot be customized sufficiently.\n\nSo, developers are forced to build custom components; an incredibly difficult task. As a result, most components on the web are inaccessible, non-performant, and lacking important features.\n\nOur goal is to create a well-funded, open-source component library that the community can use to build accessible design systems.\n\nKey Features\n​\nAccessible\n​\n\nComponents adhere to the WAI-ARIA design patterns where possible. We handle many of the difficult implementation details related to accessibility, including aria and role attributes, focus management, and keyboard navigation. Learn more in our accessibility overview.\n\nUnstyled\n​\n\nComponents ship with zero styles, giving you complete control over styling. Components can be styled with any styling solution (vanilla CSS, CSS preprocessors, CSS-in-JS libraries). Learn more in our styling guide.\n\nOpened\n​\n\nRadix Primitives are designed to be customized to suit your needs. Our open component architecture provides you granular access to each component part, so you can wrap them and add your own event listeners, props, or refs.\n\nUncontrolled\n​\n\nWhere applicable, components are uncontrolled by default but can also be controlled, alternatively. All of the behavior wiring is handled internally, so you can get up and running as smoothly as possible, without needing to create any local states.\n\nDeveloper experience\n​\n\nOne of our main goals is to provide the best possible developer experience. Radix Primitives provides a fully-typed API. All components share a similar API, creating a consistent and predictable experience. We've also implemented an asChild prop (It's not a problem for Vue), giving users full control over the rendered element.\n\nTree-shaking friendly\n​\n\nWe compile all primitives into one package, so you just have to install once, and have access to all the primitives. Worry not, it is tree-shaking friendly so any unused primitives will not be included in the bundle.\n\nbash\nnpm install radix-vue\nCommunity\n​\nDiscord\n​\n\nTo get involved with the Radix community, ask questions, and share tips, join our Discord.\n\nJoin our Discord\n\nTwitter\n​\n\nTo receive updates on new primitives, announcements, blog posts, and general Radix tips, follow along on Twitter.\n\nFollow Radix on Twitter\n\nGitHub\n​\n\nTo file issues, request features, and contribute, check out our GitHub.\n\nGitHub repo\n\nCode of conduct"
  }
]
