[
  {
    "title": "Editor Support | Slidev",
    "url": "https://sli.dev/guide/editors.html#integrated-editor",
    "html": "Editor Support\n#\n\nSince Slidev is using Markdown as the source entry, you can use ANY editors you love to write it.\n\nIf you want some high-level management to your slides, we have provided the following editor integrations for you!\n\nIntegrated Editor\n#\n\nSlidev comes with an integrated CodeMirror editor that will instantly reload and save the changes to your file.\n\nClick the  button to open it.\n\nVS Code Extension\n#\n\n\n Â  \n\nThe VS Code extension provides some features to help you better organize your slides and have a quick overview of them.\n\nFeatures\n#\nView slides in the side panel\nGo to next / prev buttons\nRe-ordering slides\nFolding for slide blocks\nConvert Markdown to HTML"
  },
  {
    "title": "FAQ | Slidev",
    "url": "https://sli.dev/guide/faq.html#grids",
    "html": "FAQ\n#\nGrids\n#\n\nSince Slidev is based on the Web, you can apply any grid layouts as you want. CSS Grids, flexboxes, or even Masonry, you get the full controls.\n\nSince we have UnoCSS built-in, here is one simple way for you to reference:\n\n<div class=\"grid grid-cols-2 gap-4\">\n<div>\n\nThe first column\n\n</div>\n<div>\n\nThe second column\n\n</div>\n</div>\n\n\nGo further, you can customize the size of each column like:\n\n<div class=\"grid grid-cols-[200px_1fr_10%] gap-4\">\n<div>\n\nThe first column (200px)\n\n</div>\n<div>\n\nThe second column (auto fit)\n\n</div>\n<div>\n\nThe third column (10% width to parent container)\n\n</div>\n</div>\n\n\nLearn more about Windi CSS Grids.\n\nPositioning\n#\n\nSlides are defined in fixed sizes (default 980x552px) and scale to fit with the user screen. You can safely use absolute position in your slides as they will scale along with the screen.\n\nFor example:\n\n<div class=\"absolute left-30px bottom-30px\">\nThis is a left-bottom aligned footer\n</div>\n\n\nTo change the canvas' actual size, you can pass the canvasWidth options in your first frontmatter:\n\n---\ncanvasWidth: 800\n---\n\nFont Size\n#\n\nIf you feel the font size in your slides are too small, you can adjust it in a few ways:\n\nOverride Local Style\n#\n\nYou can override styles for each slide with the inlined <style> tag.\n\n# Page 1\n\n<style>\nh1 {\n  font-size: 10em;\n}\n</style>\n\n---\n\n# Page 2\n\nThis will not be affected.\n\n\nLearn more: Embedded Styles\n\nOverride Global Style\n#\n\nYou can provide custom global styles by creating ./style.css, for example\n\n/* style.css */ \n\nh1 {\n  font-size: 10em !important;\n}\n\n\nLearn more: Global Style\n\nScale the Canvas\n#\n\nChanging the canvas' actual size will scale all your contents(text, images, components, etc.) and slides\n\n---\n# default: 980\n# since the canvas gets smaller, the visual size will become larger\ncanvasWidth: 800\n---\n\nUse Transform\n#\n\nWe provide a built-in component <Transform />, which is a thin wrapper of CSS transform property.\n\n<Transform :scale=\"1.4\">\n\n- Item 1\n- Item 2\n\n</Transform>\n"
  },
  {
    "title": "Drawing & Annotations | Slidev",
    "url": "https://sli.dev/guide/drawing.html#use-with-stylus-pen",
    "html": "Drawing & Annotations\n#\n\nAvailable since v0.23\n\nWe have drauu built-in for drawing and annotation that could enhance your presentation further.\n\nTo start, click the  icon in the toolbar and start drawing. It's also available in the Presenter Mode. Drawings and annotations you created will be synced up automatically across all instances in real-time.\n\nUse with Stylus Pen\n#\n\nWhen using a stylus pen on a tablet (for example, iPad with Apple Pencil), Slidev could smartly detect the input type. You can directly draw on your slides with the pen without turning on the drawing mode, while having your fingers or mouse control the navigation.\n\nPersist Drawings\n#\n\nThe following frontmatter configuration allows you to persist your drawings as SVGs under .slidev/drawings directory and have them inside your exported pdf or hosted site.\n\n---\ndrawings: \n  persist: true\n---\n\nDisable Drawings\n#\n\nEntirely:\n\n---\ndrawings: \n  enabled: false\n---\n\n\nOnly in Development:\n\n---\ndrawings: \n  enabled: dev\n---\n\n\nOnly in Presenter Mode:\n\n---\ndrawings: \n  presenterOnly: true\n---\n\nDrawing Syncing\n#\n\nBy default, Slidev syncs up your drawings across all instances. If you are sharing your slides with others, you might want to disable the syncing by:\n\n---\ndrawings: \n  syncAll: false\n---\n\n\nWith this config, only the drawing from the presenter instance will be able to sync with others."
  },
  {
    "title": "Presenter Mode | Slidev",
    "url": "https://sli.dev/guide/presenter-mode.html#disabling",
    "html": "Presenter Mode\n#\n\nClick the  button in the navigation panel, or visit http://localhost:3030/presenter manually, to enter the presenter mode. Whenever you enter the presenter mode, other page instances will automatically stay in sync with the presenter.\n\nDisabling\n#\n\nPresenter mode is enabled by default.\n\nYou can disable this feature with the following config:\n\n---\npresenter: false\n---\n\n\nOr you can enable it only for dev or build mode by setting the mode you want in the config:\n\n---\npresenter: dev\n---\n\n\nIn that case the presenter will only be available when running slidev but not when running slidev build.\n\nRemote restricted access\n#\n\nYou can run your presentation with remote access by running slidev --remote.\n\nIn that case you may want to share the slides with other people but you don't want them to access the presenter mode to mess up your presentation.\n\nFor this scenario you can provide a password for starting the server by running slidev --remote=your_password.\n\nIn that case you will need to provide the password when accessing /presenter/* routes."
  },
  {
    "title": "Recording | Slidev",
    "url": "https://sli.dev/guide/recording.html#camera-view",
    "html": "Recording\n#\n\nSlidev has a built-in recording and camera view. You can use them to record your presentation easily in one place.\n\nCamera View\n#\n\nClick the  button in the navigation panel to show your camera view in the presentation. You can drag to move it, and use the handler on the right bottom corner to resize it. The size and position will persist in localStorage and will therefore be consistent across multiple refreshes, so no need to worry about that.\n\nRecording\n#\n\nClicking the  button in the navigation panel will bring up a dialog for you. Here you can choose to either record your camera embedded in your slides or to separate them into two video files.\n\nThis feature is powered by RecordRTC and uses the WebRTC API."
  },
  {
    "title": "Static Hosting | Slidev",
    "url": "https://sli.dev/guide/hosting.html#build-single-page-applications-spa",
    "html": "Static Hosting\n#\nBuild Single Page Applications (SPA)\n#\n\nYou can also build the slides into a self-hostable SPA:\n\n$ slidev build\n\n\nThe generated application will be available under dist/.\n\nYou can test the generated build using a web server (Apache, NGINX, Caddy...etc.) or in the project you can directly run: npx vite preview.\n\nThen you can host it on GitHub Pages, Netlify, Vercel, or whatever you want. Now you can share your slides with the rest of the world with a single link.\n\nBase Path\n#\n\nTo deploy your slides under sub-routes, you will need to pass the --base option. The --base path must begin and end with a slash /; for example:\n\n$ slidev build --base /talks/my-cool-talk/\n\n\nRefer to Vite's documentation for more details.\n\nProvide Downloadable PDF\n#\n\nYou can provide a downloadable PDF to the viewers of your SPA with the following config:\n\n---\ndownload: true\n---\n\n\nSlidev will generate a PDF file along with the build, and a download button will be displayed in the SPA.\n\nYou can also provide a custom URL for the PDF. In that case, the rendering process will be skipped.\n\n---\ndownload: 'https://myside.com/my-talk.pdf'\n---\n\n\nThis can also be done with the CLI option --download (boolean only).\n\n$ slidev build --download\n\n\nWhen using the download option, you can also provide the export options:\n\nBy using CLI export options\nOr frontmatter export options\nOutput directory\n#\n\nYou can change the output directory using --out.\n\n$ slidev build --out my-build-folder\n\nWatch mode\n#\n\nBy passing the --watch option the build will run in watch mode and will rebuild anytime the source changes.\n\n$ slidev build --watch\n\nMultiple entries\n#\n\nYou can also build multiple slides at once.\n\n$ slidev build slides1.md slides1.md\n\n\nOr\n\n$ slidev build *.md\n\n\nIn this case, each input file will generate a folder containing the build in the output directory.\n\nExamples\n#\n\nHere are a few examples of the exported SPA:\n\nStarter Template\nComposable Vue by Anthony Fu\n\nFor more, check out Showcases.\n\nHosting\n#\n\nWe recommend to use npm init slidev@latest to scaffold your project, which contains the necessary configuration files for hosting services out-of-the-box.\n\nNetlify\n#\nNetlify\n\nCreate netlify.toml in your project root with the following content.\n\n[build.environment]\n  NODE_VERSION = \"14\"\n\n[build]\n  publish = \"dist\"\n  command = \"npm run build\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n\nThen go to your Netlify dashboard and create a new site with the repository.\n\nVercel\n#\nVercel\n\nCreate vercel.json in your project root with the following content.\n\n{\n  \"rewrites\": [\n    { \"source\": \"/(.*)\", \"destination\": \"/index.html\" }\n  ]\n}\n\n\nThen go to your Vercel dashboard and create a new site with the repository.\n\nGitHub Pages\n#\nGitHub Pages\n\nTo deploy your slides on GitHub Pages:\n\nupload all the files of the project in your repo (i.e. named name_of_repo)\ncreate .github/workflows/deploy.yml with following content to deploy your slides to GitHub Pages via GitHub Actions. In this file, replace <name_of_repo> with name_of_repo. Make sure to leave the leading and trailing slashes in place.\nname: Deploy pages\n\non:\n  workflow_dispatch: {}\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n      pages: write\n      id-token: write\n\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 'lts/*'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build\n        run: npm run build -- --base /<name_of_repo>/\n\n      - uses: actions/configure-pages@v3\n\n      - uses: actions/upload-pages-artifact@v1\n        with:\n          path: dist\n\n      - name: Deploy\n        id: deployment\n        uses: actions/deploy-pages@v2\n\nIn your repository, go to Settings>Pages. Under \"Build and deployment\", select \"Github Actions\".\nFinally, after all workflows are executed, a link to the slides should appear under Settings>Pages."
  },
  {
    "title": "Exporting | Slidev",
    "url": "https://sli.dev/guide/exporting.html#slides",
    "html": "Exporting\n#\nSlides\n#\nPDF\n#\n\nExporting to PDF or PNG relies on Playwright for rendering. You will therefore need to install playwright-chromium to use this feature. If you are doing exporting in a CI environment, the playwright CI guide can be helpful.\n\nInstall playwright-chromium\n\n$ npm i -D playwright-chromium\n\n\nNow export your slides to PDF using the following command\n\n$ slidev export\n\n\nAfter a few seconds, your slides will be ready at ./slides-export.pdf.\n\nPNGs and Markdown\n#\n\nWhen passing in the --format png option, Slidev will export PNG images for each slide instead of a PDF.\n\n$ slidev export --format png\n\n\nYou can also compile a markdown file composed of compiled png using --format md.\n\n$ slidev export --format md\n\nDark mode\n#\n\nIn case you want to export your slides using the dark version of the theme, use the --dark option:\n\n$ slidev export --dark\n\nExport Clicks Steps\n#\n\nAvailable since v0.21\n\nBy default, Slidev exports one page per slide with clicks animations disabled. If you want export slides with multiple steps into multiple pages, pass the --with-clicks option.\n\n$ slidev export --with-clicks\n\nSlide range\n#\n\nYou can also specify a range of slides to export with the --range option.\n\n$ slidev export --range 1,4-5,6\n\nPDF outline\n#\n\nAvailable since v0.36.10\n\nYou can generate the PDF outline by passing the --with-toc option.\n\n$ slidev export --with-toc\n\nOutput filename\n#\n\nYou can specify the output filename with the --output option.\n\n$ slidev export --output my-pdf-export\n\n\nOr in the frontmatter configuration:\n\n---\nexportFilename: my-pdf-export\n---\n\nExport a range of slides\n#\n\nBy default, all slides in the presentation are exported. If you want to export a specific slide or a range of slides you can set the --range option and specify which slides you would like to export.\n\n$ slidev export --range 1,6-8,10\n\n\nThis option accepts both specific slide numbers and ranges.\n\nThe example above would export slides 1,6,7,8, and 10.\n\nMultiple entries\n#\n\nYou can also export multiple slides at once.\n\n$ slidev export slides1.md slides1.md\n\n\nOr\n\n$ slidev export *.md\n\n\nIn this case, each input file will generate its own PDf file.\n\nPresenter notes\n#\n\nAvailable since v0.36.8\n\nExport only the presenter notes (the last comment block for each slide) into a text document in PDF.\n\n$ slidev export-notes\n\n\nThis command also accept multiple entries like for the export command\n\nSingle-Page Application (SPA)\n#\n\nSee Static Hosting.\n\nTroubleshooting\n#\nTimeout\n#\n\nFor big presentation you might want to increase the playwrigth timeout with --timeout\n\n$ slidev export --timeout 60000\n\nExecutable path\n#\n\nYou can set the browser executable path for playwright using --executable-path\n\n$ slidev export --executable-path [path_to_chromium]\n"
  },
  {
    "title": "Navigation | Slidev",
    "url": "https://sli.dev/guide/navigation.html#navigation-bar",
    "html": "Navigation\n#\nNavigation Bar\n#\n\nMove your mouse to the bottom left corner of Slidev page to make the navigation bar appear.\n\nShortcuts\tButton\tDescription\nf\t \ttoggle fullscreen\nright / space\t\tnext animation or slide\nleft\t\tprevious animation or slide\nup\t-\tprevious slide\ndown\t-\tnext slide\no\t\ttoggle slides overview\nd\t \ttoggle dark mode\n-\t\ttoggle camera view\n-\t\trecording\n-\t\tenter presenter mode\n-\t\ttoggle integrated editor\n-\t\tdownload slides (only appear in SPA build)\n-\t\tshow information about the slides\n-\t\tshow settings menu\ng\t-\tshow goto...\n\n\nSlides Overview\n#\n\nBy pressing o or clicking the  button in the navigation bar, you can have the overview of your slides so you can jump between them easily."
  },
  {
    "title": "Why Slidev | Slidev",
    "url": "https://sli.dev/guide/why.html#slidev",
    "html": "Why Slidev\n#\n\nThere are a lot of feature-rich, general-purpose, WYSIWYG slides makers like Microsoft PowerPoint and Apple Keynote. They work pretty well for making nice slides with animations, charts, and many other things, while being very intuitive and easy to learn. So why bother making Slidev?\n\nSlidev aims to provide the flexibility and interactivity for developers to make their presentations even more interesting, expressive, and attractive by using the tools and technologies they are already familiar with.\n\nWhen working with WYSIWYG editors, it is easy to get distracted by the styling options. Slidev remedies that by separating the content and visuals. This allows you to focus on one thing at a time, while also being able to reuse the themes from the community. Slidev does not seek to replace other slide deck builders entirely. Rather, it focuses on catering to the developer community.\n\nSlidev\n#\n\nHere are a few of the coolest features of Slidev:\n\nMarkdown-based\n#\n\nSlidev uses an extended Markdown format to store and organize your slides in a single plain text file. This lets you focus on making the content. And since the content and styles are separated, this also made it possible to switch between different themes effortlessly.\n\nLearn more about Slidev's Markdown Syntax.\n\nThemable\n#\n\nThemes for Slidev can be shared and installed using npm packages. You then apply them with only one line of config.\n\nCheck out the theme gallery or learn how to write a theme.\n\nDeveloper Friendly\n#\n\nSlidev provides first-class support for code snippets for developers. It supports both Prism and Shiki to get pixel perfect syntax highlighting, while still being able to modify the code at any time. With Monaco editor built-in, it also empowers you to do live coding / demonstration in your presentation with autocompletion, type hovering, and even TypeScript type check support.\n\nLearn more about highlighters and Monaco configuration.\n\nFast\n#\n\nSlidev is powered by Vite, Vue 3 and UnoCSS, which give you the most wonderful authoring experience. Every change you made will reflect to your slides instantly.\n\nFind more about our tech stack.\n\nInteractive & Expressive\n#\n\nYou can write custom Vue components and use them directly inside your markdown file. You can also interact with them inside the presentation to express your idea in a more interesting and intuitive way.\n\nRecording Support\n#\n\nSlidev provides built-in recording and camera view. You can share your presentation with your camera view inside, or record and save them separately for your screen and camera. All with one go, no additional tools are needed.\n\nLearn more about recording here.\n\nPortable\n#\n\nExport your slides into PDF, PNGs, or even a hostable Single-page Application (SPA) with a single command, and share them anywhere.\n\nRead more about that in the exporting docs.\n\nHackable\n#\n\nBeing powered by web technologies, anything that can be done in a web app is also possible with Slidev. For example, WebGL, API requests, iframes, or even live sharing. It's up to your imagination!\n\nGive it a Try\n#\n\nPlaying around with Slidev will tell you more than a thousand words. You are just one command away:\n\n$ npm init slidev\n\n\nOr have a quick preview of it:"
  },
  {
    "title": "Animations | Slidev",
    "url": "https://sli.dev/guide/animations.html#click-animations",
    "html": "Animations\n#\nClick Animations\n#\nv-click\n#\n\nTo apply \"click animations\" for elements, you can use the v-click directive or <v-click> components\n\n# Hello\n\n<!-- Component usage: this will be invisible until you press \"next\" -->\n<v-click>\n\nHello World\n\n</v-click>\n\n<!-- Directive usage: this will be invisible until you press \"next\" the second time -->\n<div v-click class=\"text-xl p-2\">\n\nHey!\n\n</div>\n\nv-after\n#\n\nThe usage of v-after is similar to v-click but it will turn the element visible when the previous v-click is triggered.\n\n<div v-click>Hello</div>\n<div v-after>World</div>\n\n\nWhen you click the \"next\" button, both Hello and World will show up together.\n\nv-click-hide\n#\n\nSame as v-click but instead of making the element appear, it makes the element invisible after clicking.\n\n<div v-click-hide>Hello</div>\n\nv-clicks\n#\n\nv-clicks is only provided as a component. It's a shorthand to apply the v-click directive to all its child elements. It is especially useful when working with lists.\n\n<v-clicks>\n\n- Item 1\n- Item 2\n- Item 3\n- Item 4\n\n</v-clicks>\n\n\nAn item will become visible each time you click \"next\".\n\nIt accepts a depth props for nested list:\n\n<v-clicks depth=\"2\">\n\n- Item 1\n  - Item 1.1\n  - Item 1.2\n- Item 2\n  - Item 2.1\n  - Item 2.2\n\n</v-clicks>\n\nCustom Clicks Count\n#\n\nBy default, Slidev counts how many steps are needed before going to the next slide. You can override this setting by passing the clicks frontmatter option:\n\n---\n# 10 clicks in this slide, before going to the next\nclicks: 10\n---\n\nOrdering\n#\n\nPassing the click index to your directives, you can customize the order of the revealing\n\n<div v-click>1</div>\n<div v-click>2</div>\n<div v-click>3</div>\n\n<!-- the order is reversed -->\n<div v-click=\"3\">1</div>\n<div v-click=\"2\">2</div>\n<div v-click=\"1\">3</div>\n\n---\nclicks: 3\n---\n\n<!-- visible after 3 clicks -->\n<v-clicks at=\"3\">\n  <div>Hi</div>\n</v-clicks>\n\nEnter & Leave\n#\n\nAvailable since v0.43.0\n\nYou can also specify the enter and leave index for the v-click directive by passing an array. The end index is exclusive.\n\n<div v-click=\"[2, 4]\">This will be shown on the 2nd and 3rd clicks, and hide again after the 4th.</div>\n\nElement Transitions\n#\n\nWhen you apply the v-click directive to your elements, it will attach the class name slidev-vclick-target to it. When the elements are hidden, the class name slidev-vclick-hidden will also be attached. For example:\n\n<div class=\"slidev-vclick-target slidev-vclick-hidden\">Text</div>\n\n\nAfter a click, it will become\n\n<div class=\"slidev-vclick-target\">Text</div>\n\n\nBy default, a subtle opacity transition is applied to those classes:\n\n// the default\n\n.slidev-vclick-target {\n  transition: opacity 100ms ease;\n}\n\n.slidev-vclick-hidden {\n  opacity: 0;\n  pointer-events: none;\n}\n\n\nYou can override them to customize the transition effects in your custom stylesheets.\n\nFor example, you can achieve the scaling up transitions by:\n\n// styles.css\n\n.slidev-vclick-target {\n  transition: all 500ms ease;\n}\n\n.slidev-vclick-hidden {\n  transform: scale(0);\n}\n\n\nTo specify animations for only certain slide or layout\n\n.slidev-page-7,\n.slidev-layout.my-custom-layout {\n  .slidev-vclick-target {\n    transition: all 500ms ease;\n  }\n\n  .slidev-vclick-hidden {\n    transform: scale(0);\n  }\n}\n\n\nLearn more about customizing styles.\n\nMotion\n#\n\nSlidev has @vueuse/motion built-in. You can use the v-motion directive to any elements to make apply motion on them. For example\n\n<div\n  v-motion\n  :initial=\"{ x: -80 }\"\n  :enter=\"{ x: 0 }\">\n  Slidev\n</div>\n\n\nThe text Slidev will move from -80px to its original position on initialization.\n\nNote: Slidev preloads the next slide for performance, which means the animations might start before you navigate to the page. To get it works properly, you can disable the preloading for the particular slide\n\n---\npreload: false\n---\n\n\nOr control the element life-cycle with v-if to have fine-grained controls\n\n<div\n  v-if=\"$slidev.nav.currentPage === 7\"\n  v-motion\n  :initial=\"{ x: -80 }\"\n  :enter=\"{ x: 0 }\">\n  Slidev\n</div>\n\n\nLearn mode: Demo | @vueuse/motion | v-motion | Presets\n\nSlide Transitions\n#\n\nAvailable since v0.39.0\n\nSlidev supports slide transitions out of the box. You can enable it by setting the transition frontmatter option:\n\n---\ntransition: slide-left\n---\n\n\nThis will give you a nice sliding effects on slide switching. Setting it in the frontmatter will apply to all slides. You can also set different transition per slide.\n\nBuiltin Transitions\n#\nfade - Crossfade in/out\nfade-out - Fade out and then fade in\nslide-left - Slides to the left (slide to right when going backward)\nslide-right - Slides to the right (slide to left when going backward)\nslide-up - Slides to the top (slide to bottom when going backward)\nslide-down - Slides to the bottom (slide to top when going backward)\nview-transition - Slides with the view transitions API\nView Transitions\n#\n\nAvailable since v0.43.0\n\nThe View Transitions API provides a mechanism for easily creating animated transitions between different DOM states. Learn more how it works in View Transitions API - MDN Web Docs - Mozilla.\n\nExperimental: This is not supported by all browsers. Check the Browser compatibility table carefully before using this.\n\nYou can use the view-transition-name CSS property to name view transitions, which creates connections between different page elements and smooth transitions when switching slides.\n\nYou can enable MDC (Markdown Component) Syntax support to conveniently name view-transitions:\n\n---\ntransition: view-transition\nmdc: true\n---\n# View Transition {.inline-block.view-transition-title}\n---\n# View Transition {.inline-block.view-transition-title}\n\nCustom Transitions\n#\n\nSlidev's slide transitions are powered by Vue Transition. You can provide your custom transitions by:\n\n---\ntransition: my-transition\n---\n\n\nand then in your custom stylesheets:\n\n.my-transition-enter-active,\n.my-transition-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.my-transition-enter-from,\n.my-transition-leave-to {\n  opacity: 0;\n}\n\n\nLearn more how it works in Vue Transition.\n\nForward & Backward Transitions\n#\n\nYou can specify different transitions for forward and backward navigation using | as a separator in the transition name:\n\n---\ntransition: go-forward | go-backward\n---\n\n\nWith this, when you go from slide 1 to slide 2, the go-forward transition will be applied. When you go from slide 2 to slide 1, the go-backward transition will be applied.\n\nAdvanced Usage\n#\n\nThe transition field accepts an option that will passed to the <TransitionGroup> component. For example:\n\n---\ntransition:\n  name: my-transition\n  enterFromClass: custom-enter-from\n  enterActiveClass: custom-enter-active\n---\n"
  },
  {
    "title": "Markdown Syntax | Slidev",
    "url": "https://sli.dev/guide/syntax.html#front-matter-layouts",
    "html": "Markdown Syntax\n#\n\nSlides are written within a single markdown file (by default ./slides.md).\n\nYou can use the Markdown features as you normally would, with the additional support of inlined HTML and Vue Components. Styling using UnoCSS is also supported. Use --- padded with a new line to separate your slides.\n\n# Slidev\n\nHello, World!\n\n---\n\n# Page 2\n\nDirectly use code blocks for highlighting\n\n//```ts\nconsole.log('Hello, World!')\n//```\n\n---\n\n# Page 3\n\nYou can directly use Windi CSS and Vue components to style and enrich your slides.\n\n<div class=\"p-3\">\n  <Tweet id=\"20\" />\n</div>\n\nFront Matter & Layouts\n#\n\nSpecify layouts and other metadata for each slide by converting the separators into front matter blocks. Each frontmatter starts with a triple-dash and ends with another. Texts between them are data objects in YAML format. For example:\n\n---\nlayout: cover\n---\n\n# Slidev\n\nThis is the cover page.\n\n---\nlayout: center\nbackground: './images/background-1.png'\nclass: 'text-white'\n---â\n\n# Page 2\n\nThis is a page with the layout `center` and a background image.\n\n---\n\n# Page 3\n\nThis is a default page without any additional metadata.\n\n\nRefer to customization for more details.\n\nThe custom syntax might not be compactible with some formatters like Prettier. To improve that, we also support using a direct yaml code block to define the frontmatter:\n\n---\nlayout: cover\n---\n\n# Slidev\n\nThis is the cover page.\n\n---\n\n```yaml\n# The first yaml block will be treated as the frontmatter of that slide\nlayout: center\nbackground: './images/background-1.png'\nclass: 'text-white'\n```\n\n# Page 2\n\nThis is a page with the layout `center` and a background image.\n\n\n(Available since v0.44.0)\n\nCode Blocks\n#\n\nOne big reason I am building Slidev is needing to make my code look just right in the slides. So just as you expected, you can use Markdown flavored code block to highlight your code.\n\n//```ts\nconsole.log('Hello, World!')\n//```\n\n\nWe support Prism and Shiki as syntax highlighters. Refer to the highlighters section for more details.\n\nLine Highlighting\n#\n\nTo highlight specific lines, simply add line numbers within bracket {}. Line numbers start counting from 1 by default.\n\n//```ts {2,3}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nYou can enable line number to all slides by setting lineNumbers: true on the config or enable each code block individually by setting lines:true. In case you want to disable the numbering for an specific block when lineNumbers: true you can set lines:false for that block:\n\n//```ts {2,3} {lines:true}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nYou can also set the starting line for each code block and highlight the lines accordingly, defaults to 1:\n\n//```ts {6,7} {lines:true, startLine:5}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nTo change the highlight in multiple steps, you can use | to separate them. For example\n\n//```ts {2-3|5|all}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nThis will first highlight a: Ref<number> | number and b: Ref<number> | number, and then return computed(() => unref(a) + unref(b)) after one click, and lastly, the whole block. Learn more in the clicks animations guide.\n\nYou can start the highlight at a specific click:\n\n//```ts {2-3|5|all} {at:0}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nThis is especially useful when you need to sync different animations (when using two-cols layout and list animation for instance).\n\nTo skip highlighting any lines, you can set the line number to 0. For example\n\n\n\n\n\n\n\n\n\n\n\n//```ts {0}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nIf the code doesn't fit into one slide, you can pass an extra maxHeight option which will set fixed height and enable scrolling\n\n\n\nÂ \n\n\n\n\n\n\n\n\n\n\n//```ts {2|3|7|12} {maxHeight:'100px'}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n/// ...as many lines as you want\nconst c = add(1, 2)\n//```\n\nMonaco Editor\n#\n\nWhenever you want to do some modification in the presentation, simply add {monaco} after the language id â it turns the block into a fully-featured Monaco editor!\n\n//```ts {monaco}\nconsole.log('HelloWorld')\n//```\n\n\nLearn more about configuring Monaco.\n\nMonaco diff\n#\n\nMonaco can also generate a diff between two code blocks. Use {monaco-diff} to turn the block into a diff Monaco editor and use ~~~ to separate both original and modified version of the code!\n\n//```ts {monaco-diff}\nThis line is removed on the right.\njust some text\nabcd\nefgh\nSome more text\n~~~\njust some text\nabcz\nzzzzefgh\nSome more text.\nThis line is removed on the left.\n//```\n\nEmbedded Styles\n#\n\nYou can use <style> tag in your Markdown directly to override styles for the current slide.\n\n# This is Red\n\n<style>\nh1 {\n  color: red\n}\n</style>\n\n---\n\n# Next slide is not affected\n\n\n<style> tag in Markdown is always scoped. As an outstanding result, a selector with the child combinator (.a > .b) is unusable as such; see the previous link. To have global style overrides, check out the customization section.\n\nPowered by UnoCSS, you can directly use nested css and directives (e.g. @apply)\n\n# Slidev\n\n> Hello `world`\n\n<style>\nblockquote {\n  code {\n    @apply text-teal-500 dark:text-teal-400;\n  }\n}\n</style>\n\nStatic Assets\n#\n\nJust like you would do in markdown, you can use images pointing to a remote or local url.\n\nFor remote assets, the built-in vite-plugin-remote-assets will cache them into the disk at the first run so you can have instant loading even for large images later on.\n\n![Remote Image](https://sli.dev/favicon.png)\n\n\nFor local assets, put them into the public folder and reference them with leading slash.\n\n![Local Image](/pic.png)\n\n\nFor you want to apply custom sizes or styles, you can convert them to the <img> tag\n\n<img src=\"/pic.png\" class=\"m-40 h-40 rounded shadow\" />\n\nNotes\n#\n\nYou can also take notes for each slide. They will show up in Presenter Mode for you to reference during presentations.\n\nIn Markdown, the last comment block in each slide will be treated as a note.\n\n---\nlayout: cover\n---\n\n# Page 1\n\nThis is the cover page.\n\n<!-- This is a note -->\n\n---\n\n# Page 2\n\n<!-- This is NOT a note because it precedes the content of the slide -->\n\nThe second page\n\n<!--\nThis is another note\n-->\n\nIcons\n#\n\nSlidev allows you to have the accessing to almost all the popular open-source iconsets directly in your markdown. Powered by unplugin-icons and Iconify.\n\nThe naming follows Iconify's conversion {collection-name}-{icon-name}. For example:\n\n<mdi-account-circle /> -  from Material Design Icons\n<carbon-badge /> -  from Carbon\n<uim-rocket /> -  from Unicons Monochrome\n<twemoji-cat-with-tears-of-joy /> -  from Twemoji\n<logos-vue /> -  from SVG Logos\nAnd much more...\n\nBrowse and search for all the icons available with IcÃ´nes.\n\nStyling Icons\n#\n\nYou can style the icons just like other HTML elements. For example:\n\n<uim-rocket />\n<uim-rocket class=\"text-3xl text-red-400 mx-2\" />\n<uim-rocket class=\"text-3xl text-orange-400 animate-ping\" />\n\nSlots\n#\n\nAvailable since v0.18\n\nSome layouts can provide multiple contributing points using Vue's named slots.\n\nFor example, in two-cols layout, you can have two columns left (default slot) and right (right slot) side by side.\n\n---\nlayout: two-cols\n---\n\n<template v-slot:default>\n\n# Left\n\nThis shows on the left\n\n</template>\n<template v-slot:right>\n\n# Right\n\nThis shows on the right\n\n</template>\n\nLeft\n\nThis shows on the left\n\nRight\n\nThis shows on the right\n\nWe also provide a shorthand syntax sugar ::name:: for slot name. The following example works exactly the same as the previous one.\n\n---\nlayout: two-cols\n---\n\n# Left\n\nThis shows on the left\n\n::right::\n\n# Right\n\nThis shows on the right\n\n\nYou can also explicitly specify the default slot and provide in the custom order\n\n---\nlayout: two-cols\n---\n\n::right::\n\n# Right\n\nThis shows on the right\n\n::default::\n\n# Left\n\nThis shows on the left\n\nConfigurations\n#\n\nAll configurations needed can be defined in the Markdown file. For example:\n\n---\ntheme: seriph\nlayout: cover\nbackground: 'https://source.unsplash.com/1600x900/?nature,water'\n---\n\n# Slidev\n\nThis is the cover page.\n\n\nLearn more about frontmatter configurations.\n\nLaTeX\n#\n\nSlidev comes with LaTeX support out-of-box, powered by KaTeX.\n\nInline\n#\n\nSurround your LaTeX with a single $ on each side for inline rendering.\n\n$\\sqrt{3x-1}+(1+x)^2$\n\nBlock\n#\n\nUse two ($$) for block rendering. This mode uses bigger symbols and centers the result.\n\n$$\n\\begin{array}{c}\n\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\n\\end{array}\n$$\n\n\nLearn more: Demo | KaTeX | markdown-it-katex\n\nLaTex line highlighting\n#\n\nAvailable since v0.43.1\n\nTo highlight specific lines, simply add line numbers within bracket {}. Line numbers start counting from 1 by default.\n\n$$ {1|3|all}\n\\begin{array}{c}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\\end{array}\n$$\n\nDiagrams\n#\n\nYou can also create diagrams / graphs from textual descriptions in your Markdown, powered by Mermaid.\n\nCode blocks marked as mermaid will be converted to diagrams, for example:\n\n//```mermaid\nsequenceDiagram\n  Alice->John: Hello John, how are you?\n  Note over Alice,John: A typical interaction\n//```\n\n\nYou can further pass an options object to it to specify the scaling and theming. The syntax of the object is a JavaScript object literal, you will need to add quotes (') for strings and use comma (,) between keys.\n\n//```mermaid {theme: 'neutral', scale: 0.8}\ngraph TD\nB[Text] --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n//```\n\n\nLearn more: Demo | Mermaid\n\nMultiple Entries\n#\n\nAvailable since v0.15\n\nYou can split your slides.md into multiple files and organize them as you want.\n\nslides.md :\n\n# Page 1\n\nThis is a normal page\n\n---\nsrc: ./subpage2.md\n---\n\n<!-- this page will be loaded from './subpage2.md' -->\nInline content will be ignored\n\n\nsubpage2.md :\n\n# Page 2\n\nThis page is from another file\n\nFrontmatter Merging\n#\n\nYou can provide frontmatters from both your main entry and external markdown pages. If there are the same keys in them, the ones from the main entry have the higher priority. For example\n\nslides.md :\n\n---\nsrc: ./cover.md\nbackground: https://sli.dev/bar.png\nclass: text-center\n---\n\n\ncover.md :\n\n---\nlayout: cover\nbackground: https://sli.dev/foo.png\n---\n\n# Cover\n\nCover Page\n\n\nThey will end up being equivalent of the following page:\n\n---\nlayout: cover\nbackground: https://sli.dev/bar.png\nclass: text-center\n---\n\n# Cover\n\nCover Page\n\nPage Reusing\n#\n\nWith the multi-entries support, reusing pages could be straightforward. For example:\n\n---\nsrc: ./cover.md\n---\n\n---\nsrc: ./intro.md\n---\n\n---\nsrc: ./content.md\n---\n\n---\n# reuse\nsrc: ./content.md\n---\n\nMDC Syntax\n#\n\nAvailable since v0.43.0\n\nSlidev has and experimental support for MDC (Markdown Components) Syntax powered by markdown-it-mdc.\n\nYou can enable it by add mdc: true to the frontmatter of your markdown file.\n\n---\nmdc: true\n---\n\nThis is a [red text]{style=\"color:red\"} :inline-component{prop=\"value\"}\n\n![](/image.png){width=500px lazy}\n\n::block-component{prop=\"value\"}\nThe **default** slot\n::\n\n\nLearn more about the syntax."
  },
  {
    "title": "Editor Support | Slidev",
    "url": "https://sli.dev/guide/editors.html",
    "html": "Editor Support\n#\n\nSince Slidev is using Markdown as the source entry, you can use ANY editors you love to write it.\n\nIf you want some high-level management to your slides, we have provided the following editor integrations for you!\n\nIntegrated Editor\n#\n\nSlidev comes with an integrated CodeMirror editor that will instantly reload and save the changes to your file.\n\nClick the  button to open it.\n\nVS Code Extension\n#\n\n\n Â  \n\nThe VS Code extension provides some features to help you better organize your slides and have a quick overview of them.\n\nFeatures\n#\nView slides in the side panel\nGo to next / prev buttons\nRe-ordering slides\nFolding for slide blocks\nConvert Markdown to HTML"
  },
  {
    "title": "Installation | Slidev",
    "url": "https://sli.dev/guide/install.html#starter-template",
    "html": "Installation\n#\nStarter Template\n#\n\nSlidev requires Node.js >=18.0\n\nThe best way to get started is using our official starter template.\n\nWith NPM:\n\n$ npm init slidev@latest\n\n\nWith Yarn:\n\n$ yarn create slidev\n\n\nWith PNPM:\n\n$ pnpm create slidev\n\n\nFollow the prompts and it will open up the slideshow at http://localhost:3030/ automatically for you.\n\nIt also contains the basic setup and a short demo with instructions on how to get started with Slidev.\n\nInstall Manually\n#\n\nIf you still prefer to install Slidev manually or would like to integrate it into your existing projects, you can do:\n\n$ npm install @slidev/cli @slidev/theme-default\n\n$ touch slides.md\n\n$ npx slidev\n\n\nPlease note if you are using pnpm, you will need to enable shamefully-hoist option for Slidev to work properly:\n\necho 'shamefully-hoist=true' >> .npmrc\n\nInstall Globally\n#\n\nAvailable since v0.14\n\nYou can install Slidev globally with the following command\n\n$ npm i -g @slidev/cli\n\n\nAnd then use slidev everywhere without creating a project every time.\n\n$ slidev\n\n\nThis command will also try to use local @slidev/cli if it has been found in the node_modules.\n\nInstall on Docker\n#\n\nIf you need a rapid way to run a presentation with containers, you can use the prebuilt docker image maintained by tangramor, or build your own.\n\nJust run following command in your work folder:\n\ndocker run --name slidev --rm -it \\\n    --user node \\\n    -v ${PWD}:/slidev \\\n    -p 3030:3030 \\\n    tangramor/slidev:latest\n\n\nIf your work folder is empty, it will generate a template slides.md and other related files under your work folder, and launch the server on port 3030.\n\nYou can access your slides from http://localhost:3030/\n\nBuild deployable image\n#\n\nOr you can create your own slidev project to a docker image with Dockerfile:\n\nFROM tangramor/slidev:latest\n\nADD . /slidev\n\n\n\nCreate the docker image: docker build -t myppt .\n\nAnd run the container: docker run --name myslides --rm --user node -p 3030:3030 myppt\n\nYou can visit your slides from http://localhost:3030/\n\nBuild hostable SPA (Single Page Application)\n#\n\nRun command docker exec -i slidev npx slidev build on the running container slidev. It will generate static HTML files under dist folder.\n\nHost on Github Pages\n#\n\nYou can host dist in a static web site such as Github Pages or Gitlab Pages.\n\nBecause in Github pages the url may contain subfolder, so you need to modify the generated index.html to change href=\"/assets/xxx to href=\"./assets/xxx. Or you may use --base=/<subfolder>/ option during the build process, such as: docker exec -i slidev npx slidev build --base=/slidev_docker/.\n\nAnd to avoid Jekyll build process, you need to add an empty file .nojekyll.\n\nHost by docker\n#\n\nYou can also host it by yourself with docker:\n\ndocker run --name myslides --rm -p 80:80 -v ${PWD}/dist:/usr/share/nginx/html nginx:alpine\n\n\nOr create a static image with following Dockerfile:\n\nFROM nginx:alpine\n\nCOPY dist /usr/share/nginx/html\n\n\nCreate the docker image: docker build -t mystaticppt .\n\nAnd run the container: docker run --name myslides --rm -p 80:80 mystaticppt\n\nYou can visit your slides from http://localhost/\n\nRefer to the tangramor/slidev_docker for more details.\n\nCommand Line Interface (CLI)\n#\n\n@slidev/cli Expose a few commands you can use with npx slidev ... or by adding scripts in your package.json:\n\n{\n  \"script\": {\n    \"dev\": \"slidev\"\n  }\n}\n\n\nIn that case you will be able to run npm run dev.\n\nYou can pass options to any commands:\n\nboolean option are true if they are present, false otherwise (example: slidev --open)\nsome options can have values you can add just after the option or by using the = character (example: slidev --port 8080 or slidev --port=8080)\n\nIf you use npm scripts, don't forget to add -- after the npm command:\n\nnpm run slidev -- --open\n\nslidev [entry]\n#\n\nStart a local server for Slidev.\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\n\nOptions:\n\n--port, -p (number, default: 3030): port number.\n--open, -o (boolean, default: false): open in browser.\n--remote [password] (string): listen to public host and enable remote control, if a value is passed then the presenter mode is private and only accessible by passing the given password in the URL query password parameter.\n--log ('error', 'warn', 'info', 'silent', default: 'warn'): Log level.\n--force, -f (boolean, default false): force the optimizer to ignore the cache and re-bundle.\n--theme, -t (string): override theme.\nslidev build [entry]\n#\n\nBuild hostable SPA.\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\n\nOptions:\n\n--watch, -w (boolean, default: false): build watch.\n--out, -o (string, default: dist): output dir.\n--base (string, default: /): base URL (see https://cli.vuejs.org/config/#publicpath)\n--download (boolean, default: false): allow to download the slides as PDF inside the SPA.\n--theme, -t (string): override theme.\nslidev export [entry]\n#\n\nExport slides to PDF (or other format).\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\n\nOptions:\n\n--output (string, default: use exportFilename (see https://sli.dev/custom/#frontmatter-configures) or use [entry]-export): path to the output.\n--format ('pdf', 'png', 'md', default: 'pdf'): output format.\n--timeout (number, default: 30000): timeout for rendering the print page (see https://playwright.dev/docs/api/class-page#page-goto).\n--range (string): page ranges to export (example: '1,4-5,6').\n--dark (boolean, default: false): export as dark theme.\n--with-clicks, -c (boolean, default: false): export pages for every clicks (see https://sli.dev/guide/animations.html#click-animations).\n--theme, -t (string): override theme.\nslidev format [entry]\n#\n\nFormat the markdown file.\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\nslidev theme [subcommand]\n#\n\nTheme related operations.\n\nSubcommands:\n\neject [entry]: Eject current theme into local file system\n[entry] (string, default: slides.md): path to the slides markdown entry.\nOptions:\n--dir (string, default: theme): output dir.\n--theme, -t (string): override theme."
  },
  {
    "title": "FAQ | Slidev",
    "url": "https://sli.dev/guide/faq.html",
    "html": "FAQ\n#\nGrids\n#\n\nSince Slidev is based on the Web, you can apply any grid layouts as you want. CSS Grids, flexboxes, or even Masonry, you get the full controls.\n\nSince we have UnoCSS built-in, here is one simple way for you to reference:\n\n<div class=\"grid grid-cols-2 gap-4\">\n<div>\n\nThe first column\n\n</div>\n<div>\n\nThe second column\n\n</div>\n</div>\n\n\nGo further, you can customize the size of each column like:\n\n<div class=\"grid grid-cols-[200px_1fr_10%] gap-4\">\n<div>\n\nThe first column (200px)\n\n</div>\n<div>\n\nThe second column (auto fit)\n\n</div>\n<div>\n\nThe third column (10% width to parent container)\n\n</div>\n</div>\n\n\nLearn more about Windi CSS Grids.\n\nPositioning\n#\n\nSlides are defined in fixed sizes (default 980x552px) and scale to fit with the user screen. You can safely use absolute position in your slides as they will scale along with the screen.\n\nFor example:\n\n<div class=\"absolute left-30px bottom-30px\">\nThis is a left-bottom aligned footer\n</div>\n\n\nTo change the canvas' actual size, you can pass the canvasWidth options in your first frontmatter:\n\n---\ncanvasWidth: 800\n---\n\nFont Size\n#\n\nIf you feel the font size in your slides are too small, you can adjust it in a few ways:\n\nOverride Local Style\n#\n\nYou can override styles for each slide with the inlined <style> tag.\n\n# Page 1\n\n<style>\nh1 {\n  font-size: 10em;\n}\n</style>\n\n---\n\n# Page 2\n\nThis will not be affected.\n\n\nLearn more: Embedded Styles\n\nOverride Global Style\n#\n\nYou can provide custom global styles by creating ./style.css, for example\n\n/* style.css */ \n\nh1 {\n  font-size: 10em !important;\n}\n\n\nLearn more: Global Style\n\nScale the Canvas\n#\n\nChanging the canvas' actual size will scale all your contents(text, images, components, etc.) and slides\n\n---\n# default: 980\n# since the canvas gets smaller, the visual size will become larger\ncanvasWidth: 800\n---\n\nUse Transform\n#\n\nWe provide a built-in component <Transform />, which is a thin wrapper of CSS transform property.\n\n<Transform :scale=\"1.4\">\n\n- Item 1\n- Item 2\n\n</Transform>\n"
  },
  {
    "title": "Drawing & Annotations | Slidev",
    "url": "https://sli.dev/guide/drawing.html",
    "html": "Drawing & Annotations\n#\n\nAvailable since v0.23\n\nWe have drauu built-in for drawing and annotation that could enhance your presentation further.\n\nTo start, click the  icon in the toolbar and start drawing. It's also available in the Presenter Mode. Drawings and annotations you created will be synced up automatically across all instances in real-time.\n\nUse with Stylus Pen\n#\n\nWhen using a stylus pen on a tablet (for example, iPad with Apple Pencil), Slidev could smartly detect the input type. You can directly draw on your slides with the pen without turning on the drawing mode, while having your fingers or mouse control the navigation.\n\nPersist Drawings\n#\n\nThe following frontmatter configuration allows you to persist your drawings as SVGs under .slidev/drawings directory and have them inside your exported pdf or hosted site.\n\n---\ndrawings: \n  persist: true\n---\n\nDisable Drawings\n#\n\nEntirely:\n\n---\ndrawings: \n  enabled: false\n---\n\n\nOnly in Development:\n\n---\ndrawings: \n  enabled: dev\n---\n\n\nOnly in Presenter Mode:\n\n---\ndrawings: \n  presenterOnly: true\n---\n\nDrawing Syncing\n#\n\nBy default, Slidev syncs up your drawings across all instances. If you are sharing your slides with others, you might want to disable the syncing by:\n\n---\ndrawings: \n  syncAll: false\n---\n\n\nWith this config, only the drawing from the presenter instance will be able to sync with others."
  },
  {
    "title": "Presenter Mode | Slidev",
    "url": "https://sli.dev/guide/presenter-mode.html",
    "html": "Presenter Mode\n#\n\nClick the  button in the navigation panel, or visit http://localhost:3030/presenter manually, to enter the presenter mode. Whenever you enter the presenter mode, other page instances will automatically stay in sync with the presenter.\n\nDisabling\n#\n\nPresenter mode is enabled by default.\n\nYou can disable this feature with the following config:\n\n---\npresenter: false\n---\n\n\nOr you can enable it only for dev or build mode by setting the mode you want in the config:\n\n---\npresenter: dev\n---\n\n\nIn that case the presenter will only be available when running slidev but not when running slidev build.\n\nRemote restricted access\n#\n\nYou can run your presentation with remote access by running slidev --remote.\n\nIn that case you may want to share the slides with other people but you don't want them to access the presenter mode to mess up your presentation.\n\nFor this scenario you can provide a password for starting the server by running slidev --remote=your_password.\n\nIn that case you will need to provide the password when accessing /presenter/* routes."
  },
  {
    "title": "Recording | Slidev",
    "url": "https://sli.dev/guide/recording.html",
    "html": "Recording\n#\n\nSlidev has a built-in recording and camera view. You can use them to record your presentation easily in one place.\n\nCamera View\n#\n\nClick the  button in the navigation panel to show your camera view in the presentation. You can drag to move it, and use the handler on the right bottom corner to resize it. The size and position will persist in localStorage and will therefore be consistent across multiple refreshes, so no need to worry about that.\n\nRecording\n#\n\nClicking the  button in the navigation panel will bring up a dialog for you. Here you can choose to either record your camera embedded in your slides or to separate them into two video files.\n\nThis feature is powered by RecordRTC and uses the WebRTC API."
  },
  {
    "title": "Static Hosting | Slidev",
    "url": "https://sli.dev/guide/hosting.html",
    "html": "Static Hosting\n#\nBuild Single Page Applications (SPA)\n#\n\nYou can also build the slides into a self-hostable SPA:\n\n$ slidev build\n\n\nThe generated application will be available under dist/.\n\nYou can test the generated build using a web server (Apache, NGINX, Caddy...etc.) or in the project you can directly run: npx vite preview.\n\nThen you can host it on GitHub Pages, Netlify, Vercel, or whatever you want. Now you can share your slides with the rest of the world with a single link.\n\nBase Path\n#\n\nTo deploy your slides under sub-routes, you will need to pass the --base option. The --base path must begin and end with a slash /; for example:\n\n$ slidev build --base /talks/my-cool-talk/\n\n\nRefer to Vite's documentation for more details.\n\nProvide Downloadable PDF\n#\n\nYou can provide a downloadable PDF to the viewers of your SPA with the following config:\n\n---\ndownload: true\n---\n\n\nSlidev will generate a PDF file along with the build, and a download button will be displayed in the SPA.\n\nYou can also provide a custom URL for the PDF. In that case, the rendering process will be skipped.\n\n---\ndownload: 'https://myside.com/my-talk.pdf'\n---\n\n\nThis can also be done with the CLI option --download (boolean only).\n\n$ slidev build --download\n\n\nWhen using the download option, you can also provide the export options:\n\nBy using CLI export options\nOr frontmatter export options\nOutput directory\n#\n\nYou can change the output directory using --out.\n\n$ slidev build --out my-build-folder\n\nWatch mode\n#\n\nBy passing the --watch option the build will run in watch mode and will rebuild anytime the source changes.\n\n$ slidev build --watch\n\nMultiple entries\n#\n\nYou can also build multiple slides at once.\n\n$ slidev build slides1.md slides1.md\n\n\nOr\n\n$ slidev build *.md\n\n\nIn this case, each input file will generate a folder containing the build in the output directory.\n\nExamples\n#\n\nHere are a few examples of the exported SPA:\n\nStarter Template\nComposable Vue by Anthony Fu\n\nFor more, check out Showcases.\n\nHosting\n#\n\nWe recommend to use npm init slidev@latest to scaffold your project, which contains the necessary configuration files for hosting services out-of-the-box.\n\nNetlify\n#\nNetlify\n\nCreate netlify.toml in your project root with the following content.\n\n[build.environment]\n  NODE_VERSION = \"14\"\n\n[build]\n  publish = \"dist\"\n  command = \"npm run build\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n\nThen go to your Netlify dashboard and create a new site with the repository.\n\nVercel\n#\nVercel\n\nCreate vercel.json in your project root with the following content.\n\n{\n  \"rewrites\": [\n    { \"source\": \"/(.*)\", \"destination\": \"/index.html\" }\n  ]\n}\n\n\nThen go to your Vercel dashboard and create a new site with the repository.\n\nGitHub Pages\n#\nGitHub Pages\n\nTo deploy your slides on GitHub Pages:\n\nupload all the files of the project in your repo (i.e. named name_of_repo)\ncreate .github/workflows/deploy.yml with following content to deploy your slides to GitHub Pages via GitHub Actions. In this file, replace <name_of_repo> with name_of_repo. Make sure to leave the leading and trailing slashes in place.\nname: Deploy pages\n\non:\n  workflow_dispatch: {}\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    permissions:\n      contents: read\n      pages: write\n      id-token: write\n\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: actions/setup-node@v3\n        with:\n          node-version: 'lts/*'\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Build\n        run: npm run build -- --base /<name_of_repo>/\n\n      - uses: actions/configure-pages@v3\n\n      - uses: actions/upload-pages-artifact@v1\n        with:\n          path: dist\n\n      - name: Deploy\n        id: deployment\n        uses: actions/deploy-pages@v2\n\nIn your repository, go to Settings>Pages. Under \"Build and deployment\", select \"Github Actions\".\nFinally, after all workflows are executed, a link to the slides should appear under Settings>Pages."
  },
  {
    "title": "Exporting | Slidev",
    "url": "https://sli.dev/guide/exporting.html",
    "html": "Exporting\n#\nSlides\n#\nPDF\n#\n\nExporting to PDF or PNG relies on Playwright for rendering. You will therefore need to install playwright-chromium to use this feature. If you are doing exporting in a CI environment, the playwright CI guide can be helpful.\n\nInstall playwright-chromium\n\n$ npm i -D playwright-chromium\n\n\nNow export your slides to PDF using the following command\n\n$ slidev export\n\n\nAfter a few seconds, your slides will be ready at ./slides-export.pdf.\n\nPNGs and Markdown\n#\n\nWhen passing in the --format png option, Slidev will export PNG images for each slide instead of a PDF.\n\n$ slidev export --format png\n\n\nYou can also compile a markdown file composed of compiled png using --format md.\n\n$ slidev export --format md\n\nDark mode\n#\n\nIn case you want to export your slides using the dark version of the theme, use the --dark option:\n\n$ slidev export --dark\n\nExport Clicks Steps\n#\n\nAvailable since v0.21\n\nBy default, Slidev exports one page per slide with clicks animations disabled. If you want export slides with multiple steps into multiple pages, pass the --with-clicks option.\n\n$ slidev export --with-clicks\n\nSlide range\n#\n\nYou can also specify a range of slides to export with the --range option.\n\n$ slidev export --range 1,4-5,6\n\nPDF outline\n#\n\nAvailable since v0.36.10\n\nYou can generate the PDF outline by passing the --with-toc option.\n\n$ slidev export --with-toc\n\nOutput filename\n#\n\nYou can specify the output filename with the --output option.\n\n$ slidev export --output my-pdf-export\n\n\nOr in the frontmatter configuration:\n\n---\nexportFilename: my-pdf-export\n---\n\nExport a range of slides\n#\n\nBy default, all slides in the presentation are exported. If you want to export a specific slide or a range of slides you can set the --range option and specify which slides you would like to export.\n\n$ slidev export --range 1,6-8,10\n\n\nThis option accepts both specific slide numbers and ranges.\n\nThe example above would export slides 1,6,7,8, and 10.\n\nMultiple entries\n#\n\nYou can also export multiple slides at once.\n\n$ slidev export slides1.md slides1.md\n\n\nOr\n\n$ slidev export *.md\n\n\nIn this case, each input file will generate its own PDf file.\n\nPresenter notes\n#\n\nAvailable since v0.36.8\n\nExport only the presenter notes (the last comment block for each slide) into a text document in PDF.\n\n$ slidev export-notes\n\n\nThis command also accept multiple entries like for the export command\n\nSingle-Page Application (SPA)\n#\n\nSee Static Hosting.\n\nTroubleshooting\n#\nTimeout\n#\n\nFor big presentation you might want to increase the playwrigth timeout with --timeout\n\n$ slidev export --timeout 60000\n\nExecutable path\n#\n\nYou can set the browser executable path for playwright using --executable-path\n\n$ slidev export --executable-path [path_to_chromium]\n"
  },
  {
    "title": "Navigation | Slidev",
    "url": "https://sli.dev/guide/navigation.html",
    "html": "Navigation\n#\nNavigation Bar\n#\n\nMove your mouse to the bottom left corner of Slidev page to make the navigation bar appear.\n\nShortcuts\tButton\tDescription\nf\t \ttoggle fullscreen\nright / space\t\tnext animation or slide\nleft\t\tprevious animation or slide\nup\t-\tprevious slide\ndown\t-\tnext slide\no\t\ttoggle slides overview\nd\t \ttoggle dark mode\n-\t\ttoggle camera view\n-\t\trecording\n-\t\tenter presenter mode\n-\t\ttoggle integrated editor\n-\t\tdownload slides (only appear in SPA build)\n-\t\tshow information about the slides\n-\t\tshow settings menu\ng\t-\tshow goto...\n\n\nSlides Overview\n#\n\nBy pressing o or clicking the  button in the navigation bar, you can have the overview of your slides so you can jump between them easily."
  },
  {
    "title": "Animations | Slidev",
    "url": "https://sli.dev/guide/animations.html",
    "html": "Animations\n#\nClick Animations\n#\nv-click\n#\n\nTo apply \"click animations\" for elements, you can use the v-click directive or <v-click> components\n\n# Hello\n\n<!-- Component usage: this will be invisible until you press \"next\" -->\n<v-click>\n\nHello World\n\n</v-click>\n\n<!-- Directive usage: this will be invisible until you press \"next\" the second time -->\n<div v-click class=\"text-xl p-2\">\n\nHey!\n\n</div>\n\nv-after\n#\n\nThe usage of v-after is similar to v-click but it will turn the element visible when the previous v-click is triggered.\n\n<div v-click>Hello</div>\n<div v-after>World</div>\n\n\nWhen you click the \"next\" button, both Hello and World will show up together.\n\nv-click-hide\n#\n\nSame as v-click but instead of making the element appear, it makes the element invisible after clicking.\n\n<div v-click-hide>Hello</div>\n\nv-clicks\n#\n\nv-clicks is only provided as a component. It's a shorthand to apply the v-click directive to all its child elements. It is especially useful when working with lists.\n\n<v-clicks>\n\n- Item 1\n- Item 2\n- Item 3\n- Item 4\n\n</v-clicks>\n\n\nAn item will become visible each time you click \"next\".\n\nIt accepts a depth props for nested list:\n\n<v-clicks depth=\"2\">\n\n- Item 1\n  - Item 1.1\n  - Item 1.2\n- Item 2\n  - Item 2.1\n  - Item 2.2\n\n</v-clicks>\n\nCustom Clicks Count\n#\n\nBy default, Slidev counts how many steps are needed before going to the next slide. You can override this setting by passing the clicks frontmatter option:\n\n---\n# 10 clicks in this slide, before going to the next\nclicks: 10\n---\n\nOrdering\n#\n\nPassing the click index to your directives, you can customize the order of the revealing\n\n<div v-click>1</div>\n<div v-click>2</div>\n<div v-click>3</div>\n\n<!-- the order is reversed -->\n<div v-click=\"3\">1</div>\n<div v-click=\"2\">2</div>\n<div v-click=\"1\">3</div>\n\n---\nclicks: 3\n---\n\n<!-- visible after 3 clicks -->\n<v-clicks at=\"3\">\n  <div>Hi</div>\n</v-clicks>\n\nEnter & Leave\n#\n\nAvailable since v0.43.0\n\nYou can also specify the enter and leave index for the v-click directive by passing an array. The end index is exclusive.\n\n<div v-click=\"[2, 4]\">This will be shown on the 2nd and 3rd clicks, and hide again after the 4th.</div>\n\nElement Transitions\n#\n\nWhen you apply the v-click directive to your elements, it will attach the class name slidev-vclick-target to it. When the elements are hidden, the class name slidev-vclick-hidden will also be attached. For example:\n\n<div class=\"slidev-vclick-target slidev-vclick-hidden\">Text</div>\n\n\nAfter a click, it will become\n\n<div class=\"slidev-vclick-target\">Text</div>\n\n\nBy default, a subtle opacity transition is applied to those classes:\n\n// the default\n\n.slidev-vclick-target {\n  transition: opacity 100ms ease;\n}\n\n.slidev-vclick-hidden {\n  opacity: 0;\n  pointer-events: none;\n}\n\n\nYou can override them to customize the transition effects in your custom stylesheets.\n\nFor example, you can achieve the scaling up transitions by:\n\n// styles.css\n\n.slidev-vclick-target {\n  transition: all 500ms ease;\n}\n\n.slidev-vclick-hidden {\n  transform: scale(0);\n}\n\n\nTo specify animations for only certain slide or layout\n\n.slidev-page-7,\n.slidev-layout.my-custom-layout {\n  .slidev-vclick-target {\n    transition: all 500ms ease;\n  }\n\n  .slidev-vclick-hidden {\n    transform: scale(0);\n  }\n}\n\n\nLearn more about customizing styles.\n\nMotion\n#\n\nSlidev has @vueuse/motion built-in. You can use the v-motion directive to any elements to make apply motion on them. For example\n\n<div\n  v-motion\n  :initial=\"{ x: -80 }\"\n  :enter=\"{ x: 0 }\">\n  Slidev\n</div>\n\n\nThe text Slidev will move from -80px to its original position on initialization.\n\nNote: Slidev preloads the next slide for performance, which means the animations might start before you navigate to the page. To get it works properly, you can disable the preloading for the particular slide\n\n---\npreload: false\n---\n\n\nOr control the element life-cycle with v-if to have fine-grained controls\n\n<div\n  v-if=\"$slidev.nav.currentPage === 7\"\n  v-motion\n  :initial=\"{ x: -80 }\"\n  :enter=\"{ x: 0 }\">\n  Slidev\n</div>\n\n\nLearn mode: Demo | @vueuse/motion | v-motion | Presets\n\nSlide Transitions\n#\n\nAvailable since v0.39.0\n\nSlidev supports slide transitions out of the box. You can enable it by setting the transition frontmatter option:\n\n---\ntransition: slide-left\n---\n\n\nThis will give you a nice sliding effects on slide switching. Setting it in the frontmatter will apply to all slides. You can also set different transition per slide.\n\nBuiltin Transitions\n#\nfade - Crossfade in/out\nfade-out - Fade out and then fade in\nslide-left - Slides to the left (slide to right when going backward)\nslide-right - Slides to the right (slide to left when going backward)\nslide-up - Slides to the top (slide to bottom when going backward)\nslide-down - Slides to the bottom (slide to top when going backward)\nview-transition - Slides with the view transitions API\nView Transitions\n#\n\nAvailable since v0.43.0\n\nThe View Transitions API provides a mechanism for easily creating animated transitions between different DOM states. Learn more how it works in View Transitions API - MDN Web Docs - Mozilla.\n\nExperimental: This is not supported by all browsers. Check the Browser compatibility table carefully before using this.\n\nYou can use the view-transition-name CSS property to name view transitions, which creates connections between different page elements and smooth transitions when switching slides.\n\nYou can enable MDC (Markdown Component) Syntax support to conveniently name view-transitions:\n\n---\ntransition: view-transition\nmdc: true\n---\n# View Transition {.inline-block.view-transition-title}\n---\n# View Transition {.inline-block.view-transition-title}\n\nCustom Transitions\n#\n\nSlidev's slide transitions are powered by Vue Transition. You can provide your custom transitions by:\n\n---\ntransition: my-transition\n---\n\n\nand then in your custom stylesheets:\n\n.my-transition-enter-active,\n.my-transition-leave-active {\n  transition: opacity 0.5s ease;\n}\n\n.my-transition-enter-from,\n.my-transition-leave-to {\n  opacity: 0;\n}\n\n\nLearn more how it works in Vue Transition.\n\nForward & Backward Transitions\n#\n\nYou can specify different transitions for forward and backward navigation using | as a separator in the transition name:\n\n---\ntransition: go-forward | go-backward\n---\n\n\nWith this, when you go from slide 1 to slide 2, the go-forward transition will be applied. When you go from slide 2 to slide 1, the go-backward transition will be applied.\n\nAdvanced Usage\n#\n\nThe transition field accepts an option that will passed to the <TransitionGroup> component. For example:\n\n---\ntransition:\n  name: my-transition\n  enterFromClass: custom-enter-from\n  enterActiveClass: custom-enter-active\n---\n"
  },
  {
    "title": "Why Slidev | Slidev",
    "url": "https://sli.dev/guide/why.html",
    "html": "Why Slidev\n#\n\nThere are a lot of feature-rich, general-purpose, WYSIWYG slides makers like Microsoft PowerPoint and Apple Keynote. They work pretty well for making nice slides with animations, charts, and many other things, while being very intuitive and easy to learn. So why bother making Slidev?\n\nSlidev aims to provide the flexibility and interactivity for developers to make their presentations even more interesting, expressive, and attractive by using the tools and technologies they are already familiar with.\n\nWhen working with WYSIWYG editors, it is easy to get distracted by the styling options. Slidev remedies that by separating the content and visuals. This allows you to focus on one thing at a time, while also being able to reuse the themes from the community. Slidev does not seek to replace other slide deck builders entirely. Rather, it focuses on catering to the developer community.\n\nSlidev\n#\n\nHere are a few of the coolest features of Slidev:\n\nMarkdown-based\n#\n\nSlidev uses an extended Markdown format to store and organize your slides in a single plain text file. This lets you focus on making the content. And since the content and styles are separated, this also made it possible to switch between different themes effortlessly.\n\nLearn more about Slidev's Markdown Syntax.\n\nThemable\n#\n\nThemes for Slidev can be shared and installed using npm packages. You then apply them with only one line of config.\n\nCheck out the theme gallery or learn how to write a theme.\n\nDeveloper Friendly\n#\n\nSlidev provides first-class support for code snippets for developers. It supports both Prism and Shiki to get pixel perfect syntax highlighting, while still being able to modify the code at any time. With Monaco editor built-in, it also empowers you to do live coding / demonstration in your presentation with autocompletion, type hovering, and even TypeScript type check support.\n\nLearn more about highlighters and Monaco configuration.\n\nFast\n#\n\nSlidev is powered by Vite, Vue 3 and UnoCSS, which give you the most wonderful authoring experience. Every change you made will reflect to your slides instantly.\n\nFind more about our tech stack.\n\nInteractive & Expressive\n#\n\nYou can write custom Vue components and use them directly inside your markdown file. You can also interact with them inside the presentation to express your idea in a more interesting and intuitive way.\n\nRecording Support\n#\n\nSlidev provides built-in recording and camera view. You can share your presentation with your camera view inside, or record and save them separately for your screen and camera. All with one go, no additional tools are needed.\n\nLearn more about recording here.\n\nPortable\n#\n\nExport your slides into PDF, PNGs, or even a hostable Single-page Application (SPA) with a single command, and share them anywhere.\n\nRead more about that in the exporting docs.\n\nHackable\n#\n\nBeing powered by web technologies, anything that can be done in a web app is also possible with Slidev. For example, WebGL, API requests, iframes, or even live sharing. It's up to your imagination!\n\nGive it a Try\n#\n\nPlaying around with Slidev will tell you more than a thousand words. You are just one command away:\n\n$ npm init slidev\n\n\nOr have a quick preview of it:"
  },
  {
    "title": "Markdown Syntax | Slidev",
    "url": "https://sli.dev/guide/syntax.html",
    "html": "Markdown Syntax\n#\n\nSlides are written within a single markdown file (by default ./slides.md).\n\nYou can use the Markdown features as you normally would, with the additional support of inlined HTML and Vue Components. Styling using UnoCSS is also supported. Use --- padded with a new line to separate your slides.\n\n# Slidev\n\nHello, World!\n\n---\n\n# Page 2\n\nDirectly use code blocks for highlighting\n\n//```ts\nconsole.log('Hello, World!')\n//```\n\n---\n\n# Page 3\n\nYou can directly use Windi CSS and Vue components to style and enrich your slides.\n\n<div class=\"p-3\">\n  <Tweet id=\"20\" />\n</div>\n\nFront Matter & Layouts\n#\n\nSpecify layouts and other metadata for each slide by converting the separators into front matter blocks. Each frontmatter starts with a triple-dash and ends with another. Texts between them are data objects in YAML format. For example:\n\n---\nlayout: cover\n---\n\n# Slidev\n\nThis is the cover page.\n\n---\nlayout: center\nbackground: './images/background-1.png'\nclass: 'text-white'\n---â\n\n# Page 2\n\nThis is a page with the layout `center` and a background image.\n\n---\n\n# Page 3\n\nThis is a default page without any additional metadata.\n\n\nRefer to customization for more details.\n\nThe custom syntax might not be compactible with some formatters like Prettier. To improve that, we also support using a direct yaml code block to define the frontmatter:\n\n---\nlayout: cover\n---\n\n# Slidev\n\nThis is the cover page.\n\n---\n\n```yaml\n# The first yaml block will be treated as the frontmatter of that slide\nlayout: center\nbackground: './images/background-1.png'\nclass: 'text-white'\n```\n\n# Page 2\n\nThis is a page with the layout `center` and a background image.\n\n\n(Available since v0.44.0)\n\nCode Blocks\n#\n\nOne big reason I am building Slidev is needing to make my code look just right in the slides. So just as you expected, you can use Markdown flavored code block to highlight your code.\n\n//```ts\nconsole.log('Hello, World!')\n//```\n\n\nWe support Prism and Shiki as syntax highlighters. Refer to the highlighters section for more details.\n\nLine Highlighting\n#\n\nTo highlight specific lines, simply add line numbers within bracket {}. Line numbers start counting from 1 by default.\n\n//```ts {2,3}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nYou can enable line number to all slides by setting lineNumbers: true on the config or enable each code block individually by setting lines:true. In case you want to disable the numbering for an specific block when lineNumbers: true you can set lines:false for that block:\n\n//```ts {2,3} {lines:true}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nYou can also set the starting line for each code block and highlight the lines accordingly, defaults to 1:\n\n//```ts {6,7} {lines:true, startLine:5}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nTo change the highlight in multiple steps, you can use | to separate them. For example\n\n//```ts {2-3|5|all}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nThis will first highlight a: Ref<number> | number and b: Ref<number> | number, and then return computed(() => unref(a) + unref(b)) after one click, and lastly, the whole block. Learn more in the clicks animations guide.\n\nYou can start the highlight at a specific click:\n\n//```ts {2-3|5|all} {at:0}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nThis is especially useful when you need to sync different animations (when using two-cols layout and list animation for instance).\n\nTo skip highlighting any lines, you can set the line number to 0. For example\n\n\n\n\n\n\n\n\n\n\n\n//```ts {0}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n//```\n\n\nIf the code doesn't fit into one slide, you can pass an extra maxHeight option which will set fixed height and enable scrolling\n\n\n\nÂ \n\n\n\n\n\n\n\n\n\n\n//```ts {2|3|7|12} {maxHeight:'100px'}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n/// ...as many lines as you want\nconst c = add(1, 2)\n//```\n\nMonaco Editor\n#\n\nWhenever you want to do some modification in the presentation, simply add {monaco} after the language id â it turns the block into a fully-featured Monaco editor!\n\n//```ts {monaco}\nconsole.log('HelloWorld')\n//```\n\n\nLearn more about configuring Monaco.\n\nMonaco diff\n#\n\nMonaco can also generate a diff between two code blocks. Use {monaco-diff} to turn the block into a diff Monaco editor and use ~~~ to separate both original and modified version of the code!\n\n//```ts {monaco-diff}\nThis line is removed on the right.\njust some text\nabcd\nefgh\nSome more text\n~~~\njust some text\nabcz\nzzzzefgh\nSome more text.\nThis line is removed on the left.\n//```\n\nEmbedded Styles\n#\n\nYou can use <style> tag in your Markdown directly to override styles for the current slide.\n\n# This is Red\n\n<style>\nh1 {\n  color: red\n}\n</style>\n\n---\n\n# Next slide is not affected\n\n\n<style> tag in Markdown is always scoped. As an outstanding result, a selector with the child combinator (.a > .b) is unusable as such; see the previous link. To have global style overrides, check out the customization section.\n\nPowered by UnoCSS, you can directly use nested css and directives (e.g. @apply)\n\n# Slidev\n\n> Hello `world`\n\n<style>\nblockquote {\n  code {\n    @apply text-teal-500 dark:text-teal-400;\n  }\n}\n</style>\n\nStatic Assets\n#\n\nJust like you would do in markdown, you can use images pointing to a remote or local url.\n\nFor remote assets, the built-in vite-plugin-remote-assets will cache them into the disk at the first run so you can have instant loading even for large images later on.\n\n![Remote Image](https://sli.dev/favicon.png)\n\n\nFor local assets, put them into the public folder and reference them with leading slash.\n\n![Local Image](/pic.png)\n\n\nFor you want to apply custom sizes or styles, you can convert them to the <img> tag\n\n<img src=\"/pic.png\" class=\"m-40 h-40 rounded shadow\" />\n\nNotes\n#\n\nYou can also take notes for each slide. They will show up in Presenter Mode for you to reference during presentations.\n\nIn Markdown, the last comment block in each slide will be treated as a note.\n\n---\nlayout: cover\n---\n\n# Page 1\n\nThis is the cover page.\n\n<!-- This is a note -->\n\n---\n\n# Page 2\n\n<!-- This is NOT a note because it precedes the content of the slide -->\n\nThe second page\n\n<!--\nThis is another note\n-->\n\nIcons\n#\n\nSlidev allows you to have the accessing to almost all the popular open-source iconsets directly in your markdown. Powered by unplugin-icons and Iconify.\n\nThe naming follows Iconify's conversion {collection-name}-{icon-name}. For example:\n\n<mdi-account-circle /> -  from Material Design Icons\n<carbon-badge /> -  from Carbon\n<uim-rocket /> -  from Unicons Monochrome\n<twemoji-cat-with-tears-of-joy /> -  from Twemoji\n<logos-vue /> -  from SVG Logos\nAnd much more...\n\nBrowse and search for all the icons available with IcÃ´nes.\n\nStyling Icons\n#\n\nYou can style the icons just like other HTML elements. For example:\n\n<uim-rocket />\n<uim-rocket class=\"text-3xl text-red-400 mx-2\" />\n<uim-rocket class=\"text-3xl text-orange-400 animate-ping\" />\n\nSlots\n#\n\nAvailable since v0.18\n\nSome layouts can provide multiple contributing points using Vue's named slots.\n\nFor example, in two-cols layout, you can have two columns left (default slot) and right (right slot) side by side.\n\n---\nlayout: two-cols\n---\n\n<template v-slot:default>\n\n# Left\n\nThis shows on the left\n\n</template>\n<template v-slot:right>\n\n# Right\n\nThis shows on the right\n\n</template>\n\nLeft\n\nThis shows on the left\n\nRight\n\nThis shows on the right\n\nWe also provide a shorthand syntax sugar ::name:: for slot name. The following example works exactly the same as the previous one.\n\n---\nlayout: two-cols\n---\n\n# Left\n\nThis shows on the left\n\n::right::\n\n# Right\n\nThis shows on the right\n\n\nYou can also explicitly specify the default slot and provide in the custom order\n\n---\nlayout: two-cols\n---\n\n::right::\n\n# Right\n\nThis shows on the right\n\n::default::\n\n# Left\n\nThis shows on the left\n\nConfigurations\n#\n\nAll configurations needed can be defined in the Markdown file. For example:\n\n---\ntheme: seriph\nlayout: cover\nbackground: 'https://source.unsplash.com/1600x900/?nature,water'\n---\n\n# Slidev\n\nThis is the cover page.\n\n\nLearn more about frontmatter configurations.\n\nLaTeX\n#\n\nSlidev comes with LaTeX support out-of-box, powered by KaTeX.\n\nInline\n#\n\nSurround your LaTeX with a single $ on each side for inline rendering.\n\n$\\sqrt{3x-1}+(1+x)^2$\n\nBlock\n#\n\nUse two ($$) for block rendering. This mode uses bigger symbols and centers the result.\n\n$$\n\\begin{array}{c}\n\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\n\\end{array}\n$$\n\n\nLearn more: Demo | KaTeX | markdown-it-katex\n\nLaTex line highlighting\n#\n\nAvailable since v0.43.1\n\nTo highlight specific lines, simply add line numbers within bracket {}. Line numbers start counting from 1 by default.\n\n$$ {1|3|all}\n\\begin{array}{c}\n\\nabla \\times \\vec{\\mathbf{B}} -\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{E}}}{\\partial t} &\n= \\frac{4\\pi}{c}\\vec{\\mathbf{j}}    \\nabla \\cdot \\vec{\\mathbf{E}} & = 4 \\pi \\rho \\\\\n\\nabla \\times \\vec{\\mathbf{E}}\\, +\\, \\frac1c\\, \\frac{\\partial\\vec{\\mathbf{B}}}{\\partial t} & = \\vec{\\mathbf{0}} \\\\\n\\nabla \\cdot \\vec{\\mathbf{B}} & = 0\n\\end{array}\n$$\n\nDiagrams\n#\n\nYou can also create diagrams / graphs from textual descriptions in your Markdown, powered by Mermaid.\n\nCode blocks marked as mermaid will be converted to diagrams, for example:\n\n//```mermaid\nsequenceDiagram\n  Alice->John: Hello John, how are you?\n  Note over Alice,John: A typical interaction\n//```\n\n\nYou can further pass an options object to it to specify the scaling and theming. The syntax of the object is a JavaScript object literal, you will need to add quotes (') for strings and use comma (,) between keys.\n\n//```mermaid {theme: 'neutral', scale: 0.8}\ngraph TD\nB[Text] --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n//```\n\n\nLearn more: Demo | Mermaid\n\nMultiple Entries\n#\n\nAvailable since v0.15\n\nYou can split your slides.md into multiple files and organize them as you want.\n\nslides.md :\n\n# Page 1\n\nThis is a normal page\n\n---\nsrc: ./subpage2.md\n---\n\n<!-- this page will be loaded from './subpage2.md' -->\nInline content will be ignored\n\n\nsubpage2.md :\n\n# Page 2\n\nThis page is from another file\n\nFrontmatter Merging\n#\n\nYou can provide frontmatters from both your main entry and external markdown pages. If there are the same keys in them, the ones from the main entry have the higher priority. For example\n\nslides.md :\n\n---\nsrc: ./cover.md\nbackground: https://sli.dev/bar.png\nclass: text-center\n---\n\n\ncover.md :\n\n---\nlayout: cover\nbackground: https://sli.dev/foo.png\n---\n\n# Cover\n\nCover Page\n\n\nThey will end up being equivalent of the following page:\n\n---\nlayout: cover\nbackground: https://sli.dev/bar.png\nclass: text-center\n---\n\n# Cover\n\nCover Page\n\nPage Reusing\n#\n\nWith the multi-entries support, reusing pages could be straightforward. For example:\n\n---\nsrc: ./cover.md\n---\n\n---\nsrc: ./intro.md\n---\n\n---\nsrc: ./content.md\n---\n\n---\n# reuse\nsrc: ./content.md\n---\n\nMDC Syntax\n#\n\nAvailable since v0.43.0\n\nSlidev has and experimental support for MDC (Markdown Components) Syntax powered by markdown-it-mdc.\n\nYou can enable it by add mdc: true to the frontmatter of your markdown file.\n\n---\nmdc: true\n---\n\nThis is a [red text]{style=\"color:red\"} :inline-component{prop=\"value\"}\n\n![](/image.png){width=500px lazy}\n\n::block-component{prop=\"value\"}\nThe **default** slot\n::\n\n\nLearn more about the syntax."
  },
  {
    "title": "Installation | Slidev",
    "url": "https://sli.dev/guide/install.html",
    "html": "Installation\n#\nStarter Template\n#\n\nSlidev requires Node.js >=18.0\n\nThe best way to get started is using our official starter template.\n\nWith NPM:\n\n$ npm init slidev@latest\n\n\nWith Yarn:\n\n$ yarn create slidev\n\n\nWith PNPM:\n\n$ pnpm create slidev\n\n\nFollow the prompts and it will open up the slideshow at http://localhost:3030/ automatically for you.\n\nIt also contains the basic setup and a short demo with instructions on how to get started with Slidev.\n\nInstall Manually\n#\n\nIf you still prefer to install Slidev manually or would like to integrate it into your existing projects, you can do:\n\n$ npm install @slidev/cli @slidev/theme-default\n\n$ touch slides.md\n\n$ npx slidev\n\n\nPlease note if you are using pnpm, you will need to enable shamefully-hoist option for Slidev to work properly:\n\necho 'shamefully-hoist=true' >> .npmrc\n\nInstall Globally\n#\n\nAvailable since v0.14\n\nYou can install Slidev globally with the following command\n\n$ npm i -g @slidev/cli\n\n\nAnd then use slidev everywhere without creating a project every time.\n\n$ slidev\n\n\nThis command will also try to use local @slidev/cli if it has been found in the node_modules.\n\nInstall on Docker\n#\n\nIf you need a rapid way to run a presentation with containers, you can use the prebuilt docker image maintained by tangramor, or build your own.\n\nJust run following command in your work folder:\n\ndocker run --name slidev --rm -it \\\n    --user node \\\n    -v ${PWD}:/slidev \\\n    -p 3030:3030 \\\n    tangramor/slidev:latest\n\n\nIf your work folder is empty, it will generate a template slides.md and other related files under your work folder, and launch the server on port 3030.\n\nYou can access your slides from http://localhost:3030/\n\nBuild deployable image\n#\n\nOr you can create your own slidev project to a docker image with Dockerfile:\n\nFROM tangramor/slidev:latest\n\nADD . /slidev\n\n\n\nCreate the docker image: docker build -t myppt .\n\nAnd run the container: docker run --name myslides --rm --user node -p 3030:3030 myppt\n\nYou can visit your slides from http://localhost:3030/\n\nBuild hostable SPA (Single Page Application)\n#\n\nRun command docker exec -i slidev npx slidev build on the running container slidev. It will generate static HTML files under dist folder.\n\nHost on Github Pages\n#\n\nYou can host dist in a static web site such as Github Pages or Gitlab Pages.\n\nBecause in Github pages the url may contain subfolder, so you need to modify the generated index.html to change href=\"/assets/xxx to href=\"./assets/xxx. Or you may use --base=/<subfolder>/ option during the build process, such as: docker exec -i slidev npx slidev build --base=/slidev_docker/.\n\nAnd to avoid Jekyll build process, you need to add an empty file .nojekyll.\n\nHost by docker\n#\n\nYou can also host it by yourself with docker:\n\ndocker run --name myslides --rm -p 80:80 -v ${PWD}/dist:/usr/share/nginx/html nginx:alpine\n\n\nOr create a static image with following Dockerfile:\n\nFROM nginx:alpine\n\nCOPY dist /usr/share/nginx/html\n\n\nCreate the docker image: docker build -t mystaticppt .\n\nAnd run the container: docker run --name myslides --rm -p 80:80 mystaticppt\n\nYou can visit your slides from http://localhost/\n\nRefer to the tangramor/slidev_docker for more details.\n\nCommand Line Interface (CLI)\n#\n\n@slidev/cli Expose a few commands you can use with npx slidev ... or by adding scripts in your package.json:\n\n{\n  \"script\": {\n    \"dev\": \"slidev\"\n  }\n}\n\n\nIn that case you will be able to run npm run dev.\n\nYou can pass options to any commands:\n\nboolean option are true if they are present, false otherwise (example: slidev --open)\nsome options can have values you can add just after the option or by using the = character (example: slidev --port 8080 or slidev --port=8080)\n\nIf you use npm scripts, don't forget to add -- after the npm command:\n\nnpm run slidev -- --open\n\nslidev [entry]\n#\n\nStart a local server for Slidev.\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\n\nOptions:\n\n--port, -p (number, default: 3030): port number.\n--open, -o (boolean, default: false): open in browser.\n--remote [password] (string): listen to public host and enable remote control, if a value is passed then the presenter mode is private and only accessible by passing the given password in the URL query password parameter.\n--log ('error', 'warn', 'info', 'silent', default: 'warn'): Log level.\n--force, -f (boolean, default false): force the optimizer to ignore the cache and re-bundle.\n--theme, -t (string): override theme.\nslidev build [entry]\n#\n\nBuild hostable SPA.\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\n\nOptions:\n\n--watch, -w (boolean, default: false): build watch.\n--out, -o (string, default: dist): output dir.\n--base (string, default: /): base URL (see https://cli.vuejs.org/config/#publicpath)\n--download (boolean, default: false): allow to download the slides as PDF inside the SPA.\n--theme, -t (string): override theme.\nslidev export [entry]\n#\n\nExport slides to PDF (or other format).\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\n\nOptions:\n\n--output (string, default: use exportFilename (see https://sli.dev/custom/#frontmatter-configures) or use [entry]-export): path to the output.\n--format ('pdf', 'png', 'md', default: 'pdf'): output format.\n--timeout (number, default: 30000): timeout for rendering the print page (see https://playwright.dev/docs/api/class-page#page-goto).\n--range (string): page ranges to export (example: '1,4-5,6').\n--dark (boolean, default: false): export as dark theme.\n--with-clicks, -c (boolean, default: false): export pages for every clicks (see https://sli.dev/guide/animations.html#click-animations).\n--theme, -t (string): override theme.\nslidev format [entry]\n#\n\nFormat the markdown file.\n\n[entry] (string, default: slides.md): path to the slides markdown entry.\nslidev theme [subcommand]\n#\n\nTheme related operations.\n\nSubcommands:\n\neject [entry]: Eject current theme into local file system\n[entry] (string, default: slides.md): path to the slides markdown entry.\nOptions:\n--dir (string, default: theme): output dir.\n--theme, -t (string): override theme."
  },
  {
    "title": "Getting Started | Slidev",
    "url": "https://sli.dev/guide/",
    "html": "Getting Started\n#\nOverview\n#\n\nSlidev (slide + dev, /slaÉªdÉªv/) is a web-based slides maker and presenter. It's designed for developers to focus on writing content in Markdown while also having the power of HTML and Vue components to deliver pixel-perfect layouts and designs with embedded interactive demos in your presentations.\n\nIt uses a feature-rich markdown file to generate beautiful slides with an instant reloading experience, along with many built-in integrations such as live coding, PDF exporting, presentation recording, and so on. Since it's powered by the web, you can do anything with Slidev - the possibilities are endless.\n\nYou can learn more about the rationale behind the project in the Why Slidev section.\n\nFeatures\n#\nð Markdown-based - use your favorite editors and workflow\nð§âð» Developer Friendly - built-in syntax highlighting, live coding, etc.\nð¨ Themable - theme can be shared and used with npm packages\nð Stylish - on-demand utilities via UnoCSS or Windi CSS.\nð¤¹ Interactive - embedding Vue components seamlessly\nð Presenter Mode - use another window, or even your phone to control your slides\nð¨ Drawing - draw and annotate on your slides\nð§® LaTeX - built-in LaTeX math equations support\nð° Diagrams - creates diagrams with textual descriptions\nð Icons - Access to icons from any iconset directly\nð» Editors - integrated editor, or extension for VS Code\nð¥ Recording - built-in recording and camera view\nð¤ Portable - export into PDF, PNGs, or even a hostable SPA\nâ¡ï¸ Fast - instant reloading powered by Vite\nð  Hackable - using Vite plugins, Vue components, or any npm packages\nTech Stack\n#\n\nSlidev is made possible by combining these tools and technologies.\n\nVite - An extremely fast frontend tooling\nVue 3 powered Markdown - Focus on the content while having the power of HTML and Vue components whenever needed\nWindi CSS or UnoCSS - On-demand utility-first CSS framework, style your slides at ease\nPrism, Shiki, Monaco Editor - First-class code snippets support with live coding capability\nRecordRTC - Built-in recording and camera view\nVueUse family - @vueuse/core, @vueuse/head, @vueuse/motion, etc.\nIconify - Iconsets collection.\nDrauu - Drawing and annotations support\nKaTeX - LaTeX math rendering.\nMermaid - Textual Diagrams.\nScaffolding Your First Presentation\n#\n\n\nTry it Online\n#\n\nsli.dev/new\n\nCreate Locally\n#\n\nWith NPM:\n\n$ npm init slidev\n\n\nWith Yarn:\n\n$ yarn create slidev\n\n\nWith pnpm:\n\n$ pnpm create slidev\n\n\nFollow the prompts and start making your slides now! For more details about the markdown syntax, read through the syntax guide.\n\nCommand Line Interface\n#\n\nIn a project where Slidev is installed, you can use the slidev binary in your npm scripts.\n\n{\n  \"scripts\": {\n    \"dev\": \"slidev\", // start dev server\n    \"build\": \"slidev build\", // build for production SPA\n    \"export\": \"slidev export\" // export slides to pdf\n  }\n}\n\n\nOtherwise, you can use it with npx\n\n$ npx slidev\n\n\nRun slidev --help for more options available.\n\nMarkdown Syntax\n#\n\nSlidev reads your slides.md file under your project root and converts them into slides. Whenever you made changes to it, the content of the slides will be updated immediately. For example:\n\n# Slidev\n\nHello World\n\n---\n\n# Page 2\n\nDirectly use code blocks for highlighting\n\n//```ts\nconsole.log('Hello, World!')\n//```\n\n---\n\n# Page 3\n\n\nRead more about the Slidev Markdown syntax in the syntax guide."
  }
]