[
  {
    "title": "ofetch@1.3.3 - jsDocs.io",
    "url": "https://www.jsdocs.io/package/ofetch",
    "html": "A better fetch API. Works on node, browser and workers.\n\nIndex\nVariables\n$fetch\nAbortController\nfetch\nHeaders\nofetch\nFunctions\ncreateFetch()\ncreateFetchError()\nClasses\nFetchError\nInterfaces\n$Fetch\nCreateFetchOptions\nFetchContext\nFetchError\nFetchOptions\nFetchResponse\nIFetchError\nSearchParameters\nType Aliases\nFetchRequest\nVariables\nvariable $fetch\nconst $fetch: $Fetch;\nvariable AbortController\nconst AbortController: { new (): AbortController; prototype: AbortController };\nvariable fetch\nconst fetch: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;\nvariable Headers\nconst Headers: { new (init?: HeadersInit | undefined): Headers; prototype: Headers };\nvariable ofetch\nconst ofetch: $Fetch;\nFunctions\nfunction createFetch\ncreateFetch: (globalOptions?: CreateFetchOptions) => $Fetch;\nfunction createFetchError\ncreateFetchError: <T = any>(ctx: FetchContext<T>) => IFetchError<T>;\nClasses\nclass FetchError\nclass FetchError<T = any> extends Error implements IFetchError<T> {}\nconstructor\nconstructor(message: string, opts?: { cause: unknown });\nInterfaces\ninterface $Fetch\ninterface $Fetch {}\nproperty native\nnative: Fetch;\nmethod create\ncreate: (defaults: FetchOptions) => $Fetch;\nmethod raw\nraw: <T = any, R extends ResponseType = 'json'>(\n    request: FetchRequest,\n    options?: FetchOptions<R>\n) => Promise<FetchResponse<MappedType<R, T>>>;\ncall signature\n<T = any, R extends ResponseType = 'json'>(\n    request: FetchRequest,\n    options?: FetchOptions<R>\n): Promise<MappedType<R, T>>;\ninterface CreateFetchOptions\ninterface CreateFetchOptions {}\nproperty AbortController\nAbortController?: typeof AbortController;\nproperty defaults\ndefaults?: FetchOptions;\nproperty fetch\nfetch?: Fetch;\nproperty Headers\nHeaders?: typeof Headers;\ninterface FetchContext\ninterface FetchContext<T = any, R extends ResponseType = ResponseType> {}\nproperty error\nerror?: Error;\nproperty options\noptions: FetchOptions<R>;\nproperty request\nrequest: FetchRequest;\nproperty response\nresponse?: FetchResponse<T>;\ninterface FetchError\ninterface FetchError<T = any> extends IFetchError<T> {}\ninterface FetchOptions\ninterface FetchOptions<R extends ResponseType = ResponseType>\n    extends Omit<RequestInit, 'body'> {}\nproperty baseURL\nbaseURL?: string;\nproperty body\nbody?: RequestInit['body'] | Record<string, any>;\nproperty duplex\nduplex?: 'half' | undefined;\n\nSet to \"half\" to enable duplex streaming. Will be automatically set to \"half\" when using a ReadableStream as body. https://fetch.spec.whatwg.org/#enumdef-requestduplex\n\nModifiers\n@experimental\nproperty ignoreResponseError\nignoreResponseError?: boolean;\nproperty params\nparams?: SearchParameters;\nproperty parseResponse\nparseResponse?: (responseText: string) => any;\nproperty query\nquery?: SearchParameters;\nproperty responseType\nresponseType?: R;\nproperty retry\nretry?: number | false;\nproperty retryDelay\nretryDelay?: number;\n\nDelay between retries in milliseconds.\n\nproperty retryStatusCodes\nretryStatusCodes?: number[];\n\nDefault is [408, 409, 425, 429, 500, 502, 503, 504]\n\nproperty timeout\ntimeout?: number;\n\ntimeout in milliseconds\n\nmethod onRequest\nonRequest: (context: FetchContext) => Promise<void> | void;\nmethod onRequestError\nonRequestError: (\n    context: FetchContext & { error: Error }\n) => Promise<void> | void;\nmethod onResponse\nonResponse: (\n    context: FetchContext & { response: FetchResponse<R> }\n) => Promise<void> | void;\nmethod onResponseError\nonResponseError: (\n    context: FetchContext & { response: FetchResponse<R> }\n) => Promise<void> | void;\ninterface FetchResponse\ninterface FetchResponse<T> extends Response {}\ninterface IFetchError\ninterface IFetchError<T = any> extends Error {}\nproperty data\ndata?: T;\nproperty options\noptions?: FetchOptions;\nproperty request\nrequest?: FetchRequest;\nproperty response\nresponse?: FetchResponse<T>;\nproperty status\nstatus?: number;\nproperty statusCode\nstatusCode?: number;\nproperty statusMessage\nstatusMessage?: string;\nproperty statusText\nstatusText?: string;\ninterface SearchParameters\ninterface SearchParameters {}\nindex signature\n[key: string]: any;\nType Aliases\ntype FetchRequest\ntype FetchRequest = RequestInfo;\nPackage Files (2)\ndist/index.d.ts\ndist/shared/ofetch.441891d5.d.ts\nDependencies (3)\ndestr\nnode-fetch-native\nufo\nDev Dependencies (15)\n@types/node\n@vitest/coverage-v8\nchangelogen\neslint\neslint-config-unjs\nfetch-blob\nformdata-polyfill\nh3\njiti\nlisthen\nprettier\nstd-env\ntypescript\nunbuild\nvitest\nPeer Dependencies (0)\n\nNo peer dependencies."
  }
]
